
BikeSafetySTM32F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e9c  08006e9c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006e9c  08006e9c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e9c  08006e9c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000090  08006f34  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08006f34  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001457a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d7  00000000  00000000  00034632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00036c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00037cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019db6  00000000  00000000  00038c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146f6  00000000  00000000  00052a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000952a2  00000000  00000000  0006712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc3ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f98  00000000  00000000  000fc424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c00 	.word	0x08006c00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	08006c00 	.word	0x08006c00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cfrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c08      	adds	r0, r1, #0
 8000234:	4661      	mov	r1, ip
 8000236:	e7ff      	b.n	8000238 <__aeabi_cfcmpeq>

08000238 <__aeabi_cfcmpeq>:
 8000238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023a:	f000 f8a7 	bl	800038c <__lesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	d401      	bmi.n	8000246 <__aeabi_cfcmpeq+0xe>
 8000242:	2100      	movs	r1, #0
 8000244:	42c8      	cmn	r0, r1
 8000246:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000248 <__aeabi_fcmpeq>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 f82b 	bl	80002a4 <__eqsf2>
 800024e:	4240      	negs	r0, r0
 8000250:	3001      	adds	r0, #1
 8000252:	bd10      	pop	{r4, pc}

08000254 <__aeabi_fcmplt>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 f899 	bl	800038c <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	db01      	blt.n	8000262 <__aeabi_fcmplt+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmple>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f88f 	bl	800038c <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dd01      	ble.n	8000276 <__aeabi_fcmple+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpgt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f839 	bl	80002f4 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dc01      	bgt.n	800028a <__aeabi_fcmpgt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpge>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f82f 	bl	80002f4 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	da01      	bge.n	800029e <__aeabi_fcmpge+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__eqsf2>:
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	0042      	lsls	r2, r0, #1
 80002a8:	024e      	lsls	r6, r1, #9
 80002aa:	004c      	lsls	r4, r1, #1
 80002ac:	0245      	lsls	r5, r0, #9
 80002ae:	0a6d      	lsrs	r5, r5, #9
 80002b0:	0e12      	lsrs	r2, r2, #24
 80002b2:	0fc3      	lsrs	r3, r0, #31
 80002b4:	0a76      	lsrs	r6, r6, #9
 80002b6:	0e24      	lsrs	r4, r4, #24
 80002b8:	0fc9      	lsrs	r1, r1, #31
 80002ba:	2aff      	cmp	r2, #255	; 0xff
 80002bc:	d00f      	beq.n	80002de <__eqsf2+0x3a>
 80002be:	2cff      	cmp	r4, #255	; 0xff
 80002c0:	d011      	beq.n	80002e6 <__eqsf2+0x42>
 80002c2:	2001      	movs	r0, #1
 80002c4:	42a2      	cmp	r2, r4
 80002c6:	d000      	beq.n	80002ca <__eqsf2+0x26>
 80002c8:	bd70      	pop	{r4, r5, r6, pc}
 80002ca:	42b5      	cmp	r5, r6
 80002cc:	d1fc      	bne.n	80002c8 <__eqsf2+0x24>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d00d      	beq.n	80002ee <__eqsf2+0x4a>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d1f8      	bne.n	80002c8 <__eqsf2+0x24>
 80002d6:	0028      	movs	r0, r5
 80002d8:	1e45      	subs	r5, r0, #1
 80002da:	41a8      	sbcs	r0, r5
 80002dc:	e7f4      	b.n	80002c8 <__eqsf2+0x24>
 80002de:	2001      	movs	r0, #1
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d1f1      	bne.n	80002c8 <__eqsf2+0x24>
 80002e4:	e7eb      	b.n	80002be <__eqsf2+0x1a>
 80002e6:	2001      	movs	r0, #1
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d1ed      	bne.n	80002c8 <__eqsf2+0x24>
 80002ec:	e7e9      	b.n	80002c2 <__eqsf2+0x1e>
 80002ee:	2000      	movs	r0, #0
 80002f0:	e7ea      	b.n	80002c8 <__eqsf2+0x24>
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__gesf2>:
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	0042      	lsls	r2, r0, #1
 80002f8:	0246      	lsls	r6, r0, #9
 80002fa:	024d      	lsls	r5, r1, #9
 80002fc:	004c      	lsls	r4, r1, #1
 80002fe:	0fc3      	lsrs	r3, r0, #31
 8000300:	0a76      	lsrs	r6, r6, #9
 8000302:	0e12      	lsrs	r2, r2, #24
 8000304:	0a6d      	lsrs	r5, r5, #9
 8000306:	0e24      	lsrs	r4, r4, #24
 8000308:	0fc8      	lsrs	r0, r1, #31
 800030a:	2aff      	cmp	r2, #255	; 0xff
 800030c:	d01f      	beq.n	800034e <__gesf2+0x5a>
 800030e:	2cff      	cmp	r4, #255	; 0xff
 8000310:	d010      	beq.n	8000334 <__gesf2+0x40>
 8000312:	2a00      	cmp	r2, #0
 8000314:	d11f      	bne.n	8000356 <__gesf2+0x62>
 8000316:	4271      	negs	r1, r6
 8000318:	4171      	adcs	r1, r6
 800031a:	2c00      	cmp	r4, #0
 800031c:	d101      	bne.n	8000322 <__gesf2+0x2e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	d01e      	beq.n	8000360 <__gesf2+0x6c>
 8000322:	2900      	cmp	r1, #0
 8000324:	d10e      	bne.n	8000344 <__gesf2+0x50>
 8000326:	4283      	cmp	r3, r0
 8000328:	d01e      	beq.n	8000368 <__gesf2+0x74>
 800032a:	2102      	movs	r1, #2
 800032c:	1e58      	subs	r0, r3, #1
 800032e:	4008      	ands	r0, r1
 8000330:	3801      	subs	r0, #1
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	2d00      	cmp	r5, #0
 8000336:	d126      	bne.n	8000386 <__gesf2+0x92>
 8000338:	2a00      	cmp	r2, #0
 800033a:	d1f4      	bne.n	8000326 <__gesf2+0x32>
 800033c:	4271      	negs	r1, r6
 800033e:	4171      	adcs	r1, r6
 8000340:	2900      	cmp	r1, #0
 8000342:	d0f0      	beq.n	8000326 <__gesf2+0x32>
 8000344:	2800      	cmp	r0, #0
 8000346:	d1f4      	bne.n	8000332 <__gesf2+0x3e>
 8000348:	2001      	movs	r0, #1
 800034a:	4240      	negs	r0, r0
 800034c:	e7f1      	b.n	8000332 <__gesf2+0x3e>
 800034e:	2e00      	cmp	r6, #0
 8000350:	d119      	bne.n	8000386 <__gesf2+0x92>
 8000352:	2cff      	cmp	r4, #255	; 0xff
 8000354:	d0ee      	beq.n	8000334 <__gesf2+0x40>
 8000356:	2c00      	cmp	r4, #0
 8000358:	d1e5      	bne.n	8000326 <__gesf2+0x32>
 800035a:	2d00      	cmp	r5, #0
 800035c:	d1e3      	bne.n	8000326 <__gesf2+0x32>
 800035e:	e7e4      	b.n	800032a <__gesf2+0x36>
 8000360:	2000      	movs	r0, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d0e5      	beq.n	8000332 <__gesf2+0x3e>
 8000366:	e7e0      	b.n	800032a <__gesf2+0x36>
 8000368:	42a2      	cmp	r2, r4
 800036a:	dc05      	bgt.n	8000378 <__gesf2+0x84>
 800036c:	dbea      	blt.n	8000344 <__gesf2+0x50>
 800036e:	42ae      	cmp	r6, r5
 8000370:	d802      	bhi.n	8000378 <__gesf2+0x84>
 8000372:	d3e7      	bcc.n	8000344 <__gesf2+0x50>
 8000374:	2000      	movs	r0, #0
 8000376:	e7dc      	b.n	8000332 <__gesf2+0x3e>
 8000378:	4241      	negs	r1, r0
 800037a:	4141      	adcs	r1, r0
 800037c:	4248      	negs	r0, r1
 800037e:	2102      	movs	r1, #2
 8000380:	4008      	ands	r0, r1
 8000382:	3801      	subs	r0, #1
 8000384:	e7d5      	b.n	8000332 <__gesf2+0x3e>
 8000386:	2002      	movs	r0, #2
 8000388:	4240      	negs	r0, r0
 800038a:	e7d2      	b.n	8000332 <__gesf2+0x3e>

0800038c <__lesf2>:
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038e:	0042      	lsls	r2, r0, #1
 8000390:	0246      	lsls	r6, r0, #9
 8000392:	024d      	lsls	r5, r1, #9
 8000394:	004c      	lsls	r4, r1, #1
 8000396:	0fc3      	lsrs	r3, r0, #31
 8000398:	0a76      	lsrs	r6, r6, #9
 800039a:	0e12      	lsrs	r2, r2, #24
 800039c:	0a6d      	lsrs	r5, r5, #9
 800039e:	0e24      	lsrs	r4, r4, #24
 80003a0:	0fc8      	lsrs	r0, r1, #31
 80003a2:	2aff      	cmp	r2, #255	; 0xff
 80003a4:	d00d      	beq.n	80003c2 <__lesf2+0x36>
 80003a6:	2cff      	cmp	r4, #255	; 0xff
 80003a8:	d00f      	beq.n	80003ca <__lesf2+0x3e>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	d123      	bne.n	80003f6 <__lesf2+0x6a>
 80003ae:	4271      	negs	r1, r6
 80003b0:	4171      	adcs	r1, r6
 80003b2:	2c00      	cmp	r4, #0
 80003b4:	d10f      	bne.n	80003d6 <__lesf2+0x4a>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d10d      	bne.n	80003d6 <__lesf2+0x4a>
 80003ba:	2000      	movs	r0, #0
 80003bc:	2e00      	cmp	r6, #0
 80003be:	d014      	beq.n	80003ea <__lesf2+0x5e>
 80003c0:	e00d      	b.n	80003de <__lesf2+0x52>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d110      	bne.n	80003e8 <__lesf2+0x5c>
 80003c6:	2cff      	cmp	r4, #255	; 0xff
 80003c8:	d115      	bne.n	80003f6 <__lesf2+0x6a>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	d10c      	bne.n	80003e8 <__lesf2+0x5c>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d103      	bne.n	80003da <__lesf2+0x4e>
 80003d2:	4271      	negs	r1, r6
 80003d4:	4171      	adcs	r1, r6
 80003d6:	2900      	cmp	r1, #0
 80003d8:	d108      	bne.n	80003ec <__lesf2+0x60>
 80003da:	4283      	cmp	r3, r0
 80003dc:	d010      	beq.n	8000400 <__lesf2+0x74>
 80003de:	2102      	movs	r1, #2
 80003e0:	1e58      	subs	r0, r3, #1
 80003e2:	4008      	ands	r0, r1
 80003e4:	3801      	subs	r0, #1
 80003e6:	e000      	b.n	80003ea <__lesf2+0x5e>
 80003e8:	2002      	movs	r0, #2
 80003ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ec:	2800      	cmp	r0, #0
 80003ee:	d1fc      	bne.n	80003ea <__lesf2+0x5e>
 80003f0:	2001      	movs	r0, #1
 80003f2:	4240      	negs	r0, r0
 80003f4:	e7f9      	b.n	80003ea <__lesf2+0x5e>
 80003f6:	2c00      	cmp	r4, #0
 80003f8:	d1ef      	bne.n	80003da <__lesf2+0x4e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d1ed      	bne.n	80003da <__lesf2+0x4e>
 80003fe:	e7ee      	b.n	80003de <__lesf2+0x52>
 8000400:	42a2      	cmp	r2, r4
 8000402:	dc05      	bgt.n	8000410 <__lesf2+0x84>
 8000404:	dbf2      	blt.n	80003ec <__lesf2+0x60>
 8000406:	42ae      	cmp	r6, r5
 8000408:	d802      	bhi.n	8000410 <__lesf2+0x84>
 800040a:	d3ef      	bcc.n	80003ec <__lesf2+0x60>
 800040c:	2000      	movs	r0, #0
 800040e:	e7ec      	b.n	80003ea <__lesf2+0x5e>
 8000410:	4241      	negs	r1, r0
 8000412:	4141      	adcs	r1, r0
 8000414:	4248      	negs	r0, r1
 8000416:	2102      	movs	r1, #2
 8000418:	4008      	ands	r0, r1
 800041a:	3801      	subs	r0, #1
 800041c:	e7e5      	b.n	80003ea <__lesf2+0x5e>
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_fsub>:
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	4646      	mov	r6, r8
 8000424:	46d6      	mov	lr, sl
 8000426:	464f      	mov	r7, r9
 8000428:	0243      	lsls	r3, r0, #9
 800042a:	0a5b      	lsrs	r3, r3, #9
 800042c:	00da      	lsls	r2, r3, #3
 800042e:	4694      	mov	ip, r2
 8000430:	024a      	lsls	r2, r1, #9
 8000432:	b5c0      	push	{r6, r7, lr}
 8000434:	0044      	lsls	r4, r0, #1
 8000436:	0a56      	lsrs	r6, r2, #9
 8000438:	1c05      	adds	r5, r0, #0
 800043a:	46b0      	mov	r8, r6
 800043c:	0e24      	lsrs	r4, r4, #24
 800043e:	004e      	lsls	r6, r1, #1
 8000440:	0992      	lsrs	r2, r2, #6
 8000442:	001f      	movs	r7, r3
 8000444:	0020      	movs	r0, r4
 8000446:	4692      	mov	sl, r2
 8000448:	0fed      	lsrs	r5, r5, #31
 800044a:	0e36      	lsrs	r6, r6, #24
 800044c:	0fc9      	lsrs	r1, r1, #31
 800044e:	2eff      	cmp	r6, #255	; 0xff
 8000450:	d100      	bne.n	8000454 <__aeabi_fsub+0x34>
 8000452:	e07f      	b.n	8000554 <__aeabi_fsub+0x134>
 8000454:	2201      	movs	r2, #1
 8000456:	4051      	eors	r1, r2
 8000458:	428d      	cmp	r5, r1
 800045a:	d051      	beq.n	8000500 <__aeabi_fsub+0xe0>
 800045c:	1ba2      	subs	r2, r4, r6
 800045e:	4691      	mov	r9, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	dc00      	bgt.n	8000466 <__aeabi_fsub+0x46>
 8000464:	e07e      	b.n	8000564 <__aeabi_fsub+0x144>
 8000466:	2e00      	cmp	r6, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fsub+0x4c>
 800046a:	e099      	b.n	80005a0 <__aeabi_fsub+0x180>
 800046c:	2cff      	cmp	r4, #255	; 0xff
 800046e:	d100      	bne.n	8000472 <__aeabi_fsub+0x52>
 8000470:	e08c      	b.n	800058c <__aeabi_fsub+0x16c>
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	4652      	mov	r2, sl
 8000476:	04db      	lsls	r3, r3, #19
 8000478:	431a      	orrs	r2, r3
 800047a:	4692      	mov	sl, r2
 800047c:	464a      	mov	r2, r9
 800047e:	2301      	movs	r3, #1
 8000480:	2a1b      	cmp	r2, #27
 8000482:	dc08      	bgt.n	8000496 <__aeabi_fsub+0x76>
 8000484:	4653      	mov	r3, sl
 8000486:	2120      	movs	r1, #32
 8000488:	40d3      	lsrs	r3, r2
 800048a:	1a89      	subs	r1, r1, r2
 800048c:	4652      	mov	r2, sl
 800048e:	408a      	lsls	r2, r1
 8000490:	1e51      	subs	r1, r2, #1
 8000492:	418a      	sbcs	r2, r1
 8000494:	4313      	orrs	r3, r2
 8000496:	4662      	mov	r2, ip
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	015a      	lsls	r2, r3, #5
 800049c:	d400      	bmi.n	80004a0 <__aeabi_fsub+0x80>
 800049e:	e0f3      	b.n	8000688 <__aeabi_fsub+0x268>
 80004a0:	019b      	lsls	r3, r3, #6
 80004a2:	099e      	lsrs	r6, r3, #6
 80004a4:	0030      	movs	r0, r6
 80004a6:	f001 f877 	bl	8001598 <__clzsi2>
 80004aa:	3805      	subs	r0, #5
 80004ac:	4086      	lsls	r6, r0
 80004ae:	4284      	cmp	r4, r0
 80004b0:	dd00      	ble.n	80004b4 <__aeabi_fsub+0x94>
 80004b2:	e0f7      	b.n	80006a4 <__aeabi_fsub+0x284>
 80004b4:	0032      	movs	r2, r6
 80004b6:	1b04      	subs	r4, r0, r4
 80004b8:	2020      	movs	r0, #32
 80004ba:	3401      	adds	r4, #1
 80004bc:	40e2      	lsrs	r2, r4
 80004be:	1b04      	subs	r4, r0, r4
 80004c0:	40a6      	lsls	r6, r4
 80004c2:	0033      	movs	r3, r6
 80004c4:	1e5e      	subs	r6, r3, #1
 80004c6:	41b3      	sbcs	r3, r6
 80004c8:	2400      	movs	r4, #0
 80004ca:	4313      	orrs	r3, r2
 80004cc:	075a      	lsls	r2, r3, #29
 80004ce:	d004      	beq.n	80004da <__aeabi_fsub+0xba>
 80004d0:	220f      	movs	r2, #15
 80004d2:	401a      	ands	r2, r3
 80004d4:	2a04      	cmp	r2, #4
 80004d6:	d000      	beq.n	80004da <__aeabi_fsub+0xba>
 80004d8:	3304      	adds	r3, #4
 80004da:	015a      	lsls	r2, r3, #5
 80004dc:	d400      	bmi.n	80004e0 <__aeabi_fsub+0xc0>
 80004de:	e0d6      	b.n	800068e <__aeabi_fsub+0x26e>
 80004e0:	1c62      	adds	r2, r4, #1
 80004e2:	2cfe      	cmp	r4, #254	; 0xfe
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fsub+0xc8>
 80004e6:	e0da      	b.n	800069e <__aeabi_fsub+0x27e>
 80004e8:	019b      	lsls	r3, r3, #6
 80004ea:	0a5f      	lsrs	r7, r3, #9
 80004ec:	b2d0      	uxtb	r0, r2
 80004ee:	05c0      	lsls	r0, r0, #23
 80004f0:	4338      	orrs	r0, r7
 80004f2:	07ed      	lsls	r5, r5, #31
 80004f4:	4328      	orrs	r0, r5
 80004f6:	bce0      	pop	{r5, r6, r7}
 80004f8:	46ba      	mov	sl, r7
 80004fa:	46b1      	mov	r9, r6
 80004fc:	46a8      	mov	r8, r5
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000500:	1ba2      	subs	r2, r4, r6
 8000502:	4691      	mov	r9, r2
 8000504:	2a00      	cmp	r2, #0
 8000506:	dd63      	ble.n	80005d0 <__aeabi_fsub+0x1b0>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d100      	bne.n	800050e <__aeabi_fsub+0xee>
 800050c:	e099      	b.n	8000642 <__aeabi_fsub+0x222>
 800050e:	2cff      	cmp	r4, #255	; 0xff
 8000510:	d03c      	beq.n	800058c <__aeabi_fsub+0x16c>
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	4652      	mov	r2, sl
 8000516:	04db      	lsls	r3, r3, #19
 8000518:	431a      	orrs	r2, r3
 800051a:	4692      	mov	sl, r2
 800051c:	464a      	mov	r2, r9
 800051e:	2301      	movs	r3, #1
 8000520:	2a1b      	cmp	r2, #27
 8000522:	dc08      	bgt.n	8000536 <__aeabi_fsub+0x116>
 8000524:	4653      	mov	r3, sl
 8000526:	2120      	movs	r1, #32
 8000528:	40d3      	lsrs	r3, r2
 800052a:	1a89      	subs	r1, r1, r2
 800052c:	4652      	mov	r2, sl
 800052e:	408a      	lsls	r2, r1
 8000530:	1e51      	subs	r1, r2, #1
 8000532:	418a      	sbcs	r2, r1
 8000534:	4313      	orrs	r3, r2
 8000536:	4463      	add	r3, ip
 8000538:	015a      	lsls	r2, r3, #5
 800053a:	d400      	bmi.n	800053e <__aeabi_fsub+0x11e>
 800053c:	e0a4      	b.n	8000688 <__aeabi_fsub+0x268>
 800053e:	3401      	adds	r4, #1
 8000540:	2cff      	cmp	r4, #255	; 0xff
 8000542:	d100      	bne.n	8000546 <__aeabi_fsub+0x126>
 8000544:	e0ab      	b.n	800069e <__aeabi_fsub+0x27e>
 8000546:	2201      	movs	r2, #1
 8000548:	4997      	ldr	r1, [pc, #604]	; (80007a8 <__aeabi_fsub+0x388>)
 800054a:	401a      	ands	r2, r3
 800054c:	085b      	lsrs	r3, r3, #1
 800054e:	400b      	ands	r3, r1
 8000550:	4313      	orrs	r3, r2
 8000552:	e7bb      	b.n	80004cc <__aeabi_fsub+0xac>
 8000554:	2a00      	cmp	r2, #0
 8000556:	d032      	beq.n	80005be <__aeabi_fsub+0x19e>
 8000558:	428d      	cmp	r5, r1
 800055a:	d035      	beq.n	80005c8 <__aeabi_fsub+0x1a8>
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	4252      	negs	r2, r2
 8000560:	4691      	mov	r9, r2
 8000562:	44a1      	add	r9, r4
 8000564:	464a      	mov	r2, r9
 8000566:	2a00      	cmp	r2, #0
 8000568:	d051      	beq.n	800060e <__aeabi_fsub+0x1ee>
 800056a:	1b30      	subs	r0, r6, r4
 800056c:	2c00      	cmp	r4, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_fsub+0x152>
 8000570:	e09c      	b.n	80006ac <__aeabi_fsub+0x28c>
 8000572:	4663      	mov	r3, ip
 8000574:	2b00      	cmp	r3, #0
 8000576:	d100      	bne.n	800057a <__aeabi_fsub+0x15a>
 8000578:	e0df      	b.n	800073a <__aeabi_fsub+0x31a>
 800057a:	3801      	subs	r0, #1
 800057c:	2800      	cmp	r0, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_fsub+0x162>
 8000580:	e0f7      	b.n	8000772 <__aeabi_fsub+0x352>
 8000582:	2eff      	cmp	r6, #255	; 0xff
 8000584:	d000      	beq.n	8000588 <__aeabi_fsub+0x168>
 8000586:	e099      	b.n	80006bc <__aeabi_fsub+0x29c>
 8000588:	000d      	movs	r5, r1
 800058a:	4643      	mov	r3, r8
 800058c:	2b00      	cmp	r3, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fsub+0x172>
 8000590:	e085      	b.n	800069e <__aeabi_fsub+0x27e>
 8000592:	2780      	movs	r7, #128	; 0x80
 8000594:	03ff      	lsls	r7, r7, #15
 8000596:	431f      	orrs	r7, r3
 8000598:	027f      	lsls	r7, r7, #9
 800059a:	20ff      	movs	r0, #255	; 0xff
 800059c:	0a7f      	lsrs	r7, r7, #9
 800059e:	e7a6      	b.n	80004ee <__aeabi_fsub+0xce>
 80005a0:	4652      	mov	r2, sl
 80005a2:	2a00      	cmp	r2, #0
 80005a4:	d074      	beq.n	8000690 <__aeabi_fsub+0x270>
 80005a6:	2201      	movs	r2, #1
 80005a8:	4252      	negs	r2, r2
 80005aa:	4690      	mov	r8, r2
 80005ac:	44c1      	add	r9, r8
 80005ae:	464a      	mov	r2, r9
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fsub+0x196>
 80005b4:	e0c8      	b.n	8000748 <__aeabi_fsub+0x328>
 80005b6:	2cff      	cmp	r4, #255	; 0xff
 80005b8:	d000      	beq.n	80005bc <__aeabi_fsub+0x19c>
 80005ba:	e75f      	b.n	800047c <__aeabi_fsub+0x5c>
 80005bc:	e7e6      	b.n	800058c <__aeabi_fsub+0x16c>
 80005be:	2201      	movs	r2, #1
 80005c0:	4051      	eors	r1, r2
 80005c2:	42a9      	cmp	r1, r5
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fsub+0x1a8>
 80005c6:	e749      	b.n	800045c <__aeabi_fsub+0x3c>
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	4252      	negs	r2, r2
 80005cc:	4691      	mov	r9, r2
 80005ce:	44a1      	add	r9, r4
 80005d0:	464a      	mov	r2, r9
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	d043      	beq.n	800065e <__aeabi_fsub+0x23e>
 80005d6:	1b31      	subs	r1, r6, r4
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fsub+0x1be>
 80005dc:	e08c      	b.n	80006f8 <__aeabi_fsub+0x2d8>
 80005de:	2eff      	cmp	r6, #255	; 0xff
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fsub+0x1c4>
 80005e2:	e092      	b.n	800070a <__aeabi_fsub+0x2ea>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	4662      	mov	r2, ip
 80005e8:	04db      	lsls	r3, r3, #19
 80005ea:	431a      	orrs	r2, r3
 80005ec:	4694      	mov	ip, r2
 80005ee:	2301      	movs	r3, #1
 80005f0:	291b      	cmp	r1, #27
 80005f2:	dc09      	bgt.n	8000608 <__aeabi_fsub+0x1e8>
 80005f4:	2020      	movs	r0, #32
 80005f6:	4663      	mov	r3, ip
 80005f8:	4662      	mov	r2, ip
 80005fa:	40cb      	lsrs	r3, r1
 80005fc:	1a41      	subs	r1, r0, r1
 80005fe:	408a      	lsls	r2, r1
 8000600:	0011      	movs	r1, r2
 8000602:	1e48      	subs	r0, r1, #1
 8000604:	4181      	sbcs	r1, r0
 8000606:	430b      	orrs	r3, r1
 8000608:	0034      	movs	r4, r6
 800060a:	4453      	add	r3, sl
 800060c:	e794      	b.n	8000538 <__aeabi_fsub+0x118>
 800060e:	22fe      	movs	r2, #254	; 0xfe
 8000610:	1c66      	adds	r6, r4, #1
 8000612:	4232      	tst	r2, r6
 8000614:	d164      	bne.n	80006e0 <__aeabi_fsub+0x2c0>
 8000616:	2c00      	cmp	r4, #0
 8000618:	d000      	beq.n	800061c <__aeabi_fsub+0x1fc>
 800061a:	e082      	b.n	8000722 <__aeabi_fsub+0x302>
 800061c:	4663      	mov	r3, ip
 800061e:	2b00      	cmp	r3, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_fsub+0x204>
 8000622:	e0ab      	b.n	800077c <__aeabi_fsub+0x35c>
 8000624:	4653      	mov	r3, sl
 8000626:	2b00      	cmp	r3, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fsub+0x20c>
 800062a:	e760      	b.n	80004ee <__aeabi_fsub+0xce>
 800062c:	4663      	mov	r3, ip
 800062e:	4652      	mov	r2, sl
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	d400      	bmi.n	8000638 <__aeabi_fsub+0x218>
 8000636:	e0aa      	b.n	800078e <__aeabi_fsub+0x36e>
 8000638:	4663      	mov	r3, ip
 800063a:	4652      	mov	r2, sl
 800063c:	000d      	movs	r5, r1
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	e744      	b.n	80004cc <__aeabi_fsub+0xac>
 8000642:	4652      	mov	r2, sl
 8000644:	2a00      	cmp	r2, #0
 8000646:	d023      	beq.n	8000690 <__aeabi_fsub+0x270>
 8000648:	2201      	movs	r2, #1
 800064a:	4252      	negs	r2, r2
 800064c:	4690      	mov	r8, r2
 800064e:	44c1      	add	r9, r8
 8000650:	464a      	mov	r2, r9
 8000652:	2a00      	cmp	r2, #0
 8000654:	d075      	beq.n	8000742 <__aeabi_fsub+0x322>
 8000656:	2cff      	cmp	r4, #255	; 0xff
 8000658:	d000      	beq.n	800065c <__aeabi_fsub+0x23c>
 800065a:	e75f      	b.n	800051c <__aeabi_fsub+0xfc>
 800065c:	e796      	b.n	800058c <__aeabi_fsub+0x16c>
 800065e:	26fe      	movs	r6, #254	; 0xfe
 8000660:	3401      	adds	r4, #1
 8000662:	4226      	tst	r6, r4
 8000664:	d153      	bne.n	800070e <__aeabi_fsub+0x2ee>
 8000666:	2800      	cmp	r0, #0
 8000668:	d172      	bne.n	8000750 <__aeabi_fsub+0x330>
 800066a:	4663      	mov	r3, ip
 800066c:	2b00      	cmp	r3, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fsub+0x252>
 8000670:	e093      	b.n	800079a <__aeabi_fsub+0x37a>
 8000672:	4653      	mov	r3, sl
 8000674:	2b00      	cmp	r3, #0
 8000676:	d100      	bne.n	800067a <__aeabi_fsub+0x25a>
 8000678:	e739      	b.n	80004ee <__aeabi_fsub+0xce>
 800067a:	4463      	add	r3, ip
 800067c:	2400      	movs	r4, #0
 800067e:	015a      	lsls	r2, r3, #5
 8000680:	d502      	bpl.n	8000688 <__aeabi_fsub+0x268>
 8000682:	4a4a      	ldr	r2, [pc, #296]	; (80007ac <__aeabi_fsub+0x38c>)
 8000684:	3401      	adds	r4, #1
 8000686:	4013      	ands	r3, r2
 8000688:	075a      	lsls	r2, r3, #29
 800068a:	d000      	beq.n	800068e <__aeabi_fsub+0x26e>
 800068c:	e720      	b.n	80004d0 <__aeabi_fsub+0xb0>
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	2cff      	cmp	r4, #255	; 0xff
 8000692:	d100      	bne.n	8000696 <__aeabi_fsub+0x276>
 8000694:	e77a      	b.n	800058c <__aeabi_fsub+0x16c>
 8000696:	025b      	lsls	r3, r3, #9
 8000698:	0a5f      	lsrs	r7, r3, #9
 800069a:	b2e0      	uxtb	r0, r4
 800069c:	e727      	b.n	80004ee <__aeabi_fsub+0xce>
 800069e:	20ff      	movs	r0, #255	; 0xff
 80006a0:	2700      	movs	r7, #0
 80006a2:	e724      	b.n	80004ee <__aeabi_fsub+0xce>
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <__aeabi_fsub+0x38c>)
 80006a6:	1a24      	subs	r4, r4, r0
 80006a8:	4033      	ands	r3, r6
 80006aa:	e70f      	b.n	80004cc <__aeabi_fsub+0xac>
 80006ac:	2eff      	cmp	r6, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fsub+0x292>
 80006b0:	e76a      	b.n	8000588 <__aeabi_fsub+0x168>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4662      	mov	r2, ip
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	431a      	orrs	r2, r3
 80006ba:	4694      	mov	ip, r2
 80006bc:	2301      	movs	r3, #1
 80006be:	281b      	cmp	r0, #27
 80006c0:	dc09      	bgt.n	80006d6 <__aeabi_fsub+0x2b6>
 80006c2:	2420      	movs	r4, #32
 80006c4:	4663      	mov	r3, ip
 80006c6:	4662      	mov	r2, ip
 80006c8:	40c3      	lsrs	r3, r0
 80006ca:	1a20      	subs	r0, r4, r0
 80006cc:	4082      	lsls	r2, r0
 80006ce:	0010      	movs	r0, r2
 80006d0:	1e44      	subs	r4, r0, #1
 80006d2:	41a0      	sbcs	r0, r4
 80006d4:	4303      	orrs	r3, r0
 80006d6:	4652      	mov	r2, sl
 80006d8:	000d      	movs	r5, r1
 80006da:	0034      	movs	r4, r6
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	e6dc      	b.n	800049a <__aeabi_fsub+0x7a>
 80006e0:	4663      	mov	r3, ip
 80006e2:	4652      	mov	r2, sl
 80006e4:	1a9e      	subs	r6, r3, r2
 80006e6:	0173      	lsls	r3, r6, #5
 80006e8:	d417      	bmi.n	800071a <__aeabi_fsub+0x2fa>
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fsub+0x2d0>
 80006ee:	e6d9      	b.n	80004a4 <__aeabi_fsub+0x84>
 80006f0:	2500      	movs	r5, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	2700      	movs	r7, #0
 80006f6:	e6fa      	b.n	80004ee <__aeabi_fsub+0xce>
 80006f8:	4663      	mov	r3, ip
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d044      	beq.n	8000788 <__aeabi_fsub+0x368>
 80006fe:	3901      	subs	r1, #1
 8000700:	2900      	cmp	r1, #0
 8000702:	d04c      	beq.n	800079e <__aeabi_fsub+0x37e>
 8000704:	2eff      	cmp	r6, #255	; 0xff
 8000706:	d000      	beq.n	800070a <__aeabi_fsub+0x2ea>
 8000708:	e771      	b.n	80005ee <__aeabi_fsub+0x1ce>
 800070a:	4643      	mov	r3, r8
 800070c:	e73e      	b.n	800058c <__aeabi_fsub+0x16c>
 800070e:	2cff      	cmp	r4, #255	; 0xff
 8000710:	d0c5      	beq.n	800069e <__aeabi_fsub+0x27e>
 8000712:	4652      	mov	r2, sl
 8000714:	4462      	add	r2, ip
 8000716:	0853      	lsrs	r3, r2, #1
 8000718:	e7b6      	b.n	8000688 <__aeabi_fsub+0x268>
 800071a:	4663      	mov	r3, ip
 800071c:	000d      	movs	r5, r1
 800071e:	1ad6      	subs	r6, r2, r3
 8000720:	e6c0      	b.n	80004a4 <__aeabi_fsub+0x84>
 8000722:	4662      	mov	r2, ip
 8000724:	2a00      	cmp	r2, #0
 8000726:	d116      	bne.n	8000756 <__aeabi_fsub+0x336>
 8000728:	4653      	mov	r3, sl
 800072a:	2b00      	cmp	r3, #0
 800072c:	d000      	beq.n	8000730 <__aeabi_fsub+0x310>
 800072e:	e72b      	b.n	8000588 <__aeabi_fsub+0x168>
 8000730:	2780      	movs	r7, #128	; 0x80
 8000732:	2500      	movs	r5, #0
 8000734:	20ff      	movs	r0, #255	; 0xff
 8000736:	03ff      	lsls	r7, r7, #15
 8000738:	e6d9      	b.n	80004ee <__aeabi_fsub+0xce>
 800073a:	000d      	movs	r5, r1
 800073c:	4643      	mov	r3, r8
 800073e:	0034      	movs	r4, r6
 8000740:	e7a6      	b.n	8000690 <__aeabi_fsub+0x270>
 8000742:	4653      	mov	r3, sl
 8000744:	4463      	add	r3, ip
 8000746:	e6f7      	b.n	8000538 <__aeabi_fsub+0x118>
 8000748:	4663      	mov	r3, ip
 800074a:	4652      	mov	r2, sl
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	e6a4      	b.n	800049a <__aeabi_fsub+0x7a>
 8000750:	4662      	mov	r2, ip
 8000752:	2a00      	cmp	r2, #0
 8000754:	d0d9      	beq.n	800070a <__aeabi_fsub+0x2ea>
 8000756:	4652      	mov	r2, sl
 8000758:	2a00      	cmp	r2, #0
 800075a:	d100      	bne.n	800075e <__aeabi_fsub+0x33e>
 800075c:	e716      	b.n	800058c <__aeabi_fsub+0x16c>
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	03d2      	lsls	r2, r2, #15
 8000762:	4213      	tst	r3, r2
 8000764:	d100      	bne.n	8000768 <__aeabi_fsub+0x348>
 8000766:	e711      	b.n	800058c <__aeabi_fsub+0x16c>
 8000768:	4640      	mov	r0, r8
 800076a:	4210      	tst	r0, r2
 800076c:	d000      	beq.n	8000770 <__aeabi_fsub+0x350>
 800076e:	e70d      	b.n	800058c <__aeabi_fsub+0x16c>
 8000770:	e70a      	b.n	8000588 <__aeabi_fsub+0x168>
 8000772:	4652      	mov	r2, sl
 8000774:	000d      	movs	r5, r1
 8000776:	0034      	movs	r4, r6
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	e68e      	b.n	800049a <__aeabi_fsub+0x7a>
 800077c:	4653      	mov	r3, sl
 800077e:	2b00      	cmp	r3, #0
 8000780:	d008      	beq.n	8000794 <__aeabi_fsub+0x374>
 8000782:	000d      	movs	r5, r1
 8000784:	4647      	mov	r7, r8
 8000786:	e6b2      	b.n	80004ee <__aeabi_fsub+0xce>
 8000788:	4643      	mov	r3, r8
 800078a:	0034      	movs	r4, r6
 800078c:	e780      	b.n	8000690 <__aeabi_fsub+0x270>
 800078e:	2b00      	cmp	r3, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_fsub+0x374>
 8000792:	e779      	b.n	8000688 <__aeabi_fsub+0x268>
 8000794:	2500      	movs	r5, #0
 8000796:	2700      	movs	r7, #0
 8000798:	e6a9      	b.n	80004ee <__aeabi_fsub+0xce>
 800079a:	4647      	mov	r7, r8
 800079c:	e6a7      	b.n	80004ee <__aeabi_fsub+0xce>
 800079e:	4653      	mov	r3, sl
 80007a0:	0034      	movs	r4, r6
 80007a2:	4463      	add	r3, ip
 80007a4:	e6c8      	b.n	8000538 <__aeabi_fsub+0x118>
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	7dffffff 	.word	0x7dffffff
 80007ac:	fbffffff 	.word	0xfbffffff

080007b0 <__aeabi_f2iz>:
 80007b0:	0241      	lsls	r1, r0, #9
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	0fc3      	lsrs	r3, r0, #31
 80007b6:	0a49      	lsrs	r1, r1, #9
 80007b8:	2000      	movs	r0, #0
 80007ba:	0e12      	lsrs	r2, r2, #24
 80007bc:	2a7e      	cmp	r2, #126	; 0x7e
 80007be:	d903      	bls.n	80007c8 <__aeabi_f2iz+0x18>
 80007c0:	2a9d      	cmp	r2, #157	; 0x9d
 80007c2:	d902      	bls.n	80007ca <__aeabi_f2iz+0x1a>
 80007c4:	4a09      	ldr	r2, [pc, #36]	; (80007ec <__aeabi_f2iz+0x3c>)
 80007c6:	1898      	adds	r0, r3, r2
 80007c8:	4770      	bx	lr
 80007ca:	2080      	movs	r0, #128	; 0x80
 80007cc:	0400      	lsls	r0, r0, #16
 80007ce:	4301      	orrs	r1, r0
 80007d0:	2a95      	cmp	r2, #149	; 0x95
 80007d2:	dc07      	bgt.n	80007e4 <__aeabi_f2iz+0x34>
 80007d4:	2096      	movs	r0, #150	; 0x96
 80007d6:	1a82      	subs	r2, r0, r2
 80007d8:	40d1      	lsrs	r1, r2
 80007da:	4248      	negs	r0, r1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f3      	bne.n	80007c8 <__aeabi_f2iz+0x18>
 80007e0:	0008      	movs	r0, r1
 80007e2:	e7f1      	b.n	80007c8 <__aeabi_f2iz+0x18>
 80007e4:	3a96      	subs	r2, #150	; 0x96
 80007e6:	4091      	lsls	r1, r2
 80007e8:	e7f7      	b.n	80007da <__aeabi_f2iz+0x2a>
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	7fffffff 	.word	0x7fffffff

080007f0 <__aeabi_i2f>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d013      	beq.n	800081e <__aeabi_i2f+0x2e>
 80007f6:	17c3      	asrs	r3, r0, #31
 80007f8:	18c5      	adds	r5, r0, r3
 80007fa:	405d      	eors	r5, r3
 80007fc:	0fc4      	lsrs	r4, r0, #31
 80007fe:	0028      	movs	r0, r5
 8000800:	f000 feca 	bl	8001598 <__clzsi2>
 8000804:	239e      	movs	r3, #158	; 0x9e
 8000806:	0001      	movs	r1, r0
 8000808:	1a1b      	subs	r3, r3, r0
 800080a:	2b96      	cmp	r3, #150	; 0x96
 800080c:	dc0f      	bgt.n	800082e <__aeabi_i2f+0x3e>
 800080e:	2808      	cmp	r0, #8
 8000810:	dd01      	ble.n	8000816 <__aeabi_i2f+0x26>
 8000812:	3908      	subs	r1, #8
 8000814:	408d      	lsls	r5, r1
 8000816:	026d      	lsls	r5, r5, #9
 8000818:	0a6d      	lsrs	r5, r5, #9
 800081a:	b2d8      	uxtb	r0, r3
 800081c:	e002      	b.n	8000824 <__aeabi_i2f+0x34>
 800081e:	2400      	movs	r4, #0
 8000820:	2000      	movs	r0, #0
 8000822:	2500      	movs	r5, #0
 8000824:	05c0      	lsls	r0, r0, #23
 8000826:	4328      	orrs	r0, r5
 8000828:	07e4      	lsls	r4, r4, #31
 800082a:	4320      	orrs	r0, r4
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	2b99      	cmp	r3, #153	; 0x99
 8000830:	dd0b      	ble.n	800084a <__aeabi_i2f+0x5a>
 8000832:	2205      	movs	r2, #5
 8000834:	002e      	movs	r6, r5
 8000836:	1a12      	subs	r2, r2, r0
 8000838:	40d6      	lsrs	r6, r2
 800083a:	0002      	movs	r2, r0
 800083c:	321b      	adds	r2, #27
 800083e:	4095      	lsls	r5, r2
 8000840:	0028      	movs	r0, r5
 8000842:	1e45      	subs	r5, r0, #1
 8000844:	41a8      	sbcs	r0, r5
 8000846:	0035      	movs	r5, r6
 8000848:	4305      	orrs	r5, r0
 800084a:	2905      	cmp	r1, #5
 800084c:	dd01      	ble.n	8000852 <__aeabi_i2f+0x62>
 800084e:	1f4a      	subs	r2, r1, #5
 8000850:	4095      	lsls	r5, r2
 8000852:	002a      	movs	r2, r5
 8000854:	4e08      	ldr	r6, [pc, #32]	; (8000878 <__aeabi_i2f+0x88>)
 8000856:	4032      	ands	r2, r6
 8000858:	0768      	lsls	r0, r5, #29
 800085a:	d009      	beq.n	8000870 <__aeabi_i2f+0x80>
 800085c:	200f      	movs	r0, #15
 800085e:	4028      	ands	r0, r5
 8000860:	2804      	cmp	r0, #4
 8000862:	d005      	beq.n	8000870 <__aeabi_i2f+0x80>
 8000864:	3204      	adds	r2, #4
 8000866:	0150      	lsls	r0, r2, #5
 8000868:	d502      	bpl.n	8000870 <__aeabi_i2f+0x80>
 800086a:	239f      	movs	r3, #159	; 0x9f
 800086c:	4032      	ands	r2, r6
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	0192      	lsls	r2, r2, #6
 8000872:	0a55      	lsrs	r5, r2, #9
 8000874:	b2d8      	uxtb	r0, r3
 8000876:	e7d5      	b.n	8000824 <__aeabi_i2f+0x34>
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_dadd>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	46d6      	mov	lr, sl
 8000882:	4646      	mov	r6, r8
 8000884:	000d      	movs	r5, r1
 8000886:	0001      	movs	r1, r0
 8000888:	0018      	movs	r0, r3
 800088a:	b5c0      	push	{r6, r7, lr}
 800088c:	0017      	movs	r7, r2
 800088e:	032b      	lsls	r3, r5, #12
 8000890:	0a5a      	lsrs	r2, r3, #9
 8000892:	0f4b      	lsrs	r3, r1, #29
 8000894:	4313      	orrs	r3, r2
 8000896:	00ca      	lsls	r2, r1, #3
 8000898:	4691      	mov	r9, r2
 800089a:	0302      	lsls	r2, r0, #12
 800089c:	006e      	lsls	r6, r5, #1
 800089e:	0041      	lsls	r1, r0, #1
 80008a0:	0a52      	lsrs	r2, r2, #9
 80008a2:	0fec      	lsrs	r4, r5, #31
 80008a4:	0f7d      	lsrs	r5, r7, #29
 80008a6:	4315      	orrs	r5, r2
 80008a8:	0d76      	lsrs	r6, r6, #21
 80008aa:	0d49      	lsrs	r1, r1, #21
 80008ac:	0fc0      	lsrs	r0, r0, #31
 80008ae:	4682      	mov	sl, r0
 80008b0:	46ac      	mov	ip, r5
 80008b2:	00ff      	lsls	r7, r7, #3
 80008b4:	1a72      	subs	r2, r6, r1
 80008b6:	4284      	cmp	r4, r0
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x40>
 80008ba:	e098      	b.n	80009ee <__aeabi_dadd+0x172>
 80008bc:	2a00      	cmp	r2, #0
 80008be:	dc00      	bgt.n	80008c2 <__aeabi_dadd+0x46>
 80008c0:	e081      	b.n	80009c6 <__aeabi_dadd+0x14a>
 80008c2:	2900      	cmp	r1, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dadd+0x4c>
 80008c6:	e0b6      	b.n	8000a36 <__aeabi_dadd+0x1ba>
 80008c8:	49c9      	ldr	r1, [pc, #804]	; (8000bf0 <__aeabi_dadd+0x374>)
 80008ca:	428e      	cmp	r6, r1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dadd+0x54>
 80008ce:	e172      	b.n	8000bb6 <__aeabi_dadd+0x33a>
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0028      	movs	r0, r5
 80008d4:	0409      	lsls	r1, r1, #16
 80008d6:	4308      	orrs	r0, r1
 80008d8:	4684      	mov	ip, r0
 80008da:	2a38      	cmp	r2, #56	; 0x38
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x64>
 80008de:	e15e      	b.n	8000b9e <__aeabi_dadd+0x322>
 80008e0:	2a1f      	cmp	r2, #31
 80008e2:	dd00      	ble.n	80008e6 <__aeabi_dadd+0x6a>
 80008e4:	e1ee      	b.n	8000cc4 <__aeabi_dadd+0x448>
 80008e6:	2020      	movs	r0, #32
 80008e8:	0039      	movs	r1, r7
 80008ea:	4665      	mov	r5, ip
 80008ec:	1a80      	subs	r0, r0, r2
 80008ee:	4087      	lsls	r7, r0
 80008f0:	40d1      	lsrs	r1, r2
 80008f2:	4085      	lsls	r5, r0
 80008f4:	430d      	orrs	r5, r1
 80008f6:	0039      	movs	r1, r7
 80008f8:	1e4f      	subs	r7, r1, #1
 80008fa:	41b9      	sbcs	r1, r7
 80008fc:	4667      	mov	r7, ip
 80008fe:	40d7      	lsrs	r7, r2
 8000900:	4329      	orrs	r1, r5
 8000902:	1bdb      	subs	r3, r3, r7
 8000904:	464a      	mov	r2, r9
 8000906:	1a55      	subs	r5, r2, r1
 8000908:	45a9      	cmp	r9, r5
 800090a:	4189      	sbcs	r1, r1
 800090c:	4249      	negs	r1, r1
 800090e:	1a5b      	subs	r3, r3, r1
 8000910:	4698      	mov	r8, r3
 8000912:	4643      	mov	r3, r8
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	d400      	bmi.n	800091a <__aeabi_dadd+0x9e>
 8000918:	e0cc      	b.n	8000ab4 <__aeabi_dadd+0x238>
 800091a:	4643      	mov	r3, r8
 800091c:	025b      	lsls	r3, r3, #9
 800091e:	0a5b      	lsrs	r3, r3, #9
 8000920:	4698      	mov	r8, r3
 8000922:	4643      	mov	r3, r8
 8000924:	2b00      	cmp	r3, #0
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0xae>
 8000928:	e12c      	b.n	8000b84 <__aeabi_dadd+0x308>
 800092a:	4640      	mov	r0, r8
 800092c:	f000 fe34 	bl	8001598 <__clzsi2>
 8000930:	0001      	movs	r1, r0
 8000932:	3908      	subs	r1, #8
 8000934:	2220      	movs	r2, #32
 8000936:	0028      	movs	r0, r5
 8000938:	4643      	mov	r3, r8
 800093a:	1a52      	subs	r2, r2, r1
 800093c:	408b      	lsls	r3, r1
 800093e:	40d0      	lsrs	r0, r2
 8000940:	408d      	lsls	r5, r1
 8000942:	4303      	orrs	r3, r0
 8000944:	428e      	cmp	r6, r1
 8000946:	dd00      	ble.n	800094a <__aeabi_dadd+0xce>
 8000948:	e117      	b.n	8000b7a <__aeabi_dadd+0x2fe>
 800094a:	1b8e      	subs	r6, r1, r6
 800094c:	1c72      	adds	r2, r6, #1
 800094e:	2a1f      	cmp	r2, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dadd+0xd8>
 8000952:	e1a7      	b.n	8000ca4 <__aeabi_dadd+0x428>
 8000954:	2120      	movs	r1, #32
 8000956:	0018      	movs	r0, r3
 8000958:	002e      	movs	r6, r5
 800095a:	1a89      	subs	r1, r1, r2
 800095c:	408d      	lsls	r5, r1
 800095e:	4088      	lsls	r0, r1
 8000960:	40d6      	lsrs	r6, r2
 8000962:	40d3      	lsrs	r3, r2
 8000964:	1e69      	subs	r1, r5, #1
 8000966:	418d      	sbcs	r5, r1
 8000968:	4330      	orrs	r0, r6
 800096a:	4698      	mov	r8, r3
 800096c:	2600      	movs	r6, #0
 800096e:	4305      	orrs	r5, r0
 8000970:	076b      	lsls	r3, r5, #29
 8000972:	d009      	beq.n	8000988 <__aeabi_dadd+0x10c>
 8000974:	230f      	movs	r3, #15
 8000976:	402b      	ands	r3, r5
 8000978:	2b04      	cmp	r3, #4
 800097a:	d005      	beq.n	8000988 <__aeabi_dadd+0x10c>
 800097c:	1d2b      	adds	r3, r5, #4
 800097e:	42ab      	cmp	r3, r5
 8000980:	41ad      	sbcs	r5, r5
 8000982:	426d      	negs	r5, r5
 8000984:	44a8      	add	r8, r5
 8000986:	001d      	movs	r5, r3
 8000988:	4643      	mov	r3, r8
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	d400      	bmi.n	8000990 <__aeabi_dadd+0x114>
 800098e:	e094      	b.n	8000aba <__aeabi_dadd+0x23e>
 8000990:	4b97      	ldr	r3, [pc, #604]	; (8000bf0 <__aeabi_dadd+0x374>)
 8000992:	1c72      	adds	r2, r6, #1
 8000994:	429a      	cmp	r2, r3
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x11e>
 8000998:	e09d      	b.n	8000ad6 <__aeabi_dadd+0x25a>
 800099a:	4641      	mov	r1, r8
 800099c:	4b95      	ldr	r3, [pc, #596]	; (8000bf4 <__aeabi_dadd+0x378>)
 800099e:	08ed      	lsrs	r5, r5, #3
 80009a0:	4019      	ands	r1, r3
 80009a2:	000b      	movs	r3, r1
 80009a4:	0552      	lsls	r2, r2, #21
 80009a6:	0749      	lsls	r1, r1, #29
 80009a8:	025b      	lsls	r3, r3, #9
 80009aa:	4329      	orrs	r1, r5
 80009ac:	0b1b      	lsrs	r3, r3, #12
 80009ae:	0d52      	lsrs	r2, r2, #21
 80009b0:	0512      	lsls	r2, r2, #20
 80009b2:	4313      	orrs	r3, r2
 80009b4:	07e4      	lsls	r4, r4, #31
 80009b6:	4323      	orrs	r3, r4
 80009b8:	0008      	movs	r0, r1
 80009ba:	0019      	movs	r1, r3
 80009bc:	bce0      	pop	{r5, r6, r7}
 80009be:	46ba      	mov	sl, r7
 80009c0:	46b1      	mov	r9, r6
 80009c2:	46a8      	mov	r8, r5
 80009c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d043      	beq.n	8000a52 <__aeabi_dadd+0x1d6>
 80009ca:	1b8a      	subs	r2, r1, r6
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x156>
 80009d0:	e12a      	b.n	8000c28 <__aeabi_dadd+0x3ac>
 80009d2:	464c      	mov	r4, r9
 80009d4:	431c      	orrs	r4, r3
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x15e>
 80009d8:	e1d1      	b.n	8000d7e <__aeabi_dadd+0x502>
 80009da:	1e54      	subs	r4, r2, #1
 80009dc:	2a01      	cmp	r2, #1
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x166>
 80009e0:	e21f      	b.n	8000e22 <__aeabi_dadd+0x5a6>
 80009e2:	4d83      	ldr	r5, [pc, #524]	; (8000bf0 <__aeabi_dadd+0x374>)
 80009e4:	42aa      	cmp	r2, r5
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x16e>
 80009e8:	e272      	b.n	8000ed0 <__aeabi_dadd+0x654>
 80009ea:	0022      	movs	r2, r4
 80009ec:	e123      	b.n	8000c36 <__aeabi_dadd+0x3ba>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	dc00      	bgt.n	80009f4 <__aeabi_dadd+0x178>
 80009f2:	e098      	b.n	8000b26 <__aeabi_dadd+0x2aa>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d042      	beq.n	8000a7e <__aeabi_dadd+0x202>
 80009f8:	497d      	ldr	r1, [pc, #500]	; (8000bf0 <__aeabi_dadd+0x374>)
 80009fa:	428e      	cmp	r6, r1
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x184>
 80009fe:	e0da      	b.n	8000bb6 <__aeabi_dadd+0x33a>
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0028      	movs	r0, r5
 8000a04:	0409      	lsls	r1, r1, #16
 8000a06:	4308      	orrs	r0, r1
 8000a08:	4684      	mov	ip, r0
 8000a0a:	2a38      	cmp	r2, #56	; 0x38
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_dadd+0x194>
 8000a0e:	e129      	b.n	8000c64 <__aeabi_dadd+0x3e8>
 8000a10:	2a1f      	cmp	r2, #31
 8000a12:	dc00      	bgt.n	8000a16 <__aeabi_dadd+0x19a>
 8000a14:	e187      	b.n	8000d26 <__aeabi_dadd+0x4aa>
 8000a16:	0011      	movs	r1, r2
 8000a18:	4665      	mov	r5, ip
 8000a1a:	3920      	subs	r1, #32
 8000a1c:	40cd      	lsrs	r5, r1
 8000a1e:	2a20      	cmp	r2, #32
 8000a20:	d004      	beq.n	8000a2c <__aeabi_dadd+0x1b0>
 8000a22:	2040      	movs	r0, #64	; 0x40
 8000a24:	4661      	mov	r1, ip
 8000a26:	1a82      	subs	r2, r0, r2
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	430f      	orrs	r7, r1
 8000a2c:	0039      	movs	r1, r7
 8000a2e:	1e4f      	subs	r7, r1, #1
 8000a30:	41b9      	sbcs	r1, r7
 8000a32:	430d      	orrs	r5, r1
 8000a34:	e11b      	b.n	8000c6e <__aeabi_dadd+0x3f2>
 8000a36:	0029      	movs	r1, r5
 8000a38:	4339      	orrs	r1, r7
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x1c2>
 8000a3c:	e0b5      	b.n	8000baa <__aeabi_dadd+0x32e>
 8000a3e:	1e51      	subs	r1, r2, #1
 8000a40:	2a01      	cmp	r2, #1
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x1ca>
 8000a44:	e1ab      	b.n	8000d9e <__aeabi_dadd+0x522>
 8000a46:	486a      	ldr	r0, [pc, #424]	; (8000bf0 <__aeabi_dadd+0x374>)
 8000a48:	4282      	cmp	r2, r0
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_dadd+0x1d2>
 8000a4c:	e1b2      	b.n	8000db4 <__aeabi_dadd+0x538>
 8000a4e:	000a      	movs	r2, r1
 8000a50:	e743      	b.n	80008da <__aeabi_dadd+0x5e>
 8000a52:	4969      	ldr	r1, [pc, #420]	; (8000bf8 <__aeabi_dadd+0x37c>)
 8000a54:	1c75      	adds	r5, r6, #1
 8000a56:	420d      	tst	r5, r1
 8000a58:	d000      	beq.n	8000a5c <__aeabi_dadd+0x1e0>
 8000a5a:	e0cf      	b.n	8000bfc <__aeabi_dadd+0x380>
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_dadd+0x1e6>
 8000a60:	e193      	b.n	8000d8a <__aeabi_dadd+0x50e>
 8000a62:	4649      	mov	r1, r9
 8000a64:	4319      	orrs	r1, r3
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x1ee>
 8000a68:	e1d1      	b.n	8000e0e <__aeabi_dadd+0x592>
 8000a6a:	4661      	mov	r1, ip
 8000a6c:	4339      	orrs	r1, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x1f6>
 8000a70:	e1e3      	b.n	8000e3a <__aeabi_dadd+0x5be>
 8000a72:	4649      	mov	r1, r9
 8000a74:	0758      	lsls	r0, r3, #29
 8000a76:	08c9      	lsrs	r1, r1, #3
 8000a78:	4301      	orrs	r1, r0
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	e026      	b.n	8000acc <__aeabi_dadd+0x250>
 8000a7e:	0029      	movs	r1, r5
 8000a80:	4339      	orrs	r1, r7
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x20a>
 8000a84:	e091      	b.n	8000baa <__aeabi_dadd+0x32e>
 8000a86:	1e51      	subs	r1, r2, #1
 8000a88:	2a01      	cmp	r2, #1
 8000a8a:	d005      	beq.n	8000a98 <__aeabi_dadd+0x21c>
 8000a8c:	4858      	ldr	r0, [pc, #352]	; (8000bf0 <__aeabi_dadd+0x374>)
 8000a8e:	4282      	cmp	r2, r0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_dadd+0x218>
 8000a92:	e18f      	b.n	8000db4 <__aeabi_dadd+0x538>
 8000a94:	000a      	movs	r2, r1
 8000a96:	e7b8      	b.n	8000a0a <__aeabi_dadd+0x18e>
 8000a98:	003d      	movs	r5, r7
 8000a9a:	444d      	add	r5, r9
 8000a9c:	454d      	cmp	r5, r9
 8000a9e:	4189      	sbcs	r1, r1
 8000aa0:	4463      	add	r3, ip
 8000aa2:	4698      	mov	r8, r3
 8000aa4:	4249      	negs	r1, r1
 8000aa6:	4488      	add	r8, r1
 8000aa8:	4643      	mov	r3, r8
 8000aaa:	2602      	movs	r6, #2
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	d500      	bpl.n	8000ab2 <__aeabi_dadd+0x236>
 8000ab0:	e0eb      	b.n	8000c8a <__aeabi_dadd+0x40e>
 8000ab2:	3e01      	subs	r6, #1
 8000ab4:	076b      	lsls	r3, r5, #29
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x23e>
 8000ab8:	e75c      	b.n	8000974 <__aeabi_dadd+0xf8>
 8000aba:	4643      	mov	r3, r8
 8000abc:	08e9      	lsrs	r1, r5, #3
 8000abe:	075a      	lsls	r2, r3, #29
 8000ac0:	4311      	orrs	r1, r2
 8000ac2:	0032      	movs	r2, r6
 8000ac4:	08db      	lsrs	r3, r3, #3
 8000ac6:	484a      	ldr	r0, [pc, #296]	; (8000bf0 <__aeabi_dadd+0x374>)
 8000ac8:	4282      	cmp	r2, r0
 8000aca:	d021      	beq.n	8000b10 <__aeabi_dadd+0x294>
 8000acc:	031b      	lsls	r3, r3, #12
 8000ace:	0552      	lsls	r2, r2, #21
 8000ad0:	0b1b      	lsrs	r3, r3, #12
 8000ad2:	0d52      	lsrs	r2, r2, #21
 8000ad4:	e76c      	b.n	80009b0 <__aeabi_dadd+0x134>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	e769      	b.n	80009b0 <__aeabi_dadd+0x134>
 8000adc:	002a      	movs	r2, r5
 8000ade:	433a      	orrs	r2, r7
 8000ae0:	d069      	beq.n	8000bb6 <__aeabi_dadd+0x33a>
 8000ae2:	464a      	mov	r2, r9
 8000ae4:	0758      	lsls	r0, r3, #29
 8000ae6:	08d1      	lsrs	r1, r2, #3
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	031b      	lsls	r3, r3, #12
 8000aee:	4308      	orrs	r0, r1
 8000af0:	421a      	tst	r2, r3
 8000af2:	d007      	beq.n	8000b04 <__aeabi_dadd+0x288>
 8000af4:	0029      	movs	r1, r5
 8000af6:	08ed      	lsrs	r5, r5, #3
 8000af8:	421d      	tst	r5, r3
 8000afa:	d103      	bne.n	8000b04 <__aeabi_dadd+0x288>
 8000afc:	002a      	movs	r2, r5
 8000afe:	08ff      	lsrs	r7, r7, #3
 8000b00:	0748      	lsls	r0, r1, #29
 8000b02:	4338      	orrs	r0, r7
 8000b04:	0f43      	lsrs	r3, r0, #29
 8000b06:	00c1      	lsls	r1, r0, #3
 8000b08:	075b      	lsls	r3, r3, #29
 8000b0a:	08c9      	lsrs	r1, r1, #3
 8000b0c:	4319      	orrs	r1, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	000a      	movs	r2, r1
 8000b12:	431a      	orrs	r2, r3
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x29c>
 8000b16:	e213      	b.n	8000f40 <__aeabi_dadd+0x6c4>
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	0312      	lsls	r2, r2, #12
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	031b      	lsls	r3, r3, #12
 8000b20:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <__aeabi_dadd+0x374>)
 8000b22:	0b1b      	lsrs	r3, r3, #12
 8000b24:	e744      	b.n	80009b0 <__aeabi_dadd+0x134>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d04b      	beq.n	8000bc2 <__aeabi_dadd+0x346>
 8000b2a:	1b8a      	subs	r2, r1, r6
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x2b6>
 8000b30:	e0e7      	b.n	8000d02 <__aeabi_dadd+0x486>
 8000b32:	482f      	ldr	r0, [pc, #188]	; (8000bf0 <__aeabi_dadd+0x374>)
 8000b34:	4281      	cmp	r1, r0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dadd+0x2be>
 8000b38:	e195      	b.n	8000e66 <__aeabi_dadd+0x5ea>
 8000b3a:	2080      	movs	r0, #128	; 0x80
 8000b3c:	0400      	lsls	r0, r0, #16
 8000b3e:	4303      	orrs	r3, r0
 8000b40:	2a38      	cmp	r2, #56	; 0x38
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_dadd+0x2ca>
 8000b44:	e143      	b.n	8000dce <__aeabi_dadd+0x552>
 8000b46:	2a1f      	cmp	r2, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x2d0>
 8000b4a:	e1db      	b.n	8000f04 <__aeabi_dadd+0x688>
 8000b4c:	2020      	movs	r0, #32
 8000b4e:	001d      	movs	r5, r3
 8000b50:	464e      	mov	r6, r9
 8000b52:	1a80      	subs	r0, r0, r2
 8000b54:	4085      	lsls	r5, r0
 8000b56:	40d6      	lsrs	r6, r2
 8000b58:	4335      	orrs	r5, r6
 8000b5a:	464e      	mov	r6, r9
 8000b5c:	4086      	lsls	r6, r0
 8000b5e:	0030      	movs	r0, r6
 8000b60:	40d3      	lsrs	r3, r2
 8000b62:	1e46      	subs	r6, r0, #1
 8000b64:	41b0      	sbcs	r0, r6
 8000b66:	449c      	add	ip, r3
 8000b68:	4305      	orrs	r5, r0
 8000b6a:	19ed      	adds	r5, r5, r7
 8000b6c:	42bd      	cmp	r5, r7
 8000b6e:	419b      	sbcs	r3, r3
 8000b70:	425b      	negs	r3, r3
 8000b72:	4463      	add	r3, ip
 8000b74:	4698      	mov	r8, r3
 8000b76:	000e      	movs	r6, r1
 8000b78:	e07f      	b.n	8000c7a <__aeabi_dadd+0x3fe>
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <__aeabi_dadd+0x378>)
 8000b7c:	1a76      	subs	r6, r6, r1
 8000b7e:	4013      	ands	r3, r2
 8000b80:	4698      	mov	r8, r3
 8000b82:	e6f5      	b.n	8000970 <__aeabi_dadd+0xf4>
 8000b84:	0028      	movs	r0, r5
 8000b86:	f000 fd07 	bl	8001598 <__clzsi2>
 8000b8a:	0001      	movs	r1, r0
 8000b8c:	3118      	adds	r1, #24
 8000b8e:	291f      	cmp	r1, #31
 8000b90:	dc00      	bgt.n	8000b94 <__aeabi_dadd+0x318>
 8000b92:	e6cf      	b.n	8000934 <__aeabi_dadd+0xb8>
 8000b94:	002b      	movs	r3, r5
 8000b96:	3808      	subs	r0, #8
 8000b98:	4083      	lsls	r3, r0
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	e6d2      	b.n	8000944 <__aeabi_dadd+0xc8>
 8000b9e:	4662      	mov	r2, ip
 8000ba0:	433a      	orrs	r2, r7
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	1e4f      	subs	r7, r1, #1
 8000ba6:	41b9      	sbcs	r1, r7
 8000ba8:	e6ac      	b.n	8000904 <__aeabi_dadd+0x88>
 8000baa:	4649      	mov	r1, r9
 8000bac:	0758      	lsls	r0, r3, #29
 8000bae:	08c9      	lsrs	r1, r1, #3
 8000bb0:	4301      	orrs	r1, r0
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	e787      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000bb6:	4649      	mov	r1, r9
 8000bb8:	075a      	lsls	r2, r3, #29
 8000bba:	08c9      	lsrs	r1, r1, #3
 8000bbc:	4311      	orrs	r1, r2
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	e7a6      	b.n	8000b10 <__aeabi_dadd+0x294>
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <__aeabi_dadd+0x37c>)
 8000bc4:	1c70      	adds	r0, r6, #1
 8000bc6:	4208      	tst	r0, r1
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dadd+0x350>
 8000bca:	e0bb      	b.n	8000d44 <__aeabi_dadd+0x4c8>
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dadd+0x356>
 8000bd0:	e114      	b.n	8000dfc <__aeabi_dadd+0x580>
 8000bd2:	4649      	mov	r1, r9
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x35e>
 8000bd8:	e175      	b.n	8000ec6 <__aeabi_dadd+0x64a>
 8000bda:	0029      	movs	r1, r5
 8000bdc:	4339      	orrs	r1, r7
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x366>
 8000be0:	e17e      	b.n	8000ee0 <__aeabi_dadd+0x664>
 8000be2:	4649      	mov	r1, r9
 8000be4:	0758      	lsls	r0, r3, #29
 8000be6:	08c9      	lsrs	r1, r1, #3
 8000be8:	4301      	orrs	r1, r0
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	e76e      	b.n	8000acc <__aeabi_dadd+0x250>
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	000007ff 	.word	0x000007ff
 8000bf4:	ff7fffff 	.word	0xff7fffff
 8000bf8:	000007fe 	.word	0x000007fe
 8000bfc:	4649      	mov	r1, r9
 8000bfe:	1bcd      	subs	r5, r1, r7
 8000c00:	4661      	mov	r1, ip
 8000c02:	1a58      	subs	r0, r3, r1
 8000c04:	45a9      	cmp	r9, r5
 8000c06:	4189      	sbcs	r1, r1
 8000c08:	4249      	negs	r1, r1
 8000c0a:	4688      	mov	r8, r1
 8000c0c:	0001      	movs	r1, r0
 8000c0e:	4640      	mov	r0, r8
 8000c10:	1a09      	subs	r1, r1, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	0209      	lsls	r1, r1, #8
 8000c16:	d500      	bpl.n	8000c1a <__aeabi_dadd+0x39e>
 8000c18:	e0a6      	b.n	8000d68 <__aeabi_dadd+0x4ec>
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	4329      	orrs	r1, r5
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_dadd+0x3a6>
 8000c20:	e67f      	b.n	8000922 <__aeabi_dadd+0xa6>
 8000c22:	2300      	movs	r3, #0
 8000c24:	2400      	movs	r4, #0
 8000c26:	e751      	b.n	8000acc <__aeabi_dadd+0x250>
 8000c28:	4cc7      	ldr	r4, [pc, #796]	; (8000f48 <__aeabi_dadd+0x6cc>)
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x3b4>
 8000c2e:	e0c7      	b.n	8000dc0 <__aeabi_dadd+0x544>
 8000c30:	2480      	movs	r4, #128	; 0x80
 8000c32:	0424      	lsls	r4, r4, #16
 8000c34:	4323      	orrs	r3, r4
 8000c36:	2a38      	cmp	r2, #56	; 0x38
 8000c38:	dc54      	bgt.n	8000ce4 <__aeabi_dadd+0x468>
 8000c3a:	2a1f      	cmp	r2, #31
 8000c3c:	dd00      	ble.n	8000c40 <__aeabi_dadd+0x3c4>
 8000c3e:	e0cc      	b.n	8000dda <__aeabi_dadd+0x55e>
 8000c40:	2420      	movs	r4, #32
 8000c42:	4648      	mov	r0, r9
 8000c44:	1aa4      	subs	r4, r4, r2
 8000c46:	001d      	movs	r5, r3
 8000c48:	464e      	mov	r6, r9
 8000c4a:	40a0      	lsls	r0, r4
 8000c4c:	40d6      	lsrs	r6, r2
 8000c4e:	40a5      	lsls	r5, r4
 8000c50:	0004      	movs	r4, r0
 8000c52:	40d3      	lsrs	r3, r2
 8000c54:	4662      	mov	r2, ip
 8000c56:	4335      	orrs	r5, r6
 8000c58:	1e66      	subs	r6, r4, #1
 8000c5a:	41b4      	sbcs	r4, r6
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	469c      	mov	ip, r3
 8000c60:	4325      	orrs	r5, r4
 8000c62:	e044      	b.n	8000cee <__aeabi_dadd+0x472>
 8000c64:	4662      	mov	r2, ip
 8000c66:	433a      	orrs	r2, r7
 8000c68:	0015      	movs	r5, r2
 8000c6a:	1e6f      	subs	r7, r5, #1
 8000c6c:	41bd      	sbcs	r5, r7
 8000c6e:	444d      	add	r5, r9
 8000c70:	454d      	cmp	r5, r9
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	4249      	negs	r1, r1
 8000c76:	4688      	mov	r8, r1
 8000c78:	4498      	add	r8, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	d400      	bmi.n	8000c82 <__aeabi_dadd+0x406>
 8000c80:	e718      	b.n	8000ab4 <__aeabi_dadd+0x238>
 8000c82:	4bb1      	ldr	r3, [pc, #708]	; (8000f48 <__aeabi_dadd+0x6cc>)
 8000c84:	3601      	adds	r6, #1
 8000c86:	429e      	cmp	r6, r3
 8000c88:	d049      	beq.n	8000d1e <__aeabi_dadd+0x4a2>
 8000c8a:	4642      	mov	r2, r8
 8000c8c:	4baf      	ldr	r3, [pc, #700]	; (8000f4c <__aeabi_dadd+0x6d0>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	401a      	ands	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	086a      	lsrs	r2, r5, #1
 8000c96:	400d      	ands	r5, r1
 8000c98:	4315      	orrs	r5, r2
 8000c9a:	07d9      	lsls	r1, r3, #31
 8000c9c:	085b      	lsrs	r3, r3, #1
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	430d      	orrs	r5, r1
 8000ca2:	e665      	b.n	8000970 <__aeabi_dadd+0xf4>
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	3e1f      	subs	r6, #31
 8000ca8:	40f0      	lsrs	r0, r6
 8000caa:	2a20      	cmp	r2, #32
 8000cac:	d003      	beq.n	8000cb6 <__aeabi_dadd+0x43a>
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	1a8a      	subs	r2, r1, r2
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	431d      	orrs	r5, r3
 8000cb6:	1e69      	subs	r1, r5, #1
 8000cb8:	418d      	sbcs	r5, r1
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	4305      	orrs	r5, r0
 8000cc2:	e6f7      	b.n	8000ab4 <__aeabi_dadd+0x238>
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	4665      	mov	r5, ip
 8000cc8:	3920      	subs	r1, #32
 8000cca:	40cd      	lsrs	r5, r1
 8000ccc:	2a20      	cmp	r2, #32
 8000cce:	d004      	beq.n	8000cda <__aeabi_dadd+0x45e>
 8000cd0:	2040      	movs	r0, #64	; 0x40
 8000cd2:	4661      	mov	r1, ip
 8000cd4:	1a82      	subs	r2, r0, r2
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	430f      	orrs	r7, r1
 8000cda:	0039      	movs	r1, r7
 8000cdc:	1e4f      	subs	r7, r1, #1
 8000cde:	41b9      	sbcs	r1, r7
 8000ce0:	4329      	orrs	r1, r5
 8000ce2:	e60f      	b.n	8000904 <__aeabi_dadd+0x88>
 8000ce4:	464a      	mov	r2, r9
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	001d      	movs	r5, r3
 8000cea:	1e6b      	subs	r3, r5, #1
 8000cec:	419d      	sbcs	r5, r3
 8000cee:	1b7d      	subs	r5, r7, r5
 8000cf0:	42af      	cmp	r7, r5
 8000cf2:	419b      	sbcs	r3, r3
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	4654      	mov	r4, sl
 8000cfe:	000e      	movs	r6, r1
 8000d00:	e607      	b.n	8000912 <__aeabi_dadd+0x96>
 8000d02:	4648      	mov	r0, r9
 8000d04:	4318      	orrs	r0, r3
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x48e>
 8000d08:	e0b3      	b.n	8000e72 <__aeabi_dadd+0x5f6>
 8000d0a:	1e50      	subs	r0, r2, #1
 8000d0c:	2a01      	cmp	r2, #1
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x496>
 8000d10:	e10d      	b.n	8000f2e <__aeabi_dadd+0x6b2>
 8000d12:	4d8d      	ldr	r5, [pc, #564]	; (8000f48 <__aeabi_dadd+0x6cc>)
 8000d14:	42aa      	cmp	r2, r5
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x49e>
 8000d18:	e0a5      	b.n	8000e66 <__aeabi_dadd+0x5ea>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	e710      	b.n	8000b40 <__aeabi_dadd+0x2c4>
 8000d1e:	0032      	movs	r2, r6
 8000d20:	2300      	movs	r3, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	e644      	b.n	80009b0 <__aeabi_dadd+0x134>
 8000d26:	2120      	movs	r1, #32
 8000d28:	0038      	movs	r0, r7
 8000d2a:	1a89      	subs	r1, r1, r2
 8000d2c:	4665      	mov	r5, ip
 8000d2e:	408f      	lsls	r7, r1
 8000d30:	408d      	lsls	r5, r1
 8000d32:	40d0      	lsrs	r0, r2
 8000d34:	1e79      	subs	r1, r7, #1
 8000d36:	418f      	sbcs	r7, r1
 8000d38:	4305      	orrs	r5, r0
 8000d3a:	433d      	orrs	r5, r7
 8000d3c:	4667      	mov	r7, ip
 8000d3e:	40d7      	lsrs	r7, r2
 8000d40:	19db      	adds	r3, r3, r7
 8000d42:	e794      	b.n	8000c6e <__aeabi_dadd+0x3f2>
 8000d44:	4a80      	ldr	r2, [pc, #512]	; (8000f48 <__aeabi_dadd+0x6cc>)
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x4d0>
 8000d4a:	e0ec      	b.n	8000f26 <__aeabi_dadd+0x6aa>
 8000d4c:	0039      	movs	r1, r7
 8000d4e:	4449      	add	r1, r9
 8000d50:	4549      	cmp	r1, r9
 8000d52:	4192      	sbcs	r2, r2
 8000d54:	4463      	add	r3, ip
 8000d56:	4252      	negs	r2, r2
 8000d58:	189b      	adds	r3, r3, r2
 8000d5a:	07dd      	lsls	r5, r3, #31
 8000d5c:	0849      	lsrs	r1, r1, #1
 8000d5e:	085b      	lsrs	r3, r3, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	0006      	movs	r6, r0
 8000d64:	430d      	orrs	r5, r1
 8000d66:	e6a5      	b.n	8000ab4 <__aeabi_dadd+0x238>
 8000d68:	464a      	mov	r2, r9
 8000d6a:	1abd      	subs	r5, r7, r2
 8000d6c:	42af      	cmp	r7, r5
 8000d6e:	4189      	sbcs	r1, r1
 8000d70:	4662      	mov	r2, ip
 8000d72:	4249      	negs	r1, r1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	1a5b      	subs	r3, r3, r1
 8000d78:	4698      	mov	r8, r3
 8000d7a:	4654      	mov	r4, sl
 8000d7c:	e5d1      	b.n	8000922 <__aeabi_dadd+0xa6>
 8000d7e:	076c      	lsls	r4, r5, #29
 8000d80:	08f9      	lsrs	r1, r7, #3
 8000d82:	4321      	orrs	r1, r4
 8000d84:	08eb      	lsrs	r3, r5, #3
 8000d86:	0004      	movs	r4, r0
 8000d88:	e69d      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000d8a:	464a      	mov	r2, r9
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	d175      	bne.n	8000e7c <__aeabi_dadd+0x600>
 8000d90:	4661      	mov	r1, ip
 8000d92:	4339      	orrs	r1, r7
 8000d94:	d114      	bne.n	8000dc0 <__aeabi_dadd+0x544>
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	2400      	movs	r4, #0
 8000d9a:	031b      	lsls	r3, r3, #12
 8000d9c:	e6bc      	b.n	8000b18 <__aeabi_dadd+0x29c>
 8000d9e:	464a      	mov	r2, r9
 8000da0:	1bd5      	subs	r5, r2, r7
 8000da2:	45a9      	cmp	r9, r5
 8000da4:	4189      	sbcs	r1, r1
 8000da6:	4662      	mov	r2, ip
 8000da8:	4249      	negs	r1, r1
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	4698      	mov	r8, r3
 8000db0:	2601      	movs	r6, #1
 8000db2:	e5ae      	b.n	8000912 <__aeabi_dadd+0x96>
 8000db4:	464a      	mov	r2, r9
 8000db6:	08d1      	lsrs	r1, r2, #3
 8000db8:	075a      	lsls	r2, r3, #29
 8000dba:	4311      	orrs	r1, r2
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	e6a7      	b.n	8000b10 <__aeabi_dadd+0x294>
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	08f9      	lsrs	r1, r7, #3
 8000dc4:	075a      	lsls	r2, r3, #29
 8000dc6:	4654      	mov	r4, sl
 8000dc8:	4311      	orrs	r1, r2
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	e6a0      	b.n	8000b10 <__aeabi_dadd+0x294>
 8000dce:	464a      	mov	r2, r9
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	001d      	movs	r5, r3
 8000dd4:	1e6b      	subs	r3, r5, #1
 8000dd6:	419d      	sbcs	r5, r3
 8000dd8:	e6c7      	b.n	8000b6a <__aeabi_dadd+0x2ee>
 8000dda:	0014      	movs	r4, r2
 8000ddc:	001e      	movs	r6, r3
 8000dde:	3c20      	subs	r4, #32
 8000de0:	40e6      	lsrs	r6, r4
 8000de2:	2a20      	cmp	r2, #32
 8000de4:	d005      	beq.n	8000df2 <__aeabi_dadd+0x576>
 8000de6:	2440      	movs	r4, #64	; 0x40
 8000de8:	1aa2      	subs	r2, r4, r2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	464a      	mov	r2, r9
 8000dee:	431a      	orrs	r2, r3
 8000df0:	4691      	mov	r9, r2
 8000df2:	464d      	mov	r5, r9
 8000df4:	1e6b      	subs	r3, r5, #1
 8000df6:	419d      	sbcs	r5, r3
 8000df8:	4335      	orrs	r5, r6
 8000dfa:	e778      	b.n	8000cee <__aeabi_dadd+0x472>
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	d000      	beq.n	8000e04 <__aeabi_dadd+0x588>
 8000e02:	e66b      	b.n	8000adc <__aeabi_dadd+0x260>
 8000e04:	076b      	lsls	r3, r5, #29
 8000e06:	08f9      	lsrs	r1, r7, #3
 8000e08:	4319      	orrs	r1, r3
 8000e0a:	08eb      	lsrs	r3, r5, #3
 8000e0c:	e680      	b.n	8000b10 <__aeabi_dadd+0x294>
 8000e0e:	4661      	mov	r1, ip
 8000e10:	4339      	orrs	r1, r7
 8000e12:	d054      	beq.n	8000ebe <__aeabi_dadd+0x642>
 8000e14:	4663      	mov	r3, ip
 8000e16:	08f9      	lsrs	r1, r7, #3
 8000e18:	075c      	lsls	r4, r3, #29
 8000e1a:	4321      	orrs	r1, r4
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	0004      	movs	r4, r0
 8000e20:	e654      	b.n	8000acc <__aeabi_dadd+0x250>
 8000e22:	464a      	mov	r2, r9
 8000e24:	1abd      	subs	r5, r7, r2
 8000e26:	42af      	cmp	r7, r5
 8000e28:	4189      	sbcs	r1, r1
 8000e2a:	4662      	mov	r2, ip
 8000e2c:	4249      	negs	r1, r1
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	4698      	mov	r8, r3
 8000e34:	0004      	movs	r4, r0
 8000e36:	2601      	movs	r6, #1
 8000e38:	e56b      	b.n	8000912 <__aeabi_dadd+0x96>
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	1bd5      	subs	r5, r2, r7
 8000e3e:	45a9      	cmp	r9, r5
 8000e40:	4189      	sbcs	r1, r1
 8000e42:	4662      	mov	r2, ip
 8000e44:	4249      	negs	r1, r1
 8000e46:	1a9a      	subs	r2, r3, r2
 8000e48:	1a52      	subs	r2, r2, r1
 8000e4a:	4690      	mov	r8, r2
 8000e4c:	0212      	lsls	r2, r2, #8
 8000e4e:	d532      	bpl.n	8000eb6 <__aeabi_dadd+0x63a>
 8000e50:	464a      	mov	r2, r9
 8000e52:	1abd      	subs	r5, r7, r2
 8000e54:	42af      	cmp	r7, r5
 8000e56:	4189      	sbcs	r1, r1
 8000e58:	4662      	mov	r2, ip
 8000e5a:	4249      	negs	r1, r1
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	1a5b      	subs	r3, r3, r1
 8000e60:	4698      	mov	r8, r3
 8000e62:	0004      	movs	r4, r0
 8000e64:	e584      	b.n	8000970 <__aeabi_dadd+0xf4>
 8000e66:	4663      	mov	r3, ip
 8000e68:	08f9      	lsrs	r1, r7, #3
 8000e6a:	075a      	lsls	r2, r3, #29
 8000e6c:	4311      	orrs	r1, r2
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	e64e      	b.n	8000b10 <__aeabi_dadd+0x294>
 8000e72:	08f9      	lsrs	r1, r7, #3
 8000e74:	0768      	lsls	r0, r5, #29
 8000e76:	4301      	orrs	r1, r0
 8000e78:	08eb      	lsrs	r3, r5, #3
 8000e7a:	e624      	b.n	8000ac6 <__aeabi_dadd+0x24a>
 8000e7c:	4662      	mov	r2, ip
 8000e7e:	433a      	orrs	r2, r7
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dadd+0x608>
 8000e82:	e698      	b.n	8000bb6 <__aeabi_dadd+0x33a>
 8000e84:	464a      	mov	r2, r9
 8000e86:	08d1      	lsrs	r1, r2, #3
 8000e88:	075a      	lsls	r2, r3, #29
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	031b      	lsls	r3, r3, #12
 8000e92:	421a      	tst	r2, r3
 8000e94:	d008      	beq.n	8000ea8 <__aeabi_dadd+0x62c>
 8000e96:	4660      	mov	r0, ip
 8000e98:	08c5      	lsrs	r5, r0, #3
 8000e9a:	421d      	tst	r5, r3
 8000e9c:	d104      	bne.n	8000ea8 <__aeabi_dadd+0x62c>
 8000e9e:	4654      	mov	r4, sl
 8000ea0:	002a      	movs	r2, r5
 8000ea2:	08f9      	lsrs	r1, r7, #3
 8000ea4:	0743      	lsls	r3, r0, #29
 8000ea6:	4319      	orrs	r1, r3
 8000ea8:	0f4b      	lsrs	r3, r1, #29
 8000eaa:	00c9      	lsls	r1, r1, #3
 8000eac:	075b      	lsls	r3, r3, #29
 8000eae:	08c9      	lsrs	r1, r1, #3
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	e62c      	b.n	8000b10 <__aeabi_dadd+0x294>
 8000eb6:	4641      	mov	r1, r8
 8000eb8:	4329      	orrs	r1, r5
 8000eba:	d000      	beq.n	8000ebe <__aeabi_dadd+0x642>
 8000ebc:	e5fa      	b.n	8000ab4 <__aeabi_dadd+0x238>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	000a      	movs	r2, r1
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	e602      	b.n	8000acc <__aeabi_dadd+0x250>
 8000ec6:	076b      	lsls	r3, r5, #29
 8000ec8:	08f9      	lsrs	r1, r7, #3
 8000eca:	4319      	orrs	r1, r3
 8000ecc:	08eb      	lsrs	r3, r5, #3
 8000ece:	e5fd      	b.n	8000acc <__aeabi_dadd+0x250>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	08f9      	lsrs	r1, r7, #3
 8000ed4:	075b      	lsls	r3, r3, #29
 8000ed6:	4319      	orrs	r1, r3
 8000ed8:	4663      	mov	r3, ip
 8000eda:	0004      	movs	r4, r0
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	e617      	b.n	8000b10 <__aeabi_dadd+0x294>
 8000ee0:	003d      	movs	r5, r7
 8000ee2:	444d      	add	r5, r9
 8000ee4:	4463      	add	r3, ip
 8000ee6:	454d      	cmp	r5, r9
 8000ee8:	4189      	sbcs	r1, r1
 8000eea:	4698      	mov	r8, r3
 8000eec:	4249      	negs	r1, r1
 8000eee:	4488      	add	r8, r1
 8000ef0:	4643      	mov	r3, r8
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	d400      	bmi.n	8000ef8 <__aeabi_dadd+0x67c>
 8000ef6:	e5dd      	b.n	8000ab4 <__aeabi_dadd+0x238>
 8000ef8:	4642      	mov	r2, r8
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <__aeabi_dadd+0x6d0>)
 8000efc:	2601      	movs	r6, #1
 8000efe:	401a      	ands	r2, r3
 8000f00:	4690      	mov	r8, r2
 8000f02:	e5d7      	b.n	8000ab4 <__aeabi_dadd+0x238>
 8000f04:	0010      	movs	r0, r2
 8000f06:	001e      	movs	r6, r3
 8000f08:	3820      	subs	r0, #32
 8000f0a:	40c6      	lsrs	r6, r0
 8000f0c:	2a20      	cmp	r2, #32
 8000f0e:	d005      	beq.n	8000f1c <__aeabi_dadd+0x6a0>
 8000f10:	2040      	movs	r0, #64	; 0x40
 8000f12:	1a82      	subs	r2, r0, r2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	464a      	mov	r2, r9
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	464d      	mov	r5, r9
 8000f1e:	1e6b      	subs	r3, r5, #1
 8000f20:	419d      	sbcs	r5, r3
 8000f22:	4335      	orrs	r5, r6
 8000f24:	e621      	b.n	8000b6a <__aeabi_dadd+0x2ee>
 8000f26:	0002      	movs	r2, r0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	e540      	b.n	80009b0 <__aeabi_dadd+0x134>
 8000f2e:	464a      	mov	r2, r9
 8000f30:	19d5      	adds	r5, r2, r7
 8000f32:	42bd      	cmp	r5, r7
 8000f34:	4189      	sbcs	r1, r1
 8000f36:	4463      	add	r3, ip
 8000f38:	4698      	mov	r8, r3
 8000f3a:	4249      	negs	r1, r1
 8000f3c:	4488      	add	r8, r1
 8000f3e:	e5b3      	b.n	8000aa8 <__aeabi_dadd+0x22c>
 8000f40:	2100      	movs	r1, #0
 8000f42:	4a01      	ldr	r2, [pc, #4]	; (8000f48 <__aeabi_dadd+0x6cc>)
 8000f44:	000b      	movs	r3, r1
 8000f46:	e533      	b.n	80009b0 <__aeabi_dadd+0x134>
 8000f48:	000007ff 	.word	0x000007ff
 8000f4c:	ff7fffff 	.word	0xff7fffff

08000f50 <__aeabi_dmul>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	4657      	mov	r7, sl
 8000f54:	464e      	mov	r6, r9
 8000f56:	4645      	mov	r5, r8
 8000f58:	46de      	mov	lr, fp
 8000f5a:	b5e0      	push	{r5, r6, r7, lr}
 8000f5c:	4698      	mov	r8, r3
 8000f5e:	030c      	lsls	r4, r1, #12
 8000f60:	004b      	lsls	r3, r1, #1
 8000f62:	0006      	movs	r6, r0
 8000f64:	4692      	mov	sl, r2
 8000f66:	b087      	sub	sp, #28
 8000f68:	0b24      	lsrs	r4, r4, #12
 8000f6a:	0d5b      	lsrs	r3, r3, #21
 8000f6c:	0fcf      	lsrs	r7, r1, #31
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d06c      	beq.n	800104c <__aeabi_dmul+0xfc>
 8000f72:	4add      	ldr	r2, [pc, #884]	; (80012e8 <__aeabi_dmul+0x398>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dmul+0x2a>
 8000f78:	e086      	b.n	8001088 <__aeabi_dmul+0x138>
 8000f7a:	0f42      	lsrs	r2, r0, #29
 8000f7c:	00e4      	lsls	r4, r4, #3
 8000f7e:	4314      	orrs	r4, r2
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	0412      	lsls	r2, r2, #16
 8000f84:	4314      	orrs	r4, r2
 8000f86:	4ad9      	ldr	r2, [pc, #868]	; (80012ec <__aeabi_dmul+0x39c>)
 8000f88:	00c5      	lsls	r5, r0, #3
 8000f8a:	4694      	mov	ip, r2
 8000f8c:	4463      	add	r3, ip
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	4699      	mov	r9, r3
 8000f94:	469b      	mov	fp, r3
 8000f96:	4643      	mov	r3, r8
 8000f98:	4642      	mov	r2, r8
 8000f9a:	031e      	lsls	r6, r3, #12
 8000f9c:	0fd2      	lsrs	r2, r2, #31
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4650      	mov	r0, sl
 8000fa2:	4690      	mov	r8, r2
 8000fa4:	0b36      	lsrs	r6, r6, #12
 8000fa6:	0d5b      	lsrs	r3, r3, #21
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dmul+0x5c>
 8000faa:	e078      	b.n	800109e <__aeabi_dmul+0x14e>
 8000fac:	4ace      	ldr	r2, [pc, #824]	; (80012e8 <__aeabi_dmul+0x398>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01d      	beq.n	8000fee <__aeabi_dmul+0x9e>
 8000fb2:	49ce      	ldr	r1, [pc, #824]	; (80012ec <__aeabi_dmul+0x39c>)
 8000fb4:	0f42      	lsrs	r2, r0, #29
 8000fb6:	468c      	mov	ip, r1
 8000fb8:	9900      	ldr	r1, [sp, #0]
 8000fba:	4463      	add	r3, ip
 8000fbc:	00f6      	lsls	r6, r6, #3
 8000fbe:	468c      	mov	ip, r1
 8000fc0:	4316      	orrs	r6, r2
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	449c      	add	ip, r3
 8000fc6:	0412      	lsls	r2, r2, #16
 8000fc8:	4663      	mov	r3, ip
 8000fca:	4316      	orrs	r6, r2
 8000fcc:	00c2      	lsls	r2, r0, #3
 8000fce:	2000      	movs	r0, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	9900      	ldr	r1, [sp, #0]
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	3101      	adds	r1, #1
 8000fd8:	468c      	mov	ip, r1
 8000fda:	4649      	mov	r1, r9
 8000fdc:	407b      	eors	r3, r7
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	290f      	cmp	r1, #15
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_dmul+0x96>
 8000fe4:	e07e      	b.n	80010e4 <__aeabi_dmul+0x194>
 8000fe6:	4bc2      	ldr	r3, [pc, #776]	; (80012f0 <__aeabi_dmul+0x3a0>)
 8000fe8:	0089      	lsls	r1, r1, #2
 8000fea:	5859      	ldr	r1, [r3, r1]
 8000fec:	468f      	mov	pc, r1
 8000fee:	4652      	mov	r2, sl
 8000ff0:	9b00      	ldr	r3, [sp, #0]
 8000ff2:	4332      	orrs	r2, r6
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_dmul+0xa8>
 8000ff6:	e156      	b.n	80012a6 <__aeabi_dmul+0x356>
 8000ff8:	49bb      	ldr	r1, [pc, #748]	; (80012e8 <__aeabi_dmul+0x398>)
 8000ffa:	2600      	movs	r6, #0
 8000ffc:	468c      	mov	ip, r1
 8000ffe:	4463      	add	r3, ip
 8001000:	4649      	mov	r1, r9
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	4319      	orrs	r1, r3
 8001008:	4689      	mov	r9, r1
 800100a:	2002      	movs	r0, #2
 800100c:	e7e1      	b.n	8000fd2 <__aeabi_dmul+0x82>
 800100e:	4643      	mov	r3, r8
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	0034      	movs	r4, r6
 8001014:	0015      	movs	r5, r2
 8001016:	4683      	mov	fp, r0
 8001018:	465b      	mov	r3, fp
 800101a:	2b02      	cmp	r3, #2
 800101c:	d05e      	beq.n	80010dc <__aeabi_dmul+0x18c>
 800101e:	2b03      	cmp	r3, #3
 8001020:	d100      	bne.n	8001024 <__aeabi_dmul+0xd4>
 8001022:	e1f3      	b.n	800140c <__aeabi_dmul+0x4bc>
 8001024:	2b01      	cmp	r3, #1
 8001026:	d000      	beq.n	800102a <__aeabi_dmul+0xda>
 8001028:	e118      	b.n	800125c <__aeabi_dmul+0x30c>
 800102a:	2200      	movs	r2, #0
 800102c:	2400      	movs	r4, #0
 800102e:	2500      	movs	r5, #0
 8001030:	9b01      	ldr	r3, [sp, #4]
 8001032:	0512      	lsls	r2, r2, #20
 8001034:	4322      	orrs	r2, r4
 8001036:	07db      	lsls	r3, r3, #31
 8001038:	431a      	orrs	r2, r3
 800103a:	0028      	movs	r0, r5
 800103c:	0011      	movs	r1, r2
 800103e:	b007      	add	sp, #28
 8001040:	bcf0      	pop	{r4, r5, r6, r7}
 8001042:	46bb      	mov	fp, r7
 8001044:	46b2      	mov	sl, r6
 8001046:	46a9      	mov	r9, r5
 8001048:	46a0      	mov	r8, r4
 800104a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104c:	0025      	movs	r5, r4
 800104e:	4305      	orrs	r5, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_dmul+0x104>
 8001052:	e141      	b.n	80012d8 <__aeabi_dmul+0x388>
 8001054:	2c00      	cmp	r4, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dmul+0x10a>
 8001058:	e1ad      	b.n	80013b6 <__aeabi_dmul+0x466>
 800105a:	0020      	movs	r0, r4
 800105c:	f000 fa9c 	bl	8001598 <__clzsi2>
 8001060:	0001      	movs	r1, r0
 8001062:	0002      	movs	r2, r0
 8001064:	390b      	subs	r1, #11
 8001066:	231d      	movs	r3, #29
 8001068:	0010      	movs	r0, r2
 800106a:	1a5b      	subs	r3, r3, r1
 800106c:	0031      	movs	r1, r6
 800106e:	0035      	movs	r5, r6
 8001070:	3808      	subs	r0, #8
 8001072:	4084      	lsls	r4, r0
 8001074:	40d9      	lsrs	r1, r3
 8001076:	4085      	lsls	r5, r0
 8001078:	430c      	orrs	r4, r1
 800107a:	489e      	ldr	r0, [pc, #632]	; (80012f4 <__aeabi_dmul+0x3a4>)
 800107c:	1a83      	subs	r3, r0, r2
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2300      	movs	r3, #0
 8001082:	4699      	mov	r9, r3
 8001084:	469b      	mov	fp, r3
 8001086:	e786      	b.n	8000f96 <__aeabi_dmul+0x46>
 8001088:	0005      	movs	r5, r0
 800108a:	4325      	orrs	r5, r4
 800108c:	d000      	beq.n	8001090 <__aeabi_dmul+0x140>
 800108e:	e11c      	b.n	80012ca <__aeabi_dmul+0x37a>
 8001090:	2208      	movs	r2, #8
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	2400      	movs	r4, #0
 8001098:	4691      	mov	r9, r2
 800109a:	469b      	mov	fp, r3
 800109c:	e77b      	b.n	8000f96 <__aeabi_dmul+0x46>
 800109e:	4652      	mov	r2, sl
 80010a0:	4332      	orrs	r2, r6
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dmul+0x156>
 80010a4:	e10a      	b.n	80012bc <__aeabi_dmul+0x36c>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_dmul+0x15c>
 80010aa:	e176      	b.n	800139a <__aeabi_dmul+0x44a>
 80010ac:	0030      	movs	r0, r6
 80010ae:	f000 fa73 	bl	8001598 <__clzsi2>
 80010b2:	0002      	movs	r2, r0
 80010b4:	3a0b      	subs	r2, #11
 80010b6:	231d      	movs	r3, #29
 80010b8:	0001      	movs	r1, r0
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	4652      	mov	r2, sl
 80010be:	3908      	subs	r1, #8
 80010c0:	40da      	lsrs	r2, r3
 80010c2:	408e      	lsls	r6, r1
 80010c4:	4316      	orrs	r6, r2
 80010c6:	4652      	mov	r2, sl
 80010c8:	408a      	lsls	r2, r1
 80010ca:	9b00      	ldr	r3, [sp, #0]
 80010cc:	4989      	ldr	r1, [pc, #548]	; (80012f4 <__aeabi_dmul+0x3a4>)
 80010ce:	1a18      	subs	r0, r3, r0
 80010d0:	0003      	movs	r3, r0
 80010d2:	468c      	mov	ip, r1
 80010d4:	4463      	add	r3, ip
 80010d6:	2000      	movs	r0, #0
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	e77a      	b.n	8000fd2 <__aeabi_dmul+0x82>
 80010dc:	2400      	movs	r4, #0
 80010de:	2500      	movs	r5, #0
 80010e0:	4a81      	ldr	r2, [pc, #516]	; (80012e8 <__aeabi_dmul+0x398>)
 80010e2:	e7a5      	b.n	8001030 <__aeabi_dmul+0xe0>
 80010e4:	0c2f      	lsrs	r7, r5, #16
 80010e6:	042d      	lsls	r5, r5, #16
 80010e8:	0c2d      	lsrs	r5, r5, #16
 80010ea:	002b      	movs	r3, r5
 80010ec:	0c11      	lsrs	r1, r2, #16
 80010ee:	0412      	lsls	r2, r2, #16
 80010f0:	0c12      	lsrs	r2, r2, #16
 80010f2:	4353      	muls	r3, r2
 80010f4:	4698      	mov	r8, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	0028      	movs	r0, r5
 80010fa:	437b      	muls	r3, r7
 80010fc:	4699      	mov	r9, r3
 80010fe:	4348      	muls	r0, r1
 8001100:	4448      	add	r0, r9
 8001102:	4683      	mov	fp, r0
 8001104:	4640      	mov	r0, r8
 8001106:	000b      	movs	r3, r1
 8001108:	0c00      	lsrs	r0, r0, #16
 800110a:	4682      	mov	sl, r0
 800110c:	4658      	mov	r0, fp
 800110e:	437b      	muls	r3, r7
 8001110:	4450      	add	r0, sl
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	4581      	cmp	r9, r0
 8001116:	d906      	bls.n	8001126 <__aeabi_dmul+0x1d6>
 8001118:	469a      	mov	sl, r3
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4699      	mov	r9, r3
 8001120:	44ca      	add	sl, r9
 8001122:	4653      	mov	r3, sl
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	0c03      	lsrs	r3, r0, #16
 8001128:	469b      	mov	fp, r3
 800112a:	4643      	mov	r3, r8
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	0400      	lsls	r0, r0, #16
 8001130:	0c1b      	lsrs	r3, r3, #16
 8001132:	4698      	mov	r8, r3
 8001134:	0003      	movs	r3, r0
 8001136:	4443      	add	r3, r8
 8001138:	9304      	str	r3, [sp, #16]
 800113a:	0c33      	lsrs	r3, r6, #16
 800113c:	4699      	mov	r9, r3
 800113e:	002b      	movs	r3, r5
 8001140:	0436      	lsls	r6, r6, #16
 8001142:	0c36      	lsrs	r6, r6, #16
 8001144:	4373      	muls	r3, r6
 8001146:	4698      	mov	r8, r3
 8001148:	0033      	movs	r3, r6
 800114a:	437b      	muls	r3, r7
 800114c:	469a      	mov	sl, r3
 800114e:	464b      	mov	r3, r9
 8001150:	435d      	muls	r5, r3
 8001152:	435f      	muls	r7, r3
 8001154:	4643      	mov	r3, r8
 8001156:	4455      	add	r5, sl
 8001158:	0c18      	lsrs	r0, r3, #16
 800115a:	1940      	adds	r0, r0, r5
 800115c:	4582      	cmp	sl, r0
 800115e:	d903      	bls.n	8001168 <__aeabi_dmul+0x218>
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	025b      	lsls	r3, r3, #9
 8001164:	469a      	mov	sl, r3
 8001166:	4457      	add	r7, sl
 8001168:	0c05      	lsrs	r5, r0, #16
 800116a:	19eb      	adds	r3, r5, r7
 800116c:	9305      	str	r3, [sp, #20]
 800116e:	4643      	mov	r3, r8
 8001170:	041d      	lsls	r5, r3, #16
 8001172:	0c2d      	lsrs	r5, r5, #16
 8001174:	0400      	lsls	r0, r0, #16
 8001176:	1940      	adds	r0, r0, r5
 8001178:	0c25      	lsrs	r5, r4, #16
 800117a:	0424      	lsls	r4, r4, #16
 800117c:	0c24      	lsrs	r4, r4, #16
 800117e:	0027      	movs	r7, r4
 8001180:	4357      	muls	r7, r2
 8001182:	436a      	muls	r2, r5
 8001184:	4690      	mov	r8, r2
 8001186:	002a      	movs	r2, r5
 8001188:	0c3b      	lsrs	r3, r7, #16
 800118a:	469a      	mov	sl, r3
 800118c:	434a      	muls	r2, r1
 800118e:	4361      	muls	r1, r4
 8001190:	4441      	add	r1, r8
 8001192:	4451      	add	r1, sl
 8001194:	4483      	add	fp, r0
 8001196:	4588      	cmp	r8, r1
 8001198:	d903      	bls.n	80011a2 <__aeabi_dmul+0x252>
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	025b      	lsls	r3, r3, #9
 800119e:	4698      	mov	r8, r3
 80011a0:	4442      	add	r2, r8
 80011a2:	043f      	lsls	r7, r7, #16
 80011a4:	0c0b      	lsrs	r3, r1, #16
 80011a6:	0c3f      	lsrs	r7, r7, #16
 80011a8:	0409      	lsls	r1, r1, #16
 80011aa:	19c9      	adds	r1, r1, r7
 80011ac:	0027      	movs	r7, r4
 80011ae:	4698      	mov	r8, r3
 80011b0:	464b      	mov	r3, r9
 80011b2:	4377      	muls	r7, r6
 80011b4:	435c      	muls	r4, r3
 80011b6:	436e      	muls	r6, r5
 80011b8:	435d      	muls	r5, r3
 80011ba:	0c3b      	lsrs	r3, r7, #16
 80011bc:	4699      	mov	r9, r3
 80011be:	19a4      	adds	r4, r4, r6
 80011c0:	444c      	add	r4, r9
 80011c2:	4442      	add	r2, r8
 80011c4:	9503      	str	r5, [sp, #12]
 80011c6:	42a6      	cmp	r6, r4
 80011c8:	d904      	bls.n	80011d4 <__aeabi_dmul+0x284>
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	4698      	mov	r8, r3
 80011d0:	4445      	add	r5, r8
 80011d2:	9503      	str	r5, [sp, #12]
 80011d4:	9b02      	ldr	r3, [sp, #8]
 80011d6:	043f      	lsls	r7, r7, #16
 80011d8:	445b      	add	r3, fp
 80011da:	001e      	movs	r6, r3
 80011dc:	4283      	cmp	r3, r0
 80011de:	4180      	sbcs	r0, r0
 80011e0:	0423      	lsls	r3, r4, #16
 80011e2:	4698      	mov	r8, r3
 80011e4:	9b05      	ldr	r3, [sp, #20]
 80011e6:	0c3f      	lsrs	r7, r7, #16
 80011e8:	4447      	add	r7, r8
 80011ea:	4698      	mov	r8, r3
 80011ec:	1876      	adds	r6, r6, r1
 80011ee:	428e      	cmp	r6, r1
 80011f0:	4189      	sbcs	r1, r1
 80011f2:	4447      	add	r7, r8
 80011f4:	4240      	negs	r0, r0
 80011f6:	183d      	adds	r5, r7, r0
 80011f8:	46a8      	mov	r8, r5
 80011fa:	4693      	mov	fp, r2
 80011fc:	4249      	negs	r1, r1
 80011fe:	468a      	mov	sl, r1
 8001200:	44c3      	add	fp, r8
 8001202:	429f      	cmp	r7, r3
 8001204:	41bf      	sbcs	r7, r7
 8001206:	4580      	cmp	r8, r0
 8001208:	4180      	sbcs	r0, r0
 800120a:	9b03      	ldr	r3, [sp, #12]
 800120c:	44da      	add	sl, fp
 800120e:	4698      	mov	r8, r3
 8001210:	4653      	mov	r3, sl
 8001212:	4240      	negs	r0, r0
 8001214:	427f      	negs	r7, r7
 8001216:	4307      	orrs	r7, r0
 8001218:	0c24      	lsrs	r4, r4, #16
 800121a:	4593      	cmp	fp, r2
 800121c:	4192      	sbcs	r2, r2
 800121e:	458a      	cmp	sl, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	193f      	adds	r7, r7, r4
 8001224:	0ddc      	lsrs	r4, r3, #23
 8001226:	9b04      	ldr	r3, [sp, #16]
 8001228:	0275      	lsls	r5, r6, #9
 800122a:	431d      	orrs	r5, r3
 800122c:	1e68      	subs	r0, r5, #1
 800122e:	4185      	sbcs	r5, r0
 8001230:	4653      	mov	r3, sl
 8001232:	4252      	negs	r2, r2
 8001234:	4249      	negs	r1, r1
 8001236:	430a      	orrs	r2, r1
 8001238:	18bf      	adds	r7, r7, r2
 800123a:	4447      	add	r7, r8
 800123c:	0df6      	lsrs	r6, r6, #23
 800123e:	027f      	lsls	r7, r7, #9
 8001240:	4335      	orrs	r5, r6
 8001242:	025a      	lsls	r2, r3, #9
 8001244:	433c      	orrs	r4, r7
 8001246:	4315      	orrs	r5, r2
 8001248:	01fb      	lsls	r3, r7, #7
 800124a:	d400      	bmi.n	800124e <__aeabi_dmul+0x2fe>
 800124c:	e0c1      	b.n	80013d2 <__aeabi_dmul+0x482>
 800124e:	2101      	movs	r1, #1
 8001250:	086a      	lsrs	r2, r5, #1
 8001252:	400d      	ands	r5, r1
 8001254:	4315      	orrs	r5, r2
 8001256:	07e2      	lsls	r2, r4, #31
 8001258:	4315      	orrs	r5, r2
 800125a:	0864      	lsrs	r4, r4, #1
 800125c:	4926      	ldr	r1, [pc, #152]	; (80012f8 <__aeabi_dmul+0x3a8>)
 800125e:	4461      	add	r1, ip
 8001260:	2900      	cmp	r1, #0
 8001262:	dd56      	ble.n	8001312 <__aeabi_dmul+0x3c2>
 8001264:	076b      	lsls	r3, r5, #29
 8001266:	d009      	beq.n	800127c <__aeabi_dmul+0x32c>
 8001268:	220f      	movs	r2, #15
 800126a:	402a      	ands	r2, r5
 800126c:	2a04      	cmp	r2, #4
 800126e:	d005      	beq.n	800127c <__aeabi_dmul+0x32c>
 8001270:	1d2a      	adds	r2, r5, #4
 8001272:	42aa      	cmp	r2, r5
 8001274:	41ad      	sbcs	r5, r5
 8001276:	426d      	negs	r5, r5
 8001278:	1964      	adds	r4, r4, r5
 800127a:	0015      	movs	r5, r2
 800127c:	01e3      	lsls	r3, r4, #7
 800127e:	d504      	bpl.n	800128a <__aeabi_dmul+0x33a>
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <__aeabi_dmul+0x3ac>)
 8001284:	00c9      	lsls	r1, r1, #3
 8001286:	4014      	ands	r4, r2
 8001288:	4461      	add	r1, ip
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <__aeabi_dmul+0x3b0>)
 800128c:	4291      	cmp	r1, r2
 800128e:	dd00      	ble.n	8001292 <__aeabi_dmul+0x342>
 8001290:	e724      	b.n	80010dc <__aeabi_dmul+0x18c>
 8001292:	0762      	lsls	r2, r4, #29
 8001294:	08ed      	lsrs	r5, r5, #3
 8001296:	0264      	lsls	r4, r4, #9
 8001298:	0549      	lsls	r1, r1, #21
 800129a:	4315      	orrs	r5, r2
 800129c:	0b24      	lsrs	r4, r4, #12
 800129e:	0d4a      	lsrs	r2, r1, #21
 80012a0:	e6c6      	b.n	8001030 <__aeabi_dmul+0xe0>
 80012a2:	9701      	str	r7, [sp, #4]
 80012a4:	e6b8      	b.n	8001018 <__aeabi_dmul+0xc8>
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <__aeabi_dmul+0x398>)
 80012a8:	2003      	movs	r0, #3
 80012aa:	4694      	mov	ip, r2
 80012ac:	4463      	add	r3, ip
 80012ae:	464a      	mov	r2, r9
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2303      	movs	r3, #3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	4691      	mov	r9, r2
 80012b8:	4652      	mov	r2, sl
 80012ba:	e68a      	b.n	8000fd2 <__aeabi_dmul+0x82>
 80012bc:	4649      	mov	r1, r9
 80012be:	2301      	movs	r3, #1
 80012c0:	4319      	orrs	r1, r3
 80012c2:	4689      	mov	r9, r1
 80012c4:	2600      	movs	r6, #0
 80012c6:	2001      	movs	r0, #1
 80012c8:	e683      	b.n	8000fd2 <__aeabi_dmul+0x82>
 80012ca:	220c      	movs	r2, #12
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2303      	movs	r3, #3
 80012d0:	0005      	movs	r5, r0
 80012d2:	4691      	mov	r9, r2
 80012d4:	469b      	mov	fp, r3
 80012d6:	e65e      	b.n	8000f96 <__aeabi_dmul+0x46>
 80012d8:	2304      	movs	r3, #4
 80012da:	4699      	mov	r9, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	2400      	movs	r4, #0
 80012e4:	469b      	mov	fp, r3
 80012e6:	e656      	b.n	8000f96 <__aeabi_dmul+0x46>
 80012e8:	000007ff 	.word	0x000007ff
 80012ec:	fffffc01 	.word	0xfffffc01
 80012f0:	08006d40 	.word	0x08006d40
 80012f4:	fffffc0d 	.word	0xfffffc0d
 80012f8:	000003ff 	.word	0x000003ff
 80012fc:	feffffff 	.word	0xfeffffff
 8001300:	000007fe 	.word	0x000007fe
 8001304:	2300      	movs	r3, #0
 8001306:	2480      	movs	r4, #128	; 0x80
 8001308:	2500      	movs	r5, #0
 800130a:	4a44      	ldr	r2, [pc, #272]	; (800141c <__aeabi_dmul+0x4cc>)
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	0324      	lsls	r4, r4, #12
 8001310:	e68e      	b.n	8001030 <__aeabi_dmul+0xe0>
 8001312:	2001      	movs	r0, #1
 8001314:	1a40      	subs	r0, r0, r1
 8001316:	2838      	cmp	r0, #56	; 0x38
 8001318:	dd00      	ble.n	800131c <__aeabi_dmul+0x3cc>
 800131a:	e686      	b.n	800102a <__aeabi_dmul+0xda>
 800131c:	281f      	cmp	r0, #31
 800131e:	dd5b      	ble.n	80013d8 <__aeabi_dmul+0x488>
 8001320:	221f      	movs	r2, #31
 8001322:	0023      	movs	r3, r4
 8001324:	4252      	negs	r2, r2
 8001326:	1a51      	subs	r1, r2, r1
 8001328:	40cb      	lsrs	r3, r1
 800132a:	0019      	movs	r1, r3
 800132c:	2820      	cmp	r0, #32
 800132e:	d003      	beq.n	8001338 <__aeabi_dmul+0x3e8>
 8001330:	4a3b      	ldr	r2, [pc, #236]	; (8001420 <__aeabi_dmul+0x4d0>)
 8001332:	4462      	add	r2, ip
 8001334:	4094      	lsls	r4, r2
 8001336:	4325      	orrs	r5, r4
 8001338:	1e6a      	subs	r2, r5, #1
 800133a:	4195      	sbcs	r5, r2
 800133c:	002a      	movs	r2, r5
 800133e:	430a      	orrs	r2, r1
 8001340:	2107      	movs	r1, #7
 8001342:	000d      	movs	r5, r1
 8001344:	2400      	movs	r4, #0
 8001346:	4015      	ands	r5, r2
 8001348:	4211      	tst	r1, r2
 800134a:	d05b      	beq.n	8001404 <__aeabi_dmul+0x4b4>
 800134c:	210f      	movs	r1, #15
 800134e:	2400      	movs	r4, #0
 8001350:	4011      	ands	r1, r2
 8001352:	2904      	cmp	r1, #4
 8001354:	d053      	beq.n	80013fe <__aeabi_dmul+0x4ae>
 8001356:	1d11      	adds	r1, r2, #4
 8001358:	4291      	cmp	r1, r2
 800135a:	4192      	sbcs	r2, r2
 800135c:	4252      	negs	r2, r2
 800135e:	18a4      	adds	r4, r4, r2
 8001360:	000a      	movs	r2, r1
 8001362:	0223      	lsls	r3, r4, #8
 8001364:	d54b      	bpl.n	80013fe <__aeabi_dmul+0x4ae>
 8001366:	2201      	movs	r2, #1
 8001368:	2400      	movs	r4, #0
 800136a:	2500      	movs	r5, #0
 800136c:	e660      	b.n	8001030 <__aeabi_dmul+0xe0>
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	421c      	tst	r4, r3
 8001374:	d009      	beq.n	800138a <__aeabi_dmul+0x43a>
 8001376:	421e      	tst	r6, r3
 8001378:	d107      	bne.n	800138a <__aeabi_dmul+0x43a>
 800137a:	4333      	orrs	r3, r6
 800137c:	031c      	lsls	r4, r3, #12
 800137e:	4643      	mov	r3, r8
 8001380:	0015      	movs	r5, r2
 8001382:	0b24      	lsrs	r4, r4, #12
 8001384:	4a25      	ldr	r2, [pc, #148]	; (800141c <__aeabi_dmul+0x4cc>)
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	e652      	b.n	8001030 <__aeabi_dmul+0xe0>
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	0312      	lsls	r2, r2, #12
 800138e:	4314      	orrs	r4, r2
 8001390:	0324      	lsls	r4, r4, #12
 8001392:	4a22      	ldr	r2, [pc, #136]	; (800141c <__aeabi_dmul+0x4cc>)
 8001394:	0b24      	lsrs	r4, r4, #12
 8001396:	9701      	str	r7, [sp, #4]
 8001398:	e64a      	b.n	8001030 <__aeabi_dmul+0xe0>
 800139a:	f000 f8fd 	bl	8001598 <__clzsi2>
 800139e:	0003      	movs	r3, r0
 80013a0:	001a      	movs	r2, r3
 80013a2:	3215      	adds	r2, #21
 80013a4:	3020      	adds	r0, #32
 80013a6:	2a1c      	cmp	r2, #28
 80013a8:	dc00      	bgt.n	80013ac <__aeabi_dmul+0x45c>
 80013aa:	e684      	b.n	80010b6 <__aeabi_dmul+0x166>
 80013ac:	4656      	mov	r6, sl
 80013ae:	3b08      	subs	r3, #8
 80013b0:	2200      	movs	r2, #0
 80013b2:	409e      	lsls	r6, r3
 80013b4:	e689      	b.n	80010ca <__aeabi_dmul+0x17a>
 80013b6:	f000 f8ef 	bl	8001598 <__clzsi2>
 80013ba:	0001      	movs	r1, r0
 80013bc:	0002      	movs	r2, r0
 80013be:	3115      	adds	r1, #21
 80013c0:	3220      	adds	r2, #32
 80013c2:	291c      	cmp	r1, #28
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_dmul+0x478>
 80013c6:	e64e      	b.n	8001066 <__aeabi_dmul+0x116>
 80013c8:	0034      	movs	r4, r6
 80013ca:	3808      	subs	r0, #8
 80013cc:	2500      	movs	r5, #0
 80013ce:	4084      	lsls	r4, r0
 80013d0:	e653      	b.n	800107a <__aeabi_dmul+0x12a>
 80013d2:	9b00      	ldr	r3, [sp, #0]
 80013d4:	469c      	mov	ip, r3
 80013d6:	e741      	b.n	800125c <__aeabi_dmul+0x30c>
 80013d8:	4912      	ldr	r1, [pc, #72]	; (8001424 <__aeabi_dmul+0x4d4>)
 80013da:	0022      	movs	r2, r4
 80013dc:	4461      	add	r1, ip
 80013de:	002e      	movs	r6, r5
 80013e0:	408d      	lsls	r5, r1
 80013e2:	408a      	lsls	r2, r1
 80013e4:	40c6      	lsrs	r6, r0
 80013e6:	1e69      	subs	r1, r5, #1
 80013e8:	418d      	sbcs	r5, r1
 80013ea:	4332      	orrs	r2, r6
 80013ec:	432a      	orrs	r2, r5
 80013ee:	40c4      	lsrs	r4, r0
 80013f0:	0753      	lsls	r3, r2, #29
 80013f2:	d0b6      	beq.n	8001362 <__aeabi_dmul+0x412>
 80013f4:	210f      	movs	r1, #15
 80013f6:	4011      	ands	r1, r2
 80013f8:	2904      	cmp	r1, #4
 80013fa:	d1ac      	bne.n	8001356 <__aeabi_dmul+0x406>
 80013fc:	e7b1      	b.n	8001362 <__aeabi_dmul+0x412>
 80013fe:	0765      	lsls	r5, r4, #29
 8001400:	0264      	lsls	r4, r4, #9
 8001402:	0b24      	lsrs	r4, r4, #12
 8001404:	08d2      	lsrs	r2, r2, #3
 8001406:	4315      	orrs	r5, r2
 8001408:	2200      	movs	r2, #0
 800140a:	e611      	b.n	8001030 <__aeabi_dmul+0xe0>
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	0312      	lsls	r2, r2, #12
 8001410:	4314      	orrs	r4, r2
 8001412:	0324      	lsls	r4, r4, #12
 8001414:	4a01      	ldr	r2, [pc, #4]	; (800141c <__aeabi_dmul+0x4cc>)
 8001416:	0b24      	lsrs	r4, r4, #12
 8001418:	e60a      	b.n	8001030 <__aeabi_dmul+0xe0>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	000007ff 	.word	0x000007ff
 8001420:	0000043e 	.word	0x0000043e
 8001424:	0000041e 	.word	0x0000041e

08001428 <__aeabi_i2d>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	2800      	cmp	r0, #0
 800142c:	d016      	beq.n	800145c <__aeabi_i2d+0x34>
 800142e:	17c3      	asrs	r3, r0, #31
 8001430:	18c5      	adds	r5, r0, r3
 8001432:	405d      	eors	r5, r3
 8001434:	0fc4      	lsrs	r4, r0, #31
 8001436:	0028      	movs	r0, r5
 8001438:	f000 f8ae 	bl	8001598 <__clzsi2>
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <__aeabi_i2d+0x5c>)
 800143e:	1a12      	subs	r2, r2, r0
 8001440:	280a      	cmp	r0, #10
 8001442:	dc16      	bgt.n	8001472 <__aeabi_i2d+0x4a>
 8001444:	0003      	movs	r3, r0
 8001446:	002e      	movs	r6, r5
 8001448:	3315      	adds	r3, #21
 800144a:	409e      	lsls	r6, r3
 800144c:	230b      	movs	r3, #11
 800144e:	1a18      	subs	r0, r3, r0
 8001450:	40c5      	lsrs	r5, r0
 8001452:	0553      	lsls	r3, r2, #21
 8001454:	032d      	lsls	r5, r5, #12
 8001456:	0b2d      	lsrs	r5, r5, #12
 8001458:	0d5b      	lsrs	r3, r3, #21
 800145a:	e003      	b.n	8001464 <__aeabi_i2d+0x3c>
 800145c:	2400      	movs	r4, #0
 800145e:	2300      	movs	r3, #0
 8001460:	2500      	movs	r5, #0
 8001462:	2600      	movs	r6, #0
 8001464:	051b      	lsls	r3, r3, #20
 8001466:	432b      	orrs	r3, r5
 8001468:	07e4      	lsls	r4, r4, #31
 800146a:	4323      	orrs	r3, r4
 800146c:	0030      	movs	r0, r6
 800146e:	0019      	movs	r1, r3
 8001470:	bd70      	pop	{r4, r5, r6, pc}
 8001472:	380b      	subs	r0, #11
 8001474:	4085      	lsls	r5, r0
 8001476:	0553      	lsls	r3, r2, #21
 8001478:	032d      	lsls	r5, r5, #12
 800147a:	2600      	movs	r6, #0
 800147c:	0b2d      	lsrs	r5, r5, #12
 800147e:	0d5b      	lsrs	r3, r3, #21
 8001480:	e7f0      	b.n	8001464 <__aeabi_i2d+0x3c>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	0000041e 	.word	0x0000041e

08001488 <__aeabi_d2f>:
 8001488:	0002      	movs	r2, r0
 800148a:	004b      	lsls	r3, r1, #1
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	0308      	lsls	r0, r1, #12
 8001490:	0d5b      	lsrs	r3, r3, #21
 8001492:	4e3d      	ldr	r6, [pc, #244]	; (8001588 <__aeabi_d2f+0x100>)
 8001494:	0fcc      	lsrs	r4, r1, #31
 8001496:	0a40      	lsrs	r0, r0, #9
 8001498:	0f51      	lsrs	r1, r2, #29
 800149a:	1c5f      	adds	r7, r3, #1
 800149c:	4308      	orrs	r0, r1
 800149e:	00d5      	lsls	r5, r2, #3
 80014a0:	4237      	tst	r7, r6
 80014a2:	d00a      	beq.n	80014ba <__aeabi_d2f+0x32>
 80014a4:	4939      	ldr	r1, [pc, #228]	; (800158c <__aeabi_d2f+0x104>)
 80014a6:	185e      	adds	r6, r3, r1
 80014a8:	2efe      	cmp	r6, #254	; 0xfe
 80014aa:	dd16      	ble.n	80014da <__aeabi_d2f+0x52>
 80014ac:	23ff      	movs	r3, #255	; 0xff
 80014ae:	2100      	movs	r1, #0
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	430b      	orrs	r3, r1
 80014b4:	07e0      	lsls	r0, r4, #31
 80014b6:	4318      	orrs	r0, r3
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <__aeabi_d2f+0x44>
 80014be:	4328      	orrs	r0, r5
 80014c0:	d027      	beq.n	8001512 <__aeabi_d2f+0x8a>
 80014c2:	2105      	movs	r1, #5
 80014c4:	0189      	lsls	r1, r1, #6
 80014c6:	0a49      	lsrs	r1, r1, #9
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e7f1      	b.n	80014b0 <__aeabi_d2f+0x28>
 80014cc:	4305      	orrs	r5, r0
 80014ce:	d0ed      	beq.n	80014ac <__aeabi_d2f+0x24>
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	03c9      	lsls	r1, r1, #15
 80014d4:	23ff      	movs	r3, #255	; 0xff
 80014d6:	4301      	orrs	r1, r0
 80014d8:	e7ea      	b.n	80014b0 <__aeabi_d2f+0x28>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	dd1c      	ble.n	8001518 <__aeabi_d2f+0x90>
 80014de:	0192      	lsls	r2, r2, #6
 80014e0:	0011      	movs	r1, r2
 80014e2:	1e4a      	subs	r2, r1, #1
 80014e4:	4191      	sbcs	r1, r2
 80014e6:	00c0      	lsls	r0, r0, #3
 80014e8:	0f6d      	lsrs	r5, r5, #29
 80014ea:	4301      	orrs	r1, r0
 80014ec:	4329      	orrs	r1, r5
 80014ee:	074b      	lsls	r3, r1, #29
 80014f0:	d048      	beq.n	8001584 <__aeabi_d2f+0xfc>
 80014f2:	230f      	movs	r3, #15
 80014f4:	400b      	ands	r3, r1
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d000      	beq.n	80014fc <__aeabi_d2f+0x74>
 80014fa:	3104      	adds	r1, #4
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	04db      	lsls	r3, r3, #19
 8001500:	400b      	ands	r3, r1
 8001502:	d03f      	beq.n	8001584 <__aeabi_d2f+0xfc>
 8001504:	1c72      	adds	r2, r6, #1
 8001506:	2efe      	cmp	r6, #254	; 0xfe
 8001508:	d0d0      	beq.n	80014ac <__aeabi_d2f+0x24>
 800150a:	0189      	lsls	r1, r1, #6
 800150c:	0a49      	lsrs	r1, r1, #9
 800150e:	b2d3      	uxtb	r3, r2
 8001510:	e7ce      	b.n	80014b0 <__aeabi_d2f+0x28>
 8001512:	2300      	movs	r3, #0
 8001514:	2100      	movs	r1, #0
 8001516:	e7cb      	b.n	80014b0 <__aeabi_d2f+0x28>
 8001518:	0032      	movs	r2, r6
 800151a:	3217      	adds	r2, #23
 800151c:	db22      	blt.n	8001564 <__aeabi_d2f+0xdc>
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	221e      	movs	r2, #30
 8001522:	0409      	lsls	r1, r1, #16
 8001524:	4308      	orrs	r0, r1
 8001526:	1b92      	subs	r2, r2, r6
 8001528:	2a1f      	cmp	r2, #31
 800152a:	dd1d      	ble.n	8001568 <__aeabi_d2f+0xe0>
 800152c:	2102      	movs	r1, #2
 800152e:	4249      	negs	r1, r1
 8001530:	1b8e      	subs	r6, r1, r6
 8001532:	0001      	movs	r1, r0
 8001534:	40f1      	lsrs	r1, r6
 8001536:	000e      	movs	r6, r1
 8001538:	2a20      	cmp	r2, #32
 800153a:	d004      	beq.n	8001546 <__aeabi_d2f+0xbe>
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <__aeabi_d2f+0x108>)
 800153e:	4694      	mov	ip, r2
 8001540:	4463      	add	r3, ip
 8001542:	4098      	lsls	r0, r3
 8001544:	4305      	orrs	r5, r0
 8001546:	0029      	movs	r1, r5
 8001548:	1e4d      	subs	r5, r1, #1
 800154a:	41a9      	sbcs	r1, r5
 800154c:	4331      	orrs	r1, r6
 800154e:	2600      	movs	r6, #0
 8001550:	074b      	lsls	r3, r1, #29
 8001552:	d1ce      	bne.n	80014f2 <__aeabi_d2f+0x6a>
 8001554:	2080      	movs	r0, #128	; 0x80
 8001556:	000b      	movs	r3, r1
 8001558:	04c0      	lsls	r0, r0, #19
 800155a:	2201      	movs	r2, #1
 800155c:	4003      	ands	r3, r0
 800155e:	4201      	tst	r1, r0
 8001560:	d1d3      	bne.n	800150a <__aeabi_d2f+0x82>
 8001562:	e7af      	b.n	80014c4 <__aeabi_d2f+0x3c>
 8001564:	2300      	movs	r3, #0
 8001566:	e7ac      	b.n	80014c2 <__aeabi_d2f+0x3a>
 8001568:	490a      	ldr	r1, [pc, #40]	; (8001594 <__aeabi_d2f+0x10c>)
 800156a:	468c      	mov	ip, r1
 800156c:	0029      	movs	r1, r5
 800156e:	4463      	add	r3, ip
 8001570:	40d1      	lsrs	r1, r2
 8001572:	409d      	lsls	r5, r3
 8001574:	000a      	movs	r2, r1
 8001576:	0029      	movs	r1, r5
 8001578:	4098      	lsls	r0, r3
 800157a:	1e4d      	subs	r5, r1, #1
 800157c:	41a9      	sbcs	r1, r5
 800157e:	4301      	orrs	r1, r0
 8001580:	4311      	orrs	r1, r2
 8001582:	e7e4      	b.n	800154e <__aeabi_d2f+0xc6>
 8001584:	0033      	movs	r3, r6
 8001586:	e79d      	b.n	80014c4 <__aeabi_d2f+0x3c>
 8001588:	000007fe 	.word	0x000007fe
 800158c:	fffffc80 	.word	0xfffffc80
 8001590:	fffffca2 	.word	0xfffffca2
 8001594:	fffffc82 	.word	0xfffffc82

08001598 <__clzsi2>:
 8001598:	211c      	movs	r1, #28
 800159a:	2301      	movs	r3, #1
 800159c:	041b      	lsls	r3, r3, #16
 800159e:	4298      	cmp	r0, r3
 80015a0:	d301      	bcc.n	80015a6 <__clzsi2+0xe>
 80015a2:	0c00      	lsrs	r0, r0, #16
 80015a4:	3910      	subs	r1, #16
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	4298      	cmp	r0, r3
 80015aa:	d301      	bcc.n	80015b0 <__clzsi2+0x18>
 80015ac:	0a00      	lsrs	r0, r0, #8
 80015ae:	3908      	subs	r1, #8
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	4298      	cmp	r0, r3
 80015b4:	d301      	bcc.n	80015ba <__clzsi2+0x22>
 80015b6:	0900      	lsrs	r0, r0, #4
 80015b8:	3904      	subs	r1, #4
 80015ba:	a202      	add	r2, pc, #8	; (adr r2, 80015c4 <__clzsi2+0x2c>)
 80015bc:	5c10      	ldrb	r0, [r2, r0]
 80015be:	1840      	adds	r0, r0, r1
 80015c0:	4770      	bx	lr
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	02020304 	.word	0x02020304
 80015c8:	01010101 	.word	0x01010101
	...

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d6:	b08f      	sub	sp, #60	; 0x3c
 80015d8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015da:	f001 fe3b 	bl	8003254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f9df 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f000 fb49 	bl	8001c78 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015e6:	f000 fa41 	bl	8001a6c <MX_I2C1_Init>
  MX_SPI1_Init();
 80015ea:	f000 fa7f 	bl	8001aec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015ee:	f000 fae3 	bl	8001bb8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015f2:	f000 fb11 	bl	8001c18 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80015f6:	f000 fab7 	bl	8001b68 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  mpuInit();
 80015fa:	f001 f80d 	bl	8002618 <mpuInit>

  gnssInit();
 80015fe:	f001 f94f 	bl	80028a0 <gnssInit>
  latlongstructinstance = getLatLongInMeters();
 8001602:	4cc5      	ldr	r4, [pc, #788]	; (8001918 <main+0x344>)
 8001604:	003b      	movs	r3, r7
 8001606:	0018      	movs	r0, r3
 8001608:	f000 fc60 	bl	8001ecc <getLatLongInMeters>
 800160c:	003a      	movs	r2, r7
 800160e:	0023      	movs	r3, r4
 8001610:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001612:	c313      	stmia	r3!, {r0, r1, r4}
 8001614:	ca03      	ldmia	r2!, {r0, r1}
 8001616:	c303      	stmia	r3!, {r0, r1}
  //offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
  //homeLocked = 1;
  prevlatlongstructinstance = latlongstructinstance;
 8001618:	4bc0      	ldr	r3, [pc, #768]	; (800191c <main+0x348>)
 800161a:	4abf      	ldr	r2, [pc, #764]	; (8001918 <main+0x344>)
 800161c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800161e:	c313      	stmia	r3!, {r0, r1, r4}
 8001620:	ca03      	ldmia	r2!, {r0, r1}
 8001622:	c303      	stmia	r3!, {r0, r1}
  //HAL_Delay(1000);



  gsmInit();											// GSM initializer
 8001624:	f001 f9e6 	bl	80029f4 <gsmInit>
  gsmstruct.phoneNumber = "+35844350xxxx";				// Enter number in this format
 8001628:	4bbd      	ldr	r3, [pc, #756]	; (8001920 <main+0x34c>)
 800162a:	4abe      	ldr	r2, [pc, #760]	; (8001924 <main+0x350>)
 800162c:	601a      	str	r2, [r3, #0]
  gsmstruct.message		= "Sent from Otakaari 5tryreyre";	// Enter message to be send in this format
 800162e:	4bbc      	ldr	r3, [pc, #752]	; (8001920 <main+0x34c>)
 8001630:	4abd      	ldr	r2, [pc, #756]	; (8001928 <main+0x354>)
 8001632:	605a      	str	r2, [r3, #4]
  sendGsmMessage(gsmstruct);
 8001634:	4bba      	ldr	r3, [pc, #744]	; (8001920 <main+0x34c>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	f001 fa9e 	bl	8002b7c <sendGsmMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16);
 8001640:	4bba      	ldr	r3, [pc, #744]	; (800192c <main+0x358>)
 8001642:	0018      	movs	r0, r3
 8001644:	f003 fe32 	bl	80052ac <HAL_TIM_Base_Start>
  while (1)
  {

	  //i2cState = HAL_I2C_GetState(&hi2c1);
	  if(lockedDevice == 1 || counter2 != 0){
 8001648:	4bb9      	ldr	r3, [pc, #740]	; (8001930 <main+0x35c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d004      	beq.n	800165a <main+0x86>
 8001650:	4bb8      	ldr	r3, [pc, #736]	; (8001934 <main+0x360>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d100      	bne.n	800165a <main+0x86>
 8001658:	e0ea      	b.n	8001830 <main+0x25c>
		  i2cState = HAL_I2C_GetState(&hi2c1);
 800165a:	4bb7      	ldr	r3, [pc, #732]	; (8001938 <main+0x364>)
 800165c:	0018      	movs	r0, r3
 800165e:	f002 fc5b 	bl	8003f18 <HAL_I2C_GetState>
 8001662:	0003      	movs	r3, r0
 8001664:	001a      	movs	r2, r3
 8001666:	4bb5      	ldr	r3, [pc, #724]	; (800193c <main+0x368>)
 8001668:	701a      	strb	r2, [r3, #0]
	  //=========================MPU9250
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_L, sizeof(ACCEL_XOUT_L), 10);
 800166a:	4bb5      	ldr	r3, [pc, #724]	; (8001940 <main+0x36c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b299      	uxth	r1, r3
 8001670:	4ab4      	ldr	r2, [pc, #720]	; (8001944 <main+0x370>)
 8001672:	48b1      	ldr	r0, [pc, #708]	; (8001938 <main+0x364>)
 8001674:	230a      	movs	r3, #10
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2301      	movs	r3, #1
 800167a:	f002 fa3d 	bl	8003af8 <HAL_I2C_Master_Transmit>
 800167e:	0003      	movs	r3, r0
 8001680:	001a      	movs	r2, r3
 8001682:	4bb1      	ldr	r3, [pc, #708]	; (8001948 <main+0x374>)
 8001684:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001686:	4bae      	ldr	r3, [pc, #696]	; (8001940 <main+0x36c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b299      	uxth	r1, r3
 800168c:	4aaf      	ldr	r2, [pc, #700]	; (800194c <main+0x378>)
 800168e:	48aa      	ldr	r0, [pc, #680]	; (8001938 <main+0x364>)
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2301      	movs	r3, #1
 8001696:	f002 fb37 	bl	8003d08 <HAL_I2C_Master_Receive>
 800169a:	0003      	movs	r3, r0
 800169c:	001a      	movs	r2, r3
 800169e:	4baa      	ldr	r3, [pc, #680]	; (8001948 <main+0x374>)
 80016a0:	701a      	strb	r2, [r3, #0]
		  finalXAccValue = dataReceiveI2cBuffer;
 80016a2:	4baa      	ldr	r3, [pc, #680]	; (800194c <main+0x378>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	001a      	movs	r2, r3
 80016a8:	4ba9      	ldr	r3, [pc, #676]	; (8001950 <main+0x37c>)
 80016aa:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_H, sizeof(ACCEL_XOUT_H), 10);
 80016ac:	4ba4      	ldr	r3, [pc, #656]	; (8001940 <main+0x36c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b299      	uxth	r1, r3
 80016b2:	4aa8      	ldr	r2, [pc, #672]	; (8001954 <main+0x380>)
 80016b4:	48a0      	ldr	r0, [pc, #640]	; (8001938 <main+0x364>)
 80016b6:	230a      	movs	r3, #10
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	f002 fa1c 	bl	8003af8 <HAL_I2C_Master_Transmit>
 80016c0:	0003      	movs	r3, r0
 80016c2:	001a      	movs	r2, r3
 80016c4:	4ba0      	ldr	r3, [pc, #640]	; (8001948 <main+0x374>)
 80016c6:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80016c8:	4b9d      	ldr	r3, [pc, #628]	; (8001940 <main+0x36c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b299      	uxth	r1, r3
 80016ce:	4a9f      	ldr	r2, [pc, #636]	; (800194c <main+0x378>)
 80016d0:	4899      	ldr	r0, [pc, #612]	; (8001938 <main+0x364>)
 80016d2:	2364      	movs	r3, #100	; 0x64
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	f002 fb16 	bl	8003d08 <HAL_I2C_Master_Receive>
 80016dc:	0003      	movs	r3, r0
 80016de:	001a      	movs	r2, r3
 80016e0:	4b99      	ldr	r3, [pc, #612]	; (8001948 <main+0x374>)
 80016e2:	701a      	strb	r2, [r3, #0]
		  finalXAccValue = finalXAccValue + (dataReceiveI2cBuffer << 8);
 80016e4:	4b99      	ldr	r3, [pc, #612]	; (800194c <main+0x378>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	001a      	movs	r2, r3
 80016ec:	4b98      	ldr	r3, [pc, #608]	; (8001950 <main+0x37c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	18d2      	adds	r2, r2, r3
 80016f2:	4b97      	ldr	r3, [pc, #604]	; (8001950 <main+0x37c>)
 80016f4:	601a      	str	r2, [r3, #0]
		  finalXAccValueWithOffset = finalXAccValue + 40000;
 80016f6:	4b96      	ldr	r3, [pc, #600]	; (8001950 <main+0x37c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4c97      	ldr	r4, [pc, #604]	; (8001958 <main+0x384>)
 80016fc:	191a      	adds	r2, r3, r4
 80016fe:	4b97      	ldr	r3, [pc, #604]	; (800195c <main+0x388>)
 8001700:	601a      	str	r2, [r3, #0]

		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_L, sizeof(ACCEL_YOUT_L), 10);
 8001702:	4b8f      	ldr	r3, [pc, #572]	; (8001940 <main+0x36c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b299      	uxth	r1, r3
 8001708:	4a95      	ldr	r2, [pc, #596]	; (8001960 <main+0x38c>)
 800170a:	488b      	ldr	r0, [pc, #556]	; (8001938 <main+0x364>)
 800170c:	230a      	movs	r3, #10
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	f002 f9f1 	bl	8003af8 <HAL_I2C_Master_Transmit>
 8001716:	0003      	movs	r3, r0
 8001718:	001a      	movs	r2, r3
 800171a:	4b8b      	ldr	r3, [pc, #556]	; (8001948 <main+0x374>)
 800171c:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800171e:	4b88      	ldr	r3, [pc, #544]	; (8001940 <main+0x36c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b299      	uxth	r1, r3
 8001724:	4a89      	ldr	r2, [pc, #548]	; (800194c <main+0x378>)
 8001726:	4884      	ldr	r0, [pc, #528]	; (8001938 <main+0x364>)
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2301      	movs	r3, #1
 800172e:	f002 faeb 	bl	8003d08 <HAL_I2C_Master_Receive>
 8001732:	0003      	movs	r3, r0
 8001734:	001a      	movs	r2, r3
 8001736:	4b84      	ldr	r3, [pc, #528]	; (8001948 <main+0x374>)
 8001738:	701a      	strb	r2, [r3, #0]
		  finalYAccValue = dataReceiveI2cBuffer;
 800173a:	4b84      	ldr	r3, [pc, #528]	; (800194c <main+0x378>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	001a      	movs	r2, r3
 8001740:	4b88      	ldr	r3, [pc, #544]	; (8001964 <main+0x390>)
 8001742:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_H, sizeof(ACCEL_YOUT_H), 10);
 8001744:	4b7e      	ldr	r3, [pc, #504]	; (8001940 <main+0x36c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b299      	uxth	r1, r3
 800174a:	4a87      	ldr	r2, [pc, #540]	; (8001968 <main+0x394>)
 800174c:	487a      	ldr	r0, [pc, #488]	; (8001938 <main+0x364>)
 800174e:	230a      	movs	r3, #10
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	f002 f9d0 	bl	8003af8 <HAL_I2C_Master_Transmit>
 8001758:	0003      	movs	r3, r0
 800175a:	001a      	movs	r2, r3
 800175c:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <main+0x374>)
 800175e:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001760:	4b77      	ldr	r3, [pc, #476]	; (8001940 <main+0x36c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b299      	uxth	r1, r3
 8001766:	4a79      	ldr	r2, [pc, #484]	; (800194c <main+0x378>)
 8001768:	4873      	ldr	r0, [pc, #460]	; (8001938 <main+0x364>)
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	f002 faca 	bl	8003d08 <HAL_I2C_Master_Receive>
 8001774:	0003      	movs	r3, r0
 8001776:	001a      	movs	r2, r3
 8001778:	4b73      	ldr	r3, [pc, #460]	; (8001948 <main+0x374>)
 800177a:	701a      	strb	r2, [r3, #0]
		  finalYAccValue = finalYAccValue + (dataReceiveI2cBuffer << 8);
 800177c:	4b73      	ldr	r3, [pc, #460]	; (800194c <main+0x378>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	001a      	movs	r2, r3
 8001784:	4b77      	ldr	r3, [pc, #476]	; (8001964 <main+0x390>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	18d2      	adds	r2, r2, r3
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <main+0x390>)
 800178c:	601a      	str	r2, [r3, #0]
		  finalYAccValueWithOffset = finalYAccValue + 40000;
 800178e:	4b75      	ldr	r3, [pc, #468]	; (8001964 <main+0x390>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	191a      	adds	r2, r3, r4
 8001794:	4b75      	ldr	r3, [pc, #468]	; (800196c <main+0x398>)
 8001796:	601a      	str	r2, [r3, #0]

		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_L, sizeof(ACCEL_ZOUT_L), 10);
 8001798:	4b69      	ldr	r3, [pc, #420]	; (8001940 <main+0x36c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b299      	uxth	r1, r3
 800179e:	4a74      	ldr	r2, [pc, #464]	; (8001970 <main+0x39c>)
 80017a0:	4865      	ldr	r0, [pc, #404]	; (8001938 <main+0x364>)
 80017a2:	230a      	movs	r3, #10
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2301      	movs	r3, #1
 80017a8:	f002 f9a6 	bl	8003af8 <HAL_I2C_Master_Transmit>
 80017ac:	0003      	movs	r3, r0
 80017ae:	001a      	movs	r2, r3
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <main+0x374>)
 80017b2:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80017b4:	4b62      	ldr	r3, [pc, #392]	; (8001940 <main+0x36c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	4a64      	ldr	r2, [pc, #400]	; (800194c <main+0x378>)
 80017bc:	485e      	ldr	r0, [pc, #376]	; (8001938 <main+0x364>)
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2301      	movs	r3, #1
 80017c4:	f002 faa0 	bl	8003d08 <HAL_I2C_Master_Receive>
 80017c8:	0003      	movs	r3, r0
 80017ca:	001a      	movs	r2, r3
 80017cc:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <main+0x374>)
 80017ce:	701a      	strb	r2, [r3, #0]
		  finalZAccValue = dataReceiveI2cBuffer;
 80017d0:	4b5e      	ldr	r3, [pc, #376]	; (800194c <main+0x378>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	001a      	movs	r2, r3
 80017d6:	4b67      	ldr	r3, [pc, #412]	; (8001974 <main+0x3a0>)
 80017d8:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_H, sizeof(ACCEL_ZOUT_H), 10);
 80017da:	4b59      	ldr	r3, [pc, #356]	; (8001940 <main+0x36c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b299      	uxth	r1, r3
 80017e0:	4a65      	ldr	r2, [pc, #404]	; (8001978 <main+0x3a4>)
 80017e2:	4855      	ldr	r0, [pc, #340]	; (8001938 <main+0x364>)
 80017e4:	230a      	movs	r3, #10
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	f002 f985 	bl	8003af8 <HAL_I2C_Master_Transmit>
 80017ee:	0003      	movs	r3, r0
 80017f0:	001a      	movs	r2, r3
 80017f2:	4b55      	ldr	r3, [pc, #340]	; (8001948 <main+0x374>)
 80017f4:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80017f6:	4b52      	ldr	r3, [pc, #328]	; (8001940 <main+0x36c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b299      	uxth	r1, r3
 80017fc:	4a53      	ldr	r2, [pc, #332]	; (800194c <main+0x378>)
 80017fe:	484e      	ldr	r0, [pc, #312]	; (8001938 <main+0x364>)
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2301      	movs	r3, #1
 8001806:	f002 fa7f 	bl	8003d08 <HAL_I2C_Master_Receive>
 800180a:	0003      	movs	r3, r0
 800180c:	001a      	movs	r2, r3
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <main+0x374>)
 8001810:	701a      	strb	r2, [r3, #0]
		  finalZAccValue = finalZAccValue + (dataReceiveI2cBuffer << 8);
 8001812:	4b4e      	ldr	r3, [pc, #312]	; (800194c <main+0x378>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	001a      	movs	r2, r3
 800181a:	4b56      	ldr	r3, [pc, #344]	; (8001974 <main+0x3a0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	18d2      	adds	r2, r2, r3
 8001820:	4b54      	ldr	r3, [pc, #336]	; (8001974 <main+0x3a0>)
 8001822:	601a      	str	r2, [r3, #0]
		  finalZAccValueWithOffset = finalZAccValue + 88000;
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <main+0x3a0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a54      	ldr	r2, [pc, #336]	; (800197c <main+0x3a8>)
 800182a:	189a      	adds	r2, r3, r2
 800182c:	4b54      	ldr	r3, [pc, #336]	; (8001980 <main+0x3ac>)
 800182e:	601a      	str	r2, [r3, #0]
	  //=========================MPU9250
	  }
	  if(lockedDevice == 1){
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <main+0x35c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d119      	bne.n	800186c <main+0x298>
		  interruptFlag = 0;
 8001838:	4b52      	ldr	r3, [pc, #328]	; (8001984 <main+0x3b0>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
		  //counter = counter +1;
		  if(finalZAccValueWithOffset < 100000){
 800183e:	4b50      	ldr	r3, [pc, #320]	; (8001980 <main+0x3ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a51      	ldr	r2, [pc, #324]	; (8001988 <main+0x3b4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d808      	bhi.n	800185a <main+0x286>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	0059      	lsls	r1, r3, #1
 800184c:	2390      	movs	r3, #144	; 0x90
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	2201      	movs	r2, #1
 8001852:	0018      	movs	r0, r3
 8001854:	f002 f866 	bl	8003924 <HAL_GPIO_WritePin>
 8001858:	e057      	b.n	800190a <main+0x336>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	0059      	lsls	r1, r3, #1
 800185e:	2390      	movs	r3, #144	; 0x90
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	2200      	movs	r2, #0
 8001864:	0018      	movs	r0, r3
 8001866:	f002 f85d 	bl	8003924 <HAL_GPIO_WritePin>
 800186a:	e04e      	b.n	800190a <main+0x336>
		  }
	  }

	  else if(interruptFlag){
 800186c:	4b45      	ldr	r3, [pc, #276]	; (8001984 <main+0x3b0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d040      	beq.n	80018f6 <main+0x322>

		  latlongstructinstance = getLatLongInMeters();
 8001874:	4c28      	ldr	r4, [pc, #160]	; (8001918 <main+0x344>)
 8001876:	003b      	movs	r3, r7
 8001878:	0018      	movs	r0, r3
 800187a:	f000 fb27 	bl	8001ecc <getLatLongInMeters>
 800187e:	003a      	movs	r2, r7
 8001880:	0023      	movs	r3, r4
 8001882:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001884:	c313      	stmia	r3!, {r0, r1, r4}
 8001886:	ca03      	ldmia	r2!, {r0, r1}
 8001888:	c303      	stmia	r3!, {r0, r1}
		  homeLocked = 1;
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <main+0x3b8>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
		  offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <main+0x3b8>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4c3e      	ldr	r4, [pc, #248]	; (8001990 <main+0x3bc>)
 8001896:	46bc      	mov	ip, r7
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <main+0x344>)
 800189a:	9207      	str	r2, [sp, #28]
 800189c:	491f      	ldr	r1, [pc, #124]	; (800191c <main+0x348>)
 800189e:	2208      	movs	r2, #8
 80018a0:	446a      	add	r2, sp
 80018a2:	c961      	ldmia	r1!, {r0, r5, r6}
 80018a4:	c261      	stmia	r2!, {r0, r5, r6}
 80018a6:	c921      	ldmia	r1!, {r0, r5}
 80018a8:	c221      	stmia	r2!, {r0, r5}
 80018aa:	466a      	mov	r2, sp
 80018ac:	0011      	movs	r1, r2
 80018ae:	001a      	movs	r2, r3
 80018b0:	320c      	adds	r2, #12
 80018b2:	ca21      	ldmia	r2!, {r0, r5}
 80018b4:	c121      	stmia	r1!, {r0, r5}
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4660      	mov	r0, ip
 80018be:	f000 fe1f 	bl	8002500 <getOffsetFromHome>
 80018c2:	003a      	movs	r2, r7
 80018c4:	0023      	movs	r3, r4
 80018c6:	ca03      	ldmia	r2!, {r0, r1}
 80018c8:	c303      	stmia	r3!, {r0, r1}
		  if(offsetfromhome.offsetLatInMeters > 150 || offsetfromhome.offsetLongInMeters > 150){
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <main+0x3bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4931      	ldr	r1, [pc, #196]	; (8001994 <main+0x3c0>)
 80018d0:	1c18      	adds	r0, r3, #0
 80018d2:	f7fe fcd3 	bl	800027c <__aeabi_fcmpgt>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d107      	bne.n	80018ea <main+0x316>
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <main+0x3bc>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	492d      	ldr	r1, [pc, #180]	; (8001994 <main+0x3c0>)
 80018e0:	1c18      	adds	r0, r3, #0
 80018e2:	f7fe fccb 	bl	800027c <__aeabi_fcmpgt>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d00f      	beq.n	800190a <main+0x336>
			  //sendGsmMessage(gsmstruct);
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <main+0x3c4>)
 80018ec:	2108      	movs	r1, #8
 80018ee:	0018      	movs	r0, r3
 80018f0:	f002 f835 	bl	800395e <HAL_GPIO_TogglePin>
 80018f4:	e009      	b.n	800190a <main+0x336>
		  }

	  }*/

	  else{
		HAL_SuspendTick();
 80018f6:	f001 fd35 	bl	8003364 <HAL_SuspendTick>

		  HAL_PWR_EnableSleepOnExit ();
 80018fa:	f002 fdc5 	bl	8004488 <HAL_PWR_EnableSleepOnExit>
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80018fe:	2101      	movs	r1, #1
 8001900:	2000      	movs	r0, #0
 8001902:	f002 fda5 	bl	8004450 <HAL_PWR_EnterSLEEPMode>

		  HAL_ResumeTick();
 8001906:	f001 fd3b 	bl	8003380 <HAL_ResumeTick>
	  //latlongstructinstance = getLatLongInMeters();
	  //offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
	  //prevlatlongstructinstance = latlongstructinstance;
	  //=========================GNSS

	  counter = counter +1;
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <main+0x3c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <main+0x3c8>)
 8001912:	601a      	str	r2, [r3, #0]
	  if(lockedDevice == 1 || counter2 != 0){
 8001914:	e698      	b.n	8001648 <main+0x74>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	20000198 	.word	0x20000198
 800191c:	200002dc 	.word	0x200002dc
 8001920:	20000400 	.word	0x20000400
 8001924:	08006c18 	.word	0x08006c18
 8001928:	08006c28 	.word	0x08006c28
 800192c:	20000410 	.word	0x20000410
 8001930:	200000d4 	.word	0x200000d4
 8001934:	200000b0 	.word	0x200000b0
 8001938:	200001bc 	.word	0x200001bc
 800193c:	20000458 	.word	0x20000458
 8001940:	200000cc 	.word	0x200000cc
 8001944:	200000cd 	.word	0x200000cd
 8001948:	200001b8 	.word	0x200001b8
 800194c:	200000d5 	.word	0x200000d5
 8001950:	200000b4 	.word	0x200000b4
 8001954:	200000ce 	.word	0x200000ce
 8001958:	00009c40 	.word	0x00009c40
 800195c:	200000b8 	.word	0x200000b8
 8001960:	200000cf 	.word	0x200000cf
 8001964:	200000bc 	.word	0x200000bc
 8001968:	200000d0 	.word	0x200000d0
 800196c:	200000c0 	.word	0x200000c0
 8001970:	200000d1 	.word	0x200000d1
 8001974:	200000c4 	.word	0x200000c4
 8001978:	200000d2 	.word	0x200000d2
 800197c:	000157c0 	.word	0x000157c0
 8001980:	200000c8 	.word	0x200000c8
 8001984:	200000d3 	.word	0x200000d3
 8001988:	0001869f 	.word	0x0001869f
 800198c:	20000194 	.word	0x20000194
 8001990:	20000364 	.word	0x20000364
 8001994:	43160000 	.word	0x43160000
 8001998:	48000400 	.word	0x48000400
 800199c:	200000ac 	.word	0x200000ac

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b099      	sub	sp, #100	; 0x64
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	242c      	movs	r4, #44	; 0x2c
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	0018      	movs	r0, r3
 80019ac:	2334      	movs	r3, #52	; 0x34
 80019ae:	001a      	movs	r2, r3
 80019b0:	2100      	movs	r1, #0
 80019b2:	f005 f86d 	bl	8006a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b6:	231c      	movs	r3, #28
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	0018      	movs	r0, r3
 80019bc:	2310      	movs	r3, #16
 80019be:	001a      	movs	r2, r3
 80019c0:	2100      	movs	r1, #0
 80019c2:	f005 f865 	bl	8006a90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	0018      	movs	r0, r3
 80019ca:	2318      	movs	r3, #24
 80019cc:	001a      	movs	r2, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	f005 f85e 	bl	8006a90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d4:	0021      	movs	r1, r4
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2201      	movs	r2, #1
 80019e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2210      	movs	r2, #16
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2202      	movs	r2, #2
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0212      	lsls	r2, r2, #8
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	0352      	lsls	r2, r2, #13
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	0018      	movs	r0, r3
 8001a08:	f002 fd5a 	bl	80044c0 <HAL_RCC_OscConfig>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a10:	f001 fa38 	bl	8002e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	211c      	movs	r1, #28
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2202      	movs	r2, #2
 8001a20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2101      	movs	r1, #1
 8001a32:	0018      	movs	r0, r3
 8001a34:	f003 f8ca 	bl	8004bcc <HAL_RCC_ClockConfig>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001a3c:	f001 fa22 	bl	8002e84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2221      	movs	r2, #33	; 0x21
 8001a44:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	0018      	movs	r0, r3
 8001a56:	f003 fa33 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a5e:	f001 fa11 	bl	8002e84 <Error_Handler>
  }
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b019      	add	sp, #100	; 0x64
 8001a68:	bd90      	pop	{r4, r7, pc}
	...

08001a6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <MX_I2C1_Init+0x78>)
 8001a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <MX_I2C1_Init+0x7c>)
 8001a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f001 ff8f 	bl	80039cc <HAL_I2C_Init>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ab2:	f001 f9e7 	bl	8002e84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	0018      	movs	r0, r3
 8001abc:	f002 fc30 	bl	8004320 <HAL_I2CEx_ConfigAnalogFilter>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ac4:	f001 f9de 	bl	8002e84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <MX_I2C1_Init+0x74>)
 8001aca:	2100      	movs	r1, #0
 8001acc:	0018      	movs	r0, r3
 8001ace:	f002 fc73 	bl	80043b8 <HAL_I2CEx_ConfigDigitalFilter>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f001 f9d5 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200001bc 	.word	0x200001bc
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	2000090e 	.word	0x2000090e

08001aec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <MX_SPI1_Init+0x78>)
 8001af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001af8:	2282      	movs	r2, #130	; 0x82
 8001afa:	0052      	lsls	r2, r2, #1
 8001afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b06:	22e0      	movs	r2, #224	; 0xe0
 8001b08:	00d2      	lsls	r2, r2, #3
 8001b0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b22:	2210      	movs	r2, #16
 8001b24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b46:	2208      	movs	r2, #8
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <MX_SPI1_Init+0x74>)
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f003 faa5 	bl	800509c <HAL_SPI_Init>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d001      	beq.n	8001b5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b56:	f001 f995 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200002fc 	.word	0x200002fc
 8001b64:	40013000 	.word	0x40013000

08001b68 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <MX_TIM16_Init+0x48>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b74:	224f      	movs	r2, #79	; 0x4f
 8001b76:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b80:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <MX_TIM16_Init+0x4c>)
 8001b82:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <MX_TIM16_Init+0x44>)
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f003 fb37 	bl	800520c <HAL_TIM_Base_Init>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001ba2:	f001 f96f 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000410 	.word	0x20000410
 8001bb0:	40014400 	.word	0x40014400
 8001bb4:	0000ffff 	.word	0x0000ffff

08001bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <MX_USART1_UART_Init+0x5c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bc4:	2296      	movs	r2, #150	; 0x96
 8001bc6:	0192      	lsls	r2, r2, #6
 8001bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f003 fc0f 	bl	8005420 <HAL_UART_Init>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c06:	f001 f93d 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000230 	.word	0x20000230
 8001c14:	40013800 	.word	0x40013800

08001c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c1e:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <MX_USART2_UART_Init+0x5c>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c24:	22e1      	movs	r2, #225	; 0xe1
 8001c26:	0252      	lsls	r2, r2, #9
 8001c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <MX_USART2_UART_Init+0x58>)
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f003 fbdf 	bl	8005420 <HAL_UART_Init>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c66:	f001 f90d 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000370 	.word	0x20000370
 8001c74:	40004400 	.word	0x40004400

08001c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	240c      	movs	r4, #12
 8001c80:	193b      	adds	r3, r7, r4
 8001c82:	0018      	movs	r0, r3
 8001c84:	2314      	movs	r3, #20
 8001c86:	001a      	movs	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f004 ff01 	bl	8006a90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <MX_GPIO_Init+0xf4>)
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <MX_GPIO_Init+0xf4>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0289      	lsls	r1, r1, #10
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <MX_GPIO_Init+0xf4>)
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <MX_GPIO_Init+0xf4>)
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <MX_GPIO_Init+0xf4>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	02c9      	lsls	r1, r1, #11
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <MX_GPIO_Init+0xf4>)
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	02db      	lsls	r3, r3, #11
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	33ff      	adds	r3, #255	; 0xff
 8001cca:	0019      	movs	r1, r3
 8001ccc:	2390      	movs	r3, #144	; 0x90
 8001cce:	05db      	lsls	r3, r3, #23
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f001 fe26 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <MX_GPIO_Init+0xf8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2108      	movs	r1, #8
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f001 fe20 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001ce4:	193b      	adds	r3, r7, r4
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	32ff      	adds	r2, #255	; 0xff
 8001cea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	2201      	movs	r2, #1
 8001cf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	193a      	adds	r2, r7, r4
 8001d00:	2390      	movs	r3, #144	; 0x90
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	0011      	movs	r1, r2
 8001d06:	0018      	movs	r0, r3
 8001d08:	f001 fca4 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	2210      	movs	r2, #16
 8001d10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	2288      	movs	r2, #136	; 0x88
 8001d16:	0352      	lsls	r2, r2, #13
 8001d18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	193a      	adds	r2, r7, r4
 8001d22:	2390      	movs	r3, #144	; 0x90
 8001d24:	05db      	lsls	r3, r3, #23
 8001d26:	0011      	movs	r1, r2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f001 fc93 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d2e:	0021      	movs	r1, r4
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	2208      	movs	r2, #8
 8001d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2201      	movs	r2, #1
 8001d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <MX_GPIO_Init+0xf8>)
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	0010      	movs	r0, r2
 8001d50:	f001 fc80 	bl	8003654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	2007      	movs	r0, #7
 8001d5a:	f001 fbcb 	bl	80034f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001d5e:	2007      	movs	r0, #7
 8001d60:	f001 fbdd 	bl	800351e <HAL_NVIC_EnableIRQ>

}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b009      	add	sp, #36	; 0x24
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000400 	.word	0x48000400

08001d74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_4 && lockedDevice == 0) // If The INT Source Is EXTI Line4 (A4 Pin)
 8001d80:	1dbb      	adds	r3, r7, #6
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d118      	bne.n	8001dba <HAL_GPIO_EXTI_Callback+0x46>
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_GPIO_EXTI_Callback+0x50>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d114      	bne.n	8001dba <HAL_GPIO_EXTI_Callback+0x46>
    	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Toggle The ONBOARD LED
    	//timerVal = __HAL_TIM_GET_COUNTER(&htim16);
    	//counter2++;
    	//HAL_PWR_DisableSleepOnExit ();
    	//uint8_t INT_ENABLE[2] 			= {0x38, 0x00};
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	0059      	lsls	r1, r3, #1
 8001d94:	2390      	movs	r3, #144	; 0x90
 8001d96:	05db      	lsls	r3, r3, #23
 8001d98:	2201      	movs	r2, #1
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f001 fdc2 	bl	8003924 <HAL_GPIO_WritePin>
    	interruptFlag = 1;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	0059      	lsls	r1, r3, #1
 8001daa:	2390      	movs	r3, #144	; 0x90
 8001dac:	05db      	lsls	r3, r3, #23
 8001dae:	2200      	movs	r2, #0
 8001db0:	0018      	movs	r0, r3
 8001db2:	f001 fdb7 	bl	8003924 <HAL_GPIO_WritePin>
    	HAL_PWR_DisableSleepOnExit ();
 8001db6:	f002 fb75 	bl	80044a4 <HAL_PWR_DisableSleepOnExit>
    }

}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	200000d4 	.word	0x200000d4
 8001dc8:	200000d3 	.word	0x200000d3

08001dcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dce:	b08d      	sub	sp, #52	; 0x34
 8001dd0:	af08      	add	r7, sp, #32
 8001dd2:	60f8      	str	r0, [r7, #12]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// ONBOARD LED
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
	 /*HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	  HAL_Delay(500);*/
	  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 8001dd4:	4924      	ldr	r1, [pc, #144]	; (8001e68 <HAL_UART_RxCpltCallback+0x9c>)
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_UART_RxCpltCallback+0xa0>)
 8001dd8:	220e      	movs	r2, #14
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f003 fd0e 	bl	80057fc <HAL_UART_Receive_IT>
 8001de0:	0003      	movs	r3, r0
 8001de2:	001a      	movs	r2, r3
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_UART_RxCpltCallback+0xa4>)
 8001de6:	701a      	strb	r2, [r3, #0]
	  if(checkKey(receiveUARTData, UARTDataKey) == 1){
 8001de8:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <HAL_UART_RxCpltCallback+0xa8>)
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_UART_RxCpltCallback+0x9c>)
 8001dec:	0011      	movs	r1, r2
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f84c 	bl	8001e8c <checkKey>
 8001df4:	0003      	movs	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d132      	bne.n	8001e60 <HAL_UART_RxCpltCallback+0x94>
		  if(!lockedDevice){
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_UART_RxCpltCallback+0xac>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10b      	bne.n	8001e1a <HAL_UART_RxCpltCallback+0x4e>
			  lockedDevice = 1;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_UART_RxCpltCallback+0xac>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
			  counter2 = 0;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_UART_RxCpltCallback+0xb0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
			  HAL_PWR_DisableSleepOnExit ();
 8001e0e:	f002 fb49 	bl	80044a4 <HAL_PWR_DisableSleepOnExit>
			  homeLocked = 0;
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_UART_RxCpltCallback+0xb4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
			  prevlatlongstructinstance = latlongstructinstance;
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		  }

	  }
}
 8001e18:	e022      	b.n	8001e60 <HAL_UART_RxCpltCallback+0x94>
			  lockedDevice = 0;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_UART_RxCpltCallback+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
			  homeLocked = 1;
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_UART_RxCpltCallback+0xb4>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
			  getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_UART_RxCpltCallback+0xb4>)
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	0038      	movs	r0, r7
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_UART_RxCpltCallback+0xb8>)
 8001e2e:	9207      	str	r2, [sp, #28]
 8001e30:	4915      	ldr	r1, [pc, #84]	; (8001e88 <HAL_UART_RxCpltCallback+0xbc>)
 8001e32:	2208      	movs	r2, #8
 8001e34:	446a      	add	r2, sp
 8001e36:	c970      	ldmia	r1!, {r4, r5, r6}
 8001e38:	c270      	stmia	r2!, {r4, r5, r6}
 8001e3a:	c930      	ldmia	r1!, {r4, r5}
 8001e3c:	c230      	stmia	r2!, {r4, r5}
 8001e3e:	466a      	mov	r2, sp
 8001e40:	0011      	movs	r1, r2
 8001e42:	001a      	movs	r2, r3
 8001e44:	320c      	adds	r2, #12
 8001e46:	ca30      	ldmia	r2!, {r4, r5}
 8001e48:	c130      	stmia	r1!, {r4, r5}
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f000 fb56 	bl	8002500 <getOffsetFromHome>
			  prevlatlongstructinstance = latlongstructinstance;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_UART_RxCpltCallback+0xbc>)
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_UART_RxCpltCallback+0xb8>)
 8001e58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e5a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e5c:	ca03      	ldmia	r2!, {r0, r1}
 8001e5e:	c303      	stmia	r3!, {r0, r1}
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b005      	add	sp, #20
 8001e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e68:	200000d8 	.word	0x200000d8
 8001e6c:	20000230 	.word	0x20000230
 8001e70:	20000208 	.word	0x20000208
 8001e74:	20000000 	.word	0x20000000
 8001e78:	200000d4 	.word	0x200000d4
 8001e7c:	200000b0 	.word	0x200000b0
 8001e80:	20000194 	.word	0x20000194
 8001e84:	20000198 	.word	0x20000198
 8001e88:	200002dc 	.word	0x200002dc

08001e8c <checkKey>:

int checkKey(uint8_t arr1[],  uint8_t arr2[])
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < 30; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e00e      	b.n	8001eba <checkKey+0x2e>
	{
		if(arr1[i] != arr2[i])
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	18d3      	adds	r3, r2, r3
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	18cb      	adds	r3, r1, r3
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <checkKey+0x28>
		{
			return 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e006      	b.n	8001ec2 <checkKey+0x36>
	for(i = 0; i < 30; i++)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b1d      	cmp	r3, #29
 8001ebe:	dded      	ble.n	8001e9c <checkKey+0x10>
		}
	}
	return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <getLatLongInMeters>:
	}
	else{
		return 0;
	}
}
struct LatLongStruct getLatLongInMeters(void){
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b096      	sub	sp, #88	; 0x58
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	enterToFunction = 1; // TODO delete
 8001ed4:	4bd9      	ldr	r3, [pc, #868]	; (800223c <getLatLongInMeters+0x370>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
	struct LatLongStruct latlongstruct = {0};	// Stores LatLong metric values
 8001eda:	2314      	movs	r3, #20
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	0018      	movs	r0, r3
 8001ee0:	2314      	movs	r3, #20
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f004 fdd3 	bl	8006a90 <memset>
	HAL_StatusTypeDef uart2Status;				// Status of uart2
	uint8_t AT_CGNSINF[] = "AT+CGNSINF\r";		// Gets data from GNSS
 8001eea:	2108      	movs	r1, #8
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	4ad4      	ldr	r2, [pc, #848]	; (8002240 <getLatLongInMeters+0x374>)
 8001ef0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ef2:	c331      	stmia	r3!, {r0, r4, r5}

    uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSINF, sizeof(AT_CGNSINF), 1000);
 8001ef4:	252b      	movs	r5, #43	; 0x2b
 8001ef6:	197c      	adds	r4, r7, r5
 8001ef8:	23fa      	movs	r3, #250	; 0xfa
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	1879      	adds	r1, r7, r1
 8001efe:	48d1      	ldr	r0, [pc, #836]	; (8002244 <getLatLongInMeters+0x378>)
 8001f00:	220c      	movs	r2, #12
 8001f02:	f003 fae1 	bl	80054c8 <HAL_UART_Transmit>
 8001f06:	0003      	movs	r3, r0
 8001f08:	7023      	strb	r3, [r4, #0]
    uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8001f0a:	197c      	adds	r4, r7, r5
 8001f0c:	23fa      	movs	r3, #250	; 0xfa
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	49cd      	ldr	r1, [pc, #820]	; (8002248 <getLatLongInMeters+0x37c>)
 8001f12:	48cc      	ldr	r0, [pc, #816]	; (8002244 <getLatLongInMeters+0x378>)
 8001f14:	2296      	movs	r2, #150	; 0x96
 8001f16:	f003 fb81 	bl	800561c <HAL_UART_Receive>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8001f1e:	2064      	movs	r0, #100	; 0x64
 8001f20:	f001 f9fc 	bl	800331c <HAL_Delay>

	//dummyBuffer[0]	= "1,1,20150327014838.000,31.221783,60.123456,24.123456,0.28,0.0,1,,1.9,2.2,1.0,,8,4,,,42,,";

	for(int i = 0; i < sizeof(receiveUART2Data); i++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	657b      	str	r3, [r7, #84]	; 0x54
 8001f28:	e097      	b.n	800205a <getLatLongInMeters+0x18e>
		if(receiveUART2Data[i] == ','){
 8001f2a:	4ac7      	ldr	r2, [pc, #796]	; (8002248 <getLatLongInMeters+0x37c>)
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2e:	18d3      	adds	r3, r2, r3
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b2c      	cmp	r3, #44	; 0x2c
 8001f34:	d107      	bne.n	8001f46 <getLatLongInMeters+0x7a>
			commaElement = i;
 8001f36:	4bc5      	ldr	r3, [pc, #788]	; (800224c <getLatLongInMeters+0x380>)
 8001f38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f3a:	601a      	str	r2, [r3, #0]
			counterGNSS++;
 8001f3c:	4bc4      	ldr	r3, [pc, #784]	; (8002250 <getLatLongInMeters+0x384>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4bc3      	ldr	r3, [pc, #780]	; (8002250 <getLatLongInMeters+0x384>)
 8001f44:	601a      	str	r2, [r3, #0]
		}
		if(counterGNSS == 1){
 8001f46:	4bc2      	ldr	r3, [pc, #776]	; (8002250 <getLatLongInMeters+0x384>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d114      	bne.n	8001f78 <getLatLongInMeters+0xac>
			gnssFixElement = i;
 8001f4e:	4bc1      	ldr	r3, [pc, #772]	; (8002254 <getLatLongInMeters+0x388>)
 8001f50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f52:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[i] == '1'){
 8001f54:	4abc      	ldr	r2, [pc, #752]	; (8002248 <getLatLongInMeters+0x37c>)
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	18d3      	adds	r3, r2, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b31      	cmp	r3, #49	; 0x31
 8001f5e:	d102      	bne.n	8001f66 <getLatLongInMeters+0x9a>
				gnssFixStatus = 1;
 8001f60:	4bbd      	ldr	r3, [pc, #756]	; (8002258 <getLatLongInMeters+0x38c>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
			}
			if(receiveUART2Data[i] == '0'){
 8001f66:	4ab8      	ldr	r2, [pc, #736]	; (8002248 <getLatLongInMeters+0x37c>)
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	18d3      	adds	r3, r2, r3
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b30      	cmp	r3, #48	; 0x30
 8001f70:	d102      	bne.n	8001f78 <getLatLongInMeters+0xac>
				gnssFixStatus = 0;
 8001f72:	4bb9      	ldr	r3, [pc, #740]	; (8002258 <getLatLongInMeters+0x38c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
			}
		}
		if(counterGNSS == 2){
 8001f78:	4bb5      	ldr	r3, [pc, #724]	; (8002250 <getLatLongInMeters+0x384>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d12e      	bne.n	8001fde <getLatLongInMeters+0x112>
			latStart = i+1;
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	4bb5      	ldr	r3, [pc, #724]	; (800225c <getLatLongInMeters+0x390>)
 8001f86:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[latStart+1] == '-'){latNegDeg = 1;}
 8001f88:	4bb4      	ldr	r3, [pc, #720]	; (800225c <getLatLongInMeters+0x390>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4aae      	ldr	r2, [pc, #696]	; (8002248 <getLatLongInMeters+0x37c>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	2b2d      	cmp	r3, #45	; 0x2d
 8001f94:	d103      	bne.n	8001f9e <getLatLongInMeters+0xd2>
 8001f96:	4bb2      	ldr	r3, [pc, #712]	; (8002260 <getLatLongInMeters+0x394>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e002      	b.n	8001fa4 <getLatLongInMeters+0xd8>
			else{latNegDeg = 0;}
 8001f9e:	4bb0      	ldr	r3, [pc, #704]	; (8002260 <getLatLongInMeters+0x394>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
			for(int j = latStart; j < latStart+6; j++){
 8001fa4:	4bad      	ldr	r3, [pc, #692]	; (800225c <getLatLongInMeters+0x390>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8001faa:	e012      	b.n	8001fd2 <getLatLongInMeters+0x106>
				if(receiveUART2Data[j] == '.'){latDegSize = j-latStart-1-latNegDeg;}
 8001fac:	4aa6      	ldr	r2, [pc, #664]	; (8002248 <getLatLongInMeters+0x37c>)
 8001fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb0:	18d3      	adds	r3, r2, r3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fb6:	d109      	bne.n	8001fcc <getLatLongInMeters+0x100>
 8001fb8:	4ba8      	ldr	r3, [pc, #672]	; (800225c <getLatLongInMeters+0x390>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	1e5a      	subs	r2, r3, #1
 8001fc2:	4ba7      	ldr	r3, [pc, #668]	; (8002260 <getLatLongInMeters+0x394>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	1ad2      	subs	r2, r2, r3
 8001fc8:	4ba6      	ldr	r3, [pc, #664]	; (8002264 <getLatLongInMeters+0x398>)
 8001fca:	601a      	str	r2, [r3, #0]
			for(int j = latStart; j < latStart+6; j++){
 8001fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fce:	3301      	adds	r3, #1
 8001fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8001fd2:	4ba2      	ldr	r3, [pc, #648]	; (800225c <getLatLongInMeters+0x390>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3305      	adds	r3, #5
 8001fd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dde6      	ble.n	8001fac <getLatLongInMeters+0xe0>
			}
		}
		if(counterGNSS == 3){
 8001fde:	4b9c      	ldr	r3, [pc, #624]	; (8002250 <getLatLongInMeters+0x384>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d12e      	bne.n	8002044 <getLatLongInMeters+0x178>
			latEndLongStart = i+1;
 8001fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	4b9f      	ldr	r3, [pc, #636]	; (8002268 <getLatLongInMeters+0x39c>)
 8001fec:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[latEndLongStart+1] == '-'){longNegDeg = 1;}
 8001fee:	4b9e      	ldr	r3, [pc, #632]	; (8002268 <getLatLongInMeters+0x39c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a94      	ldr	r2, [pc, #592]	; (8002248 <getLatLongInMeters+0x37c>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8001ffa:	d103      	bne.n	8002004 <getLatLongInMeters+0x138>
 8001ffc:	4b9b      	ldr	r3, [pc, #620]	; (800226c <getLatLongInMeters+0x3a0>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e002      	b.n	800200a <getLatLongInMeters+0x13e>
			else{longNegDeg = 0;}
 8002004:	4b99      	ldr	r3, [pc, #612]	; (800226c <getLatLongInMeters+0x3a0>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
			for(int j = latEndLongStart; j < latEndLongStart+6; j++){
 800200a:	4b97      	ldr	r3, [pc, #604]	; (8002268 <getLatLongInMeters+0x39c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002010:	e012      	b.n	8002038 <getLatLongInMeters+0x16c>
				if(receiveUART2Data[j] == '.'){longDegSize = j-latEndLongStart-1-longNegDeg;}
 8002012:	4a8d      	ldr	r2, [pc, #564]	; (8002248 <getLatLongInMeters+0x37c>)
 8002014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002016:	18d3      	adds	r3, r2, r3
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b2e      	cmp	r3, #46	; 0x2e
 800201c:	d109      	bne.n	8002032 <getLatLongInMeters+0x166>
 800201e:	4b92      	ldr	r3, [pc, #584]	; (8002268 <getLatLongInMeters+0x39c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	4b90      	ldr	r3, [pc, #576]	; (800226c <getLatLongInMeters+0x3a0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	1ad2      	subs	r2, r2, r3
 800202e:	4b90      	ldr	r3, [pc, #576]	; (8002270 <getLatLongInMeters+0x3a4>)
 8002030:	601a      	str	r2, [r3, #0]
			for(int j = latEndLongStart; j < latEndLongStart+6; j++){
 8002032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002034:	3301      	adds	r3, #1
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002038:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <getLatLongInMeters+0x39c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3305      	adds	r3, #5
 800203e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002040:	429a      	cmp	r2, r3
 8002042:	dde6      	ble.n	8002012 <getLatLongInMeters+0x146>
			}
		}
		if(counterGNSS == 6){
 8002044:	4b82      	ldr	r3, [pc, #520]	; (8002250 <getLatLongInMeters+0x384>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b06      	cmp	r3, #6
 800204a:	d103      	bne.n	8002054 <getLatLongInMeters+0x188>
			longEnd = i;
 800204c:	4b89      	ldr	r3, [pc, #548]	; (8002274 <getLatLongInMeters+0x3a8>)
 800204e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002050:	601a      	str	r2, [r3, #0]
			break;
 8002052:	e006      	b.n	8002062 <getLatLongInMeters+0x196>
	for(int i = 0; i < sizeof(receiveUART2Data); i++){
 8002054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002056:	3301      	adds	r3, #1
 8002058:	657b      	str	r3, [r7, #84]	; 0x54
 800205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205c:	2b95      	cmp	r3, #149	; 0x95
 800205e:	d800      	bhi.n	8002062 <getLatLongInMeters+0x196>
 8002060:	e763      	b.n	8001f2a <getLatLongInMeters+0x5e>
		}
	}
	counterGNSS = 0;
 8002062:	4b7b      	ldr	r3, [pc, #492]	; (8002250 <getLatLongInMeters+0x384>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8002068:	4b83      	ldr	r3, [pc, #524]	; (8002278 <getLatLongInMeters+0x3ac>)
 800206a:	2203      	movs	r2, #3
 800206c:	2130      	movs	r1, #48	; 0x30
 800206e:	0018      	movs	r0, r3
 8002070:	f004 fd0e 	bl	8006a90 <memset>
	for(int i = 0; i < latDegSize; i++){degMinSecBuffer[i+3-latDegSize] = receiveUART2Data[latStart+i+1+latNegDeg];}
 8002074:	2300      	movs	r3, #0
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48
 8002078:	e013      	b.n	80020a2 <getLatLongInMeters+0x1d6>
 800207a:	4b78      	ldr	r3, [pc, #480]	; (800225c <getLatLongInMeters+0x390>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4b76      	ldr	r3, [pc, #472]	; (8002260 <getLatLongInMeters+0x394>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	18d2      	adds	r2, r2, r3
 800208a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208c:	1cd9      	adds	r1, r3, #3
 800208e:	4b75      	ldr	r3, [pc, #468]	; (8002264 <getLatLongInMeters+0x398>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	1acb      	subs	r3, r1, r3
 8002094:	496c      	ldr	r1, [pc, #432]	; (8002248 <getLatLongInMeters+0x37c>)
 8002096:	5c89      	ldrb	r1, [r1, r2]
 8002098:	4a77      	ldr	r2, [pc, #476]	; (8002278 <getLatLongInMeters+0x3ac>)
 800209a:	54d1      	strb	r1, [r2, r3]
 800209c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209e:	3301      	adds	r3, #1
 80020a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a2:	4b70      	ldr	r3, [pc, #448]	; (8002264 <getLatLongInMeters+0x398>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbe6      	blt.n	800207a <getLatLongInMeters+0x1ae>
	latDeg = atoi(degMinSecBuffer);
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <getLatLongInMeters+0x3ac>)
 80020ae:	0018      	movs	r0, r3
 80020b0:	f004 fcbe 	bl	8006a30 <atoi>
 80020b4:	0002      	movs	r2, r0
 80020b6:	4b71      	ldr	r3, [pc, #452]	; (800227c <getLatLongInMeters+0x3b0>)
 80020b8:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 80020ba:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <getLatLongInMeters+0x3ac>)
 80020bc:	2203      	movs	r2, #3
 80020be:	2130      	movs	r1, #48	; 0x30
 80020c0:	0018      	movs	r0, r3
 80020c2:	f004 fce5 	bl	8006a90 <memset>
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+1+latNegDeg];}
 80020c6:	2301      	movs	r3, #1
 80020c8:	647b      	str	r3, [r7, #68]	; 0x44
 80020ca:	e014      	b.n	80020f6 <getLatLongInMeters+0x22a>
 80020cc:	4b63      	ldr	r3, [pc, #396]	; (800225c <getLatLongInMeters+0x390>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	18d2      	adds	r2, r2, r3
 80020d4:	4b63      	ldr	r3, [pc, #396]	; (8002264 <getLatLongInMeters+0x398>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	18d3      	adds	r3, r2, r3
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	4b60      	ldr	r3, [pc, #384]	; (8002260 <getLatLongInMeters+0x394>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	4a59      	ldr	r2, [pc, #356]	; (8002248 <getLatLongInMeters+0x37c>)
 80020e4:	5cd1      	ldrb	r1, [r2, r3]
 80020e6:	4a64      	ldr	r2, [pc, #400]	; (8002278 <getLatLongInMeters+0x3ac>)
 80020e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ea:	18d3      	adds	r3, r2, r3
 80020ec:	1c0a      	adds	r2, r1, #0
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f2:	3301      	adds	r3, #1
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
 80020f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	dde7      	ble.n	80020cc <getLatLongInMeters+0x200>
	latMin = atoi(degMinSecBuffer);
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <getLatLongInMeters+0x3ac>)
 80020fe:	0018      	movs	r0, r3
 8002100:	f004 fc96 	bl	8006a30 <atoi>
 8002104:	0002      	movs	r2, r0
 8002106:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <getLatLongInMeters+0x3b4>)
 8002108:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+3+latNegDeg];}
 800210a:	2301      	movs	r3, #1
 800210c:	643b      	str	r3, [r7, #64]	; 0x40
 800210e:	e014      	b.n	800213a <getLatLongInMeters+0x26e>
 8002110:	4b52      	ldr	r3, [pc, #328]	; (800225c <getLatLongInMeters+0x390>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002116:	18d2      	adds	r2, r2, r3
 8002118:	4b52      	ldr	r3, [pc, #328]	; (8002264 <getLatLongInMeters+0x398>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	1cda      	adds	r2, r3, #3
 8002120:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <getLatLongInMeters+0x394>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	4a48      	ldr	r2, [pc, #288]	; (8002248 <getLatLongInMeters+0x37c>)
 8002128:	5cd1      	ldrb	r1, [r2, r3]
 800212a:	4a53      	ldr	r2, [pc, #332]	; (8002278 <getLatLongInMeters+0x3ac>)
 800212c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212e:	18d3      	adds	r3, r2, r3
 8002130:	1c0a      	adds	r2, r1, #0
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002136:	3301      	adds	r3, #1
 8002138:	643b      	str	r3, [r7, #64]	; 0x40
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	2b02      	cmp	r3, #2
 800213e:	dde7      	ble.n	8002110 <getLatLongInMeters+0x244>
	latSecFirst = atoi(degMinSecBuffer);
 8002140:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <getLatLongInMeters+0x3ac>)
 8002142:	0018      	movs	r0, r3
 8002144:	f004 fc74 	bl	8006a30 <atoi>
 8002148:	0002      	movs	r2, r0
 800214a:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <getLatLongInMeters+0x3b8>)
 800214c:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+5+latNegDeg];}
 800214e:	2301      	movs	r3, #1
 8002150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002152:	e014      	b.n	800217e <getLatLongInMeters+0x2b2>
 8002154:	4b41      	ldr	r3, [pc, #260]	; (800225c <getLatLongInMeters+0x390>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	18d2      	adds	r2, r2, r3
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <getLatLongInMeters+0x398>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	1d5a      	adds	r2, r3, #5
 8002164:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <getLatLongInMeters+0x394>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	4a37      	ldr	r2, [pc, #220]	; (8002248 <getLatLongInMeters+0x37c>)
 800216c:	5cd1      	ldrb	r1, [r2, r3]
 800216e:	4a42      	ldr	r2, [pc, #264]	; (8002278 <getLatLongInMeters+0x3ac>)
 8002170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	1c0a      	adds	r2, r1, #0
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800217a:	3301      	adds	r3, #1
 800217c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002180:	2b02      	cmp	r3, #2
 8002182:	dde7      	ble.n	8002154 <getLatLongInMeters+0x288>
	latSecSecond = atoi(degMinSecBuffer);
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <getLatLongInMeters+0x3ac>)
 8002186:	0018      	movs	r0, r3
 8002188:	f004 fc52 	bl	8006a30 <atoi>
 800218c:	0002      	movs	r2, r0
 800218e:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <getLatLongInMeters+0x3bc>)
 8002190:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <getLatLongInMeters+0x3ac>)
 8002194:	2203      	movs	r2, #3
 8002196:	2130      	movs	r1, #48	; 0x30
 8002198:	0018      	movs	r0, r3
 800219a:	f004 fc79 	bl	8006a90 <memset>

	for(int i = 0; i < longDegSize; i++){degMinSecBuffer[i+3-longDegSize] = receiveUART2Data[latEndLongStart+i+1+longNegDeg];}
 800219e:	2300      	movs	r3, #0
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a2:	e013      	b.n	80021cc <getLatLongInMeters+0x300>
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <getLatLongInMeters+0x39c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	18d3      	adds	r3, r2, r3
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <getLatLongInMeters+0x3a0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	18d2      	adds	r2, r2, r3
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	1cd9      	adds	r1, r3, #3
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <getLatLongInMeters+0x3a4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1acb      	subs	r3, r1, r3
 80021be:	4922      	ldr	r1, [pc, #136]	; (8002248 <getLatLongInMeters+0x37c>)
 80021c0:	5c89      	ldrb	r1, [r1, r2]
 80021c2:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <getLatLongInMeters+0x3ac>)
 80021c4:	54d1      	strb	r1, [r2, r3]
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	3301      	adds	r3, #1
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <getLatLongInMeters+0x3a4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbe6      	blt.n	80021a4 <getLatLongInMeters+0x2d8>
	longDeg = atoi(degMinSecBuffer);
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <getLatLongInMeters+0x3ac>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f004 fc29 	bl	8006a30 <atoi>
 80021de:	0002      	movs	r2, r0
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <getLatLongInMeters+0x3c0>)
 80021e2:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <getLatLongInMeters+0x3ac>)
 80021e6:	2203      	movs	r2, #3
 80021e8:	2130      	movs	r1, #48	; 0x30
 80021ea:	0018      	movs	r0, r3
 80021ec:	f004 fc50 	bl	8006a90 <memset>
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+1+longNegDeg];}
 80021f0:	2301      	movs	r3, #1
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
 80021f4:	e014      	b.n	8002220 <getLatLongInMeters+0x354>
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <getLatLongInMeters+0x39c>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fc:	18d2      	adds	r2, r2, r3
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <getLatLongInMeters+0x3a4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <getLatLongInMeters+0x3a0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	18d3      	adds	r3, r2, r3
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <getLatLongInMeters+0x37c>)
 800220e:	5cd1      	ldrb	r1, [r2, r3]
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <getLatLongInMeters+0x3ac>)
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002214:	18d3      	adds	r3, r2, r3
 8002216:	1c0a      	adds	r2, r1, #0
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	3301      	adds	r3, #1
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	2b02      	cmp	r3, #2
 8002224:	dde7      	ble.n	80021f6 <getLatLongInMeters+0x32a>
	longMin = atoi(degMinSecBuffer);
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <getLatLongInMeters+0x3ac>)
 8002228:	0018      	movs	r0, r3
 800222a:	f004 fc01 	bl	8006a30 <atoi>
 800222e:	0002      	movs	r2, r0
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <getLatLongInMeters+0x3c4>)
 8002232:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+3+longNegDeg];}
 8002234:	2301      	movs	r3, #1
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
 8002238:	e041      	b.n	80022be <getLatLongInMeters+0x3f2>
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	20000190 	.word	0x20000190
 8002240:	08006c48 	.word	0x08006c48
 8002244:	20000370 	.word	0x20000370
 8002248:	200000f8 	.word	0x200000f8
 800224c:	2000021c 	.word	0x2000021c
 8002250:	200003fc 	.word	0x200003fc
 8002254:	200002d4 	.word	0x200002d4
 8002258:	200002cc 	.word	0x200002cc
 800225c:	2000022c 	.word	0x2000022c
 8002260:	20000224 	.word	0x20000224
 8002264:	2000040c 	.word	0x2000040c
 8002268:	20000460 	.word	0x20000460
 800226c:	20000220 	.word	0x20000220
 8002270:	200002f8 	.word	0x200002f8
 8002274:	20000218 	.word	0x20000218
 8002278:	20000214 	.word	0x20000214
 800227c:	200001b4 	.word	0x200001b4
 8002280:	200002b4 	.word	0x200002b4
 8002284:	20000210 	.word	0x20000210
 8002288:	200002d8 	.word	0x200002d8
 800228c:	200001b0 	.word	0x200001b0
 8002290:	20000228 	.word	0x20000228
 8002294:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <getLatLongInMeters+0x5dc>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	18d2      	adds	r2, r2, r3
 800229c:	4b83      	ldr	r3, [pc, #524]	; (80024ac <getLatLongInMeters+0x5e0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	1cda      	adds	r2, r3, #3
 80022a4:	4b82      	ldr	r3, [pc, #520]	; (80024b0 <getLatLongInMeters+0x5e4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	18d3      	adds	r3, r2, r3
 80022aa:	4a82      	ldr	r2, [pc, #520]	; (80024b4 <getLatLongInMeters+0x5e8>)
 80022ac:	5cd1      	ldrb	r1, [r2, r3]
 80022ae:	4a82      	ldr	r2, [pc, #520]	; (80024b8 <getLatLongInMeters+0x5ec>)
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	18d3      	adds	r3, r2, r3
 80022b4:	1c0a      	adds	r2, r1, #0
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	3301      	adds	r3, #1
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	dde7      	ble.n	8002294 <getLatLongInMeters+0x3c8>
	longSecFirst = atoi(degMinSecBuffer);
 80022c4:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <getLatLongInMeters+0x5ec>)
 80022c6:	0018      	movs	r0, r3
 80022c8:	f004 fbb2 	bl	8006a30 <atoi>
 80022cc:	0002      	movs	r2, r0
 80022ce:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <getLatLongInMeters+0x5f0>)
 80022d0:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+5+longNegDeg];}
 80022d2:	2301      	movs	r3, #1
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d6:	e014      	b.n	8002302 <getLatLongInMeters+0x436>
 80022d8:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <getLatLongInMeters+0x5dc>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	18d2      	adds	r2, r2, r3
 80022e0:	4b72      	ldr	r3, [pc, #456]	; (80024ac <getLatLongInMeters+0x5e0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	18d3      	adds	r3, r2, r3
 80022e6:	1d5a      	adds	r2, r3, #5
 80022e8:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <getLatLongInMeters+0x5e4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	18d3      	adds	r3, r2, r3
 80022ee:	4a71      	ldr	r2, [pc, #452]	; (80024b4 <getLatLongInMeters+0x5e8>)
 80022f0:	5cd1      	ldrb	r1, [r2, r3]
 80022f2:	4a71      	ldr	r2, [pc, #452]	; (80024b8 <getLatLongInMeters+0x5ec>)
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	18d3      	adds	r3, r2, r3
 80022f8:	1c0a      	adds	r2, r1, #0
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	3301      	adds	r3, #1
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	2b02      	cmp	r3, #2
 8002306:	dde7      	ble.n	80022d8 <getLatLongInMeters+0x40c>
	longSecSecond = atoi(degMinSecBuffer);
 8002308:	4b6b      	ldr	r3, [pc, #428]	; (80024b8 <getLatLongInMeters+0x5ec>)
 800230a:	0018      	movs	r0, r3
 800230c:	f004 fb90 	bl	8006a30 <atoi>
 8002310:	0002      	movs	r2, r0
 8002312:	4b6b      	ldr	r3, [pc, #428]	; (80024c0 <getLatLongInMeters+0x5f4>)
 8002314:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8002316:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <getLatLongInMeters+0x5ec>)
 8002318:	2203      	movs	r2, #3
 800231a:	2130      	movs	r1, #48	; 0x30
 800231c:	0018      	movs	r0, r3
 800231e:	f004 fbb7 	bl	8006a90 <memset>

	latInMeters = (latDeg*111000.0)+(latMin*1850.0)+(latSecFirst*30.0)+(latSecSecond*0.3);
 8002322:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <getLatLongInMeters+0x5f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff f87e 	bl	8001428 <__aeabi_i2d>
 800232c:	2200      	movs	r2, #0
 800232e:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <getLatLongInMeters+0x5fc>)
 8002330:	f7fe fe0e 	bl	8000f50 <__aeabi_dmul>
 8002334:	0002      	movs	r2, r0
 8002336:	000b      	movs	r3, r1
 8002338:	0014      	movs	r4, r2
 800233a:	001d      	movs	r5, r3
 800233c:	4b63      	ldr	r3, [pc, #396]	; (80024cc <getLatLongInMeters+0x600>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff f871 	bl	8001428 <__aeabi_i2d>
 8002346:	2200      	movs	r2, #0
 8002348:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <getLatLongInMeters+0x604>)
 800234a:	f7fe fe01 	bl	8000f50 <__aeabi_dmul>
 800234e:	0002      	movs	r2, r0
 8002350:	000b      	movs	r3, r1
 8002352:	0020      	movs	r0, r4
 8002354:	0029      	movs	r1, r5
 8002356:	f7fe fa91 	bl	800087c <__aeabi_dadd>
 800235a:	0002      	movs	r2, r0
 800235c:	000b      	movs	r3, r1
 800235e:	0014      	movs	r4, r2
 8002360:	001d      	movs	r5, r3
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <getLatLongInMeters+0x608>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0018      	movs	r0, r3
 8002368:	f7ff f85e 	bl	8001428 <__aeabi_i2d>
 800236c:	2200      	movs	r2, #0
 800236e:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <getLatLongInMeters+0x60c>)
 8002370:	f7fe fdee 	bl	8000f50 <__aeabi_dmul>
 8002374:	0002      	movs	r2, r0
 8002376:	000b      	movs	r3, r1
 8002378:	0020      	movs	r0, r4
 800237a:	0029      	movs	r1, r5
 800237c:	f7fe fa7e 	bl	800087c <__aeabi_dadd>
 8002380:	0002      	movs	r2, r0
 8002382:	000b      	movs	r3, r1
 8002384:	0014      	movs	r4, r2
 8002386:	001d      	movs	r5, r3
 8002388:	4b54      	ldr	r3, [pc, #336]	; (80024dc <getLatLongInMeters+0x610>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff f84b 	bl	8001428 <__aeabi_i2d>
 8002392:	4a53      	ldr	r2, [pc, #332]	; (80024e0 <getLatLongInMeters+0x614>)
 8002394:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <getLatLongInMeters+0x618>)
 8002396:	f7fe fddb 	bl	8000f50 <__aeabi_dmul>
 800239a:	0002      	movs	r2, r0
 800239c:	000b      	movs	r3, r1
 800239e:	0020      	movs	r0, r4
 80023a0:	0029      	movs	r1, r5
 80023a2:	f7fe fa6b 	bl	800087c <__aeabi_dadd>
 80023a6:	0002      	movs	r2, r0
 80023a8:	000b      	movs	r3, r1
 80023aa:	0010      	movs	r0, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	f7ff f86b 	bl	8001488 <__aeabi_d2f>
 80023b2:	1c02      	adds	r2, r0, #0
 80023b4:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <getLatLongInMeters+0x61c>)
 80023b6:	601a      	str	r2, [r3, #0]
	//dlatInMeters = abs(latInMeters - prevlatInMeters);
	//prevlatInMeters = latInMeters;

	longInMeters = (longDeg*111000.0)+(longMin*1850.0)+(longSecFirst*30.0)+(longSecSecond*0.3);
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <getLatLongInMeters+0x620>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff f833 	bl	8001428 <__aeabi_i2d>
 80023c2:	2200      	movs	r2, #0
 80023c4:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <getLatLongInMeters+0x5fc>)
 80023c6:	f7fe fdc3 	bl	8000f50 <__aeabi_dmul>
 80023ca:	0002      	movs	r2, r0
 80023cc:	000b      	movs	r3, r1
 80023ce:	0014      	movs	r4, r2
 80023d0:	001d      	movs	r5, r3
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <getLatLongInMeters+0x624>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff f826 	bl	8001428 <__aeabi_i2d>
 80023dc:	2200      	movs	r2, #0
 80023de:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <getLatLongInMeters+0x604>)
 80023e0:	f7fe fdb6 	bl	8000f50 <__aeabi_dmul>
 80023e4:	0002      	movs	r2, r0
 80023e6:	000b      	movs	r3, r1
 80023e8:	0020      	movs	r0, r4
 80023ea:	0029      	movs	r1, r5
 80023ec:	f7fe fa46 	bl	800087c <__aeabi_dadd>
 80023f0:	0002      	movs	r2, r0
 80023f2:	000b      	movs	r3, r1
 80023f4:	0014      	movs	r4, r2
 80023f6:	001d      	movs	r5, r3
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <getLatLongInMeters+0x5f0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff f813 	bl	8001428 <__aeabi_i2d>
 8002402:	2200      	movs	r2, #0
 8002404:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <getLatLongInMeters+0x60c>)
 8002406:	f7fe fda3 	bl	8000f50 <__aeabi_dmul>
 800240a:	0002      	movs	r2, r0
 800240c:	000b      	movs	r3, r1
 800240e:	0020      	movs	r0, r4
 8002410:	0029      	movs	r1, r5
 8002412:	f7fe fa33 	bl	800087c <__aeabi_dadd>
 8002416:	0002      	movs	r2, r0
 8002418:	000b      	movs	r3, r1
 800241a:	0014      	movs	r4, r2
 800241c:	001d      	movs	r5, r3
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <getLatLongInMeters+0x5f4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0018      	movs	r0, r3
 8002424:	f7ff f800 	bl	8001428 <__aeabi_i2d>
 8002428:	4a2d      	ldr	r2, [pc, #180]	; (80024e0 <getLatLongInMeters+0x614>)
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <getLatLongInMeters+0x618>)
 800242c:	f7fe fd90 	bl	8000f50 <__aeabi_dmul>
 8002430:	0002      	movs	r2, r0
 8002432:	000b      	movs	r3, r1
 8002434:	0020      	movs	r0, r4
 8002436:	0029      	movs	r1, r5
 8002438:	f7fe fa20 	bl	800087c <__aeabi_dadd>
 800243c:	0002      	movs	r2, r0
 800243e:	000b      	movs	r3, r1
 8002440:	0010      	movs	r0, r2
 8002442:	0019      	movs	r1, r3
 8002444:	f7ff f820 	bl	8001488 <__aeabi_d2f>
 8002448:	1c02      	adds	r2, r0, #0
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <getLatLongInMeters+0x628>)
 800244c:	601a      	str	r2, [r3, #0]
	//dlongInMeters = abs(longInMeters - prevlongInMeters);
	//prevlongInMeters = longInMeters;
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <getLatLongInMeters+0x5e8>)
 8002450:	2296      	movs	r2, #150	; 0x96
 8002452:	213f      	movs	r1, #63	; 0x3f
 8002454:	0018      	movs	r0, r3
 8002456:	f004 fb1b 	bl	8006a90 <memset>

	latlongstruct.gnssFixOk 	= gnssFixStatus;
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <getLatLongInMeters+0x62c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	2114      	movs	r1, #20
 8002462:	187b      	adds	r3, r7, r1
 8002464:	749a      	strb	r2, [r3, #18]
	latlongstruct.uartStatusOk	= uart2Status;
 8002466:	187b      	adds	r3, r7, r1
 8002468:	222b      	movs	r2, #43	; 0x2b
 800246a:	18ba      	adds	r2, r7, r2
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	74da      	strb	r2, [r3, #19]
	latlongstruct.latNeg		= latNegDeg;
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <getLatLongInMeters+0x630>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	187b      	adds	r3, r7, r1
 8002478:	741a      	strb	r2, [r3, #16]
	latlongstruct.longNeg		= longNegDeg;
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <getLatLongInMeters+0x5e4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	187b      	adds	r3, r7, r1
 8002482:	745a      	strb	r2, [r3, #17]
	latlongstruct.latInMeters	= latInMeters;
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <getLatLongInMeters+0x61c>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	187b      	adds	r3, r7, r1
 800248a:	609a      	str	r2, [r3, #8]
	latlongstruct.longInMeters	= longInMeters;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <getLatLongInMeters+0x628>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	187b      	adds	r3, r7, r1
 8002492:	60da      	str	r2, [r3, #12]

	return latlongstruct;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	187a      	adds	r2, r7, r1
 8002498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800249a:	c313      	stmia	r3!, {r0, r1, r4}
 800249c:	ca03      	ldmia	r2!, {r0, r1}
 800249e:	c303      	stmia	r3!, {r0, r1}
}
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b016      	add	sp, #88	; 0x58
 80024a6:	bdb0      	pop	{r4, r5, r7, pc}
 80024a8:	20000460 	.word	0x20000460
 80024ac:	200002f8 	.word	0x200002f8
 80024b0:	20000220 	.word	0x20000220
 80024b4:	200000f8 	.word	0x200000f8
 80024b8:	20000214 	.word	0x20000214
 80024bc:	200002f4 	.word	0x200002f4
 80024c0:	200002f0 	.word	0x200002f0
 80024c4:	200001b4 	.word	0x200001b4
 80024c8:	40fb1980 	.word	0x40fb1980
 80024cc:	200002b4 	.word	0x200002b4
 80024d0:	409ce800 	.word	0x409ce800
 80024d4:	20000210 	.word	0x20000210
 80024d8:	403e0000 	.word	0x403e0000
 80024dc:	200002d8 	.word	0x200002d8
 80024e0:	33333333 	.word	0x33333333
 80024e4:	3fd33333 	.word	0x3fd33333
 80024e8:	200003f4 	.word	0x200003f4
 80024ec:	200001b0 	.word	0x200001b0
 80024f0:	20000228 	.word	0x20000228
 80024f4:	200003f8 	.word	0x200003f8
 80024f8:	200002cc 	.word	0x200002cc
 80024fc:	20000224 	.word	0x20000224

08002500 <getOffsetFromHome>:

struct OffsetFromHome getOffsetFromHome(struct LatLongStruct latlongstruct, struct LatLongStruct prevlatlongstruct, char homeLocked){
 8002500:	b084      	sub	sp, #16
 8002502:	b590      	push	{r4, r7, lr}
 8002504:	46c6      	mov	lr, r8
 8002506:	b500      	push	{lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	2004      	movs	r0, #4
 8002510:	2418      	movs	r4, #24
 8002512:	46a4      	mov	ip, r4
 8002514:	2408      	movs	r4, #8
 8002516:	46a0      	mov	r8, r4
 8002518:	44b8      	add	r8, r7
 800251a:	44c4      	add	ip, r8
 800251c:	4460      	add	r0, ip
 800251e:	6001      	str	r1, [r0, #0]
 8002520:	6042      	str	r2, [r0, #4]
 8002522:	6083      	str	r3, [r0, #8]
	enterToFunction = 2; // TODO delete
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <getOffsetFromHome+0x114>)
 8002526:	2202      	movs	r2, #2
 8002528:	601a      	str	r2, [r3, #0]
	struct OffsetFromHome offsetfromhome;
	if(homeLocked == 0){
 800252a:	232c      	movs	r3, #44	; 0x2c
 800252c:	2218      	movs	r2, #24
 800252e:	4694      	mov	ip, r2
 8002530:	2208      	movs	r2, #8
 8002532:	4690      	mov	r8, r2
 8002534:	44b8      	add	r8, r7
 8002536:	44c4      	add	ip, r8
 8002538:	4463      	add	r3, ip
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <getOffsetFromHome+0x4e>
		offsetfromhome.offsetLatInMeters = 0.0;
 8002540:	2108      	movs	r1, #8
 8002542:	187b      	adds	r3, r7, r1
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
		offsetfromhome.offsetLongInMeters = 0.0;
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
	}
	if(homeLocked == 1){
 800254e:	232c      	movs	r3, #44	; 0x2c
 8002550:	2218      	movs	r2, #24
 8002552:	4694      	mov	ip, r2
 8002554:	2208      	movs	r2, #8
 8002556:	4690      	mov	r8, r2
 8002558:	44b8      	add	r8, r7
 800255a:	44c4      	add	ip, r8
 800255c:	4463      	add	r3, ip
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d148      	bne.n	80025f6 <getOffsetFromHome+0xf6>
		offsetfromhome.offsetLatInMeters = abs(latlongstruct.latInMeters - prevlatlongstruct.latInMeters);
 8002564:	2304      	movs	r3, #4
 8002566:	2218      	movs	r2, #24
 8002568:	4694      	mov	ip, r2
 800256a:	2208      	movs	r2, #8
 800256c:	4690      	mov	r8, r2
 800256e:	44b8      	add	r8, r7
 8002570:	44c4      	add	ip, r8
 8002572:	4463      	add	r3, ip
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	2318      	movs	r3, #24
 8002578:	2118      	movs	r1, #24
 800257a:	468c      	mov	ip, r1
 800257c:	2108      	movs	r1, #8
 800257e:	4688      	mov	r8, r1
 8002580:	44b8      	add	r8, r7
 8002582:	44c4      	add	ip, r8
 8002584:	4463      	add	r3, ip
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	1c19      	adds	r1, r3, #0
 800258a:	1c10      	adds	r0, r2, #0
 800258c:	f7fd ff48 	bl	8000420 <__aeabi_fsub>
 8002590:	1c03      	adds	r3, r0, #0
 8002592:	1c18      	adds	r0, r3, #0
 8002594:	f7fe f90c 	bl	80007b0 <__aeabi_f2iz>
 8002598:	0003      	movs	r3, r0
 800259a:	17da      	asrs	r2, r3, #31
 800259c:	189b      	adds	r3, r3, r2
 800259e:	4053      	eors	r3, r2
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fe f925 	bl	80007f0 <__aeabi_i2f>
 80025a6:	1c02      	adds	r2, r0, #0
 80025a8:	2408      	movs	r4, #8
 80025aa:	193b      	adds	r3, r7, r4
 80025ac:	601a      	str	r2, [r3, #0]
		offsetfromhome.offsetLongInMeters = abs(latlongstruct.longInMeters - prevlatlongstruct.longInMeters);
 80025ae:	2304      	movs	r3, #4
 80025b0:	2218      	movs	r2, #24
 80025b2:	4694      	mov	ip, r2
 80025b4:	2208      	movs	r2, #8
 80025b6:	4690      	mov	r8, r2
 80025b8:	44b8      	add	r8, r7
 80025ba:	44c4      	add	ip, r8
 80025bc:	4463      	add	r3, ip
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	2318      	movs	r3, #24
 80025c2:	2118      	movs	r1, #24
 80025c4:	468c      	mov	ip, r1
 80025c6:	2108      	movs	r1, #8
 80025c8:	4688      	mov	r8, r1
 80025ca:	44b8      	add	r8, r7
 80025cc:	44c4      	add	ip, r8
 80025ce:	4463      	add	r3, ip
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	1c19      	adds	r1, r3, #0
 80025d4:	1c10      	adds	r0, r2, #0
 80025d6:	f7fd ff23 	bl	8000420 <__aeabi_fsub>
 80025da:	1c03      	adds	r3, r0, #0
 80025dc:	1c18      	adds	r0, r3, #0
 80025de:	f7fe f8e7 	bl	80007b0 <__aeabi_f2iz>
 80025e2:	0003      	movs	r3, r0
 80025e4:	17da      	asrs	r2, r3, #31
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	4053      	eors	r3, r2
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7fe f900 	bl	80007f0 <__aeabi_i2f>
 80025f0:	1c02      	adds	r2, r0, #0
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	605a      	str	r2, [r3, #4]
	}
	return offsetfromhome;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2208      	movs	r2, #8
 80025fa:	18ba      	adds	r2, r7, r2
 80025fc:	ca03      	ldmia	r2!, {r0, r1}
 80025fe:	c303      	stmia	r3!, {r0, r1}
}
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	46bd      	mov	sp, r7
 8002604:	b004      	add	sp, #16
 8002606:	bc80      	pop	{r7}
 8002608:	46b8      	mov	r8, r7
 800260a:	bc90      	pop	{r4, r7}
 800260c:	bc08      	pop	{r3}
 800260e:	b004      	add	sp, #16
 8002610:	4718      	bx	r3
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	20000190 	.word	0x20000190

08002618 <mpuInit>:

char mpuInit(void){
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b08f      	sub	sp, #60	; 0x3c
 800261c:	af02      	add	r7, sp, #8
	char initStatus = 0;
 800261e:	242f      	movs	r4, #47	; 0x2f
 8002620:	193b      	adds	r3, r7, r4
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
	//=========================MPU9250
	// Registers
	IMUDevAddr 						= 0xd0;
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <mpuInit+0x230>)
 8002628:	22d0      	movs	r2, #208	; 0xd0
 800262a:	701a      	strb	r2, [r3, #0]
	uint8_t PWR_MGMT_1[2] 			= {0x6b, 0b00100000};	// or 4
 800262c:	202c      	movs	r0, #44	; 0x2c
 800262e:	183b      	adds	r3, r7, r0
 8002630:	4a86      	ldr	r2, [pc, #536]	; (800284c <mpuInit+0x234>)
 8002632:	801a      	strh	r2, [r3, #0]
	//uint8_t PWR_MGMT_1[2] 			= {0x6b, 0b00000000};
	//uint8_t PWR_MGMT_2[2] 			= {0x6c, 0b00000000};	// 0 to enable all or 255 to disable all
	uint8_t PWR_MGMT_2[2] 			= {0x6c, 0b00000111};	//
 8002634:	2528      	movs	r5, #40	; 0x28
 8002636:	197b      	adds	r3, r7, r5
 8002638:	4a85      	ldr	r2, [pc, #532]	; (8002850 <mpuInit+0x238>)
 800263a:	801a      	strh	r2, [r3, #0]
	uint8_t WHO_AM_I 				= 0x75;
 800263c:	2627      	movs	r6, #39	; 0x27
 800263e:	19bb      	adds	r3, r7, r6
 8002640:	2275      	movs	r2, #117	; 0x75
 8002642:	701a      	strb	r2, [r3, #0]
	uint8_t LP_ACCEL_ODR[2] 		= {0x1e, 0b00001000}; 	// 8 = output frequency 62.50Hz
 8002644:	2324      	movs	r3, #36	; 0x24
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	4a82      	ldr	r2, [pc, #520]	; (8002854 <mpuInit+0x23c>)
 800264a:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_CONFIG[2] 		= {0x1c, 0x0}; 			// 0x0 for 2g, 0x8 for 4g, 0x10 for 8g,0x18 for 16g
 800264c:	2220      	movs	r2, #32
 800264e:	18bb      	adds	r3, r7, r2
 8002650:	221c      	movs	r2, #28
 8002652:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_CONFIG_2[2] 		= {0x1d, 0b00001101};	//1d
 8002654:	211c      	movs	r1, #28
 8002656:	187b      	adds	r3, r7, r1
 8002658:	4a7f      	ldr	r2, [pc, #508]	; (8002858 <mpuInit+0x240>)
 800265a:	801a      	strh	r2, [r3, #0]
	uint8_t INT_ENABLE[2] 			= {0x38, 0x40};			// enable motion interrupt
 800265c:	2118      	movs	r1, #24
 800265e:	187b      	adds	r3, r7, r1
 8002660:	4a7e      	ldr	r2, [pc, #504]	; (800285c <mpuInit+0x244>)
 8002662:	801a      	strh	r2, [r3, #0]
	uint8_t MOT_DETECT_CTRL[2] 		= {0x69, 0b11000000};	// enable hardware intelligence
 8002664:	2114      	movs	r1, #20
 8002666:	187b      	adds	r3, r7, r1
 8002668:	4a7d      	ldr	r2, [pc, #500]	; (8002860 <mpuInit+0x248>)
 800266a:	801a      	strh	r2, [r3, #0]
	uint8_t WOM_THR[2]				= {0x1f, 0x03};			// threshold
 800266c:	2110      	movs	r1, #16
 800266e:	187b      	adds	r3, r7, r1
 8002670:	4a7c      	ldr	r2, [pc, #496]	; (8002864 <mpuInit+0x24c>)
 8002672:	801a      	strh	r2, [r3, #0]
	uint8_t maskLP_ACCEL_ODR[2] 	= {0x1e, 0b00000100}; 	// frequency of wake-up
 8002674:	210c      	movs	r1, #12
 8002676:	187b      	adds	r3, r7, r1
 8002678:	4a7b      	ldr	r2, [pc, #492]	; (8002868 <mpuInit+0x250>)
 800267a:	801a      	strh	r2, [r3, #0]
	uint8_t PWR_MGMT_1_new[2] 		= {0x6b, 0b00100000};	// cycle mode
 800267c:	2108      	movs	r1, #8
 800267e:	187b      	adds	r3, r7, r1
 8002680:	4a72      	ldr	r2, [pc, #456]	; (800284c <mpuInit+0x234>)
 8002682:	801a      	strh	r2, [r3, #0]
	//uint8_t PWR_MGMT_1_new[2] 		= {0x6b, 0b00000000};	// cycle mode
	uint8_t INT_PIN_CFG[2] 			= {0x37, 0b01001100};	//37
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4a79      	ldr	r2, [pc, #484]	; (800286c <mpuInit+0x254>)
 8002688:	801a      	strh	r2, [r3, #0]
    uint8_t WOM_THR[2]={0x1f, 0x7f};//1f
    uint8_t LP_ACCEL_ODR[2] = {0x1e, 0b00000100};//1e
    uint8_t PWR_MGMT_1_new[2] = {0x6b, 0b00100000};//6b
    uint8_t INT_PIN_CFG[2] = {0x37, 0b00110000};//3a*/

	ACCEL_XOUT_L 			= 0x3c;
 800268a:	4b79      	ldr	r3, [pc, #484]	; (8002870 <mpuInit+0x258>)
 800268c:	223c      	movs	r2, #60	; 0x3c
 800268e:	701a      	strb	r2, [r3, #0]
	ACCEL_XOUT_H 			= 0x3b;
 8002690:	4b78      	ldr	r3, [pc, #480]	; (8002874 <mpuInit+0x25c>)
 8002692:	223b      	movs	r2, #59	; 0x3b
 8002694:	701a      	strb	r2, [r3, #0]
	ACCEL_YOUT_L 			= 0x3e;
 8002696:	4b78      	ldr	r3, [pc, #480]	; (8002878 <mpuInit+0x260>)
 8002698:	223e      	movs	r2, #62	; 0x3e
 800269a:	701a      	strb	r2, [r3, #0]
	ACCEL_YOUT_H 			= 0x3d;
 800269c:	4b77      	ldr	r3, [pc, #476]	; (800287c <mpuInit+0x264>)
 800269e:	223d      	movs	r2, #61	; 0x3d
 80026a0:	701a      	strb	r2, [r3, #0]
	ACCEL_ZOUT_L 			= 0x40;
 80026a2:	4b77      	ldr	r3, [pc, #476]	; (8002880 <mpuInit+0x268>)
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	701a      	strb	r2, [r3, #0]
	ACCEL_ZOUT_H 			= 0x3f;
 80026a8:	4b76      	ldr	r3, [pc, #472]	; (8002884 <mpuInit+0x26c>)
 80026aa:	223f      	movs	r2, #63	; 0x3f
 80026ac:	701a      	strb	r2, [r3, #0]

	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_1, sizeof(PWR_MGMT_1), 10);
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <mpuInit+0x230>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b299      	uxth	r1, r3
 80026b4:	183a      	adds	r2, r7, r0
 80026b6:	4874      	ldr	r0, [pc, #464]	; (8002888 <mpuInit+0x270>)
 80026b8:	230a      	movs	r3, #10
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2302      	movs	r3, #2
 80026be:	f001 fa1b 	bl	8003af8 <HAL_I2C_Master_Transmit>
 80026c2:	0003      	movs	r3, r0
 80026c4:	001a      	movs	r2, r3
 80026c6:	4b71      	ldr	r3, [pc, #452]	; (800288c <mpuInit+0x274>)
 80026c8:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <mpuInit+0x230>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b299      	uxth	r1, r3
 80026d0:	4a6f      	ldr	r2, [pc, #444]	; (8002890 <mpuInit+0x278>)
 80026d2:	486d      	ldr	r0, [pc, #436]	; (8002888 <mpuInit+0x270>)
 80026d4:	230a      	movs	r3, #10
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2301      	movs	r3, #1
 80026da:	f001 fb15 	bl	8003d08 <HAL_I2C_Master_Receive>
 80026de:	0003      	movs	r3, r0
 80026e0:	001a      	movs	r2, r3
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <mpuInit+0x274>)
 80026e4:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 80026e6:	200a      	movs	r0, #10
 80026e8:	f000 fe18 	bl	800331c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_2, sizeof(PWR_MGMT_2), 10);
 80026ec:	4b56      	ldr	r3, [pc, #344]	; (8002848 <mpuInit+0x230>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b299      	uxth	r1, r3
 80026f2:	197a      	adds	r2, r7, r5
 80026f4:	4864      	ldr	r0, [pc, #400]	; (8002888 <mpuInit+0x270>)
 80026f6:	230a      	movs	r3, #10
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2302      	movs	r3, #2
 80026fc:	f001 f9fc 	bl	8003af8 <HAL_I2C_Master_Transmit>
 8002700:	0003      	movs	r3, r0
 8002702:	001a      	movs	r2, r3
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <mpuInit+0x274>)
 8002706:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8002708:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <mpuInit+0x230>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b299      	uxth	r1, r3
 800270e:	4a60      	ldr	r2, [pc, #384]	; (8002890 <mpuInit+0x278>)
 8002710:	485d      	ldr	r0, [pc, #372]	; (8002888 <mpuInit+0x270>)
 8002712:	230a      	movs	r3, #10
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	f001 faf6 	bl	8003d08 <HAL_I2C_Master_Receive>
 800271c:	0003      	movs	r3, r0
 800271e:	001a      	movs	r2, r3
 8002720:	4b5a      	ldr	r3, [pc, #360]	; (800288c <mpuInit+0x274>)
 8002722:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 8002724:	200a      	movs	r0, #10
 8002726:	f000 fdf9 	bl	800331c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &WHO_AM_I, sizeof(WHO_AM_I), 10);
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <mpuInit+0x230>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b299      	uxth	r1, r3
 8002730:	19ba      	adds	r2, r7, r6
 8002732:	4855      	ldr	r0, [pc, #340]	; (8002888 <mpuInit+0x270>)
 8002734:	230a      	movs	r3, #10
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2301      	movs	r3, #1
 800273a:	f001 f9dd 	bl	8003af8 <HAL_I2C_Master_Transmit>
 800273e:	0003      	movs	r3, r0
 8002740:	001a      	movs	r2, r3
 8002742:	4b52      	ldr	r3, [pc, #328]	; (800288c <mpuInit+0x274>)
 8002744:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8002746:	4b40      	ldr	r3, [pc, #256]	; (8002848 <mpuInit+0x230>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b299      	uxth	r1, r3
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <mpuInit+0x278>)
 800274e:	484e      	ldr	r0, [pc, #312]	; (8002888 <mpuInit+0x270>)
 8002750:	230a      	movs	r3, #10
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2301      	movs	r3, #1
 8002756:	f001 fad7 	bl	8003d08 <HAL_I2C_Master_Receive>
 800275a:	0003      	movs	r3, r0
 800275c:	001a      	movs	r2, r3
 800275e:	4b4b      	ldr	r3, [pc, #300]	; (800288c <mpuInit+0x274>)
 8002760:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 8002762:	200a      	movs	r0, #10
 8002764:	f000 fdda 	bl	800331c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, LP_ACCEL_ODR, sizeof(LP_ACCEL_ODR), 10);
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <mpuInit+0x230>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b299      	uxth	r1, r3
 800276e:	2324      	movs	r3, #36	; 0x24
 8002770:	18fa      	adds	r2, r7, r3
 8002772:	4845      	ldr	r0, [pc, #276]	; (8002888 <mpuInit+0x270>)
 8002774:	230a      	movs	r3, #10
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2302      	movs	r3, #2
 800277a:	f001 f9bd 	bl	8003af8 <HAL_I2C_Master_Transmit>
 800277e:	0003      	movs	r3, r0
 8002780:	001a      	movs	r2, r3
 8002782:	4b42      	ldr	r3, [pc, #264]	; (800288c <mpuInit+0x274>)
 8002784:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <mpuInit+0x230>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b299      	uxth	r1, r3
 800278c:	4a40      	ldr	r2, [pc, #256]	; (8002890 <mpuInit+0x278>)
 800278e:	483e      	ldr	r0, [pc, #248]	; (8002888 <mpuInit+0x270>)
 8002790:	230a      	movs	r3, #10
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	f001 fab7 	bl	8003d08 <HAL_I2C_Master_Receive>
 800279a:	0003      	movs	r3, r0
 800279c:	001a      	movs	r2, r3
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <mpuInit+0x274>)
 80027a0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 80027a2:	200a      	movs	r0, #10
 80027a4:	f000 fdba 	bl	800331c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), 10);
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <mpuInit+0x230>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b299      	uxth	r1, r3
 80027ae:	2220      	movs	r2, #32
 80027b0:	18ba      	adds	r2, r7, r2
 80027b2:	4835      	ldr	r0, [pc, #212]	; (8002888 <mpuInit+0x270>)
 80027b4:	230a      	movs	r3, #10
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2302      	movs	r3, #2
 80027ba:	f001 f99d 	bl	8003af8 <HAL_I2C_Master_Transmit>
 80027be:	0003      	movs	r3, r0
 80027c0:	001a      	movs	r2, r3
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <mpuInit+0x274>)
 80027c4:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <mpuInit+0x230>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	b299      	uxth	r1, r3
 80027cc:	4a30      	ldr	r2, [pc, #192]	; (8002890 <mpuInit+0x278>)
 80027ce:	482e      	ldr	r0, [pc, #184]	; (8002888 <mpuInit+0x270>)
 80027d0:	230a      	movs	r3, #10
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	f001 fa97 	bl	8003d08 <HAL_I2C_Master_Receive>
 80027da:	0003      	movs	r3, r0
 80027dc:	001a      	movs	r2, r3
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <mpuInit+0x274>)
 80027e0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 80027e2:	200a      	movs	r0, #10
 80027e4:	f000 fd9a 	bl	800331c <HAL_Delay>
		i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, 0x3a, 1, 10);
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <mpuInit+0x230>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b299      	uxth	r1, r3
 80027ee:	4826      	ldr	r0, [pc, #152]	; (8002888 <mpuInit+0x270>)
 80027f0:	230a      	movs	r3, #10
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2301      	movs	r3, #1
 80027f6:	223a      	movs	r2, #58	; 0x3a
 80027f8:	f001 f97e 	bl	8003af8 <HAL_I2C_Master_Transmit>
 80027fc:	0003      	movs	r3, r0
 80027fe:	001a      	movs	r2, r3
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <mpuInit+0x274>)
 8002802:	701a      	strb	r2, [r3, #0]
		i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <mpuInit+0x230>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b299      	uxth	r1, r3
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <mpuInit+0x278>)
 800280c:	481e      	ldr	r0, [pc, #120]	; (8002888 <mpuInit+0x270>)
 800280e:	230a      	movs	r3, #10
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	f001 fa78 	bl	8003d08 <HAL_I2C_Master_Receive>
 8002818:	0003      	movs	r3, r0
 800281a:	001a      	movs	r2, r3
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <mpuInit+0x274>)
 800281e:	701a      	strb	r2, [r3, #0]

	//	HAL_Delay(100000);
//=========================MPU9250
	uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 8002820:	491c      	ldr	r1, [pc, #112]	; (8002894 <mpuInit+0x27c>)
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <mpuInit+0x280>)
 8002824:	220e      	movs	r2, #14
 8002826:	0018      	movs	r0, r3
 8002828:	f002 ffe8 	bl	80057fc <HAL_UART_Receive_IT>
 800282c:	0003      	movs	r3, r0
 800282e:	001a      	movs	r2, r3
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <mpuInit+0x284>)
 8002832:	701a      	strb	r2, [r3, #0]
	initStatus = 1;
 8002834:	193b      	adds	r3, r7, r4
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
	return initStatus;
 800283a:	193b      	adds	r3, r7, r4
 800283c:	781b      	ldrb	r3, [r3, #0]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b00d      	add	sp, #52	; 0x34
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	200000cc 	.word	0x200000cc
 800284c:	0000206b 	.word	0x0000206b
 8002850:	0000076c 	.word	0x0000076c
 8002854:	0000081e 	.word	0x0000081e
 8002858:	00000d1d 	.word	0x00000d1d
 800285c:	00004038 	.word	0x00004038
 8002860:	ffffc069 	.word	0xffffc069
 8002864:	0000031f 	.word	0x0000031f
 8002868:	0000041e 	.word	0x0000041e
 800286c:	00004c37 	.word	0x00004c37
 8002870:	200000cd 	.word	0x200000cd
 8002874:	200000ce 	.word	0x200000ce
 8002878:	200000cf 	.word	0x200000cf
 800287c:	200000d0 	.word	0x200000d0
 8002880:	200000d1 	.word	0x200000d1
 8002884:	200000d2 	.word	0x200000d2
 8002888:	200001bc 	.word	0x200001bc
 800288c:	200001b8 	.word	0x200001b8
 8002890:	200000d5 	.word	0x200000d5
 8002894:	200000d8 	.word	0x200000d8
 8002898:	20000230 	.word	0x20000230
 800289c:	20000208 	.word	0x20000208

080028a0 <gnssInit>:



char gnssInit(void){
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	b099      	sub	sp, #100	; 0x64
 80028a4:	af00      	add	r7, sp, #0
	// TODO Add proper status return or error handling
	char initStatus = 0;
 80028a6:	245f      	movs	r4, #95	; 0x5f
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
	//=========================GNSS
	uint8_t AT_CGNSPWR_ON[] 	= "AT+CGNSPWR=1\r";				// GNSS turns Power ON
 80028ae:	2050      	movs	r0, #80	; 0x50
 80028b0:	183b      	adds	r3, r7, r0
 80028b2:	4a47      	ldr	r2, [pc, #284]	; (80029d0 <gnssInit+0x130>)
 80028b4:	ca62      	ldmia	r2!, {r1, r5, r6}
 80028b6:	c362      	stmia	r3!, {r1, r5, r6}
 80028b8:	8812      	ldrh	r2, [r2, #0]
 80028ba:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSPWR_OFF[] 	= "AT+CGNSPWR=0\r";				// GNSS turns Power OFF
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	4a44      	ldr	r2, [pc, #272]	; (80029d4 <gnssInit+0x134>)
 80028c2:	ca62      	ldmia	r2!, {r1, r5, r6}
 80028c4:	c362      	stmia	r3!, {r1, r5, r6}
 80028c6:	8812      	ldrh	r2, [r2, #0]
 80028c8:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSSEQ[] 		= "AT+CGNSSEQ=\"RMC\"\r";		// RMC for GGA
 80028ca:	252c      	movs	r5, #44	; 0x2c
 80028cc:	197b      	adds	r3, r7, r5
 80028ce:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <gnssInit+0x138>)
 80028d0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80028d2:	c343      	stmia	r3!, {r0, r1, r6}
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	6019      	str	r1, [r3, #0]
 80028d8:	8892      	ldrh	r2, [r2, #4]
 80028da:	809a      	strh	r2, [r3, #4]
	uint8_t AT_CGNSINF[] 		= "AT+CGNSINF\r";				// Gets data from GNSS
 80028dc:	2320      	movs	r3, #32
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	4a3e      	ldr	r2, [pc, #248]	; (80029dc <gnssInit+0x13c>)
 80028e2:	ca43      	ldmia	r2!, {r0, r1, r6}
 80028e4:	c343      	stmia	r3!, {r0, r1, r6}
	uint8_t AT_CGNSURC_SET[] 	= "AT+CGNSURC=0\r";
 80028e6:	2610      	movs	r6, #16
 80028e8:	19bb      	adds	r3, r7, r6
 80028ea:	4a3d      	ldr	r2, [pc, #244]	; (80029e0 <gnssInit+0x140>)
 80028ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ee:	c313      	stmia	r3!, {r0, r1, r4}
 80028f0:	8812      	ldrh	r2, [r2, #0]
 80028f2:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSURC_ASK[] 	= "AT+CGNSURC?\r";
 80028f4:	003b      	movs	r3, r7
 80028f6:	4a3b      	ldr	r2, [pc, #236]	; (80029e4 <gnssInit+0x144>)
 80028f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028fa:	c313      	stmia	r3!, {r0, r1, r4}
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	701a      	strb	r2, [r3, #0]
	//=========================GNSS

	//=========================GNSS
	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSPWR_ON, sizeof(AT_CGNSPWR_ON), 1000);
 8002900:	23fa      	movs	r3, #250	; 0xfa
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	2050      	movs	r0, #80	; 0x50
 8002906:	1839      	adds	r1, r7, r0
 8002908:	4837      	ldr	r0, [pc, #220]	; (80029e8 <gnssInit+0x148>)
 800290a:	220e      	movs	r2, #14
 800290c:	f002 fddc 	bl	80054c8 <HAL_UART_Transmit>
 8002910:	0003      	movs	r3, r0
 8002912:	001a      	movs	r2, r3
 8002914:	4b35      	ldr	r3, [pc, #212]	; (80029ec <gnssInit+0x14c>)
 8002916:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8002918:	23fa      	movs	r3, #250	; 0xfa
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4934      	ldr	r1, [pc, #208]	; (80029f0 <gnssInit+0x150>)
 800291e:	4832      	ldr	r0, [pc, #200]	; (80029e8 <gnssInit+0x148>)
 8002920:	2296      	movs	r2, #150	; 0x96
 8002922:	f002 fe7b 	bl	800561c <HAL_UART_Receive>
 8002926:	0003      	movs	r3, r0
 8002928:	001a      	movs	r2, r3
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <gnssInit+0x14c>)
 800292c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 800292e:	2014      	movs	r0, #20
 8002930:	f000 fcf4 	bl	800331c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <gnssInit+0x150>)
 8002936:	2296      	movs	r2, #150	; 0x96
 8002938:	213f      	movs	r1, #63	; 0x3f
 800293a:	0018      	movs	r0, r3
 800293c:	f004 f8a8 	bl	8006a90 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSURC_SET, sizeof(AT_CGNSURC_SET), 1000);
 8002940:	23fa      	movs	r3, #250	; 0xfa
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	19b9      	adds	r1, r7, r6
 8002946:	4828      	ldr	r0, [pc, #160]	; (80029e8 <gnssInit+0x148>)
 8002948:	220e      	movs	r2, #14
 800294a:	f002 fdbd 	bl	80054c8 <HAL_UART_Transmit>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <gnssInit+0x14c>)
 8002954:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8002956:	23fa      	movs	r3, #250	; 0xfa
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4925      	ldr	r1, [pc, #148]	; (80029f0 <gnssInit+0x150>)
 800295c:	4822      	ldr	r0, [pc, #136]	; (80029e8 <gnssInit+0x148>)
 800295e:	2296      	movs	r2, #150	; 0x96
 8002960:	f002 fe5c 	bl	800561c <HAL_UART_Receive>
 8002964:	0003      	movs	r3, r0
 8002966:	001a      	movs	r2, r3
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <gnssInit+0x14c>)
 800296a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800296c:	200a      	movs	r0, #10
 800296e:	f000 fcd5 	bl	800331c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002972:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <gnssInit+0x150>)
 8002974:	2296      	movs	r2, #150	; 0x96
 8002976:	213f      	movs	r1, #63	; 0x3f
 8002978:	0018      	movs	r0, r3
 800297a:	f004 f889 	bl	8006a90 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSSEQ, sizeof(AT_CGNSSEQ), 1000);
 800297e:	23fa      	movs	r3, #250	; 0xfa
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	1979      	adds	r1, r7, r5
 8002984:	4818      	ldr	r0, [pc, #96]	; (80029e8 <gnssInit+0x148>)
 8002986:	2212      	movs	r2, #18
 8002988:	f002 fd9e 	bl	80054c8 <HAL_UART_Transmit>
 800298c:	0003      	movs	r3, r0
 800298e:	001a      	movs	r2, r3
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <gnssInit+0x14c>)
 8002992:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8002994:	23fa      	movs	r3, #250	; 0xfa
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4915      	ldr	r1, [pc, #84]	; (80029f0 <gnssInit+0x150>)
 800299a:	4813      	ldr	r0, [pc, #76]	; (80029e8 <gnssInit+0x148>)
 800299c:	2296      	movs	r2, #150	; 0x96
 800299e:	f002 fe3d 	bl	800561c <HAL_UART_Receive>
 80029a2:	0003      	movs	r3, r0
 80029a4:	001a      	movs	r2, r3
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <gnssInit+0x14c>)
 80029a8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80029aa:	200a      	movs	r0, #10
 80029ac:	f000 fcb6 	bl	800331c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <gnssInit+0x150>)
 80029b2:	2296      	movs	r2, #150	; 0x96
 80029b4:	213f      	movs	r1, #63	; 0x3f
 80029b6:	0018      	movs	r0, r3
 80029b8:	f004 f86a 	bl	8006a90 <memset>
	//=========================GNSS
	initStatus = 1;
 80029bc:	245f      	movs	r4, #95	; 0x5f
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
	return initStatus;
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	781b      	ldrb	r3, [r3, #0]
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b019      	add	sp, #100	; 0x64
 80029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d0:	08006c54 	.word	0x08006c54
 80029d4:	08006c64 	.word	0x08006c64
 80029d8:	08006c74 	.word	0x08006c74
 80029dc:	08006c48 	.word	0x08006c48
 80029e0:	08006c88 	.word	0x08006c88
 80029e4:	08006c98 	.word	0x08006c98
 80029e8:	20000370 	.word	0x20000370
 80029ec:	20000360 	.word	0x20000360
 80029f0:	200000f8 	.word	0x200000f8

080029f4 <gsmInit>:


char gsmInit(void){
 80029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f6:	b09f      	sub	sp, #124	; 0x7c
 80029f8:	af00      	add	r7, sp, #0
	// TODO Add proper status return or error handling
	char initStatus = 0;
 80029fa:	2477      	movs	r4, #119	; 0x77
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 8002a02:	2370      	movs	r3, #112	; 0x70
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	4a50      	ldr	r2, [pc, #320]	; (8002b48 <gsmInit+0x154>)
 8002a08:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 8002a0a:	2368      	movs	r3, #104	; 0x68
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	4a4f      	ldr	r2, [pc, #316]	; (8002b4c <gsmInit+0x158>)
 8002a10:	6811      	ldr	r1, [r2, #0]
 8002a12:	6019      	str	r1, [r3, #0]
 8002a14:	7912      	ldrb	r2, [r2, #4]
 8002a16:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 8002a18:	235c      	movs	r3, #92	; 0x5c
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	4a4c      	ldr	r2, [pc, #304]	; (8002b50 <gsmInit+0x15c>)
 8002a1e:	ca03      	ldmia	r2!, {r0, r1}
 8002a20:	c303      	stmia	r3!, {r0, r1}
 8002a22:	8811      	ldrh	r1, [r2, #0]
 8002a24:	8019      	strh	r1, [r3, #0]
 8002a26:	7892      	ldrb	r2, [r2, #2]
 8002a28:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 8002a2a:	2350      	movs	r3, #80	; 0x50
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <gsmInit+0x160>)
 8002a30:	ca03      	ldmia	r2!, {r0, r1}
 8002a32:	c303      	stmia	r3!, {r0, r1}
 8002a34:	8811      	ldrh	r1, [r2, #0]
 8002a36:	8019      	strh	r1, [r3, #0]
 8002a38:	7892      	ldrb	r2, [r2, #2]
 8002a3a:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 8002a3c:	2544      	movs	r5, #68	; 0x44
 8002a3e:	197b      	adds	r3, r7, r5
 8002a40:	4a45      	ldr	r2, [pc, #276]	; (8002b58 <gsmInit+0x164>)
 8002a42:	ca03      	ldmia	r2!, {r0, r1}
 8002a44:	c303      	stmia	r3!, {r0, r1}
 8002a46:	8812      	ldrh	r2, [r2, #0]
 8002a48:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 8002a4a:	2038      	movs	r0, #56	; 0x38
 8002a4c:	183b      	adds	r3, r7, r0
 8002a4e:	4a43      	ldr	r2, [pc, #268]	; (8002b5c <gsmInit+0x168>)
 8002a50:	ca42      	ldmia	r2!, {r1, r6}
 8002a52:	c342      	stmia	r3!, {r1, r6}
 8002a54:	8811      	ldrh	r1, [r2, #0]
 8002a56:	8019      	strh	r1, [r3, #0]
 8002a58:	7892      	ldrb	r2, [r2, #2]
 8002a5a:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 8002a5c:	262c      	movs	r6, #44	; 0x2c
 8002a5e:	19bb      	adds	r3, r7, r6
 8002a60:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <gsmInit+0x16c>)
 8002a62:	ca03      	ldmia	r2!, {r0, r1}
 8002a64:	c303      	stmia	r3!, {r0, r1}
 8002a66:	8811      	ldrh	r1, [r2, #0]
 8002a68:	8019      	strh	r1, [r3, #0]
 8002a6a:	7892      	ldrb	r2, [r2, #2]
 8002a6c:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 8002a6e:	231c      	movs	r3, #28
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	4a3c      	ldr	r2, [pc, #240]	; (8002b64 <gsmInit+0x170>)
 8002a74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a76:	c313      	stmia	r3!, {r0, r1, r4}
 8002a78:	8811      	ldrh	r1, [r2, #0]
 8002a7a:	8019      	strh	r1, [r3, #0]
 8002a7c:	7892      	ldrb	r2, [r2, #2]
 8002a7e:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8002a80:	2314      	movs	r3, #20
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <gsmInit+0x174>)
 8002a86:	ca03      	ldmia	r2!, {r0, r1}
 8002a88:	c303      	stmia	r3!, {r0, r1}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <gsmInit+0x178>)
 8002a90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a92:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	221a      	movs	r2, #26
 8002a98:	801a      	strh	r2, [r3, #0]
	//=========================GSM

	//=========================GSM
	uart2Status = HAL_UART_Transmit(&huart2, AT_COPS_RGSTR, sizeof(AT_COPS_RGSTR), 10);
 8002a9a:	2038      	movs	r0, #56	; 0x38
 8002a9c:	1839      	adds	r1, r7, r0
 8002a9e:	4834      	ldr	r0, [pc, #208]	; (8002b70 <gsmInit+0x17c>)
 8002aa0:	230a      	movs	r3, #10
 8002aa2:	220b      	movs	r2, #11
 8002aa4:	f002 fd10 	bl	80054c8 <HAL_UART_Transmit>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	001a      	movs	r2, r3
 8002aac:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <gsmInit+0x180>)
 8002aae:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002ab0:	4931      	ldr	r1, [pc, #196]	; (8002b78 <gsmInit+0x184>)
 8002ab2:	482f      	ldr	r0, [pc, #188]	; (8002b70 <gsmInit+0x17c>)
 8002ab4:	230a      	movs	r3, #10
 8002ab6:	2296      	movs	r2, #150	; 0x96
 8002ab8:	f002 fdb0 	bl	800561c <HAL_UART_Receive>
 8002abc:	0003      	movs	r3, r0
 8002abe:	001a      	movs	r2, r3
 8002ac0:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <gsmInit+0x180>)
 8002ac2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002ac4:	200a      	movs	r0, #10
 8002ac6:	f000 fc29 	bl	800331c <HAL_Delay>

	uart2Status = HAL_UART_Transmit(&huart2, AT_COPS_CRNT, sizeof(AT_COPS_CRNT), 10);
 8002aca:	1979      	adds	r1, r7, r5
 8002acc:	4828      	ldr	r0, [pc, #160]	; (8002b70 <gsmInit+0x17c>)
 8002ace:	230a      	movs	r3, #10
 8002ad0:	220a      	movs	r2, #10
 8002ad2:	f002 fcf9 	bl	80054c8 <HAL_UART_Transmit>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	001a      	movs	r2, r3
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <gsmInit+0x180>)
 8002adc:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002ade:	4926      	ldr	r1, [pc, #152]	; (8002b78 <gsmInit+0x184>)
 8002ae0:	4823      	ldr	r0, [pc, #140]	; (8002b70 <gsmInit+0x17c>)
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	2296      	movs	r2, #150	; 0x96
 8002ae6:	f002 fd99 	bl	800561c <HAL_UART_Receive>
 8002aea:	0003      	movs	r3, r0
 8002aec:	001a      	movs	r2, r3
 8002aee:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <gsmInit+0x180>)
 8002af0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8002af2:	2032      	movs	r0, #50	; 0x32
 8002af4:	f000 fc12 	bl	800331c <HAL_Delay>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGF, sizeof(AT_CMGF), 10);
 8002af8:	19b9      	adds	r1, r7, r6
 8002afa:	481d      	ldr	r0, [pc, #116]	; (8002b70 <gsmInit+0x17c>)
 8002afc:	230a      	movs	r3, #10
 8002afe:	220b      	movs	r2, #11
 8002b00:	f002 fce2 	bl	80054c8 <HAL_UART_Transmit>
 8002b04:	0003      	movs	r3, r0
 8002b06:	001a      	movs	r2, r3
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <gsmInit+0x180>)
 8002b0a:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002b0c:	491a      	ldr	r1, [pc, #104]	; (8002b78 <gsmInit+0x184>)
 8002b0e:	4818      	ldr	r0, [pc, #96]	; (8002b70 <gsmInit+0x17c>)
 8002b10:	230a      	movs	r3, #10
 8002b12:	2296      	movs	r2, #150	; 0x96
 8002b14:	f002 fd82 	bl	800561c <HAL_UART_Receive>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <gsmInit+0x180>)
 8002b1e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002b20:	200a      	movs	r0, #10
 8002b22:	f000 fbfb 	bl	800331c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <gsmInit+0x184>)
 8002b28:	2296      	movs	r2, #150	; 0x96
 8002b2a:	213f      	movs	r1, #63	; 0x3f
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f003 ffaf 	bl	8006a90 <memset>
	initStatus = 1;
 8002b32:	2477      	movs	r4, #119	; 0x77
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
	return initStatus;
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	781b      	ldrb	r3, [r3, #0]
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b01f      	add	sp, #124	; 0x7c
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	000d5441 	.word	0x000d5441
 8002b4c:	08006ca8 	.word	0x08006ca8
 8002b50:	08006cb0 	.word	0x08006cb0
 8002b54:	08006cbc 	.word	0x08006cbc
 8002b58:	08006cc8 	.word	0x08006cc8
 8002b5c:	08006cd4 	.word	0x08006cd4
 8002b60:	08006ce0 	.word	0x08006ce0
 8002b64:	08006cec 	.word	0x08006cec
 8002b68:	08006cfc 	.word	0x08006cfc
 8002b6c:	08006d04 	.word	0x08006d04
 8002b70:	20000370 	.word	0x20000370
 8002b74:	20000360 	.word	0x20000360
 8002b78:	200000f8 	.word	0x200000f8

08002b7c <sendGsmMessage>:

char sendGsmMessage(struct GsmStruct gsmstruct){
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	46c6      	mov	lr, r8
 8002b80:	b500      	push	{lr}
 8002b82:	b0ac      	sub	sp, #176	; 0xb0
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	261c      	movs	r6, #28
 8002b88:	19bb      	adds	r3, r7, r6
 8002b8a:	6018      	str	r0, [r3, #0]
 8002b8c:	6059      	str	r1, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	466b      	mov	r3, sp
 8002b92:	4698      	mov	r8, r3
	// TODO Add proper status return or error handling
	gsmstruct.numberOk = 0;
 8002b94:	19bb      	adds	r3, r7, r6
 8002b96:	2200      	movs	r2, #0
 8002b98:	721a      	strb	r2, [r3, #8]
	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 8002b9a:	238c      	movs	r3, #140	; 0x8c
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	44bc      	add	ip, r7
 8002ba2:	4463      	add	r3, ip
 8002ba4:	4aa8      	ldr	r2, [pc, #672]	; (8002e48 <sendGsmMessage+0x2cc>)
 8002ba6:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 8002ba8:	2384      	movs	r3, #132	; 0x84
 8002baa:	2218      	movs	r2, #24
 8002bac:	4694      	mov	ip, r2
 8002bae:	44bc      	add	ip, r7
 8002bb0:	4463      	add	r3, ip
 8002bb2:	4aa6      	ldr	r2, [pc, #664]	; (8002e4c <sendGsmMessage+0x2d0>)
 8002bb4:	6811      	ldr	r1, [r2, #0]
 8002bb6:	6019      	str	r1, [r3, #0]
 8002bb8:	7912      	ldrb	r2, [r2, #4]
 8002bba:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 8002bbc:	2378      	movs	r3, #120	; 0x78
 8002bbe:	2218      	movs	r2, #24
 8002bc0:	4694      	mov	ip, r2
 8002bc2:	44bc      	add	ip, r7
 8002bc4:	4463      	add	r3, ip
 8002bc6:	4aa2      	ldr	r2, [pc, #648]	; (8002e50 <sendGsmMessage+0x2d4>)
 8002bc8:	ca03      	ldmia	r2!, {r0, r1}
 8002bca:	c303      	stmia	r3!, {r0, r1}
 8002bcc:	8811      	ldrh	r1, [r2, #0]
 8002bce:	8019      	strh	r1, [r3, #0]
 8002bd0:	7892      	ldrb	r2, [r2, #2]
 8002bd2:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 8002bd4:	236c      	movs	r3, #108	; 0x6c
 8002bd6:	2218      	movs	r2, #24
 8002bd8:	4694      	mov	ip, r2
 8002bda:	44bc      	add	ip, r7
 8002bdc:	4463      	add	r3, ip
 8002bde:	4a9d      	ldr	r2, [pc, #628]	; (8002e54 <sendGsmMessage+0x2d8>)
 8002be0:	ca03      	ldmia	r2!, {r0, r1}
 8002be2:	c303      	stmia	r3!, {r0, r1}
 8002be4:	8811      	ldrh	r1, [r2, #0]
 8002be6:	8019      	strh	r1, [r3, #0]
 8002be8:	7892      	ldrb	r2, [r2, #2]
 8002bea:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 8002bec:	2360      	movs	r3, #96	; 0x60
 8002bee:	2218      	movs	r2, #24
 8002bf0:	4694      	mov	ip, r2
 8002bf2:	44bc      	add	ip, r7
 8002bf4:	4463      	add	r3, ip
 8002bf6:	4a98      	ldr	r2, [pc, #608]	; (8002e58 <sendGsmMessage+0x2dc>)
 8002bf8:	ca03      	ldmia	r2!, {r0, r1}
 8002bfa:	c303      	stmia	r3!, {r0, r1}
 8002bfc:	8812      	ldrh	r2, [r2, #0]
 8002bfe:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 8002c00:	2354      	movs	r3, #84	; 0x54
 8002c02:	2218      	movs	r2, #24
 8002c04:	4694      	mov	ip, r2
 8002c06:	44bc      	add	ip, r7
 8002c08:	4463      	add	r3, ip
 8002c0a:	4a94      	ldr	r2, [pc, #592]	; (8002e5c <sendGsmMessage+0x2e0>)
 8002c0c:	ca03      	ldmia	r2!, {r0, r1}
 8002c0e:	c303      	stmia	r3!, {r0, r1}
 8002c10:	8811      	ldrh	r1, [r2, #0]
 8002c12:	8019      	strh	r1, [r3, #0]
 8002c14:	7892      	ldrb	r2, [r2, #2]
 8002c16:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 8002c18:	2348      	movs	r3, #72	; 0x48
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	4694      	mov	ip, r2
 8002c1e:	44bc      	add	ip, r7
 8002c20:	4463      	add	r3, ip
 8002c22:	4a8f      	ldr	r2, [pc, #572]	; (8002e60 <sendGsmMessage+0x2e4>)
 8002c24:	ca03      	ldmia	r2!, {r0, r1}
 8002c26:	c303      	stmia	r3!, {r0, r1}
 8002c28:	8811      	ldrh	r1, [r2, #0]
 8002c2a:	8019      	strh	r1, [r3, #0]
 8002c2c:	7892      	ldrb	r2, [r2, #2]
 8002c2e:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 8002c30:	2338      	movs	r3, #56	; 0x38
 8002c32:	2218      	movs	r2, #24
 8002c34:	4694      	mov	ip, r2
 8002c36:	44bc      	add	ip, r7
 8002c38:	4463      	add	r3, ip
 8002c3a:	4a8a      	ldr	r2, [pc, #552]	; (8002e64 <sendGsmMessage+0x2e8>)
 8002c3c:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002c3e:	c343      	stmia	r3!, {r0, r1, r6}
 8002c40:	8811      	ldrh	r1, [r2, #0]
 8002c42:	8019      	strh	r1, [r3, #0]
 8002c44:	7892      	ldrb	r2, [r2, #2]
 8002c46:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8002c48:	2230      	movs	r2, #48	; 0x30
 8002c4a:	2618      	movs	r6, #24
 8002c4c:	19bb      	adds	r3, r7, r6
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	4a85      	ldr	r2, [pc, #532]	; (8002e68 <sendGsmMessage+0x2ec>)
 8002c52:	ca03      	ldmia	r2!, {r0, r1}
 8002c54:	c303      	stmia	r3!, {r0, r1}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	19bb      	adds	r3, r7, r6
 8002c5a:	189b      	adds	r3, r3, r2
 8002c5c:	4a83      	ldr	r2, [pc, #524]	; (8002e6c <sendGsmMessage+0x2f0>)
 8002c5e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002c60:	c343      	stmia	r3!, {r0, r1, r6}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8002c62:	2220      	movs	r2, #32
 8002c64:	2618      	movs	r6, #24
 8002c66:	19bb      	adds	r3, r7, r6
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	221a      	movs	r2, #26
 8002c6c:	801a      	strh	r2, [r3, #0]
	//uint8_t AT_CMGS_SEND_MSG_BUF[] 	= "AT+CMGS=\"+35844350xxxx\"\rMESSAGE";
	//=========================GSM
	char AT_CMGS_SEND_MSG_BUF_STRT[] = "AT+CMGS=\"";
 8002c6e:	2114      	movs	r1, #20
 8002c70:	19bb      	adds	r3, r7, r6
 8002c72:	185b      	adds	r3, r3, r1
 8002c74:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <sendGsmMessage+0x2f4>)
 8002c76:	ca41      	ldmia	r2!, {r0, r6}
 8002c78:	c341      	stmia	r3!, {r0, r6}
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	801a      	strh	r2, [r3, #0]
	char AT_CMGS_SEND_MSG_BUF_MIDL[] = "\"\r";
 8002c7e:	2010      	movs	r0, #16
 8002c80:	2218      	movs	r2, #24
 8002c82:	18bb      	adds	r3, r7, r2
 8002c84:	181b      	adds	r3, r3, r0
 8002c86:	4a7b      	ldr	r2, [pc, #492]	; (8002e74 <sendGsmMessage+0x2f8>)
 8002c88:	8811      	ldrh	r1, [r2, #0]
 8002c8a:	8019      	strh	r1, [r3, #0]
 8002c8c:	7892      	ldrb	r2, [r2, #2]
 8002c8e:	709a      	strb	r2, [r3, #2]

	char AT_CMGS_SEND_MSG_BUF_TOT[sizeof(AT_CMGS_SEND_MSG_BUF_STRT)+sizeof(AT_CMGS_SEND_MSG_BUF_MIDL)+strlen(gsmstruct.phoneNumber)+strlen(gsmstruct.message)-1];
 8002c90:	211c      	movs	r1, #28
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fa36 	bl	8000108 <strlen>
 8002c9c:	0006      	movs	r6, r0
 8002c9e:	211c      	movs	r1, #28
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7fd fa2f 	bl	8000108 <strlen>
 8002caa:	0003      	movs	r3, r0
 8002cac:	18f3      	adds	r3, r6, r3
 8002cae:	001e      	movs	r6, r3
 8002cb0:	360c      	adds	r6, #12
 8002cb2:	0033      	movs	r3, r6
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	2294      	movs	r2, #148	; 0x94
 8002cb8:	2018      	movs	r0, #24
 8002cba:	4684      	mov	ip, r0
 8002cbc:	44bc      	add	ip, r7
 8002cbe:	4462      	add	r2, ip
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	60be      	str	r6, [r7, #8]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	000b      	movs	r3, r1
 8002cce:	0f5b      	lsrs	r3, r3, #29
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	00c0      	lsls	r0, r0, #3
 8002cd4:	6178      	str	r0, [r7, #20]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	4318      	orrs	r0, r3
 8002cda:	6178      	str	r0, [r7, #20]
 8002cdc:	000b      	movs	r3, r1
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	603e      	str	r6, [r7, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	000b      	movs	r3, r1
 8002cee:	0f5b      	lsrs	r3, r3, #29
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	00c5      	lsls	r5, r0, #3
 8002cf4:	431d      	orrs	r5, r3
 8002cf6:	000b      	movs	r3, r1
 8002cf8:	00dc      	lsls	r4, r3, #3
 8002cfa:	1df3      	adds	r3, r6, #7
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	466c      	mov	r4, sp
 8002d02:	1ae4      	subs	r4, r4, r3
 8002d04:	46a5      	mov	sp, r4
 8002d06:	466b      	mov	r3, sp
 8002d08:	3300      	adds	r3, #0
 8002d0a:	2490      	movs	r4, #144	; 0x90
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	18b8      	adds	r0, r7, r2
 8002d10:	1905      	adds	r5, r0, r4
 8002d12:	602b      	str	r3, [r5, #0]
	strcpy(AT_CMGS_SEND_MSG_BUF_TOT, AT_CMGS_SEND_MSG_BUF_STRT);
 8002d14:	18bb      	adds	r3, r7, r2
 8002d16:	191d      	adds	r5, r3, r4
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	2114      	movs	r1, #20
 8002d1c:	0015      	movs	r5, r2
 8002d1e:	197a      	adds	r2, r7, r5
 8002d20:	1852      	adds	r2, r2, r1
 8002d22:	0011      	movs	r1, r2
 8002d24:	0018      	movs	r0, r3
 8002d26:	f003 fec8 	bl	8006aba <strcpy>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, gsmstruct.phoneNumber);
 8002d2a:	197b      	adds	r3, r7, r5
 8002d2c:	1919      	adds	r1, r3, r4
 8002d2e:	680a      	ldr	r2, [r1, #0]
 8002d30:	211c      	movs	r1, #28
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f003 feb1 	bl	8006aa0 <strcat>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, AT_CMGS_SEND_MSG_BUF_MIDL);
 8002d3e:	197b      	adds	r3, r7, r5
 8002d40:	1919      	adds	r1, r3, r4
 8002d42:	680b      	ldr	r3, [r1, #0]
 8002d44:	2010      	movs	r0, #16
 8002d46:	197a      	adds	r2, r7, r5
 8002d48:	1812      	adds	r2, r2, r0
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f003 fea7 	bl	8006aa0 <strcat>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, gsmstruct.message);
 8002d52:	197b      	adds	r3, r7, r5
 8002d54:	1919      	adds	r1, r3, r4
 8002d56:	680a      	ldr	r2, [r1, #0]
 8002d58:	211c      	movs	r1, #28
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0019      	movs	r1, r3
 8002d60:	0010      	movs	r0, r2
 8002d62:	f003 fe9d 	bl	8006aa0 <strcat>
	//=========================GSM
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002d66:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <sendGsmMessage+0x2fc>)
 8002d68:	2296      	movs	r2, #150	; 0x96
 8002d6a:	213f      	movs	r1, #63	; 0x3f
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f003 fe8f 	bl	8006a90 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CSCS, sizeof(AT_CSCS), 10);
 8002d72:	2338      	movs	r3, #56	; 0x38
 8002d74:	197a      	adds	r2, r7, r5
 8002d76:	18d1      	adds	r1, r2, r3
 8002d78:	4840      	ldr	r0, [pc, #256]	; (8002e7c <sendGsmMessage+0x300>)
 8002d7a:	230a      	movs	r3, #10
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	f002 fba3 	bl	80054c8 <HAL_UART_Transmit>
 8002d82:	0003      	movs	r3, r0
 8002d84:	001a      	movs	r2, r3
 8002d86:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <sendGsmMessage+0x304>)
 8002d88:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002d8a:	493b      	ldr	r1, [pc, #236]	; (8002e78 <sendGsmMessage+0x2fc>)
 8002d8c:	483b      	ldr	r0, [pc, #236]	; (8002e7c <sendGsmMessage+0x300>)
 8002d8e:	230a      	movs	r3, #10
 8002d90:	2296      	movs	r2, #150	; 0x96
 8002d92:	f002 fc43 	bl	800561c <HAL_UART_Receive>
 8002d96:	0003      	movs	r3, r0
 8002d98:	001a      	movs	r2, r3
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <sendGsmMessage+0x304>)
 8002d9c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002d9e:	200a      	movs	r0, #10
 8002da0:	f000 fabc 	bl	800331c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002da4:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <sendGsmMessage+0x2fc>)
 8002da6:	2296      	movs	r2, #150	; 0x96
 8002da8:	213f      	movs	r1, #63	; 0x3f
 8002daa:	0018      	movs	r0, r3
 8002dac:	f003 fe70 	bl	8006a90 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGS_SEND_MSG_BUF_TOT, sizeof(AT_CMGS_SEND_MSG_BUF_TOT), 10);
 8002db0:	197b      	adds	r3, r7, r5
 8002db2:	191b      	adds	r3, r3, r4
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	b2b2      	uxth	r2, r6
 8002db8:	4830      	ldr	r0, [pc, #192]	; (8002e7c <sendGsmMessage+0x300>)
 8002dba:	230a      	movs	r3, #10
 8002dbc:	f002 fb84 	bl	80054c8 <HAL_UART_Transmit>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <sendGsmMessage+0x304>)
 8002dc6:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002dc8:	492b      	ldr	r1, [pc, #172]	; (8002e78 <sendGsmMessage+0x2fc>)
 8002dca:	482c      	ldr	r0, [pc, #176]	; (8002e7c <sendGsmMessage+0x300>)
 8002dcc:	230a      	movs	r3, #10
 8002dce:	2296      	movs	r2, #150	; 0x96
 8002dd0:	f002 fc24 	bl	800561c <HAL_UART_Receive>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <sendGsmMessage+0x304>)
 8002dda:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002ddc:	200a      	movs	r0, #10
 8002dde:	f000 fa9d 	bl	800331c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002de2:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <sendGsmMessage+0x2fc>)
 8002de4:	2296      	movs	r2, #150	; 0x96
 8002de6:	213f      	movs	r1, #63	; 0x3f
 8002de8:	0018      	movs	r0, r3
 8002dea:	f003 fe51 	bl	8006a90 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGS_SEND_CTRLZ, sizeof(AT_CMGS_SEND_CTRLZ), 1000);
 8002dee:	23fa      	movs	r3, #250	; 0xfa
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	2220      	movs	r2, #32
 8002df4:	1978      	adds	r0, r7, r5
 8002df6:	1881      	adds	r1, r0, r2
 8002df8:	4820      	ldr	r0, [pc, #128]	; (8002e7c <sendGsmMessage+0x300>)
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f002 fb64 	bl	80054c8 <HAL_UART_Transmit>
 8002e00:	0003      	movs	r3, r0
 8002e02:	001a      	movs	r2, r3
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <sendGsmMessage+0x304>)
 8002e06:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002e08:	491b      	ldr	r1, [pc, #108]	; (8002e78 <sendGsmMessage+0x2fc>)
 8002e0a:	481c      	ldr	r0, [pc, #112]	; (8002e7c <sendGsmMessage+0x300>)
 8002e0c:	230a      	movs	r3, #10
 8002e0e:	2296      	movs	r2, #150	; 0x96
 8002e10:	f002 fc04 	bl	800561c <HAL_UART_Receive>
 8002e14:	0003      	movs	r3, r0
 8002e16:	001a      	movs	r2, r3
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <sendGsmMessage+0x304>)
 8002e1a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002e1c:	200a      	movs	r0, #10
 8002e1e:	f000 fa7d 	bl	800331c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <sendGsmMessage+0x2fc>)
 8002e24:	2296      	movs	r2, #150	; 0x96
 8002e26:	213f      	movs	r1, #63	; 0x3f
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f003 fe31 	bl	8006a90 <memset>
	//=========================GSM
	gsmstruct.numberOk = 1;
 8002e2e:	211c      	movs	r1, #28
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2201      	movs	r2, #1
 8002e34:	721a      	strb	r2, [r3, #8]
	return gsmstruct.numberOk;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	7a1b      	ldrb	r3, [r3, #8]
 8002e3a:	46c5      	mov	sp, r8
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b02c      	add	sp, #176	; 0xb0
 8002e42:	bc80      	pop	{r7}
 8002e44:	46b8      	mov	r8, r7
 8002e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e48:	000d5441 	.word	0x000d5441
 8002e4c:	08006ca8 	.word	0x08006ca8
 8002e50:	08006cb0 	.word	0x08006cb0
 8002e54:	08006cbc 	.word	0x08006cbc
 8002e58:	08006cc8 	.word	0x08006cc8
 8002e5c:	08006cd4 	.word	0x08006cd4
 8002e60:	08006ce0 	.word	0x08006ce0
 8002e64:	08006cec 	.word	0x08006cec
 8002e68:	08006cfc 	.word	0x08006cfc
 8002e6c:	08006d04 	.word	0x08006d04
 8002e70:	08006d10 	.word	0x08006d10
 8002e74:	08006d1c 	.word	0x08006d1c
 8002e78:	200000f8 	.word	0x200000f8
 8002e7c:	20000370 	.word	0x20000370
 8002e80:	20000360 	.word	0x20000360

08002e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e88:	b672      	cpsid	i
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <Error_Handler+0x8>
	...

08002e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_MspInit+0x44>)
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_MspInit+0x44>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	619a      	str	r2, [r3, #24]
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_MspInit+0x44>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_MspInit+0x44>)
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_MspInit+0x44>)
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	0549      	lsls	r1, r1, #21
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	61da      	str	r2, [r3, #28]
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_MspInit+0x44>)
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	055b      	lsls	r3, r3, #21
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b08b      	sub	sp, #44	; 0x2c
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	2414      	movs	r4, #20
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	2314      	movs	r3, #20
 8002ee8:	001a      	movs	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	f003 fdd0 	bl	8006a90 <memset>
  if(hi2c->Instance==I2C1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_I2C_MspInit+0x94>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d133      	bne.n	8002f62 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_I2C_MspInit+0x98>)
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <HAL_I2C_MspInit+0x98>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	0289      	lsls	r1, r1, #10
 8002f04:	430a      	orrs	r2, r1
 8002f06:	615a      	str	r2, [r3, #20]
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_I2C_MspInit+0x98>)
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	029b      	lsls	r3, r3, #10
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA11     ------> I2C1_SCL
    PA12     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	22c0      	movs	r2, #192	; 0xc0
 8002f1a:	0152      	lsls	r2, r2, #5
 8002f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1e:	0021      	movs	r1, r4
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	2212      	movs	r2, #18
 8002f24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2201      	movs	r2, #1
 8002f2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C1;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2205      	movs	r2, #5
 8002f36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	187a      	adds	r2, r7, r1
 8002f3a:	2390      	movs	r3, #144	; 0x90
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	0011      	movs	r1, r2
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fb87 	bl	8003654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_I2C_MspInit+0x98>)
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_I2C_MspInit+0x98>)
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	0389      	lsls	r1, r1, #14
 8002f50:	430a      	orrs	r2, r1
 8002f52:	61da      	str	r2, [r3, #28]
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_I2C_MspInit+0x98>)
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	039b      	lsls	r3, r3, #14
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b00b      	add	sp, #44	; 0x2c
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40005400 	.word	0x40005400
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b08b      	sub	sp, #44	; 0x2c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	2414      	movs	r4, #20
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	0018      	movs	r0, r3
 8002f82:	2314      	movs	r3, #20
 8002f84:	001a      	movs	r2, r3
 8002f86:	2100      	movs	r1, #0
 8002f88:	f003 fd82 	bl	8006a90 <memset>
  if(hspi->Instance==SPI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_SPI_MspInit+0x90>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d132      	bne.n	8002ffc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_SPI_MspInit+0x94>)
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_SPI_MspInit+0x94>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	0149      	lsls	r1, r1, #5
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	619a      	str	r2, [r3, #24]
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_SPI_MspInit+0x94>)
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	015b      	lsls	r3, r3, #5
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_SPI_MspInit+0x94>)
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_SPI_MspInit+0x94>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0289      	lsls	r1, r1, #10
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	615a      	str	r2, [r3, #20]
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_SPI_MspInit+0x94>)
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fce:	0021      	movs	r1, r4
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	22e0      	movs	r2, #224	; 0xe0
 8002fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	187b      	adds	r3, r7, r1
 8002fd8:	2202      	movs	r2, #2
 8002fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fee:	187a      	adds	r2, r7, r1
 8002ff0:	2390      	movs	r3, #144	; 0x90
 8002ff2:	05db      	lsls	r3, r3, #23
 8002ff4:	0011      	movs	r1, r2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 fb2c 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b00b      	add	sp, #44	; 0x2c
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	40013000 	.word	0x40013000
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_TIM_Base_MspInit+0x38>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10d      	bne.n	800303a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_TIM_Base_MspInit+0x3c>)
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_TIM_Base_MspInit+0x3c>)
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	0289      	lsls	r1, r1, #10
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_TIM_Base_MspInit+0x3c>)
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	029b      	lsls	r3, r3, #10
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	40014400 	.word	0x40014400
 8003048:	40021000 	.word	0x40021000

0800304c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b08d      	sub	sp, #52	; 0x34
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	241c      	movs	r4, #28
 8003056:	193b      	adds	r3, r7, r4
 8003058:	0018      	movs	r0, r3
 800305a:	2314      	movs	r3, #20
 800305c:	001a      	movs	r2, r3
 800305e:	2100      	movs	r1, #0
 8003060:	f003 fd16 	bl	8006a90 <memset>
  if(huart->Instance==USART1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <HAL_UART_MspInit+0x114>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d13c      	bne.n	80030e8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_UART_MspInit+0x118>)
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_UART_MspInit+0x118>)
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	01c9      	lsls	r1, r1, #7
 8003078:	430a      	orrs	r2, r1
 800307a:	619a      	str	r2, [r3, #24]
 800307c:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_UART_MspInit+0x118>)
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	01db      	lsls	r3, r3, #7
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_UART_MspInit+0x118>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	4b35      	ldr	r3, [pc, #212]	; (8003164 <HAL_UART_MspInit+0x118>)
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	0289      	lsls	r1, r1, #10
 8003094:	430a      	orrs	r2, r1
 8003096:	615a      	str	r2, [r3, #20]
 8003098:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_UART_MspInit+0x118>)
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	029b      	lsls	r3, r3, #10
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	22c0      	movs	r2, #192	; 0xc0
 80030aa:	00d2      	lsls	r2, r2, #3
 80030ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	0021      	movs	r1, r4
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2202      	movs	r2, #2
 80030b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2203      	movs	r2, #3
 80030c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2201      	movs	r2, #1
 80030c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c8:	187a      	adds	r2, r7, r1
 80030ca:	2390      	movs	r3, #144	; 0x90
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 fabf 	bl	8003654 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	201b      	movs	r0, #27
 80030dc:	f000 fa0a 	bl	80034f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030e0:	201b      	movs	r0, #27
 80030e2:	f000 fa1c 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030e6:	e037      	b.n	8003158 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_UART_MspInit+0x11c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d132      	bne.n	8003158 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_UART_MspInit+0x118>)
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_UART_MspInit+0x118>)
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	0289      	lsls	r1, r1, #10
 80030fc:	430a      	orrs	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_UART_MspInit+0x118>)
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	029b      	lsls	r3, r3, #10
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_UART_MspInit+0x118>)
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_UART_MspInit+0x118>)
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	0289      	lsls	r1, r1, #10
 8003118:	430a      	orrs	r2, r1
 800311a:	615a      	str	r2, [r3, #20]
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_UART_MspInit+0x118>)
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	029b      	lsls	r3, r3, #10
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800312a:	211c      	movs	r1, #28
 800312c:	187b      	adds	r3, r7, r1
 800312e:	220c      	movs	r2, #12
 8003130:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2202      	movs	r2, #2
 8003136:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2203      	movs	r2, #3
 8003142:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003144:	187b      	adds	r3, r7, r1
 8003146:	2201      	movs	r2, #1
 8003148:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314a:	187a      	adds	r2, r7, r1
 800314c:	2390      	movs	r3, #144	; 0x90
 800314e:	05db      	lsls	r3, r3, #23
 8003150:	0011      	movs	r1, r2
 8003152:	0018      	movs	r0, r3
 8003154:	f000 fa7e 	bl	8003654 <HAL_GPIO_Init>
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b00d      	add	sp, #52	; 0x34
 800315e:	bd90      	pop	{r4, r7, pc}
 8003160:	40013800 	.word	0x40013800
 8003164:	40021000 	.word	0x40021000
 8003168:	40004400 	.word	0x40004400

0800316c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <NMI_Handler+0x4>

08003172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <HardFault_Handler+0x4>

08003178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003190:	f000 f8a8 	bl	80032e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800319e:	2010      	movs	r0, #16
 80031a0:	f000 fbf8 	bl	8003994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <USART1_IRQHandler+0x14>)
 80031b2:	0018      	movs	r0, r3
 80031b4:	f002 fb84 	bl	80058c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	20000230 	.word	0x20000230

080031c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031d0:	4813      	ldr	r0, [pc, #76]	; (8003220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031d2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80031d4:	4813      	ldr	r0, [pc, #76]	; (8003224 <LoopForever+0x6>)
    LDR R1, [R0]
 80031d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80031d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80031da:	4a13      	ldr	r2, [pc, #76]	; (8003228 <LoopForever+0xa>)
    CMP R1, R2
 80031dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80031de:	d105      	bne.n	80031ec <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80031e0:	4812      	ldr	r0, [pc, #72]	; (800322c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80031e2:	4913      	ldr	r1, [pc, #76]	; (8003230 <LoopForever+0x12>)
    STR R1, [R0]
 80031e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80031e6:	4813      	ldr	r0, [pc, #76]	; (8003234 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80031e8:	4913      	ldr	r1, [pc, #76]	; (8003238 <LoopForever+0x1a>)
    STR R1, [R0]
 80031ea:	6001      	str	r1, [r0, #0]

080031ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031ec:	4813      	ldr	r0, [pc, #76]	; (800323c <LoopForever+0x1e>)
  ldr r1, =_edata
 80031ee:	4914      	ldr	r1, [pc, #80]	; (8003240 <LoopForever+0x22>)
  ldr r2, =_sidata
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <LoopForever+0x26>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f4:	e002      	b.n	80031fc <LoopCopyDataInit>

080031f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fa:	3304      	adds	r3, #4

080031fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003200:	d3f9      	bcc.n	80031f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003202:	4a11      	ldr	r2, [pc, #68]	; (8003248 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003204:	4c11      	ldr	r4, [pc, #68]	; (800324c <LoopForever+0x2e>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003208:	e001      	b.n	800320e <LoopFillZerobss>

0800320a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800320c:	3204      	adds	r2, #4

0800320e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003210:	d3fb      	bcc.n	800320a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003212:	f7ff ffd7 	bl	80031c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003216:	f003 fc17 	bl	8006a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800321a:	f7fe f9db 	bl	80015d4 <main>

0800321e <LoopForever>:

LoopForever:
    b LoopForever
 800321e:	e7fe      	b.n	800321e <LoopForever>
  ldr   r0, =_estack
 8003220:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003224:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003228:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800322c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8003230:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003234:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003238:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800323c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003240:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003244:	08006ea4 	.word	0x08006ea4
  ldr r2, =_sbss
 8003248:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800324c:	20000468 	.word	0x20000468

08003250 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003250:	e7fe      	b.n	8003250 <ADC1_IRQHandler>
	...

08003254 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_Init+0x24>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_Init+0x24>)
 800325e:	2110      	movs	r1, #16
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003264:	2000      	movs	r0, #0
 8003266:	f000 f809 	bl	800327c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800326a:	f7ff fe11 	bl	8002e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	40022000 	.word	0x40022000

0800327c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_InitTick+0x5c>)
 8003286:	681c      	ldr	r4, [r3, #0]
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_InitTick+0x60>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	0019      	movs	r1, r3
 800328e:	23fa      	movs	r3, #250	; 0xfa
 8003290:	0098      	lsls	r0, r3, #2
 8003292:	f7fc ff41 	bl	8000118 <__udivsi3>
 8003296:	0003      	movs	r3, r0
 8003298:	0019      	movs	r1, r3
 800329a:	0020      	movs	r0, r4
 800329c:	f7fc ff3c 	bl	8000118 <__udivsi3>
 80032a0:	0003      	movs	r3, r0
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 f94b 	bl	800353e <HAL_SYSTICK_Config>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e00f      	b.n	80032d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d80b      	bhi.n	80032ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	2301      	movs	r3, #1
 80032ba:	425b      	negs	r3, r3
 80032bc:	2200      	movs	r2, #0
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 f918 	bl	80034f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_InitTick+0x64>)
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b003      	add	sp, #12
 80032d6:	bd90      	pop	{r4, r7, pc}
 80032d8:	20000020 	.word	0x20000020
 80032dc:	20000028 	.word	0x20000028
 80032e0:	20000024 	.word	0x20000024

080032e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_IncTick+0x1c>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	001a      	movs	r2, r3
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_IncTick+0x20>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	18d2      	adds	r2, r2, r3
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_IncTick+0x20>)
 80032f6:	601a      	str	r2, [r3, #0]
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	20000028 	.word	0x20000028
 8003304:	20000464 	.word	0x20000464

08003308 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  return uwTick;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_GetTick+0x10>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000464 	.word	0x20000464

0800331c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff fff0 	bl	8003308 <HAL_GetTick>
 8003328:	0003      	movs	r3, r0
 800332a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	d005      	beq.n	8003342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_Delay+0x44>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	001a      	movs	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	189b      	adds	r3, r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	f7ff ffe0 	bl	8003308 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	429a      	cmp	r2, r3
 8003352:	d8f7      	bhi.n	8003344 <HAL_Delay+0x28>
  {
  }
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20000028 	.word	0x20000028

08003364 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_SuspendTick+0x18>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_SuspendTick+0x18>)
 800336e:	2102      	movs	r1, #2
 8003370:	438a      	bics	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	e000e010 	.word	0xe000e010

08003380 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_ResumeTick+0x18>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_ResumeTick+0x18>)
 800338a:	2102      	movs	r1, #2
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	e000e010 	.word	0xe000e010

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	0002      	movs	r2, r0
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b7f      	cmp	r3, #127	; 0x7f
 80033ae:	d809      	bhi.n	80033c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b0:	1dfb      	adds	r3, r7, #7
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	001a      	movs	r2, r3
 80033b6:	231f      	movs	r3, #31
 80033b8:	401a      	ands	r2, r3
 80033ba:	4b04      	ldr	r3, [pc, #16]	; (80033cc <__NVIC_EnableIRQ+0x30>)
 80033bc:	2101      	movs	r1, #1
 80033be:	4091      	lsls	r1, r2
 80033c0:	000a      	movs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
  }
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b7f      	cmp	r3, #127	; 0x7f
 80033e4:	d828      	bhi.n	8003438 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e6:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <__NVIC_SetPriority+0xd4>)
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	33c0      	adds	r3, #192	; 0xc0
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	589b      	ldr	r3, [r3, r2]
 80033f6:	1dfa      	adds	r2, r7, #7
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	0011      	movs	r1, r2
 80033fc:	2203      	movs	r2, #3
 80033fe:	400a      	ands	r2, r1
 8003400:	00d2      	lsls	r2, r2, #3
 8003402:	21ff      	movs	r1, #255	; 0xff
 8003404:	4091      	lsls	r1, r2
 8003406:	000a      	movs	r2, r1
 8003408:	43d2      	mvns	r2, r2
 800340a:	401a      	ands	r2, r3
 800340c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	019b      	lsls	r3, r3, #6
 8003412:	22ff      	movs	r2, #255	; 0xff
 8003414:	401a      	ands	r2, r3
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	0018      	movs	r0, r3
 800341c:	2303      	movs	r3, #3
 800341e:	4003      	ands	r3, r0
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003424:	481f      	ldr	r0, [pc, #124]	; (80034a4 <__NVIC_SetPriority+0xd4>)
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b25b      	sxtb	r3, r3
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	430a      	orrs	r2, r1
 8003430:	33c0      	adds	r3, #192	; 0xc0
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003436:	e031      	b.n	800349c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <__NVIC_SetPriority+0xd8>)
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	0019      	movs	r1, r3
 8003440:	230f      	movs	r3, #15
 8003442:	400b      	ands	r3, r1
 8003444:	3b08      	subs	r3, #8
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3306      	adds	r3, #6
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	3304      	adds	r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1dfa      	adds	r2, r7, #7
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	0011      	movs	r1, r2
 8003458:	2203      	movs	r2, #3
 800345a:	400a      	ands	r2, r1
 800345c:	00d2      	lsls	r2, r2, #3
 800345e:	21ff      	movs	r1, #255	; 0xff
 8003460:	4091      	lsls	r1, r2
 8003462:	000a      	movs	r2, r1
 8003464:	43d2      	mvns	r2, r2
 8003466:	401a      	ands	r2, r3
 8003468:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	22ff      	movs	r2, #255	; 0xff
 8003470:	401a      	ands	r2, r3
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	0018      	movs	r0, r3
 8003478:	2303      	movs	r3, #3
 800347a:	4003      	ands	r3, r0
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003480:	4809      	ldr	r0, [pc, #36]	; (80034a8 <__NVIC_SetPriority+0xd8>)
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	001c      	movs	r4, r3
 8003488:	230f      	movs	r3, #15
 800348a:	4023      	ands	r3, r4
 800348c:	3b08      	subs	r3, #8
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	430a      	orrs	r2, r1
 8003492:	3306      	adds	r3, #6
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	18c3      	adds	r3, r0, r3
 8003498:	3304      	adds	r3, #4
 800349a:	601a      	str	r2, [r3, #0]
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b003      	add	sp, #12
 80034a2:	bd90      	pop	{r4, r7, pc}
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	045b      	lsls	r3, r3, #17
 80034bc:	429a      	cmp	r2, r3
 80034be:	d301      	bcc.n	80034c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c0:	2301      	movs	r3, #1
 80034c2:	e010      	b.n	80034e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <SysTick_Config+0x44>)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	3a01      	subs	r2, #1
 80034ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034cc:	2301      	movs	r3, #1
 80034ce:	425b      	negs	r3, r3
 80034d0:	2103      	movs	r1, #3
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7ff ff7c 	bl	80033d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SysTick_Config+0x44>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <SysTick_Config+0x44>)
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	e000e010 	.word	0xe000e010

080034f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	210f      	movs	r1, #15
 8003500:	187b      	adds	r3, r7, r1
 8003502:	1c02      	adds	r2, r0, #0
 8003504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	187b      	adds	r3, r7, r1
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b25b      	sxtb	r3, r3
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff ff5d 	bl	80033d0 <__NVIC_SetPriority>
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	0002      	movs	r2, r0
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800352a:	1dfb      	adds	r3, r7, #7
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b25b      	sxtb	r3, r3
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff ff33 	bl	800339c <__NVIC_EnableIRQ>
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b002      	add	sp, #8
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff ffaf 	bl	80034ac <SysTick_Config>
 800354e:	0003      	movs	r3, r0
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2221      	movs	r2, #33	; 0x21
 8003564:	5c9b      	ldrb	r3, [r3, r2]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d008      	beq.n	800357e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2204      	movs	r2, #4
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	2100      	movs	r1, #0
 8003578:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e020      	b.n	80035c0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	210e      	movs	r1, #14
 800358a:	438a      	bics	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	2101      	movs	r1, #1
 80035a8:	4091      	lsls	r1, r2
 80035aa:	000a      	movs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2221      	movs	r2, #33	; 0x21
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	2100      	movs	r1, #0
 80035bc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	0018      	movs	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	210f      	movs	r1, #15
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2221      	movs	r2, #33	; 0x21
 80035dc:	5c9b      	ldrb	r3, [r3, r2]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d006      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2204      	movs	r2, #4
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e028      	b.n	8003644 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	210e      	movs	r1, #14
 80035fe:	438a      	bics	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2101      	movs	r1, #1
 800360e:	438a      	bics	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	2101      	movs	r1, #1
 800361c:	4091      	lsls	r1, r2
 800361e:	000a      	movs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2221      	movs	r2, #33	; 0x21
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	0010      	movs	r0, r2
 8003642:	4798      	blx	r3
    } 
  }
  return status;
 8003644:	230f      	movs	r3, #15
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	781b      	ldrb	r3, [r3, #0]
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b004      	add	sp, #16
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003662:	e149      	b.n	80038f8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4091      	lsls	r1, r2
 800366e:	000a      	movs	r2, r1
 8003670:	4013      	ands	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d100      	bne.n	800367c <HAL_GPIO_Init+0x28>
 800367a:	e13a      	b.n	80038f2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2203      	movs	r2, #3
 8003682:	4013      	ands	r3, r2
 8003684:	2b01      	cmp	r3, #1
 8003686:	d005      	beq.n	8003694 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2203      	movs	r2, #3
 800368e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003690:	2b02      	cmp	r3, #2
 8003692:	d130      	bne.n	80036f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	409a      	lsls	r2, r3
 80036a2:	0013      	movs	r3, r2
 80036a4:	43da      	mvns	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	0013      	movs	r3, r2
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ca:	2201      	movs	r2, #1
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	409a      	lsls	r2, r3
 80036d0:	0013      	movs	r3, r2
 80036d2:	43da      	mvns	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	2201      	movs	r2, #1
 80036e2:	401a      	ands	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	409a      	lsls	r2, r3
 80036e8:	0013      	movs	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d017      	beq.n	8003732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	409a      	lsls	r2, r3
 8003710:	0013      	movs	r3, r2
 8003712:	43da      	mvns	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	409a      	lsls	r2, r3
 8003724:	0013      	movs	r3, r2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2203      	movs	r2, #3
 8003738:	4013      	ands	r3, r2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d123      	bne.n	8003786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	08da      	lsrs	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3208      	adds	r2, #8
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	58d3      	ldr	r3, [r2, r3]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2207      	movs	r2, #7
 8003750:	4013      	ands	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	409a      	lsls	r2, r3
 8003758:	0013      	movs	r3, r2
 800375a:	43da      	mvns	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2107      	movs	r1, #7
 800376a:	400b      	ands	r3, r1
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	409a      	lsls	r2, r3
 8003770:	0013      	movs	r3, r2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	08da      	lsrs	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3208      	adds	r2, #8
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	6939      	ldr	r1, [r7, #16]
 8003784:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	409a      	lsls	r2, r3
 8003794:	0013      	movs	r3, r2
 8003796:	43da      	mvns	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2203      	movs	r2, #3
 80037a4:	401a      	ands	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	23c0      	movs	r3, #192	; 0xc0
 80037c0:	029b      	lsls	r3, r3, #10
 80037c2:	4013      	ands	r3, r2
 80037c4:	d100      	bne.n	80037c8 <HAL_GPIO_Init+0x174>
 80037c6:	e094      	b.n	80038f2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c8:	4b51      	ldr	r3, [pc, #324]	; (8003910 <HAL_GPIO_Init+0x2bc>)
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_GPIO_Init+0x2bc>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	430a      	orrs	r2, r1
 80037d2:	619a      	str	r2, [r3, #24]
 80037d4:	4b4e      	ldr	r3, [pc, #312]	; (8003910 <HAL_GPIO_Init+0x2bc>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2201      	movs	r2, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037e0:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <HAL_GPIO_Init+0x2c0>)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	589b      	ldr	r3, [r3, r2]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2203      	movs	r2, #3
 80037f2:	4013      	ands	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	409a      	lsls	r2, r3
 80037fa:	0013      	movs	r3, r2
 80037fc:	43da      	mvns	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	2390      	movs	r3, #144	; 0x90
 8003808:	05db      	lsls	r3, r3, #23
 800380a:	429a      	cmp	r2, r3
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x1d6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a41      	ldr	r2, [pc, #260]	; (8003918 <HAL_GPIO_Init+0x2c4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x1d2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a40      	ldr	r2, [pc, #256]	; (800391c <HAL_GPIO_Init+0x2c8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x1ce>
 800381e:	2302      	movs	r3, #2
 8003820:	e004      	b.n	800382c <HAL_GPIO_Init+0x1d8>
 8003822:	2305      	movs	r3, #5
 8003824:	e002      	b.n	800382c <HAL_GPIO_Init+0x1d8>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_GPIO_Init+0x1d8>
 800382a:	2300      	movs	r3, #0
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	2103      	movs	r1, #3
 8003830:	400a      	ands	r2, r1
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	4093      	lsls	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800383c:	4935      	ldr	r1, [pc, #212]	; (8003914 <HAL_GPIO_Init+0x2c0>)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	3302      	adds	r3, #2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43da      	mvns	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	025b      	lsls	r3, r3, #9
 8003862:	4013      	ands	r3, r2
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43da      	mvns	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	029b      	lsls	r3, r3, #10
 800388c:	4013      	ands	r3, r2
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43da      	mvns	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	035b      	lsls	r3, r3, #13
 80038b6:	4013      	ands	r3, r2
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80038c8:	4b15      	ldr	r3, [pc, #84]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43da      	mvns	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	039b      	lsls	r3, r3, #14
 80038e0:	4013      	ands	r3, r2
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3301      	adds	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	40da      	lsrs	r2, r3
 8003900:	1e13      	subs	r3, r2, #0
 8003902:	d000      	beq.n	8003906 <HAL_GPIO_Init+0x2b2>
 8003904:	e6ae      	b.n	8003664 <HAL_GPIO_Init+0x10>
  } 
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b006      	add	sp, #24
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	40010000 	.word	0x40010000
 8003918:	48000400 	.word	0x48000400
 800391c:	48000800 	.word	0x48000800
 8003920:	40010400 	.word	0x40010400

08003924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	0008      	movs	r0, r1
 800392e:	0011      	movs	r1, r2
 8003930:	1cbb      	adds	r3, r7, #2
 8003932:	1c02      	adds	r2, r0, #0
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	1c7b      	adds	r3, r7, #1
 8003938:	1c0a      	adds	r2, r1, #0
 800393a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800393c:	1c7b      	adds	r3, r7, #1
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003944:	1cbb      	adds	r3, r7, #2
 8003946:	881a      	ldrh	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800394c:	e003      	b.n	8003956 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800394e:	1cbb      	adds	r3, r7, #2
 8003950:	881a      	ldrh	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	000a      	movs	r2, r1
 8003968:	1cbb      	adds	r3, r7, #2
 800396a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003972:	1cbb      	adds	r3, r7, #2
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	041a      	lsls	r2, r3, #16
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	43db      	mvns	r3, r3
 8003980:	1cb9      	adds	r1, r7, #2
 8003982:	8809      	ldrh	r1, [r1, #0]
 8003984:	400b      	ands	r3, r1
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b004      	add	sp, #16
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	0002      	movs	r2, r0
 800399c:	1dbb      	adds	r3, r7, #6
 800399e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	1dba      	adds	r2, r7, #6
 80039a6:	8812      	ldrh	r2, [r2, #0]
 80039a8:	4013      	ands	r3, r2
 80039aa:	d008      	beq.n	80039be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80039ae:	1dba      	adds	r2, r7, #6
 80039b0:	8812      	ldrh	r2, [r2, #0]
 80039b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039b4:	1dbb      	adds	r3, r7, #6
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7fe f9db 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b002      	add	sp, #8
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	40010400 	.word	0x40010400

080039cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e082      	b.n	8003ae4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2241      	movs	r2, #65	; 0x41
 80039e2:	5c9b      	ldrb	r3, [r3, r2]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2240      	movs	r2, #64	; 0x40
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff fa6f 	bl	8002ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2241      	movs	r2, #65	; 0x41
 80039fe:	2124      	movs	r1, #36	; 0x24
 8003a00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	438a      	bics	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4934      	ldr	r1, [pc, #208]	; (8003aec <HAL_I2C_Init+0x120>)
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4931      	ldr	r1, [pc, #196]	; (8003af0 <HAL_I2C_Init+0x124>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d108      	bne.n	8003a4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0209      	lsls	r1, r1, #8
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	e007      	b.n	8003a5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2184      	movs	r1, #132	; 0x84
 8003a54:	0209      	lsls	r1, r1, #8
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d104      	bne.n	8003a6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	491f      	ldr	r1, [pc, #124]	; (8003af4 <HAL_I2C_Init+0x128>)
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	491a      	ldr	r1, [pc, #104]	; (8003af0 <HAL_I2C_Init+0x124>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69d9      	ldr	r1, [r3, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2241      	movs	r2, #65	; 0x41
 8003ad0:	2120      	movs	r1, #32
 8003ad2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2242      	movs	r2, #66	; 0x42
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	f0ffffff 	.word	0xf0ffffff
 8003af0:	ffff7fff 	.word	0xffff7fff
 8003af4:	02008000 	.word	0x02008000

08003af8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	0008      	movs	r0, r1
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	0019      	movs	r1, r3
 8003b06:	230a      	movs	r3, #10
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	1c02      	adds	r2, r0, #0
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	2308      	movs	r3, #8
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	1c0a      	adds	r2, r1, #0
 8003b14:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2241      	movs	r2, #65	; 0x41
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d000      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x2c>
 8003b22:	e0e7      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	5c9b      	ldrb	r3, [r3, r2]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Master_Transmit+0x3a>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e0e1      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1fe>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b3a:	f7ff fbe5 	bl	8003308 <HAL_GetTick>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	0219      	lsls	r1, r3, #8
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2319      	movs	r3, #25
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f000 fa10 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2241      	movs	r2, #65	; 0x41
 8003b60:	2121      	movs	r1, #33	; 0x21
 8003b62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2242      	movs	r2, #66	; 0x42
 8003b68:	2110      	movs	r1, #16
 8003b6a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	18ba      	adds	r2, r7, r2
 8003b7e:	8812      	ldrh	r2, [r2, #0]
 8003b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2bff      	cmp	r3, #255	; 0xff
 8003b90:	d911      	bls.n	8003bb6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	22ff      	movs	r2, #255	; 0xff
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	045c      	lsls	r4, r3, #17
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	8819      	ldrh	r1, [r3, #0]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_I2C_Master_Transmit+0x208>)
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	0023      	movs	r3, r4
 8003bb0:	f000 fb80 	bl	80042b4 <I2C_TransferConfig>
 8003bb4:	e075      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	049c      	lsls	r4, r3, #18
 8003bca:	230a      	movs	r3, #10
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	8819      	ldrh	r1, [r3, #0]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_I2C_Master_Transmit+0x208>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	0023      	movs	r3, r4
 8003bd8:	f000 fb6c 	bl	80042b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003bdc:	e061      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 fa04 	bl	8003ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e081      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d03a      	beq.n	8003ca2 <HAL_I2C_Master_Transmit+0x1aa>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d136      	bne.n	8003ca2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	f000 f997 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003c46:	1e03      	subs	r3, r0, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e053      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2bff      	cmp	r3, #255	; 0xff
 8003c56:	d911      	bls.n	8003c7c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	22ff      	movs	r2, #255	; 0xff
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	045c      	lsls	r4, r3, #17
 8003c68:	230a      	movs	r3, #10
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	8819      	ldrh	r1, [r3, #0]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	0023      	movs	r3, r4
 8003c76:	f000 fb1d 	bl	80042b4 <I2C_TransferConfig>
 8003c7a:	e012      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	049c      	lsls	r4, r3, #18
 8003c90:	230a      	movs	r3, #10
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	8819      	ldrh	r1, [r3, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0023      	movs	r3, r4
 8003c9e:	f000 fb09 	bl	80042b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d198      	bne.n	8003bde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f9dc 	bl	8004070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e01a      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	490c      	ldr	r1, [pc, #48]	; (8003d04 <HAL_I2C_Master_Transmit+0x20c>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2241      	movs	r2, #65	; 0x41
 8003cdc:	2120      	movs	r1, #32
 8003cde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2242      	movs	r2, #66	; 0x42
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	2100      	movs	r1, #0
 8003cee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b007      	add	sp, #28
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	80002000 	.word	0x80002000
 8003d04:	fe00e800 	.word	0xfe00e800

08003d08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	0008      	movs	r0, r1
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	0019      	movs	r1, r3
 8003d16:	230a      	movs	r3, #10
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	1c02      	adds	r2, r0, #0
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	2308      	movs	r3, #8
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	1c0a      	adds	r2, r1, #0
 8003d24:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2241      	movs	r2, #65	; 0x41
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d000      	beq.n	8003d34 <HAL_I2C_Master_Receive+0x2c>
 8003d32:	e0e8      	b.n	8003f06 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2240      	movs	r2, #64	; 0x40
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Master_Receive+0x3a>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0e2      	b.n	8003f08 <HAL_I2C_Master_Receive+0x200>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d4a:	f7ff fadd 	bl	8003308 <HAL_GetTick>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	0219      	lsls	r1, r3, #8
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2319      	movs	r3, #25
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f000 f908 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	1e03      	subs	r3, r0, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cd      	b.n	8003f08 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2241      	movs	r2, #65	; 0x41
 8003d70:	2122      	movs	r1, #34	; 0x22
 8003d72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2242      	movs	r2, #66	; 0x42
 8003d78:	2110      	movs	r1, #16
 8003d7a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	18ba      	adds	r2, r7, r2
 8003d8e:	8812      	ldrh	r2, [r2, #0]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2bff      	cmp	r3, #255	; 0xff
 8003da0:	d911      	bls.n	8003dc6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	22ff      	movs	r2, #255	; 0xff
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	045c      	lsls	r4, r3, #17
 8003db2:	230a      	movs	r3, #10
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	8819      	ldrh	r1, [r3, #0]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	4b55      	ldr	r3, [pc, #340]	; (8003f10 <HAL_I2C_Master_Receive+0x208>)
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	0023      	movs	r3, r4
 8003dc0:	f000 fa78 	bl	80042b4 <I2C_TransferConfig>
 8003dc4:	e076      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	049c      	lsls	r4, r3, #18
 8003dda:	230a      	movs	r3, #10
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	8819      	ldrh	r1, [r3, #0]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	4b4b      	ldr	r3, [pc, #300]	; (8003f10 <HAL_I2C_Master_Receive+0x208>)
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	0023      	movs	r3, r4
 8003de8:	f000 fa64 	bl	80042b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003dec:	e062      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f977 	bl	80040e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dfa:	1e03      	subs	r3, r0, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e082      	b.n	8003f08 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03a      	beq.n	8003eb4 <HAL_I2C_Master_Receive+0x1ac>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d136      	bne.n	8003eb4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	0013      	movs	r3, r2
 8003e50:	2200      	movs	r2, #0
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	f000 f88e 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003e58:	1e03      	subs	r3, r0, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e053      	b.n	8003f08 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2bff      	cmp	r3, #255	; 0xff
 8003e68:	d911      	bls.n	8003e8e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	045c      	lsls	r4, r3, #17
 8003e7a:	230a      	movs	r3, #10
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	8819      	ldrh	r1, [r3, #0]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	0023      	movs	r3, r4
 8003e88:	f000 fa14 	bl	80042b4 <I2C_TransferConfig>
 8003e8c:	e012      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	049c      	lsls	r4, r3, #18
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	8819      	ldrh	r1, [r3, #0]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	0023      	movs	r3, r4
 8003eb0:	f000 fa00 	bl	80042b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d197      	bne.n	8003dee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 f8d3 	bl	8004070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e01a      	b.n	8003f08 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	490b      	ldr	r1, [pc, #44]	; (8003f14 <HAL_I2C_Master_Receive+0x20c>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2241      	movs	r2, #65	; 0x41
 8003eee:	2120      	movs	r1, #32
 8003ef0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2242      	movs	r2, #66	; 0x42
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2240      	movs	r2, #64	; 0x40
 8003efe:	2100      	movs	r1, #0
 8003f00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b007      	add	sp, #28
 8003f0e:	bd90      	pop	{r4, r7, pc}
 8003f10:	80002400 	.word	0x80002400
 8003f14:	fe00e800 	.word	0xfe00e800

08003f18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2241      	movs	r2, #65	; 0x41
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	b2db      	uxtb	r3, r3
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d103      	bne.n	8003f4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2201      	movs	r2, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d007      	beq.n	8003f6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2101      	movs	r1, #1
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	619a      	str	r2, [r3, #24]
  }
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	1dfb      	adds	r3, r7, #7
 8003f82:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f84:	e021      	b.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	d01e      	beq.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7ff f9bc 	bl	8003308 <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d113      	bne.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2241      	movs	r2, #65	; 0x41
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2242      	movs	r2, #66	; 0x42
 8003fba:	2100      	movs	r1, #0
 8003fbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2240      	movs	r2, #64	; 0x40
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00f      	b.n	8003fea <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	425a      	negs	r2, r3
 8003fda:	4153      	adcs	r3, r2
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	001a      	movs	r2, r3
 8003fe0:	1dfb      	adds	r3, r7, #7
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d0ce      	beq.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ffe:	e02b      	b.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 f8da 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e029      	b.n	8004068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	3301      	adds	r3, #1
 8004018:	d01e      	beq.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7ff f975 	bl	8003308 <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d113      	bne.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	2220      	movs	r2, #32
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2241      	movs	r2, #65	; 0x41
 8004040:	2120      	movs	r1, #32
 8004042:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2242      	movs	r2, #66	; 0x42
 8004048:	2100      	movs	r1, #0
 800404a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2202      	movs	r2, #2
 8004060:	4013      	ands	r3, r2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d1cc      	bne.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	b004      	add	sp, #16
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800407c:	e028      	b.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f89b 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e026      	b.n	80040e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7ff f939 	bl	8003308 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	2220      	movs	r2, #32
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2241      	movs	r2, #65	; 0x41
 80040b8:	2120      	movs	r1, #32
 80040ba:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2242      	movs	r2, #66	; 0x42
 80040c0:	2100      	movs	r1, #0
 80040c2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2240      	movs	r2, #64	; 0x40
 80040c8:	2100      	movs	r1, #0
 80040ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2220      	movs	r2, #32
 80040d8:	4013      	ands	r3, r2
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d1cf      	bne.n	800407e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f4:	e055      	b.n	80041a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f85f 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 8004102:	1e03      	subs	r3, r0, #0
 8004104:	d001      	beq.n	800410a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e053      	b.n	80041b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2220      	movs	r2, #32
 8004112:	4013      	ands	r3, r2
 8004114:	2b20      	cmp	r3, #32
 8004116:	d129      	bne.n	800416c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2204      	movs	r2, #4
 8004120:	4013      	ands	r3, r2
 8004122:	2b04      	cmp	r3, #4
 8004124:	d105      	bne.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e03f      	b.n	80041b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2220      	movs	r2, #32
 8004138:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	491d      	ldr	r1, [pc, #116]	; (80041bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004146:	400a      	ands	r2, r1
 8004148:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2241      	movs	r2, #65	; 0x41
 8004154:	2120      	movs	r1, #32
 8004156:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2242      	movs	r2, #66	; 0x42
 800415c:	2100      	movs	r1, #0
 800415e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e022      	b.n	80041b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7ff f8cc 	bl	8003308 <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	2220      	movs	r2, #32
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2241      	movs	r2, #65	; 0x41
 8004192:	2120      	movs	r1, #32
 8004194:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2240      	movs	r2, #64	; 0x40
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e007      	b.n	80041b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2204      	movs	r2, #4
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d1a2      	bne.n	80040f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	fe00e800 	.word	0xfe00e800

080041c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2210      	movs	r2, #16
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d164      	bne.n	80042a4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	049b      	lsls	r3, r3, #18
 80041e4:	401a      	ands	r2, r3
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	049b      	lsls	r3, r3, #18
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d02b      	beq.n	8004246 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	01c9      	lsls	r1, r1, #7
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004200:	e021      	b.n	8004246 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	d01e      	beq.n	8004246 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004208:	f7ff f87e 	bl	8003308 <HAL_GetTick>
 800420c:	0002      	movs	r2, r0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <I2C_IsAcknowledgeFailed+0x5e>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d113      	bne.n	8004246 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	2220      	movs	r2, #32
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2241      	movs	r2, #65	; 0x41
 800422e:	2120      	movs	r1, #32
 8004230:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2242      	movs	r2, #66	; 0x42
 8004236:	2100      	movs	r1, #0
 8004238:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2240      	movs	r2, #64	; 0x40
 800423e:	2100      	movs	r1, #0
 8004240:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e02f      	b.n	80042a6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2220      	movs	r2, #32
 800424e:	4013      	ands	r3, r2
 8004250:	2b20      	cmp	r3, #32
 8004252:	d1d6      	bne.n	8004202 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2220      	movs	r2, #32
 8004262:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	0018      	movs	r0, r3
 8004268:	f7ff fe62 	bl	8003f30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	490e      	ldr	r1, [pc, #56]	; (80042b0 <I2C_IsAcknowledgeFailed+0xf0>)
 8004278:	400a      	ands	r2, r1
 800427a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	2204      	movs	r2, #4
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2241      	movs	r2, #65	; 0x41
 800428c:	2120      	movs	r1, #32
 800428e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2242      	movs	r2, #66	; 0x42
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2240      	movs	r2, #64	; 0x40
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	0018      	movs	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b004      	add	sp, #16
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	fe00e800 	.word	0xfe00e800

080042b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	0008      	movs	r0, r1
 80042be:	0011      	movs	r1, r2
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	240a      	movs	r4, #10
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	1c02      	adds	r2, r0, #0
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	2009      	movs	r0, #9
 80042cc:	183b      	adds	r3, r7, r0
 80042ce:	1c0a      	adds	r2, r1, #0
 80042d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	0d51      	lsrs	r1, r2, #21
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	00d2      	lsls	r2, r2, #3
 80042e0:	400a      	ands	r2, r1
 80042e2:	490e      	ldr	r1, [pc, #56]	; (800431c <I2C_TransferConfig+0x68>)
 80042e4:	430a      	orrs	r2, r1
 80042e6:	43d2      	mvns	r2, r2
 80042e8:	401a      	ands	r2, r3
 80042ea:	0011      	movs	r1, r2
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	059b      	lsls	r3, r3, #22
 80042f2:	0d9a      	lsrs	r2, r3, #22
 80042f4:	183b      	adds	r3, r7, r0
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	0418      	lsls	r0, r3, #16
 80042fa:	23ff      	movs	r3, #255	; 0xff
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	4003      	ands	r3, r0
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	431a      	orrs	r2, r3
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b005      	add	sp, #20
 8004318:	bd90      	pop	{r4, r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	03ff63ff 	.word	0x03ff63ff

08004320 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2241      	movs	r2, #65	; 0x41
 800432e:	5c9b      	ldrb	r3, [r3, r2]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b20      	cmp	r3, #32
 8004334:	d138      	bne.n	80043a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2240      	movs	r2, #64	; 0x40
 800433a:	5c9b      	ldrb	r3, [r3, r2]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004340:	2302      	movs	r3, #2
 8004342:	e032      	b.n	80043aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2241      	movs	r2, #65	; 0x41
 8004350:	2124      	movs	r1, #36	; 0x24
 8004352:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2101      	movs	r1, #1
 8004360:	438a      	bics	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4911      	ldr	r1, [pc, #68]	; (80043b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004370:	400a      	ands	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6819      	ldr	r1, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2101      	movs	r1, #1
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2241      	movs	r2, #65	; 0x41
 8004398:	2120      	movs	r1, #32
 800439a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2240      	movs	r2, #64	; 0x40
 80043a0:	2100      	movs	r1, #0
 80043a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e000      	b.n	80043aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043a8:	2302      	movs	r3, #2
  }
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	ffffefff 	.word	0xffffefff

080043b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2241      	movs	r2, #65	; 0x41
 80043c6:	5c9b      	ldrb	r3, [r3, r2]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d139      	bne.n	8004442 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2240      	movs	r2, #64	; 0x40
 80043d2:	5c9b      	ldrb	r3, [r3, r2]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043d8:	2302      	movs	r3, #2
 80043da:	e033      	b.n	8004444 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2240      	movs	r2, #64	; 0x40
 80043e0:	2101      	movs	r1, #1
 80043e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2241      	movs	r2, #65	; 0x41
 80043e8:	2124      	movs	r1, #36	; 0x24
 80043ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2101      	movs	r1, #1
 80043f8:	438a      	bics	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a11      	ldr	r2, [pc, #68]	; (800444c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004408:	4013      	ands	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2101      	movs	r1, #1
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2241      	movs	r2, #65	; 0x41
 8004432:	2120      	movs	r1, #32
 8004434:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2240      	movs	r2, #64	; 0x40
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b004      	add	sp, #16
 800444a:	bd80      	pop	{r7, pc}
 800444c:	fffff0ff 	.word	0xfffff0ff

08004450 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	000a      	movs	r2, r1
 800445a:	1cfb      	adds	r3, r7, #3
 800445c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004464:	2104      	movs	r1, #4
 8004466:	438a      	bics	r2, r1
 8004468:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800446a:	1cfb      	adds	r3, r7, #3
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004472:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004474:	e002      	b.n	800447c <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8004476:	bf40      	sev
    __WFE();
 8004478:	bf20      	wfe
    __WFE();
 800447a:	bf20      	wfe
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <HAL_PWR_EnableSleepOnExit+0x18>)
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_PWR_EnableSleepOnExit+0x18>)
 8004492:	2102      	movs	r1, #2
 8004494:	430a      	orrs	r2, r1
 8004496:	611a      	str	r2, [r3, #16]
}
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_PWR_DisableSleepOnExit+0x18>)
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_PWR_DisableSleepOnExit+0x18>)
 80044ae:	2102      	movs	r1, #2
 80044b0:	438a      	bics	r2, r1
 80044b2:	611a      	str	r2, [r3, #16]
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f000 fb76 	bl	8004bc0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2201      	movs	r2, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	d100      	bne.n	80044e0 <HAL_RCC_OscConfig+0x20>
 80044de:	e08e      	b.n	80045fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044e0:	4bc5      	ldr	r3, [pc, #788]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	220c      	movs	r2, #12
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d00e      	beq.n	800450a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044ec:	4bc2      	ldr	r3, [pc, #776]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	220c      	movs	r2, #12
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d117      	bne.n	8004528 <HAL_RCC_OscConfig+0x68>
 80044f8:	4bbf      	ldr	r3, [pc, #764]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	23c0      	movs	r3, #192	; 0xc0
 80044fe:	025b      	lsls	r3, r3, #9
 8004500:	401a      	ands	r2, r3
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	025b      	lsls	r3, r3, #9
 8004506:	429a      	cmp	r2, r3
 8004508:	d10e      	bne.n	8004528 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450a:	4bbb      	ldr	r3, [pc, #748]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	029b      	lsls	r3, r3, #10
 8004512:	4013      	ands	r3, r2
 8004514:	d100      	bne.n	8004518 <HAL_RCC_OscConfig+0x58>
 8004516:	e071      	b.n	80045fc <HAL_RCC_OscConfig+0x13c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d000      	beq.n	8004522 <HAL_RCC_OscConfig+0x62>
 8004520:	e06c      	b.n	80045fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f000 fb4c 	bl	8004bc0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d107      	bne.n	8004540 <HAL_RCC_OscConfig+0x80>
 8004530:	4bb1      	ldr	r3, [pc, #708]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4bb0      	ldr	r3, [pc, #704]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	0249      	lsls	r1, r1, #9
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e02f      	b.n	80045a0 <HAL_RCC_OscConfig+0xe0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10c      	bne.n	8004562 <HAL_RCC_OscConfig+0xa2>
 8004548:	4bab      	ldr	r3, [pc, #684]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4baa      	ldr	r3, [pc, #680]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800454e:	49ab      	ldr	r1, [pc, #684]	; (80047fc <HAL_RCC_OscConfig+0x33c>)
 8004550:	400a      	ands	r2, r1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	4ba8      	ldr	r3, [pc, #672]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4ba7      	ldr	r3, [pc, #668]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800455a:	49a9      	ldr	r1, [pc, #676]	; (8004800 <HAL_RCC_OscConfig+0x340>)
 800455c:	400a      	ands	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e01e      	b.n	80045a0 <HAL_RCC_OscConfig+0xe0>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b05      	cmp	r3, #5
 8004568:	d10e      	bne.n	8004588 <HAL_RCC_OscConfig+0xc8>
 800456a:	4ba3      	ldr	r3, [pc, #652]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4ba2      	ldr	r3, [pc, #648]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	02c9      	lsls	r1, r1, #11
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	4b9f      	ldr	r3, [pc, #636]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b9e      	ldr	r3, [pc, #632]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800457e:	2180      	movs	r1, #128	; 0x80
 8004580:	0249      	lsls	r1, r1, #9
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xe0>
 8004588:	4b9b      	ldr	r3, [pc, #620]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b9a      	ldr	r3, [pc, #616]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800458e:	499b      	ldr	r1, [pc, #620]	; (80047fc <HAL_RCC_OscConfig+0x33c>)
 8004590:	400a      	ands	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	4b98      	ldr	r3, [pc, #608]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b97      	ldr	r3, [pc, #604]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800459a:	4999      	ldr	r1, [pc, #612]	; (8004800 <HAL_RCC_OscConfig+0x340>)
 800459c:	400a      	ands	r2, r1
 800459e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe feae 	bl	8003308 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b2:	f7fe fea9 	bl	8003308 <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b64      	cmp	r3, #100	; 0x64
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e2fd      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c4:	4b8c      	ldr	r3, [pc, #560]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	4013      	ands	r3, r2
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0xf2>
 80045d0:	e015      	b.n	80045fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fe fe99 	bl	8003308 <HAL_GetTick>
 80045d6:	0003      	movs	r3, r0
 80045d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fe fe94 	bl	8003308 <HAL_GetTick>
 80045e0:	0002      	movs	r2, r0
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e2e8      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ee:	4b82      	ldr	r3, [pc, #520]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	029b      	lsls	r3, r3, #10
 80045f6:	4013      	ands	r3, r2
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x11c>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2202      	movs	r2, #2
 8004604:	4013      	ands	r3, r2
 8004606:	d100      	bne.n	800460a <HAL_RCC_OscConfig+0x14a>
 8004608:	e06c      	b.n	80046e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800460a:	4b7b      	ldr	r3, [pc, #492]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	220c      	movs	r2, #12
 8004610:	4013      	ands	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004614:	4b78      	ldr	r3, [pc, #480]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	220c      	movs	r2, #12
 800461a:	4013      	ands	r3, r2
 800461c:	2b08      	cmp	r3, #8
 800461e:	d11f      	bne.n	8004660 <HAL_RCC_OscConfig+0x1a0>
 8004620:	4b75      	ldr	r3, [pc, #468]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	23c0      	movs	r3, #192	; 0xc0
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	401a      	ands	r2, r3
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	429a      	cmp	r2, r3
 8004630:	d116      	bne.n	8004660 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	4b71      	ldr	r3, [pc, #452]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2202      	movs	r2, #2
 8004638:	4013      	ands	r3, r2
 800463a:	d005      	beq.n	8004648 <HAL_RCC_OscConfig+0x188>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d001      	beq.n	8004648 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e2bb      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b6b      	ldr	r3, [pc, #428]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	22f8      	movs	r2, #248	; 0xf8
 800464e:	4393      	bics	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00da      	lsls	r2, r3, #3
 8004658:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	e041      	b.n	80046e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d024      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b63      	ldr	r3, [pc, #396]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b62      	ldr	r3, [pc, #392]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800466e:	2101      	movs	r1, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fe fe48 	bl	8003308 <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467e:	f7fe fe43 	bl	8003308 <HAL_GetTick>
 8004682:	0002      	movs	r2, r0
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e297      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	4b59      	ldr	r3, [pc, #356]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2202      	movs	r2, #2
 8004696:	4013      	ands	r3, r2
 8004698:	d0f1      	beq.n	800467e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b57      	ldr	r3, [pc, #348]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	22f8      	movs	r2, #248	; 0xf8
 80046a0:	4393      	bics	r3, r2
 80046a2:	0019      	movs	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	00da      	lsls	r2, r3, #3
 80046aa:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e018      	b.n	80046e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b2:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80046b8:	2101      	movs	r1, #1
 80046ba:	438a      	bics	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fe fe23 	bl	8003308 <HAL_GetTick>
 80046c2:	0003      	movs	r3, r0
 80046c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c8:	f7fe fe1e 	bl	8003308 <HAL_GetTick>
 80046cc:	0002      	movs	r2, r0
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e272      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2202      	movs	r2, #2
 80046e0:	4013      	ands	r3, r2
 80046e2:	d1f1      	bne.n	80046c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	d036      	beq.n	800475c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d019      	beq.n	800472a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f6:	4b40      	ldr	r3, [pc, #256]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80046f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	430a      	orrs	r2, r1
 8004700:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fe fe01 	bl	8003308 <HAL_GetTick>
 8004706:	0003      	movs	r3, r0
 8004708:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800470c:	f7fe fdfc 	bl	8003308 <HAL_GetTick>
 8004710:	0002      	movs	r2, r0
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e250      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	d0f1      	beq.n	800470c <HAL_RCC_OscConfig+0x24c>
 8004728:	e018      	b.n	800475c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800472a:	4b33      	ldr	r3, [pc, #204]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800472c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472e:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004730:	2101      	movs	r1, #1
 8004732:	438a      	bics	r2, r1
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004736:	f7fe fde7 	bl	8003308 <HAL_GetTick>
 800473a:	0003      	movs	r3, r0
 800473c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004740:	f7fe fde2 	bl	8003308 <HAL_GetTick>
 8004744:	0002      	movs	r2, r0
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e236      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004752:	4b29      	ldr	r3, [pc, #164]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2202      	movs	r2, #2
 8004758:	4013      	ands	r3, r2
 800475a:	d1f1      	bne.n	8004740 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2204      	movs	r2, #4
 8004762:	4013      	ands	r3, r2
 8004764:	d100      	bne.n	8004768 <HAL_RCC_OscConfig+0x2a8>
 8004766:	e0b5      	b.n	80048d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004768:	201f      	movs	r0, #31
 800476a:	183b      	adds	r3, r7, r0
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004770:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	055b      	lsls	r3, r3, #21
 8004778:	4013      	ands	r3, r2
 800477a:	d110      	bne.n	800479e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	0549      	lsls	r1, r1, #21
 8004786:	430a      	orrs	r2, r1
 8004788:	61da      	str	r2, [r3, #28]
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	055b      	lsls	r3, r3, #21
 8004792:	4013      	ands	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004798:	183b      	adds	r3, r7, r0
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_OscConfig+0x344>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	d11a      	bne.n	80047e0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047aa:	4b16      	ldr	r3, [pc, #88]	; (8004804 <HAL_RCC_OscConfig+0x344>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b15      	ldr	r3, [pc, #84]	; (8004804 <HAL_RCC_OscConfig+0x344>)
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	0049      	lsls	r1, r1, #1
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b8:	f7fe fda6 	bl	8003308 <HAL_GetTick>
 80047bc:	0003      	movs	r3, r0
 80047be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c2:	f7fe fda1 	bl	8003308 <HAL_GetTick>
 80047c6:	0002      	movs	r2, r0
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b64      	cmp	r3, #100	; 0x64
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1f5      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_OscConfig+0x344>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4013      	ands	r3, r2
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10f      	bne.n	8004808 <HAL_RCC_OscConfig+0x348>
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	4b02      	ldr	r3, [pc, #8]	; (80047f8 <HAL_RCC_OscConfig+0x338>)
 80047ee:	2101      	movs	r1, #1
 80047f0:	430a      	orrs	r2, r1
 80047f2:	621a      	str	r2, [r3, #32]
 80047f4:	e036      	b.n	8004864 <HAL_RCC_OscConfig+0x3a4>
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	40021000 	.word	0x40021000
 80047fc:	fffeffff 	.word	0xfffeffff
 8004800:	fffbffff 	.word	0xfffbffff
 8004804:	40007000 	.word	0x40007000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10c      	bne.n	800482a <HAL_RCC_OscConfig+0x36a>
 8004810:	4bca      	ldr	r3, [pc, #808]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	4bc9      	ldr	r3, [pc, #804]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004816:	2101      	movs	r1, #1
 8004818:	438a      	bics	r2, r1
 800481a:	621a      	str	r2, [r3, #32]
 800481c:	4bc7      	ldr	r3, [pc, #796]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	4bc6      	ldr	r3, [pc, #792]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004822:	2104      	movs	r1, #4
 8004824:	438a      	bics	r2, r1
 8004826:	621a      	str	r2, [r3, #32]
 8004828:	e01c      	b.n	8004864 <HAL_RCC_OscConfig+0x3a4>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b05      	cmp	r3, #5
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0x38c>
 8004832:	4bc2      	ldr	r3, [pc, #776]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004834:	6a1a      	ldr	r2, [r3, #32]
 8004836:	4bc1      	ldr	r3, [pc, #772]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004838:	2104      	movs	r1, #4
 800483a:	430a      	orrs	r2, r1
 800483c:	621a      	str	r2, [r3, #32]
 800483e:	4bbf      	ldr	r3, [pc, #764]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	4bbe      	ldr	r3, [pc, #760]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004844:	2101      	movs	r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	621a      	str	r2, [r3, #32]
 800484a:	e00b      	b.n	8004864 <HAL_RCC_OscConfig+0x3a4>
 800484c:	4bbb      	ldr	r3, [pc, #748]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	4bba      	ldr	r3, [pc, #744]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004852:	2101      	movs	r1, #1
 8004854:	438a      	bics	r2, r1
 8004856:	621a      	str	r2, [r3, #32]
 8004858:	4bb8      	ldr	r3, [pc, #736]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	4bb7      	ldr	r3, [pc, #732]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800485e:	2104      	movs	r1, #4
 8004860:	438a      	bics	r2, r1
 8004862:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d014      	beq.n	8004896 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fe fd4c 	bl	8003308 <HAL_GetTick>
 8004870:	0003      	movs	r3, r0
 8004872:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	e009      	b.n	800488a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fe fd47 	bl	8003308 <HAL_GetTick>
 800487a:	0002      	movs	r2, r0
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	4aaf      	ldr	r2, [pc, #700]	; (8004b40 <HAL_RCC_OscConfig+0x680>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e19a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488a:	4bac      	ldr	r3, [pc, #688]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	2202      	movs	r2, #2
 8004890:	4013      	ands	r3, r2
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x3b6>
 8004894:	e013      	b.n	80048be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004896:	f7fe fd37 	bl	8003308 <HAL_GetTick>
 800489a:	0003      	movs	r3, r0
 800489c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489e:	e009      	b.n	80048b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fe fd32 	bl	8003308 <HAL_GetTick>
 80048a4:	0002      	movs	r2, r0
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	4aa5      	ldr	r2, [pc, #660]	; (8004b40 <HAL_RCC_OscConfig+0x680>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e185      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b4:	4ba1      	ldr	r3, [pc, #644]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	2202      	movs	r2, #2
 80048ba:	4013      	ands	r3, r2
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048be:	231f      	movs	r3, #31
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c8:	4b9c      	ldr	r3, [pc, #624]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	4b9b      	ldr	r3, [pc, #620]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80048ce:	499d      	ldr	r1, [pc, #628]	; (8004b44 <HAL_RCC_OscConfig+0x684>)
 80048d0:	400a      	ands	r2, r1
 80048d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2210      	movs	r2, #16
 80048da:	4013      	ands	r3, r2
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d12a      	bne.n	800493c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80048e6:	4b95      	ldr	r3, [pc, #596]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80048e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ea:	4b94      	ldr	r3, [pc, #592]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80048ec:	2104      	movs	r1, #4
 80048ee:	430a      	orrs	r2, r1
 80048f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80048f2:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80048f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f6:	4b91      	ldr	r3, [pc, #580]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	430a      	orrs	r2, r1
 80048fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fe:	f7fe fd03 	bl	8003308 <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004908:	f7fe fcfe 	bl	8003308 <HAL_GetTick>
 800490c:	0002      	movs	r2, r0
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e152      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800491a:	4b88      	ldr	r3, [pc, #544]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	2202      	movs	r2, #2
 8004920:	4013      	ands	r3, r2
 8004922:	d0f1      	beq.n	8004908 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004924:	4b85      	ldr	r3, [pc, #532]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	22f8      	movs	r2, #248	; 0xf8
 800492a:	4393      	bics	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	00da      	lsls	r2, r3, #3
 8004934:	4b81      	ldr	r3, [pc, #516]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004936:	430a      	orrs	r2, r1
 8004938:	635a      	str	r2, [r3, #52]	; 0x34
 800493a:	e034      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	3305      	adds	r3, #5
 8004942:	d111      	bne.n	8004968 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004944:	4b7d      	ldr	r3, [pc, #500]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004948:	4b7c      	ldr	r3, [pc, #496]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800494a:	2104      	movs	r1, #4
 800494c:	438a      	bics	r2, r1
 800494e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004950:	4b7a      	ldr	r3, [pc, #488]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	22f8      	movs	r2, #248	; 0xf8
 8004956:	4393      	bics	r3, r2
 8004958:	0019      	movs	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	00da      	lsls	r2, r3, #3
 8004960:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004962:	430a      	orrs	r2, r1
 8004964:	635a      	str	r2, [r3, #52]	; 0x34
 8004966:	e01e      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004968:	4b74      	ldr	r3, [pc, #464]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800496a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496c:	4b73      	ldr	r3, [pc, #460]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800496e:	2104      	movs	r1, #4
 8004970:	430a      	orrs	r2, r1
 8004972:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004974:	4b71      	ldr	r3, [pc, #452]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004978:	4b70      	ldr	r3, [pc, #448]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800497a:	2101      	movs	r1, #1
 800497c:	438a      	bics	r2, r1
 800497e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7fe fcc2 	bl	8003308 <HAL_GetTick>
 8004984:	0003      	movs	r3, r0
 8004986:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800498a:	f7fe fcbd 	bl	8003308 <HAL_GetTick>
 800498e:	0002      	movs	r2, r0
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e111      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800499c:	4b67      	ldr	r3, [pc, #412]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	2202      	movs	r2, #2
 80049a2:	4013      	ands	r3, r2
 80049a4:	d1f1      	bne.n	800498a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2220      	movs	r2, #32
 80049ac:	4013      	ands	r3, r2
 80049ae:	d05c      	beq.n	8004a6a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80049b0:	4b62      	ldr	r3, [pc, #392]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	220c      	movs	r2, #12
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d00e      	beq.n	80049da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80049bc:	4b5f      	ldr	r3, [pc, #380]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	220c      	movs	r2, #12
 80049c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d114      	bne.n	80049f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80049c8:	4b5c      	ldr	r3, [pc, #368]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	23c0      	movs	r3, #192	; 0xc0
 80049ce:	025b      	lsls	r3, r3, #9
 80049d0:	401a      	ands	r2, r3
 80049d2:	23c0      	movs	r3, #192	; 0xc0
 80049d4:	025b      	lsls	r3, r3, #9
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10b      	bne.n	80049f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80049da:	4b58      	ldr	r3, [pc, #352]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80049dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	025b      	lsls	r3, r3, #9
 80049e2:	4013      	ands	r3, r2
 80049e4:	d040      	beq.n	8004a68 <HAL_RCC_OscConfig+0x5a8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d03c      	beq.n	8004a68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0e6      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01b      	beq.n	8004a32 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80049fa:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 80049fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049fe:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a00:	2180      	movs	r1, #128	; 0x80
 8004a02:	0249      	lsls	r1, r1, #9
 8004a04:	430a      	orrs	r2, r1
 8004a06:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fe fc7e 	bl	8003308 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a12:	f7fe fc79 	bl	8003308 <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0cd      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004a24:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	025b      	lsls	r3, r3, #9
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x552>
 8004a30:	e01b      	b.n	8004a6a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004a32:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a36:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a38:	4943      	ldr	r1, [pc, #268]	; (8004b48 <HAL_RCC_OscConfig+0x688>)
 8004a3a:	400a      	ands	r2, r1
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fe fc63 	bl	8003308 <HAL_GetTick>
 8004a42:	0003      	movs	r3, r0
 8004a44:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a48:	f7fe fc5e 	bl	8003308 <HAL_GetTick>
 8004a4c:	0002      	movs	r2, r0
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e0b2      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004a5a:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	025b      	lsls	r3, r3, #9
 8004a62:	4013      	ands	r3, r2
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x588>
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004a68:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d100      	bne.n	8004a74 <HAL_RCC_OscConfig+0x5b4>
 8004a72:	e0a4      	b.n	8004bbe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a74:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	220c      	movs	r2, #12
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d100      	bne.n	8004a82 <HAL_RCC_OscConfig+0x5c2>
 8004a80:	e078      	b.n	8004b74 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d14c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004a90:	492e      	ldr	r1, [pc, #184]	; (8004b4c <HAL_RCC_OscConfig+0x68c>)
 8004a92:	400a      	ands	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a96:	f7fe fc37 	bl	8003308 <HAL_GetTick>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fe fc32 	bl	8003308 <HAL_GetTick>
 8004aa4:	0002      	movs	r2, r0
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e086      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	049b      	lsls	r3, r3, #18
 8004aba:	4013      	ands	r3, r2
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	220f      	movs	r2, #15
 8004ac4:	4393      	bics	r3, r2
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <HAL_RCC_OscConfig+0x690>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aec:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004af2:	2180      	movs	r1, #128	; 0x80
 8004af4:	0449      	lsls	r1, r1, #17
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fe fc05 	bl	8003308 <HAL_GetTick>
 8004afe:	0003      	movs	r3, r0
 8004b00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fe fc00 	bl	8003308 <HAL_GetTick>
 8004b08:	0002      	movs	r2, r0
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e054      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	049b      	lsls	r3, r3, #18
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x644>
 8004b22:	e04c      	b.n	8004bbe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <HAL_RCC_OscConfig+0x67c>)
 8004b2a:	4908      	ldr	r1, [pc, #32]	; (8004b4c <HAL_RCC_OscConfig+0x68c>)
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe fbea 	bl	8003308 <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b38:	e015      	b.n	8004b66 <HAL_RCC_OscConfig+0x6a6>
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	00001388 	.word	0x00001388
 8004b44:	efffffff 	.word	0xefffffff
 8004b48:	fffeffff 	.word	0xfffeffff
 8004b4c:	feffffff 	.word	0xfeffffff
 8004b50:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fe fbd8 	bl	8003308 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e02c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_RCC_OscConfig+0x708>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	049b      	lsls	r3, r3, #18
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x694>
 8004b72:	e024      	b.n	8004bbe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e01f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <HAL_RCC_OscConfig+0x708>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCC_OscConfig+0x708>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	23c0      	movs	r3, #192	; 0xc0
 8004b90:	025b      	lsls	r3, r3, #9
 8004b92:	401a      	ands	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d10e      	bne.n	8004bba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	220f      	movs	r2, #15
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	23f0      	movs	r3, #240	; 0xf0
 8004bae:	039b      	lsls	r3, r3, #14
 8004bb0:	401a      	ands	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b008      	add	sp, #32
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000

08004bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0bf      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	4013      	ands	r3, r2
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d911      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b5e      	ldr	r3, [pc, #376]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4393      	bics	r3, r2
 8004bf6:	0019      	movs	r1, r3
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c00:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	4013      	ands	r3, r2
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0a6      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2202      	movs	r2, #2
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d015      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2204      	movs	r2, #4
 8004c22:	4013      	ands	r3, r2
 8004c24:	d006      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004c26:	4b51      	ldr	r3, [pc, #324]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c2c:	21e0      	movs	r1, #224	; 0xe0
 8004c2e:	00c9      	lsls	r1, r1, #3
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b4d      	ldr	r3, [pc, #308]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	22f0      	movs	r2, #240	; 0xf0
 8004c3a:	4393      	bics	r3, r2
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d04c      	beq.n	8004cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b44      	ldr	r3, [pc, #272]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	029b      	lsls	r3, r3, #10
 8004c62:	4013      	ands	r3, r2
 8004c64:	d120      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07a      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	049b      	lsls	r3, r3, #18
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d114      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06e      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c8a:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	025b      	lsls	r3, r3, #9
 8004c92:	4013      	ands	r3, r2
 8004c94:	d108      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e062      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e05b      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca8:	4b30      	ldr	r3, [pc, #192]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2203      	movs	r2, #3
 8004cae:	4393      	bics	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fe fb24 	bl	8003308 <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc4:	e009      	b.n	8004cda <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc6:	f7fe fb1f 	bl	8003308 <HAL_GetTick>
 8004cca:	0002      	movs	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	4a27      	ldr	r2, [pc, #156]	; (8004d70 <HAL_RCC_ClockConfig+0x1a4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e042      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	220c      	movs	r2, #12
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1ec      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d211      	bcs.n	8004d1e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4393      	bics	r3, r2
 8004d02:	0019      	movs	r1, r3
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0c:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <HAL_RCC_ClockConfig+0x19c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2201      	movs	r2, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e020      	b.n	8004d60 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2204      	movs	r2, #4
 8004d24:	4013      	ands	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004d28:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <HAL_RCC_ClockConfig+0x1a8>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d3c:	f000 f820 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d40:	0001      	movs	r1, r0
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_RCC_ClockConfig+0x1a0>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	220f      	movs	r2, #15
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <HAL_RCC_ClockConfig+0x1ac>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	000a      	movs	r2, r1
 8004d52:	40da      	lsrs	r2, r3
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004d56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7fe fa8f 	bl	800327c <HAL_InitTick>
  
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b004      	add	sp, #16
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	00001388 	.word	0x00001388
 8004d74:	fffff8ff 	.word	0xfffff8ff
 8004d78:	08006d80 	.word	0x08006d80
 8004d7c:	20000020 	.word	0x20000020

08004d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b08f      	sub	sp, #60	; 0x3c
 8004d84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004d86:	2314      	movs	r3, #20
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	4a38      	ldr	r2, [pc, #224]	; (8004e6c <HAL_RCC_GetSysClockFreq+0xec>)
 8004d8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d8e:	c313      	stmia	r3!, {r0, r1, r4}
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004d98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d9a:	c313      	stmia	r3!, {r0, r1, r4}
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da4:	2300      	movs	r3, #0
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da8:	2300      	movs	r3, #0
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004db4:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	220c      	movs	r2, #12
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b0c      	cmp	r3, #12
 8004dc2:	d047      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0xd4>
 8004dc4:	d849      	bhi.n	8004e5a <HAL_RCC_GetSysClockFreq+0xda>
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d002      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x50>
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d003      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x56>
 8004dce:	e044      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dd0:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dd4:	e044      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	0c9b      	lsrs	r3, r3, #18
 8004dda:	220f      	movs	r2, #15
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2214      	movs	r2, #20
 8004de0:	18ba      	adds	r2, r7, r2
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	220f      	movs	r2, #15
 8004dec:	4013      	ands	r3, r2
 8004dee:	1d3a      	adds	r2, r7, #4
 8004df0:	5cd3      	ldrb	r3, [r2, r3]
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df6:	23c0      	movs	r3, #192	; 0xc0
 8004df8:	025b      	lsls	r3, r3, #9
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	025b      	lsls	r3, r3, #9
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d109      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e06:	481c      	ldr	r0, [pc, #112]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e08:	f7fb f986 	bl	8000118 <__udivsi3>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	001a      	movs	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	4353      	muls	r3, r2
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
 8004e16:	e01a      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1a:	23c0      	movs	r3, #192	; 0xc0
 8004e1c:	025b      	lsls	r3, r3, #9
 8004e1e:	401a      	ands	r2, r3
 8004e20:	23c0      	movs	r3, #192	; 0xc0
 8004e22:	025b      	lsls	r3, r3, #9
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d109      	bne.n	8004e3c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e2a:	4814      	ldr	r0, [pc, #80]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e2c:	f7fb f974 	bl	8000118 <__udivsi3>
 8004e30:	0003      	movs	r3, r0
 8004e32:	001a      	movs	r2, r3
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	4353      	muls	r3, r2
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3e:	480e      	ldr	r0, [pc, #56]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e40:	f7fb f96a 	bl	8000118 <__udivsi3>
 8004e44:	0003      	movs	r3, r0
 8004e46:	001a      	movs	r2, r3
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	4353      	muls	r3, r2
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e52:	e005      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e58:	e002      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b00f      	add	sp, #60	; 0x3c
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	08006d20 	.word	0x08006d20
 8004e70:	08006d30 	.word	0x08006d30
 8004e74:	40021000 	.word	0x40021000
 8004e78:	007a1200 	.word	0x007a1200
 8004e7c:	02dc6c00 	.word	0x02dc6c00

08004e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e84:	4b02      	ldr	r3, [pc, #8]	; (8004e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e86:	681b      	ldr	r3, [r3, #0]
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	20000020 	.word	0x20000020

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004e98:	f7ff fff2 	bl	8004e80 <HAL_RCC_GetHCLKFreq>
 8004e9c:	0001      	movs	r1, r0
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eaa:	5cd3      	ldrb	r3, [r2, r3]
 8004eac:	40d9      	lsrs	r1, r3
 8004eae:	000b      	movs	r3, r1
}    
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	08006d90 	.word	0x08006d90

08004ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	025b      	lsls	r3, r3, #9
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d100      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004edc:	e08e      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004ede:	2017      	movs	r0, #23
 8004ee0:	183b      	adds	r3, r7, r0
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee6:	4b67      	ldr	r3, [pc, #412]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ee8:	69da      	ldr	r2, [r3, #28]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	055b      	lsls	r3, r3, #21
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d110      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	4b64      	ldr	r3, [pc, #400]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ef4:	69da      	ldr	r2, [r3, #28]
 8004ef6:	4b63      	ldr	r3, [pc, #396]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	0549      	lsls	r1, r1, #21
 8004efc:	430a      	orrs	r2, r1
 8004efe:	61da      	str	r2, [r3, #28]
 8004f00:	4b60      	ldr	r3, [pc, #384]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	055b      	lsls	r3, r3, #21
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0e:	183b      	adds	r3, r7, r0
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f14:	4b5c      	ldr	r3, [pc, #368]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d11a      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f20:	4b59      	ldr	r3, [pc, #356]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b58      	ldr	r3, [pc, #352]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f26:	2180      	movs	r1, #128	; 0x80
 8004f28:	0049      	lsls	r1, r1, #1
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2e:	f7fe f9eb 	bl	8003308 <HAL_GetTick>
 8004f32:	0003      	movs	r3, r0
 8004f34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f36:	e008      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f38:	f7fe f9e6 	bl	8003308 <HAL_GetTick>
 8004f3c:	0002      	movs	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b64      	cmp	r3, #100	; 0x64
 8004f44:	d901      	bls.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e097      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4a:	4b4f      	ldr	r3, [pc, #316]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f56:	4b4b      	ldr	r3, [pc, #300]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f58:	6a1a      	ldr	r2, [r3, #32]
 8004f5a:	23c0      	movs	r3, #192	; 0xc0
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d034      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	23c0      	movs	r3, #192	; 0xc0
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4013      	ands	r3, r2
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d02c      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f78:	4b42      	ldr	r3, [pc, #264]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4a43      	ldr	r2, [pc, #268]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f82:	4b40      	ldr	r3, [pc, #256]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f84:	6a1a      	ldr	r2, [r3, #32]
 8004f86:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	0249      	lsls	r1, r1, #9
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f90:	4b3c      	ldr	r3, [pc, #240]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f92:	6a1a      	ldr	r2, [r3, #32]
 8004f94:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f96:	493e      	ldr	r1, [pc, #248]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f98:	400a      	ands	r2, r1
 8004f9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fe f9ad 	bl	8003308 <HAL_GetTick>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	e009      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fe f9a8 	bl	8003308 <HAL_GetTick>
 8004fb8:	0002      	movs	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	4a35      	ldr	r2, [pc, #212]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e058      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc8:	4b2e      	ldr	r3, [pc, #184]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	4b28      	ldr	r3, [pc, #160]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fe6:	2317      	movs	r3, #23
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff0:	4b24      	ldr	r3, [pc, #144]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	4b23      	ldr	r3, [pc, #140]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ff6:	4928      	ldr	r1, [pc, #160]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2201      	movs	r2, #1
 8005002:	4013      	ands	r3, r2
 8005004:	d009      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005006:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	2203      	movs	r2, #3
 800500c:	4393      	bics	r3, r2
 800500e:	0019      	movs	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005016:	430a      	orrs	r2, r1
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2220      	movs	r2, #32
 8005020:	4013      	ands	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	2210      	movs	r2, #16
 800502a:	4393      	bics	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005034:	430a      	orrs	r2, r1
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	029b      	lsls	r3, r3, #10
 8005040:	4013      	ands	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	2280      	movs	r2, #128	; 0x80
 800504a:	4393      	bics	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005054:	430a      	orrs	r2, r1
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4013      	ands	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	2240      	movs	r2, #64	; 0x40
 800506a:	4393      	bics	r3, r2
 800506c:	0019      	movs	r1, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	4b04      	ldr	r3, [pc, #16]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005074:	430a      	orrs	r2, r1
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b006      	add	sp, #24
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	40021000 	.word	0x40021000
 8005088:	40007000 	.word	0x40007000
 800508c:	fffffcff 	.word	0xfffffcff
 8005090:	fffeffff 	.word	0xfffeffff
 8005094:	00001388 	.word	0x00001388
 8005098:	efffffff 	.word	0xefffffff

0800509c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0a8      	b.n	8005200 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	2382      	movs	r3, #130	; 0x82
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	429a      	cmp	r2, r3
 80050c0:	d009      	beq.n	80050d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	61da      	str	r2, [r3, #28]
 80050c8:	e005      	b.n	80050d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	225d      	movs	r2, #93	; 0x5d
 80050e0:	5c9b      	ldrb	r3, [r3, r2]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d107      	bne.n	80050f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	225c      	movs	r2, #92	; 0x5c
 80050ec:	2100      	movs	r1, #0
 80050ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7fd ff3e 	bl	8002f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	225d      	movs	r2, #93	; 0x5d
 80050fc:	2102      	movs	r1, #2
 80050fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2140      	movs	r1, #64	; 0x40
 800510c:	438a      	bics	r2, r1
 800510e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	23e0      	movs	r3, #224	; 0xe0
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	429a      	cmp	r2, r3
 800511a:	d902      	bls.n	8005122 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e002      	b.n	8005128 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	015b      	lsls	r3, r3, #5
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	23f0      	movs	r3, #240	; 0xf0
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	429a      	cmp	r2, r3
 8005132:	d008      	beq.n	8005146 <HAL_SPI_Init+0xaa>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	23e0      	movs	r3, #224	; 0xe0
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	429a      	cmp	r2, r3
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	2382      	movs	r3, #130	; 0x82
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	401a      	ands	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6899      	ldr	r1, [r3, #8]
 8005154:	2384      	movs	r3, #132	; 0x84
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	400b      	ands	r3, r1
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2102      	movs	r1, #2
 8005162:	400b      	ands	r3, r1
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2101      	movs	r1, #1
 800516c:	400b      	ands	r3, r1
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6999      	ldr	r1, [r3, #24]
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	400b      	ands	r3, r1
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2138      	movs	r1, #56	; 0x38
 8005182:	400b      	ands	r3, r1
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	400b      	ands	r3, r1
 800518e:	431a      	orrs	r2, r3
 8005190:	0011      	movs	r1, r2
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	401a      	ands	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	2204      	movs	r2, #4
 80051ac:	401a      	ands	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2110      	movs	r1, #16
 80051b4:	400b      	ands	r3, r1
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051bc:	2108      	movs	r1, #8
 80051be:	400b      	ands	r3, r1
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68d9      	ldr	r1, [r3, #12]
 80051c6:	23f0      	movs	r3, #240	; 0xf0
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	400b      	ands	r3, r1
 80051cc:	431a      	orrs	r2, r3
 80051ce:	0011      	movs	r1, r2
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	015b      	lsls	r3, r3, #5
 80051d6:	401a      	ands	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4907      	ldr	r1, [pc, #28]	; (8005208 <HAL_SPI_Init+0x16c>)
 80051ec:	400a      	ands	r2, r1
 80051ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	225d      	movs	r2, #93	; 0x5d
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b004      	add	sp, #16
 8005206:	bd80      	pop	{r7, pc}
 8005208:	fffff7ff 	.word	0xfffff7ff

0800520c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e042      	b.n	80052a4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	223d      	movs	r2, #61	; 0x3d
 8005222:	5c9b      	ldrb	r3, [r3, r2]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d107      	bne.n	800523a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	223c      	movs	r2, #60	; 0x3c
 800522e:	2100      	movs	r1, #0
 8005230:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	0018      	movs	r0, r3
 8005236:	f7fd fee9 	bl	800300c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223d      	movs	r2, #61	; 0x3d
 800523e:	2102      	movs	r1, #2
 8005240:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3304      	adds	r3, #4
 800524a:	0019      	movs	r1, r3
 800524c:	0010      	movs	r0, r2
 800524e:	f000 f871 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2246      	movs	r2, #70	; 0x46
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	223e      	movs	r2, #62	; 0x3e
 800525e:	2101      	movs	r1, #1
 8005260:	5499      	strb	r1, [r3, r2]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	223f      	movs	r2, #63	; 0x3f
 8005266:	2101      	movs	r1, #1
 8005268:	5499      	strb	r1, [r3, r2]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2240      	movs	r2, #64	; 0x40
 800526e:	2101      	movs	r1, #1
 8005270:	5499      	strb	r1, [r3, r2]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2241      	movs	r2, #65	; 0x41
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2242      	movs	r2, #66	; 0x42
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2243      	movs	r2, #67	; 0x43
 8005286:	2101      	movs	r1, #1
 8005288:	5499      	strb	r1, [r3, r2]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2244      	movs	r2, #68	; 0x44
 800528e:	2101      	movs	r1, #1
 8005290:	5499      	strb	r1, [r3, r2]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2245      	movs	r2, #69	; 0x45
 8005296:	2101      	movs	r1, #1
 8005298:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	223d      	movs	r2, #61	; 0x3d
 800529e:	2101      	movs	r1, #1
 80052a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	223d      	movs	r2, #61	; 0x3d
 80052b8:	5c9b      	ldrb	r3, [r3, r2]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d001      	beq.n	80052c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e02e      	b.n	8005322 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	223d      	movs	r2, #61	; 0x3d
 80052c8:	2102      	movs	r1, #2
 80052ca:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a16      	ldr	r2, [pc, #88]	; (800532c <HAL_TIM_Base_Start+0x80>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00a      	beq.n	80052ec <HAL_TIM_Base_Start+0x40>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	05db      	lsls	r3, r3, #23
 80052de:	429a      	cmp	r2, r3
 80052e0:	d004      	beq.n	80052ec <HAL_TIM_Base_Start+0x40>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a12      	ldr	r2, [pc, #72]	; (8005330 <HAL_TIM_Base_Start+0x84>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d111      	bne.n	8005310 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2207      	movs	r2, #7
 80052f4:	4013      	ands	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	d010      	beq.n	8005320 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2101      	movs	r1, #1
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	e007      	b.n	8005320 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2101      	movs	r1, #1
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b004      	add	sp, #16
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40000400 	.word	0x40000400

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a30      	ldr	r2, [pc, #192]	; (8005408 <TIM_Base_SetConfig+0xd4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d008      	beq.n	800535e <TIM_Base_SetConfig+0x2a>
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	05db      	lsls	r3, r3, #23
 8005352:	429a      	cmp	r2, r3
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0x2a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2c      	ldr	r2, [pc, #176]	; (800540c <TIM_Base_SetConfig+0xd8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2270      	movs	r2, #112	; 0x70
 8005362:	4393      	bics	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a25      	ldr	r2, [pc, #148]	; (8005408 <TIM_Base_SetConfig+0xd4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d014      	beq.n	80053a2 <TIM_Base_SetConfig+0x6e>
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	05db      	lsls	r3, r3, #23
 800537e:	429a      	cmp	r2, r3
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0x6e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a21      	ldr	r2, [pc, #132]	; (800540c <TIM_Base_SetConfig+0xd8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0x6e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <TIM_Base_SetConfig+0xdc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0x6e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <TIM_Base_SetConfig+0xe0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0x6e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <TIM_Base_SetConfig+0xe4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <TIM_Base_SetConfig+0xe8>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	4393      	bics	r3, r2
 80053ba:	001a      	movs	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <TIM_Base_SetConfig+0xd4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_Base_SetConfig+0xbe>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <TIM_Base_SetConfig+0xe0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_Base_SetConfig+0xbe>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <TIM_Base_SetConfig+0xe4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d103      	bne.n	80053fa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	615a      	str	r2, [r3, #20]
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b004      	add	sp, #16
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40000400 	.word	0x40000400
 8005410:	40002000 	.word	0x40002000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800
 800541c:	fffffcff 	.word	0xfffffcff

08005420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e044      	b.n	80054bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2274      	movs	r2, #116	; 0x74
 800543e:	2100      	movs	r1, #0
 8005440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	0018      	movs	r0, r3
 8005446:	f7fd fe01 	bl	800304c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2224      	movs	r2, #36	; 0x24
 800544e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2101      	movs	r1, #1
 800545c:	438a      	bics	r2, r1
 800545e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 fd20 	bl	8005ea8 <UART_SetConfig>
 8005468:	0003      	movs	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e024      	b.n	80054bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	0018      	movs	r0, r3
 800547e:	f000 fe53 	bl	8006128 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	490d      	ldr	r1, [pc, #52]	; (80054c4 <HAL_UART_Init+0xa4>)
 800548e:	400a      	ands	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	212a      	movs	r1, #42	; 0x2a
 800549e:	438a      	bics	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2101      	movs	r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 feeb 	bl	8006290 <UART_CheckIdleState>
 80054ba:	0003      	movs	r3, r0
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	ffffb7ff 	.word	0xffffb7ff

080054c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	1dbb      	adds	r3, r7, #6
 80054d6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d000      	beq.n	80054e2 <HAL_UART_Transmit+0x1a>
 80054e0:	e096      	b.n	8005610 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_UART_Transmit+0x28>
 80054e8:	1dbb      	adds	r3, r7, #6
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e08e      	b.n	8005612 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	015b      	lsls	r3, r3, #5
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d109      	bne.n	8005514 <HAL_UART_Transmit+0x4c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2201      	movs	r2, #1
 800550c:	4013      	ands	r3, r2
 800550e:	d001      	beq.n	8005514 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e07e      	b.n	8005612 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2274      	movs	r2, #116	; 0x74
 8005518:	5c9b      	ldrb	r3, [r3, r2]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_UART_Transmit+0x5a>
 800551e:	2302      	movs	r3, #2
 8005520:	e077      	b.n	8005612 <HAL_UART_Transmit+0x14a>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2274      	movs	r2, #116	; 0x74
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	2100      	movs	r1, #0
 8005530:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2221      	movs	r2, #33	; 0x21
 8005536:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005538:	f7fd fee6 	bl	8003308 <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1dba      	adds	r2, r7, #6
 8005544:	2150      	movs	r1, #80	; 0x50
 8005546:	8812      	ldrh	r2, [r2, #0]
 8005548:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1dba      	adds	r2, r7, #6
 800554e:	2152      	movs	r1, #82	; 0x52
 8005550:	8812      	ldrh	r2, [r2, #0]
 8005552:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	015b      	lsls	r3, r3, #5
 800555c:	429a      	cmp	r2, r3
 800555e:	d108      	bne.n	8005572 <HAL_UART_Transmit+0xaa>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e003      	b.n	800557a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2274      	movs	r2, #116	; 0x74
 800557e:	2100      	movs	r1, #0
 8005580:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005582:	e02d      	b.n	80055e0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	0013      	movs	r3, r2
 800558e:	2200      	movs	r2, #0
 8005590:	2180      	movs	r1, #128	; 0x80
 8005592:	f000 fec5 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005596:	1e03      	subs	r3, r0, #0
 8005598:	d001      	beq.n	800559e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e039      	b.n	8005612 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	05d2      	lsls	r2, r2, #23
 80055ae:	0dd2      	lsrs	r2, r2, #23
 80055b0:	b292      	uxth	r2, r2
 80055b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3302      	adds	r3, #2
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	e008      	b.n	80055ce <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	b292      	uxth	r2, r2
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2252      	movs	r2, #82	; 0x52
 80055d2:	5a9b      	ldrh	r3, [r3, r2]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b299      	uxth	r1, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2252      	movs	r2, #82	; 0x52
 80055de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2252      	movs	r2, #82	; 0x52
 80055e4:	5a9b      	ldrh	r3, [r3, r2]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1cb      	bne.n	8005584 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	0013      	movs	r3, r2
 80055f6:	2200      	movs	r2, #0
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	f000 fe91 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	d001      	beq.n	8005606 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e005      	b.n	8005612 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	0018      	movs	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	b008      	add	sp, #32
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	; 0x28
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	1dbb      	adds	r3, r7, #6
 800562a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005630:	2b20      	cmp	r3, #32
 8005632:	d000      	beq.n	8005636 <HAL_UART_Receive+0x1a>
 8005634:	e0da      	b.n	80057ec <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_UART_Receive+0x28>
 800563c:	1dbb      	adds	r3, r7, #6
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0d2      	b.n	80057ee <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	015b      	lsls	r3, r3, #5
 8005650:	429a      	cmp	r2, r3
 8005652:	d109      	bne.n	8005668 <HAL_UART_Receive+0x4c>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2201      	movs	r2, #1
 8005660:	4013      	ands	r3, r2
 8005662:	d001      	beq.n	8005668 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0c2      	b.n	80057ee <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2274      	movs	r2, #116	; 0x74
 800566c:	5c9b      	ldrb	r3, [r3, r2]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_UART_Receive+0x5a>
 8005672:	2302      	movs	r3, #2
 8005674:	e0bb      	b.n	80057ee <HAL_UART_Receive+0x1d2>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2274      	movs	r2, #116	; 0x74
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	2100      	movs	r1, #0
 8005684:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2222      	movs	r2, #34	; 0x22
 800568a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005692:	f7fd fe39 	bl	8003308 <HAL_GetTick>
 8005696:	0003      	movs	r3, r0
 8005698:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1dba      	adds	r2, r7, #6
 800569e:	2158      	movs	r1, #88	; 0x58
 80056a0:	8812      	ldrh	r2, [r2, #0]
 80056a2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	1dba      	adds	r2, r7, #6
 80056a8:	215a      	movs	r1, #90	; 0x5a
 80056aa:	8812      	ldrh	r2, [r2, #0]
 80056ac:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	015b      	lsls	r3, r3, #5
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d10d      	bne.n	80056d6 <HAL_UART_Receive+0xba>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <HAL_UART_Receive+0xb0>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	225c      	movs	r2, #92	; 0x5c
 80056c6:	494c      	ldr	r1, [pc, #304]	; (80057f8 <HAL_UART_Receive+0x1dc>)
 80056c8:	5299      	strh	r1, [r3, r2]
 80056ca:	e02e      	b.n	800572a <HAL_UART_Receive+0x10e>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	225c      	movs	r2, #92	; 0x5c
 80056d0:	21ff      	movs	r1, #255	; 0xff
 80056d2:	5299      	strh	r1, [r3, r2]
 80056d4:	e029      	b.n	800572a <HAL_UART_Receive+0x10e>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <HAL_UART_Receive+0xde>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <HAL_UART_Receive+0xd4>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	225c      	movs	r2, #92	; 0x5c
 80056ea:	21ff      	movs	r1, #255	; 0xff
 80056ec:	5299      	strh	r1, [r3, r2]
 80056ee:	e01c      	b.n	800572a <HAL_UART_Receive+0x10e>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	225c      	movs	r2, #92	; 0x5c
 80056f4:	217f      	movs	r1, #127	; 0x7f
 80056f6:	5299      	strh	r1, [r3, r2]
 80056f8:	e017      	b.n	800572a <HAL_UART_Receive+0x10e>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	055b      	lsls	r3, r3, #21
 8005702:	429a      	cmp	r2, r3
 8005704:	d10d      	bne.n	8005722 <HAL_UART_Receive+0x106>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <HAL_UART_Receive+0xfc>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	225c      	movs	r2, #92	; 0x5c
 8005712:	217f      	movs	r1, #127	; 0x7f
 8005714:	5299      	strh	r1, [r3, r2]
 8005716:	e008      	b.n	800572a <HAL_UART_Receive+0x10e>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	225c      	movs	r2, #92	; 0x5c
 800571c:	213f      	movs	r1, #63	; 0x3f
 800571e:	5299      	strh	r1, [r3, r2]
 8005720:	e003      	b.n	800572a <HAL_UART_Receive+0x10e>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	225c      	movs	r2, #92	; 0x5c
 8005726:	2100      	movs	r1, #0
 8005728:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800572a:	2312      	movs	r3, #18
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	215c      	movs	r1, #92	; 0x5c
 8005732:	5a52      	ldrh	r2, [r2, r1]
 8005734:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	015b      	lsls	r3, r3, #5
 800573e:	429a      	cmp	r2, r3
 8005740:	d108      	bne.n	8005754 <HAL_UART_Receive+0x138>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	e003      	b.n	800575c <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005758:	2300      	movs	r3, #0
 800575a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2274      	movs	r2, #116	; 0x74
 8005760:	2100      	movs	r1, #0
 8005762:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005764:	e037      	b.n	80057d6 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	0013      	movs	r3, r2
 8005770:	2200      	movs	r2, #0
 8005772:	2120      	movs	r1, #32
 8005774:	f000 fdd4 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005778:	1e03      	subs	r3, r0, #0
 800577a:	d001      	beq.n	8005780 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e036      	b.n	80057ee <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10e      	bne.n	80057a4 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800578c:	b29b      	uxth	r3, r3
 800578e:	2212      	movs	r2, #18
 8005790:	18ba      	adds	r2, r7, r2
 8005792:	8812      	ldrh	r2, [r2, #0]
 8005794:	4013      	ands	r3, r2
 8005796:	b29a      	uxth	r2, r3
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	3302      	adds	r3, #2
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e00f      	b.n	80057c4 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2212      	movs	r2, #18
 80057b0:	18ba      	adds	r2, r7, r2
 80057b2:	8812      	ldrh	r2, [r2, #0]
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	4013      	ands	r3, r2
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	225a      	movs	r2, #90	; 0x5a
 80057c8:	5a9b      	ldrh	r3, [r3, r2]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b299      	uxth	r1, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	225a      	movs	r2, #90	; 0x5a
 80057d4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	225a      	movs	r2, #90	; 0x5a
 80057da:	5a9b      	ldrh	r3, [r3, r2]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1c1      	bne.n	8005766 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e000      	b.n	80057ee <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  }
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b008      	add	sp, #32
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	000001ff 	.word	0x000001ff

080057fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	1dbb      	adds	r3, r7, #6
 8005808:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580e:	2b20      	cmp	r3, #32
 8005810:	d150      	bne.n	80058b4 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_UART_Receive_IT+0x24>
 8005818:	1dbb      	adds	r3, r7, #6
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e048      	b.n	80058b6 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	429a      	cmp	r2, r3
 800582e:	d109      	bne.n	8005844 <HAL_UART_Receive_IT+0x48>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2201      	movs	r2, #1
 800583c:	4013      	ands	r3, r2
 800583e:	d001      	beq.n	8005844 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e038      	b.n	80058b6 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2274      	movs	r2, #116	; 0x74
 8005848:	5c9b      	ldrb	r3, [r3, r2]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_UART_Receive_IT+0x56>
 800584e:	2302      	movs	r3, #2
 8005850:	e031      	b.n	80058b6 <HAL_UART_Receive_IT+0xba>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2274      	movs	r2, #116	; 0x74
 8005856:	2101      	movs	r1, #1
 8005858:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	4013      	ands	r3, r2
 800586c:	d019      	beq.n	80058a2 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586e:	f3ef 8310 	mrs	r3, PRIMASK
 8005872:	613b      	str	r3, [r7, #16]
  return(result);
 8005874:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f383 8810 	msr	PRIMASK, r3
}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	04c9      	lsls	r1, r1, #19
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f383 8810 	msr	PRIMASK, r3
}
 80058a0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058a2:	1dbb      	adds	r3, r7, #6
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 fdfc 	bl	80064a8 <UART_Start_Receive_IT>
 80058b0:	0003      	movs	r3, r0
 80058b2:	e000      	b.n	80058b6 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
  }
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b008      	add	sp, #32
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b0ab      	sub	sp, #172	; 0xac
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	22a4      	movs	r2, #164	; 0xa4
 80058d0:	18b9      	adds	r1, r7, r2
 80058d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	20a0      	movs	r0, #160	; 0xa0
 80058dc:	1839      	adds	r1, r7, r0
 80058de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	219c      	movs	r1, #156	; 0x9c
 80058e8:	1879      	adds	r1, r7, r1
 80058ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058ec:	0011      	movs	r1, r2
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a99      	ldr	r2, [pc, #612]	; (8005b58 <HAL_UART_IRQHandler+0x298>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	2298      	movs	r2, #152	; 0x98
 80058f8:	18bc      	adds	r4, r7, r2
 80058fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80058fc:	18bb      	adds	r3, r7, r2
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d114      	bne.n	800592e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005904:	187b      	adds	r3, r7, r1
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2220      	movs	r2, #32
 800590a:	4013      	ands	r3, r2
 800590c:	d00f      	beq.n	800592e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800590e:	183b      	adds	r3, r7, r0
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2220      	movs	r2, #32
 8005914:	4013      	ands	r3, r2
 8005916:	d00a      	beq.n	800592e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800591c:	2b00      	cmp	r3, #0
 800591e:	d100      	bne.n	8005922 <HAL_UART_IRQHandler+0x62>
 8005920:	e296      	b.n	8005e50 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	0010      	movs	r0, r2
 800592a:	4798      	blx	r3
      }
      return;
 800592c:	e290      	b.n	8005e50 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800592e:	2398      	movs	r3, #152	; 0x98
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d100      	bne.n	800593a <HAL_UART_IRQHandler+0x7a>
 8005938:	e114      	b.n	8005b64 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800593a:	239c      	movs	r3, #156	; 0x9c
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	4013      	ands	r3, r2
 8005944:	d106      	bne.n	8005954 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005946:	23a0      	movs	r3, #160	; 0xa0
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a83      	ldr	r2, [pc, #524]	; (8005b5c <HAL_UART_IRQHandler+0x29c>)
 800594e:	4013      	ands	r3, r2
 8005950:	d100      	bne.n	8005954 <HAL_UART_IRQHandler+0x94>
 8005952:	e107      	b.n	8005b64 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005954:	23a4      	movs	r3, #164	; 0xa4
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2201      	movs	r2, #1
 800595c:	4013      	ands	r3, r2
 800595e:	d012      	beq.n	8005986 <HAL_UART_IRQHandler+0xc6>
 8005960:	23a0      	movs	r3, #160	; 0xa0
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4013      	ands	r3, r2
 800596c:	d00b      	beq.n	8005986 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2280      	movs	r2, #128	; 0x80
 800597a:	589b      	ldr	r3, [r3, r2]
 800597c:	2201      	movs	r2, #1
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2180      	movs	r1, #128	; 0x80
 8005984:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005986:	23a4      	movs	r3, #164	; 0xa4
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2202      	movs	r2, #2
 800598e:	4013      	ands	r3, r2
 8005990:	d011      	beq.n	80059b6 <HAL_UART_IRQHandler+0xf6>
 8005992:	239c      	movs	r3, #156	; 0x9c
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2201      	movs	r2, #1
 800599a:	4013      	ands	r3, r2
 800599c:	d00b      	beq.n	80059b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2202      	movs	r2, #2
 80059a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2280      	movs	r2, #128	; 0x80
 80059aa:	589b      	ldr	r3, [r3, r2]
 80059ac:	2204      	movs	r2, #4
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b6:	23a4      	movs	r3, #164	; 0xa4
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2204      	movs	r2, #4
 80059be:	4013      	ands	r3, r2
 80059c0:	d011      	beq.n	80059e6 <HAL_UART_IRQHandler+0x126>
 80059c2:	239c      	movs	r3, #156	; 0x9c
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	4013      	ands	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2204      	movs	r2, #4
 80059d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2280      	movs	r2, #128	; 0x80
 80059da:	589b      	ldr	r3, [r3, r2]
 80059dc:	2202      	movs	r2, #2
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2180      	movs	r1, #128	; 0x80
 80059e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e6:	23a4      	movs	r3, #164	; 0xa4
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2208      	movs	r2, #8
 80059ee:	4013      	ands	r3, r2
 80059f0:	d017      	beq.n	8005a22 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f2:	23a0      	movs	r3, #160	; 0xa0
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2220      	movs	r2, #32
 80059fa:	4013      	ands	r3, r2
 80059fc:	d105      	bne.n	8005a0a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059fe:	239c      	movs	r3, #156	; 0x9c
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2201      	movs	r2, #1
 8005a06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a08:	d00b      	beq.n	8005a22 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2208      	movs	r2, #8
 8005a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2280      	movs	r2, #128	; 0x80
 8005a16:	589b      	ldr	r3, [r3, r2]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a22:	23a4      	movs	r3, #164	; 0xa4
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <HAL_UART_IRQHandler+0x198>
 8005a30:	23a0      	movs	r3, #160	; 0xa0
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	04db      	lsls	r3, r3, #19
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d00c      	beq.n	8005a58 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	589b      	ldr	r3, [r3, r2]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2180      	movs	r1, #128	; 0x80
 8005a56:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	589b      	ldr	r3, [r3, r2]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d100      	bne.n	8005a64 <HAL_UART_IRQHandler+0x1a4>
 8005a62:	e1f7      	b.n	8005e54 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a64:	23a4      	movs	r3, #164	; 0xa4
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d00e      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a70:	23a0      	movs	r3, #160	; 0xa0
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2220      	movs	r2, #32
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d008      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d004      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	0010      	movs	r0, r2
 8005a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	589b      	ldr	r3, [r3, r2]
 8005a94:	2194      	movs	r1, #148	; 0x94
 8005a96:	187a      	adds	r2, r7, r1
 8005a98:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2240      	movs	r2, #64	; 0x40
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d004      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2228      	movs	r2, #40	; 0x28
 8005aae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ab0:	d047      	beq.n	8005b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 fda7 	bl	8006608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2240      	movs	r2, #64	; 0x40
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d137      	bne.n	8005b38 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8005acc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad0:	2090      	movs	r0, #144	; 0x90
 8005ad2:	183a      	adds	r2, r7, r0
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005adc:	f383 8810 	msr	PRIMASK, r3
}
 8005ae0:	46c0      	nop			; (mov r8, r8)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2140      	movs	r1, #64	; 0x40
 8005aee:	438a      	bics	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]
 8005af2:	183b      	adds	r3, r7, r0
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005afa:	f383 8810 	msr	PRIMASK, r3
}
 8005afe:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <HAL_UART_IRQHandler+0x2a0>)
 8005b0e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	0018      	movs	r0, r3
 8005b16:	f7fd fd57 	bl	80035c8 <HAL_DMA_Abort_IT>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d01a      	beq.n	8005b54 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	0018      	movs	r0, r3
 8005b2a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	e012      	b.n	8005b54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f000 f9a5 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b36:	e00d      	b.n	8005b54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 f9a0 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e008      	b.n	8005b54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 f99b 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2280      	movs	r2, #128	; 0x80
 8005b4e:	2100      	movs	r1, #0
 8005b50:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b52:	e17f      	b.n	8005e54 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	46c0      	nop			; (mov r8, r8)
    return;
 8005b56:	e17d      	b.n	8005e54 <HAL_UART_IRQHandler+0x594>
 8005b58:	0000080f 	.word	0x0000080f
 8005b5c:	04000120 	.word	0x04000120
 8005b60:	080066cd 	.word	0x080066cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d000      	beq.n	8005b6e <HAL_UART_IRQHandler+0x2ae>
 8005b6c:	e131      	b.n	8005dd2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b6e:	23a4      	movs	r3, #164	; 0xa4
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2210      	movs	r2, #16
 8005b76:	4013      	ands	r3, r2
 8005b78:	d100      	bne.n	8005b7c <HAL_UART_IRQHandler+0x2bc>
 8005b7a:	e12a      	b.n	8005dd2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b7c:	23a0      	movs	r3, #160	; 0xa0
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	4013      	ands	r3, r2
 8005b86:	d100      	bne.n	8005b8a <HAL_UART_IRQHandler+0x2ca>
 8005b88:	e123      	b.n	8005dd2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2240      	movs	r2, #64	; 0x40
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d000      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x2e2>
 8005ba0:	e09b      	b.n	8005cda <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	217e      	movs	r1, #126	; 0x7e
 8005bac:	187b      	adds	r3, r7, r1
 8005bae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005bb0:	187b      	adds	r3, r7, r1
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d100      	bne.n	8005bba <HAL_UART_IRQHandler+0x2fa>
 8005bb8:	e14e      	b.n	8005e58 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2258      	movs	r2, #88	; 0x58
 8005bbe:	5a9b      	ldrh	r3, [r3, r2]
 8005bc0:	187a      	adds	r2, r7, r1
 8005bc2:	8812      	ldrh	r2, [r2, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d300      	bcc.n	8005bca <HAL_UART_IRQHandler+0x30a>
 8005bc8:	e146      	b.n	8005e58 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	187a      	adds	r2, r7, r1
 8005bce:	215a      	movs	r1, #90	; 0x5a
 8005bd0:	8812      	ldrh	r2, [r2, #0]
 8005bd2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d06e      	beq.n	8005cbc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bde:	f3ef 8310 	mrs	r3, PRIMASK
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005be8:	2301      	movs	r3, #1
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	f383 8810 	msr	PRIMASK, r3
}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	499a      	ldr	r1, [pc, #616]	; (8005e68 <HAL_UART_IRQHandler+0x5a8>)
 8005c00:	400a      	ands	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c10:	f3ef 8310 	mrs	r3, PRIMASK
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	677b      	str	r3, [r7, #116]	; 0x74
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c20:	f383 8810 	msr	PRIMASK, r3
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2101      	movs	r1, #1
 8005c32:	438a      	bics	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]
 8005c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3c:	f383 8810 	msr	PRIMASK, r3
}
 8005c40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c42:	f3ef 8310 	mrs	r3, PRIMASK
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c52:	f383 8810 	msr	PRIMASK, r3
}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2140      	movs	r1, #64	; 0x40
 8005c64:	438a      	bics	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
 8005c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c6a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6e:	f383 8810 	msr	PRIMASK, r3
}
 8005c72:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c80:	f3ef 8310 	mrs	r3, PRIMASK
 8005c84:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2110      	movs	r1, #16
 8005ca2:	438a      	bics	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7fd fc4e 	bl	8003558 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2258      	movs	r2, #88	; 0x58
 8005cc0:	5a9a      	ldrh	r2, [r3, r2]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	215a      	movs	r1, #90	; 0x5a
 8005cc6:	5a5b      	ldrh	r3, [r3, r1]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0011      	movs	r1, r2
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 f8dc 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cd8:	e0be      	b.n	8005e58 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2258      	movs	r2, #88	; 0x58
 8005cde:	5a99      	ldrh	r1, [r3, r2]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	225a      	movs	r2, #90	; 0x5a
 8005ce4:	5a9b      	ldrh	r3, [r3, r2]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	208e      	movs	r0, #142	; 0x8e
 8005cea:	183b      	adds	r3, r7, r0
 8005cec:	1a8a      	subs	r2, r1, r2
 8005cee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	225a      	movs	r2, #90	; 0x5a
 8005cf4:	5a9b      	ldrh	r3, [r3, r2]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d100      	bne.n	8005cfe <HAL_UART_IRQHandler+0x43e>
 8005cfc:	e0ae      	b.n	8005e5c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005cfe:	183b      	adds	r3, r7, r0
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d100      	bne.n	8005d08 <HAL_UART_IRQHandler+0x448>
 8005d06:	e0a9      	b.n	8005e5c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d08:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d10:	2488      	movs	r4, #136	; 0x88
 8005d12:	193a      	adds	r2, r7, r4
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	2301      	movs	r3, #1
 8005d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f383 8810 	msr	PRIMASK, r3
}
 8005d20:	46c0      	nop			; (mov r8, r8)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	494f      	ldr	r1, [pc, #316]	; (8005e6c <HAL_UART_IRQHandler+0x5ac>)
 8005d2e:	400a      	ands	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	193b      	adds	r3, r7, r4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d40:	f3ef 8310 	mrs	r3, PRIMASK
 8005d44:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d46:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d48:	2484      	movs	r4, #132	; 0x84
 8005d4a:	193a      	adds	r2, r7, r4
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2101      	movs	r1, #1
 8005d66:	438a      	bics	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	193b      	adds	r3, r7, r4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	f383 8810 	msr	PRIMASK, r3
}
 8005d76:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d92:	2480      	movs	r4, #128	; 0x80
 8005d94:	193a      	adds	r2, r7, r4
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	2301      	movs	r3, #1
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	f383 8810 	msr	PRIMASK, r3
}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2110      	movs	r1, #16
 8005db0:	438a      	bics	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	193b      	adds	r3, r7, r4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	f383 8810 	msr	PRIMASK, r3
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dc2:	183b      	adds	r3, r7, r0
 8005dc4:	881a      	ldrh	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	0011      	movs	r1, r2
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f000 f860 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dd0:	e044      	b.n	8005e5c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dd2:	23a4      	movs	r3, #164	; 0xa4
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	035b      	lsls	r3, r3, #13
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d010      	beq.n	8005e02 <HAL_UART_IRQHandler+0x542>
 8005de0:	239c      	movs	r3, #156	; 0x9c
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	03db      	lsls	r3, r3, #15
 8005dea:	4013      	ands	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	0352      	lsls	r2, r2, #13
 8005df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fe10 	bl	8006a20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e00:	e02f      	b.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e02:	23a4      	movs	r3, #164	; 0xa4
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d00f      	beq.n	8005e2e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e0e:	23a0      	movs	r3, #160	; 0xa0
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	4013      	ands	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01e      	beq.n	8005e60 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	0010      	movs	r0, r2
 8005e2a:	4798      	blx	r3
    }
    return;
 8005e2c:	e018      	b.n	8005e60 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e2e:	23a4      	movs	r3, #164	; 0xa4
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2240      	movs	r2, #64	; 0x40
 8005e36:	4013      	ands	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
 8005e3a:	23a0      	movs	r3, #160	; 0xa0
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2240      	movs	r2, #64	; 0x40
 8005e42:	4013      	ands	r3, r2
 8005e44:	d00d      	beq.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 fc56 	bl	80066fa <UART_EndTransmit_IT>
    return;
 8005e4e:	e008      	b.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	e006      	b.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	e004      	b.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	e002      	b.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005e5c:	46c0      	nop			; (mov r8, r8)
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005e60:	46c0      	nop			; (mov r8, r8)
  }

}
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b02b      	add	sp, #172	; 0xac
 8005e66:	bd90      	pop	{r4, r7, pc}
 8005e68:	fffffeff 	.word	0xfffffeff
 8005e6c:	fffffedf 	.word	0xfffffedf

08005e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	000a      	movs	r2, r1
 8005e9a:	1cbb      	adds	r3, r7, #2
 8005e9c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eb0:	231e      	movs	r3, #30
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a8d      	ldr	r2, [pc, #564]	; (800610c <UART_SetConfig+0x264>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	0019      	movs	r1, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4a88      	ldr	r2, [pc, #544]	; (8006110 <UART_SetConfig+0x268>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a7f      	ldr	r2, [pc, #508]	; (8006114 <UART_SetConfig+0x26c>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7b      	ldr	r2, [pc, #492]	; (8006118 <UART_SetConfig+0x270>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d127      	bne.n	8005f7e <UART_SetConfig+0xd6>
 8005f2e:	4b7b      	ldr	r3, [pc, #492]	; (800611c <UART_SetConfig+0x274>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	2203      	movs	r2, #3
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d00d      	beq.n	8005f56 <UART_SetConfig+0xae>
 8005f3a:	d81b      	bhi.n	8005f74 <UART_SetConfig+0xcc>
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d014      	beq.n	8005f6a <UART_SetConfig+0xc2>
 8005f40:	d818      	bhi.n	8005f74 <UART_SetConfig+0xcc>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <UART_SetConfig+0xa4>
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d00a      	beq.n	8005f60 <UART_SetConfig+0xb8>
 8005f4a:	e013      	b.n	8005f74 <UART_SetConfig+0xcc>
 8005f4c:	231f      	movs	r3, #31
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e021      	b.n	8005f9a <UART_SetConfig+0xf2>
 8005f56:	231f      	movs	r3, #31
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e01c      	b.n	8005f9a <UART_SetConfig+0xf2>
 8005f60:	231f      	movs	r3, #31
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	2204      	movs	r2, #4
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e017      	b.n	8005f9a <UART_SetConfig+0xf2>
 8005f6a:	231f      	movs	r3, #31
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2208      	movs	r2, #8
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e012      	b.n	8005f9a <UART_SetConfig+0xf2>
 8005f74:	231f      	movs	r3, #31
 8005f76:	18fb      	adds	r3, r7, r3
 8005f78:	2210      	movs	r2, #16
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e00d      	b.n	8005f9a <UART_SetConfig+0xf2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a67      	ldr	r2, [pc, #412]	; (8006120 <UART_SetConfig+0x278>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d104      	bne.n	8005f92 <UART_SetConfig+0xea>
 8005f88:	231f      	movs	r3, #31
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e003      	b.n	8005f9a <UART_SetConfig+0xf2>
 8005f92:	231f      	movs	r3, #31
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	2210      	movs	r2, #16
 8005f98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	2380      	movs	r3, #128	; 0x80
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d15d      	bne.n	8006062 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005fa6:	231f      	movs	r3, #31
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d015      	beq.n	8005fdc <UART_SetConfig+0x134>
 8005fb0:	dc18      	bgt.n	8005fe4 <UART_SetConfig+0x13c>
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d00d      	beq.n	8005fd2 <UART_SetConfig+0x12a>
 8005fb6:	dc15      	bgt.n	8005fe4 <UART_SetConfig+0x13c>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <UART_SetConfig+0x11a>
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d005      	beq.n	8005fcc <UART_SetConfig+0x124>
 8005fc0:	e010      	b.n	8005fe4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc2:	f7fe ff67 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	61bb      	str	r3, [r7, #24]
        break;
 8005fca:	e012      	b.n	8005ff2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b55      	ldr	r3, [pc, #340]	; (8006124 <UART_SetConfig+0x27c>)
 8005fce:	61bb      	str	r3, [r7, #24]
        break;
 8005fd0:	e00f      	b.n	8005ff2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fe fed5 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	61bb      	str	r3, [r7, #24]
        break;
 8005fda:	e00a      	b.n	8005ff2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	61bb      	str	r3, [r7, #24]
        break;
 8005fe2:	e006      	b.n	8005ff2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fe8:	231e      	movs	r3, #30
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]
        break;
 8005ff0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d100      	bne.n	8005ffa <UART_SetConfig+0x152>
 8005ff8:	e07b      	b.n	80060f2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	005a      	lsls	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	18d2      	adds	r2, r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	0019      	movs	r1, r3
 800600c:	0010      	movs	r0, r2
 800600e:	f7fa f883 	bl	8000118 <__udivsi3>
 8006012:	0003      	movs	r3, r0
 8006014:	b29b      	uxth	r3, r3
 8006016:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d91c      	bls.n	8006058 <UART_SetConfig+0x1b0>
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	025b      	lsls	r3, r3, #9
 8006024:	429a      	cmp	r2, r3
 8006026:	d217      	bcs.n	8006058 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	b29a      	uxth	r2, r3
 800602c:	200e      	movs	r0, #14
 800602e:	183b      	adds	r3, r7, r0
 8006030:	210f      	movs	r1, #15
 8006032:	438a      	bics	r2, r1
 8006034:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	b29b      	uxth	r3, r3
 800603c:	2207      	movs	r2, #7
 800603e:	4013      	ands	r3, r2
 8006040:	b299      	uxth	r1, r3
 8006042:	183b      	adds	r3, r7, r0
 8006044:	183a      	adds	r2, r7, r0
 8006046:	8812      	ldrh	r2, [r2, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	183a      	adds	r2, r7, r0
 8006052:	8812      	ldrh	r2, [r2, #0]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e04c      	b.n	80060f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006058:	231e      	movs	r3, #30
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	e047      	b.n	80060f2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006062:	231f      	movs	r3, #31
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d015      	beq.n	8006098 <UART_SetConfig+0x1f0>
 800606c:	dc18      	bgt.n	80060a0 <UART_SetConfig+0x1f8>
 800606e:	2b04      	cmp	r3, #4
 8006070:	d00d      	beq.n	800608e <UART_SetConfig+0x1e6>
 8006072:	dc15      	bgt.n	80060a0 <UART_SetConfig+0x1f8>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <UART_SetConfig+0x1d6>
 8006078:	2b02      	cmp	r3, #2
 800607a:	d005      	beq.n	8006088 <UART_SetConfig+0x1e0>
 800607c:	e010      	b.n	80060a0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607e:	f7fe ff09 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8006082:	0003      	movs	r3, r0
 8006084:	61bb      	str	r3, [r7, #24]
        break;
 8006086:	e012      	b.n	80060ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006088:	4b26      	ldr	r3, [pc, #152]	; (8006124 <UART_SetConfig+0x27c>)
 800608a:	61bb      	str	r3, [r7, #24]
        break;
 800608c:	e00f      	b.n	80060ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800608e:	f7fe fe77 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8006092:	0003      	movs	r3, r0
 8006094:	61bb      	str	r3, [r7, #24]
        break;
 8006096:	e00a      	b.n	80060ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	61bb      	str	r3, [r7, #24]
        break;
 800609e:	e006      	b.n	80060ae <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060a4:	231e      	movs	r3, #30
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
        break;
 80060ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01e      	beq.n	80060f2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	085a      	lsrs	r2, r3, #1
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	18d2      	adds	r2, r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	0019      	movs	r1, r3
 80060c4:	0010      	movs	r0, r2
 80060c6:	f7fa f827 	bl	8000118 <__udivsi3>
 80060ca:	0003      	movs	r3, r0
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b0f      	cmp	r3, #15
 80060d4:	d909      	bls.n	80060ea <UART_SetConfig+0x242>
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	025b      	lsls	r3, r3, #9
 80060dc:	429a      	cmp	r2, r3
 80060de:	d204      	bcs.n	80060ea <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	60da      	str	r2, [r3, #12]
 80060e8:	e003      	b.n	80060f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80060ea:	231e      	movs	r3, #30
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060fe:	231e      	movs	r3, #30
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	781b      	ldrb	r3, [r3, #0]
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b008      	add	sp, #32
 800610a:	bd80      	pop	{r7, pc}
 800610c:	efff69f3 	.word	0xefff69f3
 8006110:	ffffcfff 	.word	0xffffcfff
 8006114:	fffff4ff 	.word	0xfffff4ff
 8006118:	40013800 	.word	0x40013800
 800611c:	40021000 	.word	0x40021000
 8006120:	40004400 	.word	0x40004400
 8006124:	007a1200 	.word	0x007a1200

08006128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	2201      	movs	r2, #1
 8006136:	4013      	ands	r3, r2
 8006138:	d00b      	beq.n	8006152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a4a      	ldr	r2, [pc, #296]	; (800626c <UART_AdvFeatureConfig+0x144>)
 8006142:	4013      	ands	r3, r2
 8006144:	0019      	movs	r1, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	2202      	movs	r2, #2
 8006158:	4013      	ands	r3, r2
 800615a:	d00b      	beq.n	8006174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4a43      	ldr	r2, [pc, #268]	; (8006270 <UART_AdvFeatureConfig+0x148>)
 8006164:	4013      	ands	r3, r2
 8006166:	0019      	movs	r1, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2204      	movs	r2, #4
 800617a:	4013      	ands	r3, r2
 800617c:	d00b      	beq.n	8006196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4a3b      	ldr	r2, [pc, #236]	; (8006274 <UART_AdvFeatureConfig+0x14c>)
 8006186:	4013      	ands	r3, r2
 8006188:	0019      	movs	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	2208      	movs	r2, #8
 800619c:	4013      	ands	r3, r2
 800619e:	d00b      	beq.n	80061b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4a34      	ldr	r2, [pc, #208]	; (8006278 <UART_AdvFeatureConfig+0x150>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	0019      	movs	r1, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2210      	movs	r2, #16
 80061be:	4013      	ands	r3, r2
 80061c0:	d00b      	beq.n	80061da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4a2c      	ldr	r2, [pc, #176]	; (800627c <UART_AdvFeatureConfig+0x154>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	0019      	movs	r1, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	2220      	movs	r2, #32
 80061e0:	4013      	ands	r3, r2
 80061e2:	d00b      	beq.n	80061fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	4a25      	ldr	r2, [pc, #148]	; (8006280 <UART_AdvFeatureConfig+0x158>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	0019      	movs	r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	4013      	ands	r3, r2
 8006204:	d01d      	beq.n	8006242 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <UART_AdvFeatureConfig+0x15c>)
 800620e:	4013      	ands	r3, r2
 8006210:	0019      	movs	r1, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	035b      	lsls	r3, r3, #13
 8006226:	429a      	cmp	r2, r3
 8006228:	d10b      	bne.n	8006242 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	4a15      	ldr	r2, [pc, #84]	; (8006288 <UART_AdvFeatureConfig+0x160>)
 8006232:	4013      	ands	r3, r2
 8006234:	0019      	movs	r1, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2280      	movs	r2, #128	; 0x80
 8006248:	4013      	ands	r3, r2
 800624a:	d00b      	beq.n	8006264 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4a0e      	ldr	r2, [pc, #56]	; (800628c <UART_AdvFeatureConfig+0x164>)
 8006254:	4013      	ands	r3, r2
 8006256:	0019      	movs	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  }
}
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	46bd      	mov	sp, r7
 8006268:	b002      	add	sp, #8
 800626a:	bd80      	pop	{r7, pc}
 800626c:	fffdffff 	.word	0xfffdffff
 8006270:	fffeffff 	.word	0xfffeffff
 8006274:	fffbffff 	.word	0xfffbffff
 8006278:	ffff7fff 	.word	0xffff7fff
 800627c:	ffffefff 	.word	0xffffefff
 8006280:	ffffdfff 	.word	0xffffdfff
 8006284:	ffefffff 	.word	0xffefffff
 8006288:	ff9fffff 	.word	0xff9fffff
 800628c:	fff7ffff 	.word	0xfff7ffff

08006290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af02      	add	r7, sp, #8
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2280      	movs	r2, #128	; 0x80
 800629c:	2100      	movs	r1, #0
 800629e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a0:	f7fd f832 	bl	8003308 <HAL_GetTick>
 80062a4:	0003      	movs	r3, r0
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2208      	movs	r2, #8
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d10c      	bne.n	80062d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	0391      	lsls	r1, r2, #14
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4a17      	ldr	r2, [pc, #92]	; (800631c <UART_CheckIdleState+0x8c>)
 80062c0:	9200      	str	r2, [sp, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f000 f82c 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d001      	beq.n	80062d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e021      	b.n	8006314 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2204      	movs	r2, #4
 80062d8:	4013      	ands	r3, r2
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d10c      	bne.n	80062f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2280      	movs	r2, #128	; 0x80
 80062e2:	03d1      	lsls	r1, r2, #15
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4a0d      	ldr	r2, [pc, #52]	; (800631c <UART_CheckIdleState+0x8c>)
 80062e8:	9200      	str	r2, [sp, #0]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f000 f818 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 80062f0:	1e03      	subs	r3, r0, #0
 80062f2:	d001      	beq.n	80062f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e00d      	b.n	8006314 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2274      	movs	r2, #116	; 0x74
 800630e:	2100      	movs	r1, #0
 8006310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b004      	add	sp, #16
 800631a:	bd80      	pop	{r7, pc}
 800631c:	01ffffff 	.word	0x01ffffff

08006320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b094      	sub	sp, #80	; 0x50
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	1dfb      	adds	r3, r7, #7
 800632e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006330:	e0a3      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006334:	3301      	adds	r3, #1
 8006336:	d100      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006338:	e09f      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633a:	f7fc ffe5 	bl	8003308 <HAL_GetTick>
 800633e:	0002      	movs	r2, r0
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006346:	429a      	cmp	r2, r3
 8006348:	d302      	bcc.n	8006350 <UART_WaitOnFlagUntilTimeout+0x30>
 800634a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800634c:	2b00      	cmp	r3, #0
 800634e:	d13d      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006350:	f3ef 8310 	mrs	r3, PRIMASK
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006358:	647b      	str	r3, [r7, #68]	; 0x44
 800635a:	2301      	movs	r3, #1
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	f383 8810 	msr	PRIMASK, r3
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	494c      	ldr	r1, [pc, #304]	; (80064a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006372:	400a      	ands	r2, r1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006378:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	f383 8810 	msr	PRIMASK, r3
}
 8006380:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006382:	f3ef 8310 	mrs	r3, PRIMASK
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	643b      	str	r3, [r7, #64]	; 0x40
 800638c:	2301      	movs	r3, #1
 800638e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	f383 8810 	msr	PRIMASK, r3
}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2101      	movs	r1, #1
 80063a4:	438a      	bics	r2, r1
 80063a6:	609a      	str	r2, [r3, #8]
 80063a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ae:	f383 8810 	msr	PRIMASK, r3
}
 80063b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2274      	movs	r2, #116	; 0x74
 80063c4:	2100      	movs	r1, #0
 80063c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e067      	b.n	800649c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2204      	movs	r2, #4
 80063d4:	4013      	ands	r3, r2
 80063d6:	d050      	beq.n	800647a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69da      	ldr	r2, [r3, #28]
 80063de:	2380      	movs	r3, #128	; 0x80
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	401a      	ands	r2, r3
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d146      	bne.n	800647a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2280      	movs	r2, #128	; 0x80
 80063f2:	0112      	lsls	r2, r2, #4
 80063f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f6:	f3ef 8310 	mrs	r3, PRIMASK
 80063fa:	613b      	str	r3, [r7, #16]
  return(result);
 80063fc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006400:	2301      	movs	r3, #1
 8006402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f383 8810 	msr	PRIMASK, r3
}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4923      	ldr	r1, [pc, #140]	; (80064a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006418:	400a      	ands	r2, r1
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f383 8810 	msr	PRIMASK, r3
}
 8006426:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006428:	f3ef 8310 	mrs	r3, PRIMASK
 800642c:	61fb      	str	r3, [r7, #28]
  return(result);
 800642e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	64bb      	str	r3, [r7, #72]	; 0x48
 8006432:	2301      	movs	r3, #1
 8006434:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f383 8810 	msr	PRIMASK, r3
}
 800643c:	46c0      	nop			; (mov r8, r8)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	438a      	bics	r2, r1
 800644c:	609a      	str	r2, [r3, #8]
 800644e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	f383 8810 	msr	PRIMASK, r3
}
 8006458:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2280      	movs	r2, #128	; 0x80
 800646a:	2120      	movs	r1, #32
 800646c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2274      	movs	r2, #116	; 0x74
 8006472:	2100      	movs	r1, #0
 8006474:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e010      	b.n	800649c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	4013      	ands	r3, r2
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	425a      	negs	r2, r3
 800648a:	4153      	adcs	r3, r2
 800648c:	b2db      	uxtb	r3, r3
 800648e:	001a      	movs	r2, r3
 8006490:	1dfb      	adds	r3, r7, #7
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d100      	bne.n	800649a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006498:	e74b      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	b014      	add	sp, #80	; 0x50
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	fffffe5f 	.word	0xfffffe5f

080064a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	1dbb      	adds	r3, r7, #6
 80064b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	1dba      	adds	r2, r7, #6
 80064c0:	2158      	movs	r1, #88	; 0x58
 80064c2:	8812      	ldrh	r2, [r2, #0]
 80064c4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1dba      	adds	r2, r7, #6
 80064ca:	215a      	movs	r1, #90	; 0x5a
 80064cc:	8812      	ldrh	r2, [r2, #0]
 80064ce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	015b      	lsls	r3, r3, #5
 80064de:	429a      	cmp	r2, r3
 80064e0:	d10d      	bne.n	80064fe <UART_Start_Receive_IT+0x56>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <UART_Start_Receive_IT+0x4c>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	225c      	movs	r2, #92	; 0x5c
 80064ee:	4943      	ldr	r1, [pc, #268]	; (80065fc <UART_Start_Receive_IT+0x154>)
 80064f0:	5299      	strh	r1, [r3, r2]
 80064f2:	e02e      	b.n	8006552 <UART_Start_Receive_IT+0xaa>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	225c      	movs	r2, #92	; 0x5c
 80064f8:	21ff      	movs	r1, #255	; 0xff
 80064fa:	5299      	strh	r1, [r3, r2]
 80064fc:	e029      	b.n	8006552 <UART_Start_Receive_IT+0xaa>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10d      	bne.n	8006522 <UART_Start_Receive_IT+0x7a>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <UART_Start_Receive_IT+0x70>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	225c      	movs	r2, #92	; 0x5c
 8006512:	21ff      	movs	r1, #255	; 0xff
 8006514:	5299      	strh	r1, [r3, r2]
 8006516:	e01c      	b.n	8006552 <UART_Start_Receive_IT+0xaa>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	225c      	movs	r2, #92	; 0x5c
 800651c:	217f      	movs	r1, #127	; 0x7f
 800651e:	5299      	strh	r1, [r3, r2]
 8006520:	e017      	b.n	8006552 <UART_Start_Receive_IT+0xaa>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	055b      	lsls	r3, r3, #21
 800652a:	429a      	cmp	r2, r3
 800652c:	d10d      	bne.n	800654a <UART_Start_Receive_IT+0xa2>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <UART_Start_Receive_IT+0x98>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	225c      	movs	r2, #92	; 0x5c
 800653a:	217f      	movs	r1, #127	; 0x7f
 800653c:	5299      	strh	r1, [r3, r2]
 800653e:	e008      	b.n	8006552 <UART_Start_Receive_IT+0xaa>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	225c      	movs	r2, #92	; 0x5c
 8006544:	213f      	movs	r1, #63	; 0x3f
 8006546:	5299      	strh	r1, [r3, r2]
 8006548:	e003      	b.n	8006552 <UART_Start_Receive_IT+0xaa>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	225c      	movs	r2, #92	; 0x5c
 800654e:	2100      	movs	r1, #0
 8006550:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2280      	movs	r2, #128	; 0x80
 8006556:	2100      	movs	r1, #0
 8006558:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2222      	movs	r2, #34	; 0x22
 800655e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006560:	f3ef 8310 	mrs	r3, PRIMASK
 8006564:	61fb      	str	r3, [r7, #28]
  return(result);
 8006566:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656a:	2301      	movs	r3, #1
 800656c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f383 8810 	msr	PRIMASK, r3
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2101      	movs	r1, #1
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	f383 8810 	msr	PRIMASK, r3
}
 8006590:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	2380      	movs	r3, #128	; 0x80
 8006598:	015b      	lsls	r3, r3, #5
 800659a:	429a      	cmp	r2, r3
 800659c:	d107      	bne.n	80065ae <UART_Start_Receive_IT+0x106>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4a15      	ldr	r2, [pc, #84]	; (8006600 <UART_Start_Receive_IT+0x158>)
 80065aa:	665a      	str	r2, [r3, #100]	; 0x64
 80065ac:	e002      	b.n	80065b4 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a14      	ldr	r2, [pc, #80]	; (8006604 <UART_Start_Receive_IT+0x15c>)
 80065b2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2274      	movs	r2, #116	; 0x74
 80065b8:	2100      	movs	r1, #0
 80065ba:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065bc:	f3ef 8310 	mrs	r3, PRIMASK
 80065c0:	613b      	str	r3, [r7, #16]
  return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c6:	2301      	movs	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f383 8810 	msr	PRIMASK, r3
}
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2190      	movs	r1, #144	; 0x90
 80065de:	0049      	lsls	r1, r1, #1
 80065e0:	430a      	orrs	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f383 8810 	msr	PRIMASK, r3
}
 80065ee:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	0018      	movs	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b00c      	add	sp, #48	; 0x30
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	000001ff 	.word	0x000001ff
 8006600:	080068b9 	.word	0x080068b9
 8006604:	08006751 	.word	0x08006751

08006608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08e      	sub	sp, #56	; 0x38
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006610:	f3ef 8310 	mrs	r3, PRIMASK
 8006614:	617b      	str	r3, [r7, #20]
  return(result);
 8006616:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
 800661a:	2301      	movs	r3, #1
 800661c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	f383 8810 	msr	PRIMASK, r3
}
 8006624:	46c0      	nop			; (mov r8, r8)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4925      	ldr	r1, [pc, #148]	; (80066c8 <UART_EndRxTransfer+0xc0>)
 8006632:	400a      	ands	r2, r1
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f383 8810 	msr	PRIMASK, r3
}
 8006640:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006642:	f3ef 8310 	mrs	r3, PRIMASK
 8006646:	623b      	str	r3, [r7, #32]
  return(result);
 8006648:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
 800664c:	2301      	movs	r3, #1
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	f383 8810 	msr	PRIMASK, r3
}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2101      	movs	r1, #1
 8006664:	438a      	bics	r2, r1
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	f383 8810 	msr	PRIMASK, r3
}
 8006672:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006678:	2b01      	cmp	r3, #1
 800667a:	d118      	bne.n	80066ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667c:	f3ef 8310 	mrs	r3, PRIMASK
 8006680:	60bb      	str	r3, [r7, #8]
  return(result);
 8006682:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006686:	2301      	movs	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f383 8810 	msr	PRIMASK, r3
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2110      	movs	r1, #16
 800669e:	438a      	bics	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f383 8810 	msr	PRIMASK, r3
}
 80066ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80066c0:	46c0      	nop			; (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b00e      	add	sp, #56	; 0x38
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	fffffedf 	.word	0xfffffedf

080066cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	225a      	movs	r2, #90	; 0x5a
 80066de:	2100      	movs	r1, #0
 80066e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2252      	movs	r2, #82	; 0x52
 80066e6:	2100      	movs	r1, #0
 80066e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7ff fbc7 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b004      	add	sp, #16
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006702:	f3ef 8310 	mrs	r3, PRIMASK
 8006706:	60bb      	str	r3, [r7, #8]
  return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	2301      	movs	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f383 8810 	msr	PRIMASK, r3
}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2140      	movs	r1, #64	; 0x40
 8006724:	438a      	bics	r2, r1
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f383 8810 	msr	PRIMASK, r3
}
 8006732:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	0018      	movs	r0, r3
 8006744:	f7ff fb94 	bl	8005e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b006      	add	sp, #24
 800674e:	bd80      	pop	{r7, pc}

08006750 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b090      	sub	sp, #64	; 0x40
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006758:	203e      	movs	r0, #62	; 0x3e
 800675a:	183b      	adds	r3, r7, r0
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	215c      	movs	r1, #92	; 0x5c
 8006760:	5a52      	ldrh	r2, [r2, r1]
 8006762:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006768:	2b22      	cmp	r3, #34	; 0x22
 800676a:	d000      	beq.n	800676e <UART_RxISR_8BIT+0x1e>
 800676c:	e095      	b.n	800689a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	213c      	movs	r1, #60	; 0x3c
 8006774:	187b      	adds	r3, r7, r1
 8006776:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006778:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800677a:	187b      	adds	r3, r7, r1
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	183b      	adds	r3, r7, r0
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b2d9      	uxtb	r1, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	400a      	ands	r2, r1
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	225a      	movs	r2, #90	; 0x5a
 800679e:	5a9b      	ldrh	r3, [r3, r2]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b299      	uxth	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	225a      	movs	r2, #90	; 0x5a
 80067aa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	225a      	movs	r2, #90	; 0x5a
 80067b0:	5a9b      	ldrh	r3, [r3, r2]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d178      	bne.n	80068aa <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b8:	f3ef 8310 	mrs	r3, PRIMASK
 80067bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80067be:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80067c2:	2301      	movs	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f383 8810 	msr	PRIMASK, r3
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4936      	ldr	r1, [pc, #216]	; (80068b4 <UART_RxISR_8BIT+0x164>)
 80067da:	400a      	ands	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f383 8810 	msr	PRIMASK, r3
}
 80067e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ea:	f3ef 8310 	mrs	r3, PRIMASK
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
 80067f4:	2301      	movs	r3, #1
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	f383 8810 	msr	PRIMASK, r3
}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2101      	movs	r1, #1
 800680c:	438a      	bics	r2, r1
 800680e:	609a      	str	r2, [r3, #8]
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	f383 8810 	msr	PRIMASK, r3
}
 800681a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682c:	2b01      	cmp	r3, #1
 800682e:	d12f      	bne.n	8006890 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006836:	f3ef 8310 	mrs	r3, PRIMASK
 800683a:	60fb      	str	r3, [r7, #12]
  return(result);
 800683c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683e:	633b      	str	r3, [r7, #48]	; 0x30
 8006840:	2301      	movs	r3, #1
 8006842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f383 8810 	msr	PRIMASK, r3
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2110      	movs	r1, #16
 8006858:	438a      	bics	r2, r1
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f383 8810 	msr	PRIMASK, r3
}
 8006866:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	2210      	movs	r2, #16
 8006870:	4013      	ands	r3, r2
 8006872:	2b10      	cmp	r3, #16
 8006874:	d103      	bne.n	800687e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2210      	movs	r2, #16
 800687c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2258      	movs	r2, #88	; 0x58
 8006882:	5a9a      	ldrh	r2, [r3, r2]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	0011      	movs	r1, r2
 8006888:	0018      	movs	r0, r3
 800688a:	f7ff fb01 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800688e:	e00c      	b.n	80068aa <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	0018      	movs	r0, r3
 8006894:	f7fb fa9a 	bl	8001dcc <HAL_UART_RxCpltCallback>
}
 8006898:	e007      	b.n	80068aa <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2108      	movs	r1, #8
 80068a6:	430a      	orrs	r2, r1
 80068a8:	619a      	str	r2, [r3, #24]
}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b010      	add	sp, #64	; 0x40
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	fffffedf 	.word	0xfffffedf

080068b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b090      	sub	sp, #64	; 0x40
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068c0:	203e      	movs	r0, #62	; 0x3e
 80068c2:	183b      	adds	r3, r7, r0
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	215c      	movs	r1, #92	; 0x5c
 80068c8:	5a52      	ldrh	r2, [r2, r1]
 80068ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d0:	2b22      	cmp	r3, #34	; 0x22
 80068d2:	d000      	beq.n	80068d6 <UART_RxISR_16BIT+0x1e>
 80068d4:	e095      	b.n	8006a02 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	213c      	movs	r1, #60	; 0x3c
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80068e0:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80068e8:	187b      	adds	r3, r7, r1
 80068ea:	183a      	adds	r2, r7, r0
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	8812      	ldrh	r2, [r2, #0]
 80068f0:	4013      	ands	r3, r2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	225a      	movs	r2, #90	; 0x5a
 8006906:	5a9b      	ldrh	r3, [r3, r2]
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b299      	uxth	r1, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	225a      	movs	r2, #90	; 0x5a
 8006912:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	225a      	movs	r2, #90	; 0x5a
 8006918:	5a9b      	ldrh	r3, [r3, r2]
 800691a:	b29b      	uxth	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d178      	bne.n	8006a12 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006920:	f3ef 8310 	mrs	r3, PRIMASK
 8006924:	617b      	str	r3, [r7, #20]
  return(result);
 8006926:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	2301      	movs	r3, #1
 800692c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f383 8810 	msr	PRIMASK, r3
}
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4936      	ldr	r1, [pc, #216]	; (8006a1c <UART_RxISR_16BIT+0x164>)
 8006942:	400a      	ands	r2, r1
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f383 8810 	msr	PRIMASK, r3
}
 8006950:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006952:	f3ef 8310 	mrs	r3, PRIMASK
 8006956:	623b      	str	r3, [r7, #32]
  return(result);
 8006958:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
 800695c:	2301      	movs	r3, #1
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	f383 8810 	msr	PRIMASK, r3
}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2101      	movs	r1, #1
 8006974:	438a      	bics	r2, r1
 8006976:	609a      	str	r2, [r3, #8]
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	f383 8810 	msr	PRIMASK, r3
}
 8006982:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	2b01      	cmp	r3, #1
 8006996:	d12f      	bne.n	80069f8 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699e:	f3ef 8310 	mrs	r3, PRIMASK
 80069a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80069a4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a8:	2301      	movs	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f383 8810 	msr	PRIMASK, r3
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2110      	movs	r1, #16
 80069c0:	438a      	bics	r2, r1
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f383 8810 	msr	PRIMASK, r3
}
 80069ce:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	2210      	movs	r2, #16
 80069d8:	4013      	ands	r3, r2
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d103      	bne.n	80069e6 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2210      	movs	r2, #16
 80069e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2258      	movs	r2, #88	; 0x58
 80069ea:	5a9a      	ldrh	r2, [r3, r2]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff fa4d 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069f6:	e00c      	b.n	8006a12 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7fb f9e6 	bl	8001dcc <HAL_UART_RxCpltCallback>
}
 8006a00:	e007      	b.n	8006a12 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2108      	movs	r1, #8
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	619a      	str	r2, [r3, #24]
}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	46bd      	mov	sp, r7
 8006a16:	b010      	add	sp, #64	; 0x40
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	fffffedf 	.word	0xfffffedf

08006a20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b002      	add	sp, #8
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <atoi>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	220a      	movs	r2, #10
 8006a34:	2100      	movs	r1, #0
 8006a36:	f000 f8d7 	bl	8006be8 <strtol>
 8006a3a:	bd10      	pop	{r4, pc}

08006a3c <__errno>:
 8006a3c:	4b01      	ldr	r3, [pc, #4]	; (8006a44 <__errno+0x8>)
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	4770      	bx	lr
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	2000002c 	.word	0x2000002c

08006a48 <__libc_init_array>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	4d0c      	ldr	r5, [pc, #48]	; (8006a80 <__libc_init_array+0x38>)
 8006a4e:	4c0d      	ldr	r4, [pc, #52]	; (8006a84 <__libc_init_array+0x3c>)
 8006a50:	1b64      	subs	r4, r4, r5
 8006a52:	10a4      	asrs	r4, r4, #2
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d109      	bne.n	8006a6c <__libc_init_array+0x24>
 8006a58:	2600      	movs	r6, #0
 8006a5a:	f000 f8d1 	bl	8006c00 <_init>
 8006a5e:	4d0a      	ldr	r5, [pc, #40]	; (8006a88 <__libc_init_array+0x40>)
 8006a60:	4c0a      	ldr	r4, [pc, #40]	; (8006a8c <__libc_init_array+0x44>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	d105      	bne.n	8006a76 <__libc_init_array+0x2e>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	00b3      	lsls	r3, r6, #2
 8006a6e:	58eb      	ldr	r3, [r5, r3]
 8006a70:	4798      	blx	r3
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7ee      	b.n	8006a54 <__libc_init_array+0xc>
 8006a76:	00b3      	lsls	r3, r6, #2
 8006a78:	58eb      	ldr	r3, [r5, r3]
 8006a7a:	4798      	blx	r3
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	e7f2      	b.n	8006a66 <__libc_init_array+0x1e>
 8006a80:	08006e9c 	.word	0x08006e9c
 8006a84:	08006e9c 	.word	0x08006e9c
 8006a88:	08006e9c 	.word	0x08006e9c
 8006a8c:	08006ea0 	.word	0x08006ea0

08006a90 <memset>:
 8006a90:	0003      	movs	r3, r0
 8006a92:	1882      	adds	r2, r0, r2
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d100      	bne.n	8006a9a <memset+0xa>
 8006a98:	4770      	bx	lr
 8006a9a:	7019      	strb	r1, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	e7f9      	b.n	8006a94 <memset+0x4>

08006aa0 <strcat>:
 8006aa0:	0002      	movs	r2, r0
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	7813      	ldrb	r3, [r2, #0]
 8006aa6:	0014      	movs	r4, r2
 8006aa8:	3201      	adds	r2, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1fa      	bne.n	8006aa4 <strcat+0x4>
 8006aae:	5cca      	ldrb	r2, [r1, r3]
 8006ab0:	54e2      	strb	r2, [r4, r3]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	d1fa      	bne.n	8006aae <strcat+0xe>
 8006ab8:	bd10      	pop	{r4, pc}

08006aba <strcpy>:
 8006aba:	0003      	movs	r3, r0
 8006abc:	780a      	ldrb	r2, [r1, #0]
 8006abe:	3101      	adds	r1, #1
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	2a00      	cmp	r2, #0
 8006ac6:	d1f9      	bne.n	8006abc <strcpy+0x2>
 8006ac8:	4770      	bx	lr
	...

08006acc <_strtol_l.isra.0>:
 8006acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	001e      	movs	r6, r3
 8006ad2:	9005      	str	r0, [sp, #20]
 8006ad4:	9101      	str	r1, [sp, #4]
 8006ad6:	9202      	str	r2, [sp, #8]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d045      	beq.n	8006b68 <_strtol_l.isra.0+0x9c>
 8006adc:	0008      	movs	r0, r1
 8006ade:	2b24      	cmp	r3, #36	; 0x24
 8006ae0:	d842      	bhi.n	8006b68 <_strtol_l.isra.0+0x9c>
 8006ae2:	4b3f      	ldr	r3, [pc, #252]	; (8006be0 <_strtol_l.isra.0+0x114>)
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	469c      	mov	ip, r3
 8006ae8:	0003      	movs	r3, r0
 8006aea:	4661      	mov	r1, ip
 8006aec:	781c      	ldrb	r4, [r3, #0]
 8006aee:	1c45      	adds	r5, r0, #1
 8006af0:	5d09      	ldrb	r1, [r1, r4]
 8006af2:	0028      	movs	r0, r5
 8006af4:	000f      	movs	r7, r1
 8006af6:	4017      	ands	r7, r2
 8006af8:	4211      	tst	r1, r2
 8006afa:	d1f5      	bne.n	8006ae8 <_strtol_l.isra.0+0x1c>
 8006afc:	2c2d      	cmp	r4, #45	; 0x2d
 8006afe:	d13a      	bne.n	8006b76 <_strtol_l.isra.0+0xaa>
 8006b00:	2701      	movs	r7, #1
 8006b02:	782c      	ldrb	r4, [r5, #0]
 8006b04:	1c9d      	adds	r5, r3, #2
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	d065      	beq.n	8006bd6 <_strtol_l.isra.0+0x10a>
 8006b0a:	2e10      	cmp	r6, #16
 8006b0c:	d109      	bne.n	8006b22 <_strtol_l.isra.0+0x56>
 8006b0e:	2c30      	cmp	r4, #48	; 0x30
 8006b10:	d107      	bne.n	8006b22 <_strtol_l.isra.0+0x56>
 8006b12:	2220      	movs	r2, #32
 8006b14:	782b      	ldrb	r3, [r5, #0]
 8006b16:	4393      	bics	r3, r2
 8006b18:	2b58      	cmp	r3, #88	; 0x58
 8006b1a:	d157      	bne.n	8006bcc <_strtol_l.isra.0+0x100>
 8006b1c:	2610      	movs	r6, #16
 8006b1e:	786c      	ldrb	r4, [r5, #1]
 8006b20:	3502      	adds	r5, #2
 8006b22:	4b30      	ldr	r3, [pc, #192]	; (8006be4 <_strtol_l.isra.0+0x118>)
 8006b24:	0031      	movs	r1, r6
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	0018      	movs	r0, r3
 8006b2a:	9303      	str	r3, [sp, #12]
 8006b2c:	f7f9 fb7a 	bl	8000224 <__aeabi_uidivmod>
 8006b30:	2300      	movs	r3, #0
 8006b32:	2201      	movs	r2, #1
 8006b34:	4684      	mov	ip, r0
 8006b36:	0018      	movs	r0, r3
 8006b38:	9104      	str	r1, [sp, #16]
 8006b3a:	4252      	negs	r2, r2
 8006b3c:	0021      	movs	r1, r4
 8006b3e:	3930      	subs	r1, #48	; 0x30
 8006b40:	2909      	cmp	r1, #9
 8006b42:	d81d      	bhi.n	8006b80 <_strtol_l.isra.0+0xb4>
 8006b44:	000c      	movs	r4, r1
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	dd28      	ble.n	8006b9c <_strtol_l.isra.0+0xd0>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	db24      	blt.n	8006b98 <_strtol_l.isra.0+0xcc>
 8006b4e:	0013      	movs	r3, r2
 8006b50:	4584      	cmp	ip, r0
 8006b52:	d306      	bcc.n	8006b62 <_strtol_l.isra.0+0x96>
 8006b54:	d102      	bne.n	8006b5c <_strtol_l.isra.0+0x90>
 8006b56:	9904      	ldr	r1, [sp, #16]
 8006b58:	42a1      	cmp	r1, r4
 8006b5a:	db02      	blt.n	8006b62 <_strtol_l.isra.0+0x96>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4370      	muls	r0, r6
 8006b60:	1820      	adds	r0, r4, r0
 8006b62:	782c      	ldrb	r4, [r5, #0]
 8006b64:	3501      	adds	r5, #1
 8006b66:	e7e9      	b.n	8006b3c <_strtol_l.isra.0+0x70>
 8006b68:	f7ff ff68 	bl	8006a3c <__errno>
 8006b6c:	2316      	movs	r3, #22
 8006b6e:	6003      	str	r3, [r0, #0]
 8006b70:	2000      	movs	r0, #0
 8006b72:	b007      	add	sp, #28
 8006b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b76:	2c2b      	cmp	r4, #43	; 0x2b
 8006b78:	d1c5      	bne.n	8006b06 <_strtol_l.isra.0+0x3a>
 8006b7a:	782c      	ldrb	r4, [r5, #0]
 8006b7c:	1c9d      	adds	r5, r3, #2
 8006b7e:	e7c2      	b.n	8006b06 <_strtol_l.isra.0+0x3a>
 8006b80:	0021      	movs	r1, r4
 8006b82:	3941      	subs	r1, #65	; 0x41
 8006b84:	2919      	cmp	r1, #25
 8006b86:	d801      	bhi.n	8006b8c <_strtol_l.isra.0+0xc0>
 8006b88:	3c37      	subs	r4, #55	; 0x37
 8006b8a:	e7dc      	b.n	8006b46 <_strtol_l.isra.0+0x7a>
 8006b8c:	0021      	movs	r1, r4
 8006b8e:	3961      	subs	r1, #97	; 0x61
 8006b90:	2919      	cmp	r1, #25
 8006b92:	d803      	bhi.n	8006b9c <_strtol_l.isra.0+0xd0>
 8006b94:	3c57      	subs	r4, #87	; 0x57
 8006b96:	e7d6      	b.n	8006b46 <_strtol_l.isra.0+0x7a>
 8006b98:	0013      	movs	r3, r2
 8006b9a:	e7e2      	b.n	8006b62 <_strtol_l.isra.0+0x96>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da09      	bge.n	8006bb4 <_strtol_l.isra.0+0xe8>
 8006ba0:	2322      	movs	r3, #34	; 0x22
 8006ba2:	9a05      	ldr	r2, [sp, #20]
 8006ba4:	9803      	ldr	r0, [sp, #12]
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	9b02      	ldr	r3, [sp, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0e1      	beq.n	8006b72 <_strtol_l.isra.0+0xa6>
 8006bae:	1e6b      	subs	r3, r5, #1
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	e007      	b.n	8006bc4 <_strtol_l.isra.0+0xf8>
 8006bb4:	2f00      	cmp	r7, #0
 8006bb6:	d000      	beq.n	8006bba <_strtol_l.isra.0+0xee>
 8006bb8:	4240      	negs	r0, r0
 8006bba:	9a02      	ldr	r2, [sp, #8]
 8006bbc:	2a00      	cmp	r2, #0
 8006bbe:	d0d8      	beq.n	8006b72 <_strtol_l.isra.0+0xa6>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f4      	bne.n	8006bae <_strtol_l.isra.0+0xe2>
 8006bc4:	9b02      	ldr	r3, [sp, #8]
 8006bc6:	9a01      	ldr	r2, [sp, #4]
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e7d2      	b.n	8006b72 <_strtol_l.isra.0+0xa6>
 8006bcc:	2430      	movs	r4, #48	; 0x30
 8006bce:	2e00      	cmp	r6, #0
 8006bd0:	d1a7      	bne.n	8006b22 <_strtol_l.isra.0+0x56>
 8006bd2:	3608      	adds	r6, #8
 8006bd4:	e7a5      	b.n	8006b22 <_strtol_l.isra.0+0x56>
 8006bd6:	2c30      	cmp	r4, #48	; 0x30
 8006bd8:	d09b      	beq.n	8006b12 <_strtol_l.isra.0+0x46>
 8006bda:	260a      	movs	r6, #10
 8006bdc:	e7a1      	b.n	8006b22 <_strtol_l.isra.0+0x56>
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	08006d99 	.word	0x08006d99
 8006be4:	7fffffff 	.word	0x7fffffff

08006be8 <strtol>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	0013      	movs	r3, r2
 8006bec:	000a      	movs	r2, r1
 8006bee:	0001      	movs	r1, r0
 8006bf0:	4802      	ldr	r0, [pc, #8]	; (8006bfc <strtol+0x14>)
 8006bf2:	6800      	ldr	r0, [r0, #0]
 8006bf4:	f7ff ff6a 	bl	8006acc <_strtol_l.isra.0>
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	2000002c 	.word	0x2000002c

08006c00 <_init>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr

08006c0c <_fini>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr
