
BikeSafetySTM32F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800468c  0800468c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800468c  0800468c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800468c  0800468c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000002c  080046c0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080046c0  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013836  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002461  00000000  00000000  0003388a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00035cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ab1  00000000  00000000  00037c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001384c  00000000  00000000  000516b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094cb3  00000000  00000000  00064efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9bb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  000f9c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004560 	.word	0x08004560

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08004560 	.word	0x08004560

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b0c3      	sub	sp, #268	; 0x10c
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//=========================MPU9250
	// Registers
	uint8_t IMUDevAddr 				= 0xd0;
 8000226:	24ff      	movs	r4, #255	; 0xff
 8000228:	193b      	adds	r3, r7, r4
 800022a:	22d0      	movs	r2, #208	; 0xd0
 800022c:	701a      	strb	r2, [r3, #0]
	uint8_t PWR_MGMT_1[2] 			= {0x6b, 0b00100000};	// or 4
 800022e:	25fc      	movs	r5, #252	; 0xfc
 8000230:	197b      	adds	r3, r7, r5
 8000232:	4af9      	ldr	r2, [pc, #996]	; (8000618 <main+0x3f8>)
 8000234:	801a      	strh	r2, [r3, #0]
	uint8_t PWR_MGMT_2[2] 			= {0x6c, 0b00000000};	// 0 to enable all or 255 to disable all
 8000236:	26f8      	movs	r6, #248	; 0xf8
 8000238:	19bb      	adds	r3, r7, r6
 800023a:	226c      	movs	r2, #108	; 0x6c
 800023c:	801a      	strh	r2, [r3, #0]
	uint8_t WHO_AM_I 				= 0x75;
 800023e:	23f7      	movs	r3, #247	; 0xf7
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2275      	movs	r2, #117	; 0x75
 8000244:	701a      	strb	r2, [r3, #0]
	uint8_t LP_ACCEL_ODR[2] 		= {0x1e, 0b00001000}; 	// 8 = output frequency 62.50Hz
 8000246:	22f4      	movs	r2, #244	; 0xf4
 8000248:	18bb      	adds	r3, r7, r2
 800024a:	4af4      	ldr	r2, [pc, #976]	; (800061c <main+0x3fc>)
 800024c:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_CONFIG[2] 		= {0x1c, 0x0}; 			// 0x0 for 2g, 0x8 for 4g, 0x10 for 8g,0x18 for 16g
 800024e:	21f0      	movs	r1, #240	; 0xf0
 8000250:	187b      	adds	r3, r7, r1
 8000252:	221c      	movs	r2, #28
 8000254:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_XOUT_L 			= 0x3c;
 8000256:	20ef      	movs	r0, #239	; 0xef
 8000258:	183b      	adds	r3, r7, r0
 800025a:	223c      	movs	r2, #60	; 0x3c
 800025c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_XOUT_H 			= 0x3b;
 800025e:	20ee      	movs	r0, #238	; 0xee
 8000260:	183b      	adds	r3, r7, r0
 8000262:	223b      	movs	r2, #59	; 0x3b
 8000264:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_L 			= 0x3e;
 8000266:	20ed      	movs	r0, #237	; 0xed
 8000268:	183b      	adds	r3, r7, r0
 800026a:	223e      	movs	r2, #62	; 0x3e
 800026c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_H 			= 0x3d;
 800026e:	20ec      	movs	r0, #236	; 0xec
 8000270:	183b      	adds	r3, r7, r0
 8000272:	223d      	movs	r2, #61	; 0x3d
 8000274:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_L 			= 0x40;
 8000276:	20eb      	movs	r0, #235	; 0xeb
 8000278:	183b      	adds	r3, r7, r0
 800027a:	2240      	movs	r2, #64	; 0x40
 800027c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_H 			= 0x3f;
 800027e:	20ea      	movs	r0, #234	; 0xea
 8000280:	183b      	adds	r3, r7, r0
 8000282:	223f      	movs	r2, #63	; 0x3f
 8000284:	701a      	strb	r2, [r3, #0]
	//=========================MPU9250

	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 8000286:	20e4      	movs	r0, #228	; 0xe4
 8000288:	183b      	adds	r3, r7, r0
 800028a:	4ae5      	ldr	r2, [pc, #916]	; (8000620 <main+0x400>)
 800028c:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 800028e:	20dc      	movs	r0, #220	; 0xdc
 8000290:	183b      	adds	r3, r7, r0
 8000292:	4ae4      	ldr	r2, [pc, #912]	; (8000624 <main+0x404>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	6019      	str	r1, [r3, #0]
 8000298:	7912      	ldrb	r2, [r2, #4]
 800029a:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 800029c:	20d0      	movs	r0, #208	; 0xd0
 800029e:	183b      	adds	r3, r7, r0
 80002a0:	4ae1      	ldr	r2, [pc, #900]	; (8000628 <main+0x408>)
 80002a2:	ca03      	ldmia	r2!, {r0, r1}
 80002a4:	c303      	stmia	r3!, {r0, r1}
 80002a6:	8811      	ldrh	r1, [r2, #0]
 80002a8:	8019      	strh	r1, [r3, #0]
 80002aa:	7892      	ldrb	r2, [r2, #2]
 80002ac:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 80002ae:	20c4      	movs	r0, #196	; 0xc4
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	4ade      	ldr	r2, [pc, #888]	; (800062c <main+0x40c>)
 80002b4:	ca03      	ldmia	r2!, {r0, r1}
 80002b6:	c303      	stmia	r3!, {r0, r1}
 80002b8:	8811      	ldrh	r1, [r2, #0]
 80002ba:	8019      	strh	r1, [r3, #0]
 80002bc:	7892      	ldrb	r2, [r2, #2]
 80002be:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 80002c0:	20b8      	movs	r0, #184	; 0xb8
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	4ada      	ldr	r2, [pc, #872]	; (8000630 <main+0x410>)
 80002c6:	ca03      	ldmia	r2!, {r0, r1}
 80002c8:	c303      	stmia	r3!, {r0, r1}
 80002ca:	8812      	ldrh	r2, [r2, #0]
 80002cc:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 80002ce:	20ac      	movs	r0, #172	; 0xac
 80002d0:	183b      	adds	r3, r7, r0
 80002d2:	4ad8      	ldr	r2, [pc, #864]	; (8000634 <main+0x414>)
 80002d4:	ca03      	ldmia	r2!, {r0, r1}
 80002d6:	c303      	stmia	r3!, {r0, r1}
 80002d8:	8811      	ldrh	r1, [r2, #0]
 80002da:	8019      	strh	r1, [r3, #0]
 80002dc:	7892      	ldrb	r2, [r2, #2]
 80002de:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 80002e0:	20a0      	movs	r0, #160	; 0xa0
 80002e2:	183b      	adds	r3, r7, r0
 80002e4:	4ad4      	ldr	r2, [pc, #848]	; (8000638 <main+0x418>)
 80002e6:	ca03      	ldmia	r2!, {r0, r1}
 80002e8:	c303      	stmia	r3!, {r0, r1}
 80002ea:	8811      	ldrh	r1, [r2, #0]
 80002ec:	8019      	strh	r1, [r3, #0]
 80002ee:	7892      	ldrb	r2, [r2, #2]
 80002f0:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 80002f2:	2090      	movs	r0, #144	; 0x90
 80002f4:	183b      	adds	r3, r7, r0
 80002f6:	4ad1      	ldr	r2, [pc, #836]	; (800063c <main+0x41c>)
 80002f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002fa:	c313      	stmia	r3!, {r0, r1, r4}
 80002fc:	8811      	ldrh	r1, [r2, #0]
 80002fe:	8019      	strh	r1, [r3, #0]
 8000300:	7892      	ldrb	r2, [r2, #2]
 8000302:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8000304:	2088      	movs	r0, #136	; 0x88
 8000306:	183b      	adds	r3, r7, r0
 8000308:	4acd      	ldr	r2, [pc, #820]	; (8000640 <main+0x420>)
 800030a:	ca11      	ldmia	r2!, {r0, r4}
 800030c:	c311      	stmia	r3!, {r0, r4}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 800030e:	207c      	movs	r0, #124	; 0x7c
 8000310:	183b      	adds	r3, r7, r0
 8000312:	4acc      	ldr	r2, [pc, #816]	; (8000644 <main+0x424>)
 8000314:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000316:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8000318:	2078      	movs	r0, #120	; 0x78
 800031a:	183b      	adds	r3, r7, r0
 800031c:	221a      	movs	r2, #26
 800031e:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CMGS_SEND_MSG_BUF[] 	= "AT+CMGS=\"+358443xxxxxx\"\rTesting9";
 8000320:	2054      	movs	r0, #84	; 0x54
 8000322:	183b      	adds	r3, r7, r0
 8000324:	4ac8      	ldr	r2, [pc, #800]	; (8000648 <main+0x428>)
 8000326:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000328:	c313      	stmia	r3!, {r0, r1, r4}
 800032a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800032c:	c313      	stmia	r3!, {r0, r1, r4}
 800032e:	ca11      	ldmia	r2!, {r0, r4}
 8000330:	c311      	stmia	r3!, {r0, r4}
 8000332:	7812      	ldrb	r2, [r2, #0]
 8000334:	701a      	strb	r2, [r3, #0]
	//=========================GSM

	//=========================GNSS
	uint8_t AT_CGNSPWR_ON[] 	= "AT+CGNSPWR=1\r";				// GNSS turns Power ON
 8000336:	2044      	movs	r0, #68	; 0x44
 8000338:	183b      	adds	r3, r7, r0
 800033a:	4ac4      	ldr	r2, [pc, #784]	; (800064c <main+0x42c>)
 800033c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800033e:	c313      	stmia	r3!, {r0, r1, r4}
 8000340:	8812      	ldrh	r2, [r2, #0]
 8000342:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSPWR_OFF[] 	= "AT+CGNSPWR=0\r";				// GNSS turns Power OFF
 8000344:	2034      	movs	r0, #52	; 0x34
 8000346:	183b      	adds	r3, r7, r0
 8000348:	4ac1      	ldr	r2, [pc, #772]	; (8000650 <main+0x430>)
 800034a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800034c:	c313      	stmia	r3!, {r0, r1, r4}
 800034e:	8812      	ldrh	r2, [r2, #0]
 8000350:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSSEQ[] 		= "AT+CGNSSEQ=\"RMC\"\r";		// RMC for GGA
 8000352:	2020      	movs	r0, #32
 8000354:	183b      	adds	r3, r7, r0
 8000356:	4abf      	ldr	r2, [pc, #764]	; (8000654 <main+0x434>)
 8000358:	ca13      	ldmia	r2!, {r0, r1, r4}
 800035a:	c313      	stmia	r3!, {r0, r1, r4}
 800035c:	6811      	ldr	r1, [r2, #0]
 800035e:	6019      	str	r1, [r3, #0]
 8000360:	8892      	ldrh	r2, [r2, #4]
 8000362:	809a      	strh	r2, [r3, #4]
	uint8_t AT_CGNSINF[] 		= "AT+CGNSINF\r";				// Gets data from GNSS
 8000364:	2014      	movs	r0, #20
 8000366:	183b      	adds	r3, r7, r0
 8000368:	4abb      	ldr	r2, [pc, #748]	; (8000658 <main+0x438>)
 800036a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800036c:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CGNSURC[] 		= "AT+CGNSURC=1\r";
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4aba      	ldr	r2, [pc, #744]	; (800065c <main+0x43c>)
 8000372:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000374:	c313      	stmia	r3!, {r0, r1, r4}
 8000376:	8812      	ldrh	r2, [r2, #0]
 8000378:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037a:	f000 fefb 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037e:	f000 fa8f 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000382:	f000 fbf9 	bl	8000b78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000386:	f000 faf1 	bl	800096c <MX_I2C1_Init>
  MX_SPI1_Init();
 800038a:	f000 fb2f 	bl	80009ec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800038e:	f000 fb93 	bl	8000ab8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000392:	f000 fbc1 	bl	8000b18 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000396:	f000 fb67 	bl	8000a68 <MX_TIM16_Init>
  memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
  //=========================GNSS
  */

  //=========================MPU9250
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_1, sizeof(PWR_MGMT_1), 10);
 800039a:	24ff      	movs	r4, #255	; 0xff
 800039c:	193b      	adds	r3, r7, r4
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b299      	uxth	r1, r3
 80003a2:	197a      	adds	r2, r7, r5
 80003a4:	48ae      	ldr	r0, [pc, #696]	; (8000660 <main+0x440>)
 80003a6:	230a      	movs	r3, #10
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2302      	movs	r3, #2
 80003ac:	f001 fae2 	bl	8001974 <HAL_I2C_Master_Transmit>
 80003b0:	0003      	movs	r3, r0
 80003b2:	001a      	movs	r2, r3
 80003b4:	4bab      	ldr	r3, [pc, #684]	; (8000664 <main+0x444>)
 80003b6:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	b299      	uxth	r1, r3
 80003be:	4aaa      	ldr	r2, [pc, #680]	; (8000668 <main+0x448>)
 80003c0:	48a7      	ldr	r0, [pc, #668]	; (8000660 <main+0x440>)
 80003c2:	23fa      	movs	r3, #250	; 0xfa
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	f001 fbdb 	bl	8001b84 <HAL_I2C_Master_Receive>
 80003ce:	0003      	movs	r3, r0
 80003d0:	001a      	movs	r2, r3
 80003d2:	4ba4      	ldr	r3, [pc, #656]	; (8000664 <main+0x444>)
 80003d4:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 80003d6:	200a      	movs	r0, #10
 80003d8:	f000 ff30 	bl	800123c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_2, sizeof(PWR_MGMT_2), 10);
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b299      	uxth	r1, r3
 80003e2:	19ba      	adds	r2, r7, r6
 80003e4:	489e      	ldr	r0, [pc, #632]	; (8000660 <main+0x440>)
 80003e6:	230a      	movs	r3, #10
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2302      	movs	r3, #2
 80003ec:	f001 fac2 	bl	8001974 <HAL_I2C_Master_Transmit>
 80003f0:	0003      	movs	r3, r0
 80003f2:	001a      	movs	r2, r3
 80003f4:	4b9b      	ldr	r3, [pc, #620]	; (8000664 <main+0x444>)
 80003f6:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b299      	uxth	r1, r3
 80003fe:	4a9a      	ldr	r2, [pc, #616]	; (8000668 <main+0x448>)
 8000400:	4897      	ldr	r0, [pc, #604]	; (8000660 <main+0x440>)
 8000402:	23fa      	movs	r3, #250	; 0xfa
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	2301      	movs	r3, #1
 800040a:	f001 fbbb 	bl	8001b84 <HAL_I2C_Master_Receive>
 800040e:	0003      	movs	r3, r0
 8000410:	001a      	movs	r2, r3
 8000412:	4b94      	ldr	r3, [pc, #592]	; (8000664 <main+0x444>)
 8000414:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000416:	200a      	movs	r0, #10
 8000418:	f000 ff10 	bl	800123c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &WHO_AM_I, sizeof(WHO_AM_I), 10);
 800041c:	193b      	adds	r3, r7, r4
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	b299      	uxth	r1, r3
 8000422:	23f7      	movs	r3, #247	; 0xf7
 8000424:	18fa      	adds	r2, r7, r3
 8000426:	488e      	ldr	r0, [pc, #568]	; (8000660 <main+0x440>)
 8000428:	230a      	movs	r3, #10
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2301      	movs	r3, #1
 800042e:	f001 faa1 	bl	8001974 <HAL_I2C_Master_Transmit>
 8000432:	0003      	movs	r3, r0
 8000434:	001a      	movs	r2, r3
 8000436:	4b8b      	ldr	r3, [pc, #556]	; (8000664 <main+0x444>)
 8000438:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 800043a:	193b      	adds	r3, r7, r4
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b299      	uxth	r1, r3
 8000440:	4a89      	ldr	r2, [pc, #548]	; (8000668 <main+0x448>)
 8000442:	4887      	ldr	r0, [pc, #540]	; (8000660 <main+0x440>)
 8000444:	23fa      	movs	r3, #250	; 0xfa
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	f001 fb9a 	bl	8001b84 <HAL_I2C_Master_Receive>
 8000450:	0003      	movs	r3, r0
 8000452:	001a      	movs	r2, r3
 8000454:	4b83      	ldr	r3, [pc, #524]	; (8000664 <main+0x444>)
 8000456:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000458:	200a      	movs	r0, #10
 800045a:	f000 feef 	bl	800123c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, LP_ACCEL_ODR, sizeof(LP_ACCEL_ODR), 10);
 800045e:	193b      	adds	r3, r7, r4
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b299      	uxth	r1, r3
 8000464:	22f4      	movs	r2, #244	; 0xf4
 8000466:	18ba      	adds	r2, r7, r2
 8000468:	487d      	ldr	r0, [pc, #500]	; (8000660 <main+0x440>)
 800046a:	230a      	movs	r3, #10
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2302      	movs	r3, #2
 8000470:	f001 fa80 	bl	8001974 <HAL_I2C_Master_Transmit>
 8000474:	0003      	movs	r3, r0
 8000476:	001a      	movs	r2, r3
 8000478:	4b7a      	ldr	r3, [pc, #488]	; (8000664 <main+0x444>)
 800047a:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 800047c:	193b      	adds	r3, r7, r4
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b299      	uxth	r1, r3
 8000482:	4a79      	ldr	r2, [pc, #484]	; (8000668 <main+0x448>)
 8000484:	4876      	ldr	r0, [pc, #472]	; (8000660 <main+0x440>)
 8000486:	23fa      	movs	r3, #250	; 0xfa
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	2301      	movs	r3, #1
 800048e:	f001 fb79 	bl	8001b84 <HAL_I2C_Master_Receive>
 8000492:	0003      	movs	r3, r0
 8000494:	001a      	movs	r2, r3
 8000496:	4b73      	ldr	r3, [pc, #460]	; (8000664 <main+0x444>)
 8000498:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800049a:	200a      	movs	r0, #10
 800049c:	f000 fece 	bl	800123c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), 10);
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b299      	uxth	r1, r3
 80004a6:	23f0      	movs	r3, #240	; 0xf0
 80004a8:	18fa      	adds	r2, r7, r3
 80004aa:	486d      	ldr	r0, [pc, #436]	; (8000660 <main+0x440>)
 80004ac:	230a      	movs	r3, #10
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2302      	movs	r3, #2
 80004b2:	f001 fa5f 	bl	8001974 <HAL_I2C_Master_Transmit>
 80004b6:	0003      	movs	r3, r0
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b6a      	ldr	r3, [pc, #424]	; (8000664 <main+0x444>)
 80004bc:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b299      	uxth	r1, r3
 80004c4:	4a68      	ldr	r2, [pc, #416]	; (8000668 <main+0x448>)
 80004c6:	4866      	ldr	r0, [pc, #408]	; (8000660 <main+0x440>)
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2301      	movs	r3, #1
 80004d0:	f001 fb58 	bl	8001b84 <HAL_I2C_Master_Receive>
 80004d4:	0003      	movs	r3, r0
 80004d6:	001a      	movs	r2, r3
 80004d8:	4b62      	ldr	r3, [pc, #392]	; (8000664 <main+0x444>)
 80004da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16);
 80004dc:	4b63      	ldr	r3, [pc, #396]	; (800066c <main+0x44c>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fdea 	bl	80030b8 <HAL_TIM_Base_Start>
  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 80004e4:	4962      	ldr	r1, [pc, #392]	; (8000670 <main+0x450>)
 80004e6:	4b63      	ldr	r3, [pc, #396]	; (8000674 <main+0x454>)
 80004e8:	220e      	movs	r2, #14
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 fef2 	bl	80032d4 <HAL_UART_Receive_IT>
 80004f0:	0003      	movs	r3, r0
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b60      	ldr	r3, [pc, #384]	; (8000678 <main+0x458>)
 80004f6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  i2cState = HAL_I2C_GetState(&hi2c1);
 80004f8:	4b59      	ldr	r3, [pc, #356]	; (8000660 <main+0x440>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fc4a 	bl	8001d94 <HAL_I2C_GetState>
 8000500:	0003      	movs	r3, r0
 8000502:	001a      	movs	r2, r3
 8000504:	4b5d      	ldr	r3, [pc, #372]	; (800067c <main+0x45c>)
 8000506:	701a      	strb	r2, [r3, #0]

	  //=========================MPU9250
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_L, sizeof(ACCEL_XOUT_L), 10);
 8000508:	24ff      	movs	r4, #255	; 0xff
 800050a:	193b      	adds	r3, r7, r4
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b299      	uxth	r1, r3
 8000510:	23ef      	movs	r3, #239	; 0xef
 8000512:	18fa      	adds	r2, r7, r3
 8000514:	4852      	ldr	r0, [pc, #328]	; (8000660 <main+0x440>)
 8000516:	230a      	movs	r3, #10
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	f001 fa2a 	bl	8001974 <HAL_I2C_Master_Transmit>
 8000520:	0003      	movs	r3, r0
 8000522:	001a      	movs	r2, r3
 8000524:	4b4f      	ldr	r3, [pc, #316]	; (8000664 <main+0x444>)
 8000526:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8000528:	193b      	adds	r3, r7, r4
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b299      	uxth	r1, r3
 800052e:	4a4e      	ldr	r2, [pc, #312]	; (8000668 <main+0x448>)
 8000530:	484b      	ldr	r0, [pc, #300]	; (8000660 <main+0x440>)
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	f001 fb24 	bl	8001b84 <HAL_I2C_Master_Receive>
 800053c:	0003      	movs	r3, r0
 800053e:	001a      	movs	r2, r3
 8000540:	4b48      	ldr	r3, [pc, #288]	; (8000664 <main+0x444>)
 8000542:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = dataReceiveI2cBuffer;
 8000544:	4b48      	ldr	r3, [pc, #288]	; (8000668 <main+0x448>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	001a      	movs	r2, r3
 800054a:	4b4d      	ldr	r3, [pc, #308]	; (8000680 <main+0x460>)
 800054c:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_H, sizeof(ACCEL_XOUT_H), 10);
 800054e:	193b      	adds	r3, r7, r4
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b299      	uxth	r1, r3
 8000554:	23ee      	movs	r3, #238	; 0xee
 8000556:	18fa      	adds	r2, r7, r3
 8000558:	4841      	ldr	r0, [pc, #260]	; (8000660 <main+0x440>)
 800055a:	230a      	movs	r3, #10
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	f001 fa08 	bl	8001974 <HAL_I2C_Master_Transmit>
 8000564:	0003      	movs	r3, r0
 8000566:	001a      	movs	r2, r3
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <main+0x444>)
 800056a:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800056c:	193b      	adds	r3, r7, r4
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b299      	uxth	r1, r3
 8000572:	4a3d      	ldr	r2, [pc, #244]	; (8000668 <main+0x448>)
 8000574:	483a      	ldr	r0, [pc, #232]	; (8000660 <main+0x440>)
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	f001 fb02 	bl	8001b84 <HAL_I2C_Master_Receive>
 8000580:	0003      	movs	r3, r0
 8000582:	001a      	movs	r2, r3
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <main+0x444>)
 8000586:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = finalXAccValue + (dataReceiveI2cBuffer << 8);
 8000588:	4b37      	ldr	r3, [pc, #220]	; (8000668 <main+0x448>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	001a      	movs	r2, r3
 8000590:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <main+0x460>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	18d2      	adds	r2, r2, r3
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <main+0x460>)
 8000598:	601a      	str	r2, [r3, #0]
	  finalXAccValueWithOffset = finalXAccValue + 40000;
 800059a:	4b39      	ldr	r3, [pc, #228]	; (8000680 <main+0x460>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4d39      	ldr	r5, [pc, #228]	; (8000684 <main+0x464>)
 80005a0:	195a      	adds	r2, r3, r5
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <main+0x468>)
 80005a4:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_L, sizeof(ACCEL_YOUT_L), 10);
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	23ed      	movs	r3, #237	; 0xed
 80005ae:	18fa      	adds	r2, r7, r3
 80005b0:	482b      	ldr	r0, [pc, #172]	; (8000660 <main+0x440>)
 80005b2:	230a      	movs	r3, #10
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	f001 f9dc 	bl	8001974 <HAL_I2C_Master_Transmit>
 80005bc:	0003      	movs	r3, r0
 80005be:	001a      	movs	r2, r3
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <main+0x444>)
 80005c2:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b299      	uxth	r1, r3
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <main+0x448>)
 80005cc:	4824      	ldr	r0, [pc, #144]	; (8000660 <main+0x440>)
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	f001 fad6 	bl	8001b84 <HAL_I2C_Master_Receive>
 80005d8:	0003      	movs	r3, r0
 80005da:	001a      	movs	r2, r3
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0x444>)
 80005de:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = dataReceiveI2cBuffer;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <main+0x448>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	001a      	movs	r2, r3
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <main+0x46c>)
 80005e8:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_H, sizeof(ACCEL_YOUT_H), 10);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b299      	uxth	r1, r3
 80005f0:	23ec      	movs	r3, #236	; 0xec
 80005f2:	18fa      	adds	r2, r7, r3
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <main+0x440>)
 80005f6:	230a      	movs	r3, #10
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	f001 f9ba 	bl	8001974 <HAL_I2C_Master_Transmit>
 8000600:	0003      	movs	r3, r0
 8000602:	001a      	movs	r2, r3
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <main+0x444>)
 8000606:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8000608:	193b      	adds	r3, r7, r4
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b299      	uxth	r1, r3
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <main+0x448>)
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0x440>)
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	e03b      	b.n	8000690 <main+0x470>
 8000618:	0000206b 	.word	0x0000206b
 800061c:	0000081e 	.word	0x0000081e
 8000620:	000d5441 	.word	0x000d5441
 8000624:	08004578 	.word	0x08004578
 8000628:	08004580 	.word	0x08004580
 800062c:	0800458c 	.word	0x0800458c
 8000630:	08004598 	.word	0x08004598
 8000634:	080045a4 	.word	0x080045a4
 8000638:	080045b0 	.word	0x080045b0
 800063c:	080045bc 	.word	0x080045bc
 8000640:	080045cc 	.word	0x080045cc
 8000644:	080045d4 	.word	0x080045d4
 8000648:	080045e0 	.word	0x080045e0
 800064c:	08004604 	.word	0x08004604
 8000650:	08004614 	.word	0x08004614
 8000654:	08004624 	.word	0x08004624
 8000658:	08004638 	.word	0x08004638
 800065c:	08004644 	.word	0x08004644
 8000660:	200000a4 	.word	0x200000a4
 8000664:	200000a0 	.word	0x200000a0
 8000668:	2000007d 	.word	0x2000007d
 800066c:	20000268 	.word	0x20000268
 8000670:	20000080 	.word	0x20000080
 8000674:	200000f4 	.word	0x200000f4
 8000678:	200000f0 	.word	0x200000f0
 800067c:	200002b0 	.word	0x200002b0
 8000680:	20000050 	.word	0x20000050
 8000684:	00009c40 	.word	0x00009c40
 8000688:	20000054 	.word	0x20000054
 800068c:	20000058 	.word	0x20000058
 8000690:	2301      	movs	r3, #1
 8000692:	f001 fa77 	bl	8001b84 <HAL_I2C_Master_Receive>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b72      	ldr	r3, [pc, #456]	; (8000864 <main+0x644>)
 800069c:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = finalYAccValue + (dataReceiveI2cBuffer << 8);
 800069e:	4b72      	ldr	r3, [pc, #456]	; (8000868 <main+0x648>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	001a      	movs	r2, r3
 80006a6:	4b71      	ldr	r3, [pc, #452]	; (800086c <main+0x64c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	18d2      	adds	r2, r2, r3
 80006ac:	4b6f      	ldr	r3, [pc, #444]	; (800086c <main+0x64c>)
 80006ae:	601a      	str	r2, [r3, #0]
	  finalYAccValueWithOffset = finalYAccValue + 40000;
 80006b0:	4b6e      	ldr	r3, [pc, #440]	; (800086c <main+0x64c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	195a      	adds	r2, r3, r5
 80006b6:	4b6e      	ldr	r3, [pc, #440]	; (8000870 <main+0x650>)
 80006b8:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_L, sizeof(ACCEL_ZOUT_L), 10);
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b299      	uxth	r1, r3
 80006c0:	23eb      	movs	r3, #235	; 0xeb
 80006c2:	18fa      	adds	r2, r7, r3
 80006c4:	486b      	ldr	r0, [pc, #428]	; (8000874 <main+0x654>)
 80006c6:	230a      	movs	r3, #10
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	f001 f952 	bl	8001974 <HAL_I2C_Master_Transmit>
 80006d0:	0003      	movs	r3, r0
 80006d2:	001a      	movs	r2, r3
 80006d4:	4b63      	ldr	r3, [pc, #396]	; (8000864 <main+0x644>)
 80006d6:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b299      	uxth	r1, r3
 80006de:	4a62      	ldr	r2, [pc, #392]	; (8000868 <main+0x648>)
 80006e0:	4864      	ldr	r0, [pc, #400]	; (8000874 <main+0x654>)
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	f001 fa4c 	bl	8001b84 <HAL_I2C_Master_Receive>
 80006ec:	0003      	movs	r3, r0
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b5c      	ldr	r3, [pc, #368]	; (8000864 <main+0x644>)
 80006f2:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = dataReceiveI2cBuffer;
 80006f4:	4b5c      	ldr	r3, [pc, #368]	; (8000868 <main+0x648>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b5f      	ldr	r3, [pc, #380]	; (8000878 <main+0x658>)
 80006fc:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_H, sizeof(ACCEL_ZOUT_H), 10);
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b299      	uxth	r1, r3
 8000704:	23ea      	movs	r3, #234	; 0xea
 8000706:	18fa      	adds	r2, r7, r3
 8000708:	485a      	ldr	r0, [pc, #360]	; (8000874 <main+0x654>)
 800070a:	230a      	movs	r3, #10
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	f001 f930 	bl	8001974 <HAL_I2C_Master_Transmit>
 8000714:	0003      	movs	r3, r0
 8000716:	001a      	movs	r2, r3
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <main+0x644>)
 800071a:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b299      	uxth	r1, r3
 8000722:	4a51      	ldr	r2, [pc, #324]	; (8000868 <main+0x648>)
 8000724:	4853      	ldr	r0, [pc, #332]	; (8000874 <main+0x654>)
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	f001 fa2a 	bl	8001b84 <HAL_I2C_Master_Receive>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <main+0x644>)
 8000736:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = finalZAccValue + (dataReceiveI2cBuffer << 8);
 8000738:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <main+0x648>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	001a      	movs	r2, r3
 8000740:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <main+0x658>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	18d2      	adds	r2, r2, r3
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <main+0x658>)
 8000748:	601a      	str	r2, [r3, #0]
	  finalZAccValueWithOffset = finalZAccValue + 88000;
 800074a:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <main+0x658>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a4b      	ldr	r2, [pc, #300]	; (800087c <main+0x65c>)
 8000750:	189a      	adds	r2, r3, r2
 8000752:	4b4b      	ldr	r3, [pc, #300]	; (8000880 <main+0x660>)
 8000754:	601a      	str	r2, [r3, #0]
	  uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
	  HAL_Delay(1000);
	  memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
	  //=========================GNSS
	   */
	  if(counter2 != 0){
 8000756:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <main+0x664>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d017      	beq.n	800078e <main+0x56e>
		  if(__HAL_TIM_GET_COUNTER(&htim16) < timerVal){
 800075e:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <main+0x668>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000764:	4b49      	ldr	r3, [pc, #292]	; (800088c <main+0x66c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d20b      	bcs.n	8000784 <main+0x564>
			  clockCykles++;
 800076c:	4b48      	ldr	r3, [pc, #288]	; (8000890 <main+0x670>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b46      	ldr	r3, [pc, #280]	; (8000890 <main+0x670>)
 8000776:	701a      	strb	r2, [r3, #0]
			  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <main+0x668>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800077e:	4b43      	ldr	r3, [pc, #268]	; (800088c <main+0x66c>)
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	e004      	b.n	800078e <main+0x56e>
		  }
		  else{
			  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000784:	4b40      	ldr	r3, [pc, #256]	; (8000888 <main+0x668>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800078a:	4b40      	ldr	r3, [pc, #256]	; (800088c <main+0x66c>)
 800078c:	601a      	str	r2, [r3, #0]
		  }
	  }


	  if(lockedDevice != 1){
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <main+0x674>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d046      	beq.n	8000824 <main+0x604>
		  if(clockCykles > 33 && counter2 < 15){
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <main+0x670>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b21      	cmp	r3, #33	; 0x21
 800079c:	d90a      	bls.n	80007b4 <main+0x594>
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <main+0x664>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b0e      	cmp	r3, #14
 80007a4:	d806      	bhi.n	80007b4 <main+0x594>
			  clockCykles = 0;
 80007a6:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <main+0x670>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
			  counter2 = 0;
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <main+0x664>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e050      	b.n	8000856 <main+0x636>
		  }
		  else if(counter2 > 15){
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <main+0x664>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d91a      	bls.n	80007f2 <main+0x5d2>
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	0059      	lsls	r1, r3, #1
 80007c0:	2390      	movs	r3, #144	; 0x90
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2201      	movs	r2, #1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f820 	bl	800180c <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80007cc:	23fa      	movs	r3, #250	; 0xfa
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fd33 	bl	800123c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	0059      	lsls	r1, r3, #1
 80007da:	2390      	movs	r3, #144	; 0x90
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 f813 	bl	800180c <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80007e6:	23fa      	movs	r3, #250	; 0xfa
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fd26 	bl	800123c <HAL_Delay>
 80007f0:	e031      	b.n	8000856 <main+0x636>
		  }
		  else if(checkMovment()){
 80007f2:	f000 fa93 	bl	8000d1c <checkMovment>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d02d      	beq.n	8000856 <main+0x636>
			  if(counter2 == 0){
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <main+0x664>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <main+0x5f8>
				  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <main+0x668>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <main+0x66c>)
 800080a:	601a      	str	r2, [r3, #0]
				  counter2++;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <main+0x664>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <main+0x664>)
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	e01e      	b.n	8000856 <main+0x636>
			  }
			  else{
				  counter2++;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x664>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <main+0x664>)
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e018      	b.n	8000856 <main+0x636>
			  }
		  }
	  }
	  else{
		  counter2 = 0;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x664>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
		  if(finalZAccValueWithOffset < 100000){
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <main+0x660>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <main+0x678>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d808      	bhi.n	8000846 <main+0x626>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	0059      	lsls	r1, r3, #1
 8000838:	2390      	movs	r3, #144	; 0x90
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2201      	movs	r2, #1
 800083e:	0018      	movs	r0, r3
 8000840:	f000 ffe4 	bl	800180c <HAL_GPIO_WritePin>
 8000844:	e007      	b.n	8000856 <main+0x636>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	0059      	lsls	r1, r3, #1
 800084a:	2390      	movs	r3, #144	; 0x90
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f000 ffdb 	bl	800180c <HAL_GPIO_WritePin>
		  }
	  }

	  counter = counter +1;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <main+0x67c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <main+0x67c>)
 800085e:	601a      	str	r2, [r3, #0]
	  i2cState = HAL_I2C_GetState(&hi2c1);
 8000860:	e64a      	b.n	80004f8 <main+0x2d8>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	200000a0 	.word	0x200000a0
 8000868:	2000007d 	.word	0x2000007d
 800086c:	20000058 	.word	0x20000058
 8000870:	2000005c 	.word	0x2000005c
 8000874:	200000a4 	.word	0x200000a4
 8000878:	20000060 	.word	0x20000060
 800087c:	000157c0 	.word	0x000157c0
 8000880:	20000064 	.word	0x20000064
 8000884:	2000004c 	.word	0x2000004c
 8000888:	20000268 	.word	0x20000268
 800088c:	20000068 	.word	0x20000068
 8000890:	2000006c 	.word	0x2000006c
 8000894:	2000007c 	.word	0x2000007c
 8000898:	0001869f 	.word	0x0001869f
 800089c:	20000048 	.word	0x20000048

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b099      	sub	sp, #100	; 0x64
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	242c      	movs	r4, #44	; 0x2c
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	0018      	movs	r0, r3
 80008ac:	2334      	movs	r3, #52	; 0x34
 80008ae:	001a      	movs	r2, r3
 80008b0:	2100      	movs	r1, #0
 80008b2:	f003 fe4d 	bl	8004550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b6:	231c      	movs	r3, #28
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	0018      	movs	r0, r3
 80008bc:	2310      	movs	r3, #16
 80008be:	001a      	movs	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f003 fe45 	bl	8004550 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2318      	movs	r3, #24
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f003 fe3e 	bl	8004550 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	0021      	movs	r1, r4
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2202      	movs	r2, #2
 80008da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2210      	movs	r2, #16
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2202      	movs	r2, #2
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	0212      	lsls	r2, r2, #8
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	0352      	lsls	r2, r2, #13
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	187b      	adds	r3, r7, r1
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fce0 	bl	80022cc <HAL_RCC_OscConfig>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000910:	f000 fa50 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	211c      	movs	r1, #28
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2202      	movs	r2, #2
 8000920:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2101      	movs	r1, #1
 8000932:	0018      	movs	r0, r3
 8000934:	f002 f850 	bl	80029d8 <HAL_RCC_ClockConfig>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800093c:	f000 fa3a 	bl	8000db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2221      	movs	r2, #33	; 0x21
 8000944:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	0018      	movs	r0, r3
 8000956:	f002 f9b9 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800095e:	f000 fa29 	bl	8000db4 <Error_Handler>
  }
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b019      	add	sp, #100	; 0x64
 8000968:	bd90      	pop	{r4, r7, pc}
	...

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_I2C1_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <MX_I2C1_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 ff4d 	bl	8001848 <HAL_I2C_Init>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 f9ff 	bl	8000db4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fbee 	bl	800219c <HAL_I2CEx_ConfigAnalogFilter>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 f9f6 	bl	8000db4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fc31 	bl	8002234 <HAL_I2CEx_ConfigDigitalFilter>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f9ed 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000a4 	.word	0x200000a4
 80009e4:	40005400 	.word	0x40005400
 80009e8:	2000090e 	.word	0x2000090e

080009ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_SPI1_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <MX_SPI1_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_SPI1_Init+0x74>)
 80009f8:	2282      	movs	r2, #130	; 0x82
 80009fa:	0052      	lsls	r2, r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a06:	22e0      	movs	r2, #224	; 0xe0
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a22:	2210      	movs	r2, #16
 8000a24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a46:	2208      	movs	r2, #8
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <MX_SPI1_Init+0x74>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fa2b 	bl	8002ea8 <HAL_SPI_Init>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 f9ad 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000017c 	.word	0x2000017c
 8000a64:	40013000 	.word	0x40013000

08000a68 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <MX_TIM16_Init+0x48>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a74:	224f      	movs	r2, #79	; 0x4f
 8000a76:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <MX_TIM16_Init+0x4c>)
 8000a82:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <MX_TIM16_Init+0x44>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fabd 	bl	8003018 <HAL_TIM_Base_Init>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000aa2:	f000 f987 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000268 	.word	0x20000268
 8000ab0:	40014400 	.word	0x40014400
 8000ab4:	0000ffff 	.word	0x0000ffff

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ac4:	2296      	movs	r2, #150	; 0x96
 8000ac6:	0192      	lsls	r2, r2, #6
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <MX_USART1_UART_Init+0x58>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fb95 	bl	800322c <HAL_UART_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f955 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000f4 	.word	0x200000f4
 8000b14:	40013800 	.word	0x40013800

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART2_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b24:	22e1      	movs	r2, #225	; 0xe1
 8000b26:	0252      	lsls	r2, r2, #9
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 fb65 	bl	800322c <HAL_UART_Init>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f925 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001e4 	.word	0x200001e4
 8000b74:	40004400 	.word	0x40004400

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	240c      	movs	r4, #12
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	0018      	movs	r0, r3
 8000b84:	2314      	movs	r3, #20
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f003 fce1 	bl	8004550 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	03c9      	lsls	r1, r1, #15
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	03db      	lsls	r3, r3, #15
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	0289      	lsls	r1, r1, #10
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000bba:	695a      	ldr	r2, [r3, #20]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	02c9      	lsls	r1, r1, #11
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_GPIO_Init+0xe0>)
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	02db      	lsls	r3, r3, #11
 8000bdc:	4013      	ands	r3, r2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8000be2:	2302      	movs	r3, #2
 8000be4:	33ff      	adds	r3, #255	; 0xff
 8000be6:	0019      	movs	r1, r3
 8000be8:	2390      	movs	r3, #144	; 0x90
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	2200      	movs	r2, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fe0c 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_GPIO_Init+0xe4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fe06 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2202      	movs	r2, #2
 8000c04:	32ff      	adds	r2, #255	; 0xff
 8000c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	193a      	adds	r2, r7, r4
 8000c1c:	2390      	movs	r3, #144	; 0x90
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fc8a 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c28:	0021      	movs	r1, r4
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <MX_GPIO_Init+0xe4>)
 8000c46:	0019      	movs	r1, r3
 8000c48:	0010      	movs	r0, r2
 8000c4a:	f000 fc77 	bl	800153c <HAL_GPIO_Init>

}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b009      	add	sp, #36	; 0x24
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000400 	.word	0x48000400

08000c60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// ONBOARD LED
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
	 /*HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	  HAL_Delay(500);*/
	  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 8000c68:	4916      	ldr	r1, [pc, #88]	; (8000cc4 <HAL_UART_RxCpltCallback+0x64>)
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_UART_RxCpltCallback+0x68>)
 8000c6c:	220e      	movs	r2, #14
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 fb30 	bl	80032d4 <HAL_UART_Receive_IT>
 8000c74:	0003      	movs	r3, r0
 8000c76:	001a      	movs	r2, r3
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_UART_RxCpltCallback+0x6c>)
 8000c7a:	701a      	strb	r2, [r3, #0]
	  if(checkKey(receiveUARTData, UARTDataKey)){
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_UART_RxCpltCallback+0x70>)
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_RxCpltCallback+0x64>)
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 f82a 	bl	8000cdc <checkKey>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d016      	beq.n	8000cba <HAL_UART_RxCpltCallback+0x5a>
		  if(!lockedDevice){
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_RxCpltCallback+0x74>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10f      	bne.n	8000cb4 <HAL_UART_RxCpltCallback+0x54>
			  lockedDevice = 1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_UART_RxCpltCallback+0x74>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_UART_RxCpltCallback+0x78>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fdb3 	bl	800180c <HAL_GPIO_WritePin>
			  //HAL_Delay(1);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_UART_RxCpltCallback+0x78>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2108      	movs	r1, #8
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fdad 	bl	800180c <HAL_GPIO_WritePin>
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		  }

	  }
}
 8000cb2:	e002      	b.n	8000cba <HAL_UART_RxCpltCallback+0x5a>
			  lockedDevice = 0;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_UART_RxCpltCallback+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000080 	.word	0x20000080
 8000cc8:	200000f4 	.word	0x200000f4
 8000ccc:	200000f0 	.word	0x200000f0
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	2000007c 	.word	0x2000007c
 8000cd8:	48000400 	.word	0x48000400

08000cdc <checkKey>:

int checkKey(uint8_t arr1[],  uint8_t arr2[])
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < 30; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	e00e      	b.n	8000d0a <checkKey+0x2e>
	{
		if(arr1[i] != arr2[i])
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	18cb      	adds	r3, r1, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d001      	beq.n	8000d04 <checkKey+0x28>
		{
			return 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e006      	b.n	8000d12 <checkKey+0x36>
	for(i = 0; i < 30; i++)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b1d      	cmp	r3, #29
 8000d0e:	dded      	ble.n	8000cec <checkKey+0x10>
		}
	}
	return 1;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <checkMovment>:

int checkMovment()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
	uint32_t xDiff = abs(refXAccValueWithOffset - finalXAccValueWithOffset);
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <checkMovment+0x80>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <checkMovment+0x84>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	17da      	asrs	r2, r3, #31
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	4053      	eors	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
	uint32_t yDiff = abs(refYAccValueWithOffset - finalYAccValueWithOffset);
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <checkMovment+0x88>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <checkMovment+0x8c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	17da      	asrs	r2, r3, #31
 8000d40:	189b      	adds	r3, r3, r2
 8000d42:	4053      	eors	r3, r2
 8000d44:	60bb      	str	r3, [r7, #8]
	uint32_t zDiff = abs(refZAccValueWithOffset - finalZAccValueWithOffset);
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <checkMovment+0x90>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <checkMovment+0x94>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	17da      	asrs	r2, r3, #31
 8000d52:	189b      	adds	r3, r3, r2
 8000d54:	4053      	eors	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]

	refXAccValueWithOffset = finalXAccValueWithOffset;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <checkMovment+0x84>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <checkMovment+0x80>)
 8000d5e:	601a      	str	r2, [r3, #0]
	refYAccValueWithOffset = finalYAccValueWithOffset;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <checkMovment+0x8c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <checkMovment+0x88>)
 8000d66:	601a      	str	r2, [r3, #0]
	refZAccValueWithOffset = finalZAccValueWithOffset;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <checkMovment+0x94>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <checkMovment+0x90>)
 8000d6e:	601a      	str	r2, [r3, #0]

	if(xDiff > 400 || yDiff > 400 || zDiff > 400){
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	23c8      	movs	r3, #200	; 0xc8
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d809      	bhi.n	8000d8e <checkMovment+0x72>
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	23c8      	movs	r3, #200	; 0xc8
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d804      	bhi.n	8000d8e <checkMovment+0x72>
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	23c8      	movs	r3, #200	; 0xc8
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d901      	bls.n	8000d92 <checkMovment+0x76>
		return 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <checkMovment+0x78>
	}
	else{
		return 0;
 8000d92:	2300      	movs	r3, #0
	}
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b004      	add	sp, #16
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000070 	.word	0x20000070
 8000da0:	20000054 	.word	0x20000054
 8000da4:	20000074 	.word	0x20000074
 8000da8:	2000005c 	.word	0x2000005c
 8000dac:	20000078 	.word	0x20000078
 8000db0:	20000064 	.word	0x20000064

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x44>)
 8000dc8:	699a      	ldr	r2, [r3, #24]
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_MspInit+0x44>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	619a      	str	r2, [r3, #24]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x44>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x44>)
 8000de0:	69da      	ldr	r2, [r3, #28]
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_MspInit+0x44>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0549      	lsls	r1, r1, #21
 8000de8:	430a      	orrs	r2, r1
 8000dea:	61da      	str	r2, [r3, #28]
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_MspInit+0x44>)
 8000dee:	69da      	ldr	r2, [r3, #28]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	055b      	lsls	r3, r3, #21
 8000df4:	4013      	ands	r3, r2
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b08b      	sub	sp, #44	; 0x2c
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	2414      	movs	r4, #20
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	0018      	movs	r0, r3
 8000e16:	2314      	movs	r3, #20
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	f003 fb98 	bl	8004550 <memset>
  if(hi2c->Instance==I2C1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <HAL_I2C_MspInit+0x90>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d131      	bne.n	8000e8e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_I2C_MspInit+0x94>)
 8000e2c:	695a      	ldr	r2, [r3, #20]
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_I2C_MspInit+0x94>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	03c9      	lsls	r1, r1, #15
 8000e34:	430a      	orrs	r2, r1
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_I2C_MspInit+0x94>)
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	03db      	lsls	r3, r3, #15
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e46:	0021      	movs	r1, r4
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2212      	movs	r2, #18
 8000e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2201      	movs	r2, #1
 8000e58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2201      	movs	r2, #1
 8000e64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_I2C_MspInit+0x98>)
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	0010      	movs	r0, r2
 8000e6e:	f000 fb65 	bl	800153c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_I2C_MspInit+0x94>)
 8000e74:	69da      	ldr	r2, [r3, #28]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_I2C_MspInit+0x94>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0389      	lsls	r1, r1, #14
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	61da      	str	r2, [r3, #28]
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_I2C_MspInit+0x94>)
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	039b      	lsls	r3, r3, #14
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b00b      	add	sp, #44	; 0x2c
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001400 	.word	0x48001400

08000ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b08b      	sub	sp, #44	; 0x2c
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	2414      	movs	r4, #20
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f003 fb4a 	bl	8004550 <memset>
  if(hspi->Instance==SPI1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_SPI_MspInit+0x90>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d132      	bne.n	8000f2c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_SPI_MspInit+0x94>)
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_SPI_MspInit+0x94>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0149      	lsls	r1, r1, #5
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_SPI_MspInit+0x94>)
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_SPI_MspInit+0x94>)
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_SPI_MspInit+0x94>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0289      	lsls	r1, r1, #10
 8000eec:	430a      	orrs	r2, r1
 8000eee:	615a      	str	r2, [r3, #20]
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_SPI_MspInit+0x94>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	029b      	lsls	r3, r3, #10
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000efe:	0021      	movs	r1, r4
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	22e0      	movs	r2, #224	; 0xe0
 8000f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2202      	movs	r2, #2
 8000f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2203      	movs	r2, #3
 8000f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	187a      	adds	r2, r7, r1
 8000f20:	2390      	movs	r3, #144	; 0x90
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	0011      	movs	r1, r2
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fb08 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b00b      	add	sp, #44	; 0x2c
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	40013000 	.word	0x40013000
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_TIM_Base_MspInit+0x38>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10d      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_Base_MspInit+0x3c>)
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x3c>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0289      	lsls	r1, r1, #10
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_TIM_Base_MspInit+0x3c>)
 8000f5e:	699a      	ldr	r2, [r3, #24]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	40014400 	.word	0x40014400
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b08d      	sub	sp, #52	; 0x34
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	241c      	movs	r4, #28
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2314      	movs	r3, #20
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f003 fade 	bl	8004550 <memset>
  if(huart->Instance==USART1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a3d      	ldr	r2, [pc, #244]	; (8001090 <HAL_UART_MspInit+0x114>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d13c      	bne.n	8001018 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_UART_MspInit+0x118>)
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <HAL_UART_MspInit+0x118>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	01c9      	lsls	r1, r1, #7
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <HAL_UART_MspInit+0x118>)
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	01db      	lsls	r3, r3, #7
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <HAL_UART_MspInit+0x118>)
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	4b35      	ldr	r3, [pc, #212]	; (8001094 <HAL_UART_MspInit+0x118>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	0289      	lsls	r1, r1, #10
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_UART_MspInit+0x118>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	22c0      	movs	r2, #192	; 0xc0
 8000fda:	00d2      	lsls	r2, r2, #3
 8000fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	0021      	movs	r1, r4
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	187a      	adds	r2, r7, r1
 8000ffa:	2390      	movs	r3, #144	; 0x90
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fa9b 	bl	800153c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	201b      	movs	r0, #27
 800100c:	f000 f9e6 	bl	80013dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001010:	201b      	movs	r0, #27
 8001012:	f000 f9f8 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001016:	e037      	b.n	8001088 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <HAL_UART_MspInit+0x11c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d132      	bne.n	8001088 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_UART_MspInit+0x118>)
 8001024:	69da      	ldr	r2, [r3, #28]
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_UART_MspInit+0x118>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0289      	lsls	r1, r1, #10
 800102c:	430a      	orrs	r2, r1
 800102e:	61da      	str	r2, [r3, #28]
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0x118>)
 8001032:	69da      	ldr	r2, [r3, #28]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	029b      	lsls	r3, r3, #10
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0x118>)
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_UART_MspInit+0x118>)
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	0289      	lsls	r1, r1, #10
 8001048:	430a      	orrs	r2, r1
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_UART_MspInit+0x118>)
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	029b      	lsls	r3, r3, #10
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105a:	211c      	movs	r1, #28
 800105c:	187b      	adds	r3, r7, r1
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2202      	movs	r2, #2
 8001066:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2203      	movs	r2, #3
 8001072:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2201      	movs	r2, #1
 8001078:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	187a      	adds	r2, r7, r1
 800107c:	2390      	movs	r3, #144	; 0x90
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fa5a 	bl	800153c <HAL_GPIO_Init>
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b00d      	add	sp, #52	; 0x34
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	40013800 	.word	0x40013800
 8001094:	40021000 	.word	0x40021000
 8001098:	40004400 	.word	0x40004400

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f8a0 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <USART1_IRQHandler+0x14>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f002 f960 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	200000f4 	.word	0x200000f4

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <LoopForever+0x6>)
    LDR R1, [R0]
 80010f6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010f8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <LoopForever+0xa>)
    CMP R1, R2
 80010fc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010fe:	d105      	bne.n	800110c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001102:	4913      	ldr	r1, [pc, #76]	; (8001150 <LoopForever+0x12>)
    STR R1, [R0]
 8001104:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001108:	4913      	ldr	r1, [pc, #76]	; (8001158 <LoopForever+0x1a>)
    STR R1, [R0]
 800110a:	6001      	str	r1, [r0, #0]

0800110c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <LoopForever+0x1e>)
  ldr r1, =_edata
 800110e:	4914      	ldr	r1, [pc, #80]	; (8001160 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <LoopForever+0x26>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001124:	4c11      	ldr	r4, [pc, #68]	; (800116c <LoopForever+0x2e>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001132:	f7ff ffd7 	bl	80010e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001136:	f003 f9e7 	bl	8004508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113a:	f7ff f871 	bl	8000220 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   r0, =_estack
 8001140:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001144:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001148:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800114c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001150:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001154:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001158:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001164:	08004694 	.word	0x08004694
  ldr r2, =_sbss
 8001168:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800116c:	200002b8 	.word	0x200002b8

08001170 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_IRQHandler>
	...

08001174 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_Init+0x24>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_Init+0x24>)
 800117e:	2110      	movs	r1, #16
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001184:	2000      	movs	r0, #0
 8001186:	f000 f809 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118a:	f7ff fe19 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_InitTick+0x5c>)
 80011a6:	681c      	ldr	r4, [r3, #0]
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_InitTick+0x60>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	0019      	movs	r1, r3
 80011ae:	23fa      	movs	r3, #250	; 0xfa
 80011b0:	0098      	lsls	r0, r3, #2
 80011b2:	f7fe ffa9 	bl	8000108 <__udivsi3>
 80011b6:	0003      	movs	r3, r0
 80011b8:	0019      	movs	r1, r3
 80011ba:	0020      	movs	r0, r4
 80011bc:	f7fe ffa4 	bl	8000108 <__udivsi3>
 80011c0:	0003      	movs	r3, r0
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f92f 	bl	8001426 <HAL_SYSTICK_Config>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e00f      	b.n	80011f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80b      	bhi.n	80011ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2301      	movs	r3, #1
 80011da:	425b      	negs	r3, r3
 80011dc:	2200      	movs	r2, #0
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f8fc 	bl	80013dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_InitTick+0x64>)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b003      	add	sp, #12
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	20000020 	.word	0x20000020
 80011fc:	20000028 	.word	0x20000028
 8001200:	20000024 	.word	0x20000024

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x1c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	001a      	movs	r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x20>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	18d2      	adds	r2, r2, r3
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_IncTick+0x20>)
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	20000028 	.word	0x20000028
 8001224:	200002b4 	.word	0x200002b4

08001228 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <HAL_GetTick+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	200002b4 	.word	0x200002b4

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff fff0 	bl	8001228 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	001a      	movs	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	189b      	adds	r3, r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	f7ff ffe0 	bl	8001228 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b004      	add	sp, #16
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	20000028 	.word	0x20000028

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	0002      	movs	r2, r0
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b7f      	cmp	r3, #127	; 0x7f
 8001296:	d809      	bhi.n	80012ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	001a      	movs	r2, r3
 800129e:	231f      	movs	r3, #31
 80012a0:	401a      	ands	r2, r3
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_EnableIRQ+0x30>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	4091      	lsls	r1, r2
 80012a8:	000a      	movs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
  }
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	0002      	movs	r2, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b7f      	cmp	r3, #127	; 0x7f
 80012cc:	d828      	bhi.n	8001320 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <__NVIC_SetPriority+0xd4>)
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	33c0      	adds	r3, #192	; 0xc0
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	589b      	ldr	r3, [r3, r2]
 80012de:	1dfa      	adds	r2, r7, #7
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	0011      	movs	r1, r2
 80012e4:	2203      	movs	r2, #3
 80012e6:	400a      	ands	r2, r1
 80012e8:	00d2      	lsls	r2, r2, #3
 80012ea:	21ff      	movs	r1, #255	; 0xff
 80012ec:	4091      	lsls	r1, r2
 80012ee:	000a      	movs	r2, r1
 80012f0:	43d2      	mvns	r2, r2
 80012f2:	401a      	ands	r2, r3
 80012f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	019b      	lsls	r3, r3, #6
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	401a      	ands	r2, r3
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	0018      	movs	r0, r3
 8001304:	2303      	movs	r3, #3
 8001306:	4003      	ands	r3, r0
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130c:	481f      	ldr	r0, [pc, #124]	; (800138c <__NVIC_SetPriority+0xd4>)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b25b      	sxtb	r3, r3
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	33c0      	adds	r3, #192	; 0xc0
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800131e:	e031      	b.n	8001384 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <__NVIC_SetPriority+0xd8>)
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0019      	movs	r1, r3
 8001328:	230f      	movs	r3, #15
 800132a:	400b      	ands	r3, r1
 800132c:	3b08      	subs	r3, #8
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3306      	adds	r3, #6
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1dfa      	adds	r2, r7, #7
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	0011      	movs	r1, r2
 8001340:	2203      	movs	r2, #3
 8001342:	400a      	ands	r2, r1
 8001344:	00d2      	lsls	r2, r2, #3
 8001346:	21ff      	movs	r1, #255	; 0xff
 8001348:	4091      	lsls	r1, r2
 800134a:	000a      	movs	r2, r1
 800134c:	43d2      	mvns	r2, r2
 800134e:	401a      	ands	r2, r3
 8001350:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	22ff      	movs	r2, #255	; 0xff
 8001358:	401a      	ands	r2, r3
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	0018      	movs	r0, r3
 8001360:	2303      	movs	r3, #3
 8001362:	4003      	ands	r3, r0
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001368:	4809      	ldr	r0, [pc, #36]	; (8001390 <__NVIC_SetPriority+0xd8>)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	001c      	movs	r4, r3
 8001370:	230f      	movs	r3, #15
 8001372:	4023      	ands	r3, r4
 8001374:	3b08      	subs	r3, #8
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	430a      	orrs	r2, r1
 800137a:	3306      	adds	r3, #6
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	18c3      	adds	r3, r0, r3
 8001380:	3304      	adds	r3, #4
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b003      	add	sp, #12
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	045b      	lsls	r3, r3, #17
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d301      	bcc.n	80013ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a8:	2301      	movs	r3, #1
 80013aa:	e010      	b.n	80013ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <SysTick_Config+0x44>)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	3a01      	subs	r2, #1
 80013b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b4:	2301      	movs	r3, #1
 80013b6:	425b      	negs	r3, r3
 80013b8:	2103      	movs	r1, #3
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff ff7c 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x44>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x44>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	0018      	movs	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	210f      	movs	r1, #15
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	1c02      	adds	r2, r0, #0
 80013ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	0002      	movs	r2, r0
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b25b      	sxtb	r3, r3
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff ff33 	bl	8001284 <__NVIC_EnableIRQ>
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff ffaf 	bl	8001394 <SysTick_Config>
 8001436:	0003      	movs	r3, r0
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2221      	movs	r2, #33	; 0x21
 800144c:	5c9b      	ldrb	r3, [r3, r2]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d008      	beq.n	8001466 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2220      	movs	r2, #32
 800145e:	2100      	movs	r1, #0
 8001460:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e020      	b.n	80014a8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	210e      	movs	r1, #14
 8001472:	438a      	bics	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	438a      	bics	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	2101      	movs	r1, #1
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2221      	movs	r2, #33	; 0x21
 800149a:	2101      	movs	r1, #1
 800149c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2220      	movs	r2, #32
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	210f      	movs	r1, #15
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2221      	movs	r2, #33	; 0x21
 80014c4:	5c9b      	ldrb	r3, [r3, r2]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d006      	beq.n	80014da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2204      	movs	r2, #4
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e028      	b.n	800152c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	210e      	movs	r1, #14
 80014e6:	438a      	bics	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	438a      	bics	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	2101      	movs	r1, #1
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2221      	movs	r2, #33	; 0x21
 800150e:	2101      	movs	r1, #1
 8001510:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2220      	movs	r2, #32
 8001516:	2100      	movs	r1, #0
 8001518:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	0010      	movs	r0, r2
 800152a:	4798      	blx	r3
    } 
  }
  return status;
 800152c:	230f      	movs	r3, #15
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e149      	b.n	80017e0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4091      	lsls	r1, r2
 8001556:	000a      	movs	r2, r1
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d100      	bne.n	8001564 <HAL_GPIO_Init+0x28>
 8001562:	e13a      	b.n	80017da <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001578:	2b02      	cmp	r3, #2
 800157a:	d130      	bne.n	80015de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	2201      	movs	r2, #1
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2203      	movs	r2, #3
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d017      	beq.n	800161a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2203      	movs	r2, #3
 8001620:	4013      	ands	r3, r2
 8001622:	2b02      	cmp	r3, #2
 8001624:	d123      	bne.n	800166e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	58d3      	ldr	r3, [r2, r3]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2207      	movs	r2, #7
 8001638:	4013      	ands	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2107      	movs	r1, #7
 8001652:	400b      	ands	r3, r1
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	6939      	ldr	r1, [r7, #16]
 800166c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	401a      	ands	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	23c0      	movs	r3, #192	; 0xc0
 80016a8:	029b      	lsls	r3, r3, #10
 80016aa:	4013      	ands	r3, r2
 80016ac:	d100      	bne.n	80016b0 <HAL_GPIO_Init+0x174>
 80016ae:	e094      	b.n	80017da <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 80016b2:	699a      	ldr	r2, [r3, #24]
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	619a      	str	r2, [r3, #24]
 80016bc:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2201      	movs	r2, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c8:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	589b      	ldr	r3, [r3, r2]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	43da      	mvns	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	2390      	movs	r3, #144	; 0x90
 80016f0:	05db      	lsls	r3, r3, #23
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x1d6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a41      	ldr	r2, [pc, #260]	; (8001800 <HAL_GPIO_Init+0x2c4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x1d2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a40      	ldr	r2, [pc, #256]	; (8001804 <HAL_GPIO_Init+0x2c8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x1ce>
 8001706:	2302      	movs	r3, #2
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x1d8>
 800170a:	2305      	movs	r3, #5
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x1d8>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x1d8>
 8001712:	2300      	movs	r3, #0
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	2103      	movs	r1, #3
 8001718:	400a      	ands	r2, r1
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43da      	mvns	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	4013      	ands	r3, r2
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43da      	mvns	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	4013      	ands	r3, r2
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43da      	mvns	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	035b      	lsls	r3, r3, #13
 800179e:	4013      	ands	r3, r2
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43da      	mvns	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	039b      	lsls	r3, r3, #14
 80017c8:	4013      	ands	r3, r2
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	40da      	lsrs	r2, r3
 80017e8:	1e13      	subs	r3, r2, #0
 80017ea:	d000      	beq.n	80017ee <HAL_GPIO_Init+0x2b2>
 80017ec:	e6ae      	b.n	800154c <HAL_GPIO_Init+0x10>
  } 
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b006      	add	sp, #24
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	48000400 	.word	0x48000400
 8001804:	48000800 	.word	0x48000800
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	0008      	movs	r0, r1
 8001816:	0011      	movs	r1, r2
 8001818:	1cbb      	adds	r3, r7, #2
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	1c7b      	adds	r3, r7, #1
 8001820:	1c0a      	adds	r2, r1, #0
 8001822:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	1c7b      	adds	r3, r7, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182c:	1cbb      	adds	r3, r7, #2
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e082      	b.n	8001960 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2241      	movs	r2, #65	; 0x41
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2240      	movs	r2, #64	; 0x40
 800186a:	2100      	movs	r1, #0
 800186c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fac9 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2241      	movs	r2, #65	; 0x41
 800187a:	2124      	movs	r1, #36	; 0x24
 800187c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	438a      	bics	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4934      	ldr	r1, [pc, #208]	; (8001968 <HAL_I2C_Init+0x120>)
 8001898:	400a      	ands	r2, r1
 800189a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4931      	ldr	r1, [pc, #196]	; (800196c <HAL_I2C_Init+0x124>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0209      	lsls	r1, r1, #8
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e007      	b.n	80018d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2184      	movs	r1, #132	; 0x84
 80018d0:	0209      	lsls	r1, r1, #8
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d104      	bne.n	80018e8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	491f      	ldr	r1, [pc, #124]	; (8001970 <HAL_I2C_Init+0x128>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	491a      	ldr	r1, [pc, #104]	; (800196c <HAL_I2C_Init+0x124>)
 8001904:	400a      	ands	r2, r1
 8001906:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	431a      	orrs	r2, r3
 8001912:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69d9      	ldr	r1, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1a      	ldr	r2, [r3, #32]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2241      	movs	r2, #65	; 0x41
 800194c:	2120      	movs	r1, #32
 800194e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2242      	movs	r2, #66	; 0x42
 800195a:	2100      	movs	r1, #0
 800195c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}
 8001968:	f0ffffff 	.word	0xf0ffffff
 800196c:	ffff7fff 	.word	0xffff7fff
 8001970:	02008000 	.word	0x02008000

08001974 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	0008      	movs	r0, r1
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	0019      	movs	r1, r3
 8001982:	230a      	movs	r3, #10
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	1c02      	adds	r2, r0, #0
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	2308      	movs	r3, #8
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	1c0a      	adds	r2, r1, #0
 8001990:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2241      	movs	r2, #65	; 0x41
 8001996:	5c9b      	ldrb	r3, [r3, r2]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b20      	cmp	r3, #32
 800199c:	d000      	beq.n	80019a0 <HAL_I2C_Master_Transmit+0x2c>
 800199e:	e0e7      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2240      	movs	r2, #64	; 0x40
 80019a4:	5c9b      	ldrb	r3, [r3, r2]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_I2C_Master_Transmit+0x3a>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e0e1      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1fe>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019b6:	f7ff fc37 	bl	8001228 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	0219      	lsls	r1, r3, #8
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2319      	movs	r3, #25
 80019ca:	2201      	movs	r2, #1
 80019cc:	f000 fa10 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0cc      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2241      	movs	r2, #65	; 0x41
 80019dc:	2121      	movs	r1, #33	; 0x21
 80019de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2242      	movs	r2, #66	; 0x42
 80019e4:	2110      	movs	r1, #16
 80019e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2208      	movs	r2, #8
 80019f8:	18ba      	adds	r2, r7, r2
 80019fa:	8812      	ldrh	r2, [r2, #0]
 80019fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d911      	bls.n	8001a32 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	045c      	lsls	r4, r3, #17
 8001a1e:	230a      	movs	r3, #10
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	8819      	ldrh	r1, [r3, #0]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	4b55      	ldr	r3, [pc, #340]	; (8001b7c <HAL_I2C_Master_Transmit+0x208>)
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	0023      	movs	r3, r4
 8001a2c:	f000 fb80 	bl	8002130 <I2C_TransferConfig>
 8001a30:	e075      	b.n	8001b1e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	049c      	lsls	r4, r3, #18
 8001a46:	230a      	movs	r3, #10
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	8819      	ldrh	r1, [r3, #0]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_I2C_Master_Transmit+0x208>)
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	0023      	movs	r3, r4
 8001a54:	f000 fb6c 	bl	8002130 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a58:	e061      	b.n	8001b1e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 fa04 	bl	8001e6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e081      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03a      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0x1aa>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d136      	bne.n	8001b1e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	0013      	movs	r3, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	f000 f997 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e053      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2bff      	cmp	r3, #255	; 0xff
 8001ad2:	d911      	bls.n	8001af8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	22ff      	movs	r2, #255	; 0xff
 8001ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	045c      	lsls	r4, r3, #17
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	8819      	ldrh	r1, [r3, #0]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	2300      	movs	r3, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	0023      	movs	r3, r4
 8001af2:	f000 fb1d 	bl	8002130 <I2C_TransferConfig>
 8001af6:	e012      	b.n	8001b1e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	049c      	lsls	r4, r3, #18
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	8819      	ldrh	r1, [r3, #0]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	0023      	movs	r3, r4
 8001b1a:	f000 fb09 	bl	8002130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d198      	bne.n	8001a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 f9dc 	bl	8001eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b34:	1e03      	subs	r3, r0, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e01a      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2220      	movs	r2, #32
 8001b42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	490c      	ldr	r1, [pc, #48]	; (8001b80 <HAL_I2C_Master_Transmit+0x20c>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2241      	movs	r2, #65	; 0x41
 8001b58:	2120      	movs	r1, #32
 8001b5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2242      	movs	r2, #66	; 0x42
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e000      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
  }
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b007      	add	sp, #28
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	80002000 	.word	0x80002000
 8001b80:	fe00e800 	.word	0xfe00e800

08001b84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	0008      	movs	r0, r1
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	0019      	movs	r1, r3
 8001b92:	230a      	movs	r3, #10
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	1c02      	adds	r2, r0, #0
 8001b98:	801a      	strh	r2, [r3, #0]
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	1c0a      	adds	r2, r1, #0
 8001ba0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2241      	movs	r2, #65	; 0x41
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d000      	beq.n	8001bb0 <HAL_I2C_Master_Receive+0x2c>
 8001bae:	e0e8      	b.n	8001d82 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Master_Receive+0x3a>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e0e2      	b.n	8001d84 <HAL_I2C_Master_Receive+0x200>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2240      	movs	r2, #64	; 0x40
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bc6:	f7ff fb2f 	bl	8001228 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	0219      	lsls	r1, r3, #8
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2319      	movs	r3, #25
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f000 f908 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0cd      	b.n	8001d84 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2241      	movs	r2, #65	; 0x41
 8001bec:	2122      	movs	r1, #34	; 0x22
 8001bee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2242      	movs	r2, #66	; 0x42
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2208      	movs	r2, #8
 8001c08:	18ba      	adds	r2, r7, r2
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d911      	bls.n	8001c42 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	045c      	lsls	r4, r3, #17
 8001c2e:	230a      	movs	r3, #10
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	8819      	ldrh	r1, [r3, #0]
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <HAL_I2C_Master_Receive+0x208>)
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	0023      	movs	r3, r4
 8001c3c:	f000 fa78 	bl	8002130 <I2C_TransferConfig>
 8001c40:	e076      	b.n	8001d30 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049c      	lsls	r4, r3, #18
 8001c56:	230a      	movs	r3, #10
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	8819      	ldrh	r1, [r3, #0]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_I2C_Master_Receive+0x208>)
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	0023      	movs	r3, r4
 8001c64:	f000 fa64 	bl	8002130 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c68:	e062      	b.n	8001d30 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 f977 	bl	8001f64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e082      	b.n	8001d84 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d03a      	beq.n	8001d30 <HAL_I2C_Master_Receive+0x1ac>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d136      	bne.n	8001d30 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	0013      	movs	r3, r2
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	f000 f88e 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001cd4:	1e03      	subs	r3, r0, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e053      	b.n	8001d84 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d911      	bls.n	8001d0a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	22ff      	movs	r2, #255	; 0xff
 8001cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	045c      	lsls	r4, r3, #17
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	8819      	ldrh	r1, [r3, #0]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	0023      	movs	r3, r4
 8001d04:	f000 fa14 	bl	8002130 <I2C_TransferConfig>
 8001d08:	e012      	b.n	8001d30 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	049c      	lsls	r4, r3, #18
 8001d1e:	230a      	movs	r3, #10
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	8819      	ldrh	r1, [r3, #0]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	2300      	movs	r3, #0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	0023      	movs	r3, r4
 8001d2c:	f000 fa00 	bl	8002130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d197      	bne.n	8001c6a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 f8d3 	bl	8001eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e01a      	b.n	8001d84 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2220      	movs	r2, #32
 8001d54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	490b      	ldr	r1, [pc, #44]	; (8001d90 <HAL_I2C_Master_Receive+0x20c>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2241      	movs	r2, #65	; 0x41
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2242      	movs	r2, #66	; 0x42
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
  }
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b007      	add	sp, #28
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	80002400 	.word	0x80002400
 8001d90:	fe00e800 	.word	0xfe00e800

08001d94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2241      	movs	r2, #65	; 0x41
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d103      	bne.n	8001dca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d007      	beq.n	8001de8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2101      	movs	r1, #1
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
  }
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	1dfb      	adds	r3, r7, #7
 8001dfe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e00:	e021      	b.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	d01e      	beq.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e08:	f7ff fa0e 	bl	8001228 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d302      	bcc.n	8001e1e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d113      	bne.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	2220      	movs	r2, #32
 8001e24:	431a      	orrs	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2241      	movs	r2, #65	; 0x41
 8001e2e:	2120      	movs	r1, #32
 8001e30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2242      	movs	r2, #66	; 0x42
 8001e36:	2100      	movs	r1, #0
 8001e38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2240      	movs	r2, #64	; 0x40
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	425a      	negs	r2, r3
 8001e56:	4153      	adcs	r3, r2
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d0ce      	beq.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b004      	add	sp, #16
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e7a:	e02b      	b.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 f8da 	bl	800203c <I2C_IsAcknowledgeFailed>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d001      	beq.n	8001e90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e029      	b.n	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3301      	adds	r3, #1
 8001e94:	d01e      	beq.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7ff f9c7 	bl	8001228 <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d113      	bne.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2241      	movs	r2, #65	; 0x41
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2242      	movs	r2, #66	; 0x42
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e007      	b.n	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2202      	movs	r2, #2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d1cc      	bne.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}

08001eec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef8:	e028      	b.n	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f89b 	bl	800203c <I2C_IsAcknowledgeFailed>
 8001f06:	1e03      	subs	r3, r0, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e026      	b.n	8001f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7ff f98b 	bl	8001228 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d113      	bne.n	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	2220      	movs	r2, #32
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2241      	movs	r2, #65	; 0x41
 8001f34:	2120      	movs	r1, #32
 8001f36:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2242      	movs	r2, #66	; 0x42
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e007      	b.n	8001f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2220      	movs	r2, #32
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d1cf      	bne.n	8001efa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f70:	e055      	b.n	800201e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 f85f 	bl	800203c <I2C_IsAcknowledgeFailed>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e053      	b.n	800202e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d129      	bne.n	8001fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d105      	bne.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e03f      	b.n	800202e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	491d      	ldr	r1, [pc, #116]	; (8002038 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2241      	movs	r2, #65	; 0x41
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2242      	movs	r2, #66	; 0x42
 8001fd8:	2100      	movs	r1, #0
 8001fda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e022      	b.n	800202e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe8:	f7ff f91e 	bl	8001228 <HAL_GetTick>
 8001fec:	0002      	movs	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d302      	bcc.n	8001ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10f      	bne.n	800201e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	2220      	movs	r2, #32
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2241      	movs	r2, #65	; 0x41
 800200e:	2120      	movs	r1, #32
 8002010:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2240      	movs	r2, #64	; 0x40
 8002016:	2100      	movs	r1, #0
 8002018:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e007      	b.n	800202e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2204      	movs	r2, #4
 8002026:	4013      	ands	r3, r2
 8002028:	2b04      	cmp	r3, #4
 800202a:	d1a2      	bne.n	8001f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	fe00e800 	.word	0xfe00e800

0800203c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2210      	movs	r2, #16
 8002050:	4013      	ands	r3, r2
 8002052:	2b10      	cmp	r3, #16
 8002054:	d164      	bne.n	8002120 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	049b      	lsls	r3, r3, #18
 8002060:	401a      	ands	r2, r3
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	049b      	lsls	r3, r3, #18
 8002066:	429a      	cmp	r2, r3
 8002068:	d02b      	beq.n	80020c2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	01c9      	lsls	r1, r1, #7
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800207c:	e021      	b.n	80020c2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	d01e      	beq.n	80020c2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002084:	f7ff f8d0 	bl	8001228 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	d302      	bcc.n	800209a <I2C_IsAcknowledgeFailed+0x5e>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d113      	bne.n	80020c2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	2220      	movs	r2, #32
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2241      	movs	r2, #65	; 0x41
 80020aa:	2120      	movs	r1, #32
 80020ac:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2242      	movs	r2, #66	; 0x42
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e02f      	b.n	8002122 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2220      	movs	r2, #32
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d1d6      	bne.n	800207e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2210      	movs	r2, #16
 80020d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2220      	movs	r2, #32
 80020de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7ff fe62 	bl	8001dac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	490e      	ldr	r1, [pc, #56]	; (800212c <I2C_IsAcknowledgeFailed+0xf0>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	2204      	movs	r2, #4
 80020fe:	431a      	orrs	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2241      	movs	r2, #65	; 0x41
 8002108:	2120      	movs	r1, #32
 800210a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2242      	movs	r2, #66	; 0x42
 8002110:	2100      	movs	r1, #0
 8002112:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	fe00e800 	.word	0xfe00e800

08002130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	0008      	movs	r0, r1
 800213a:	0011      	movs	r1, r2
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	240a      	movs	r4, #10
 8002140:	193b      	adds	r3, r7, r4
 8002142:	1c02      	adds	r2, r0, #0
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	2009      	movs	r0, #9
 8002148:	183b      	adds	r3, r7, r0
 800214a:	1c0a      	adds	r2, r1, #0
 800214c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	0d51      	lsrs	r1, r2, #21
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	00d2      	lsls	r2, r2, #3
 800215c:	400a      	ands	r2, r1
 800215e:	490e      	ldr	r1, [pc, #56]	; (8002198 <I2C_TransferConfig+0x68>)
 8002160:	430a      	orrs	r2, r1
 8002162:	43d2      	mvns	r2, r2
 8002164:	401a      	ands	r2, r3
 8002166:	0011      	movs	r1, r2
 8002168:	193b      	adds	r3, r7, r4
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	059b      	lsls	r3, r3, #22
 800216e:	0d9a      	lsrs	r2, r3, #22
 8002170:	183b      	adds	r3, r7, r0
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	0418      	lsls	r0, r3, #16
 8002176:	23ff      	movs	r3, #255	; 0xff
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	4003      	ands	r3, r0
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	431a      	orrs	r2, r3
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	431a      	orrs	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b005      	add	sp, #20
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	03ff63ff 	.word	0x03ff63ff

0800219c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2241      	movs	r2, #65	; 0x41
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d138      	bne.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2240      	movs	r2, #64	; 0x40
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021bc:	2302      	movs	r3, #2
 80021be:	e032      	b.n	8002226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	2101      	movs	r1, #1
 80021c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2241      	movs	r2, #65	; 0x41
 80021cc:	2124      	movs	r1, #36	; 0x24
 80021ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4911      	ldr	r1, [pc, #68]	; (8002230 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2241      	movs	r2, #65	; 0x41
 8002214:	2120      	movs	r1, #32
 8002216:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2240      	movs	r2, #64	; 0x40
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002224:	2302      	movs	r3, #2
  }
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	ffffefff 	.word	0xffffefff

08002234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2241      	movs	r2, #65	; 0x41
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	d139      	bne.n	80022be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2240      	movs	r2, #64	; 0x40
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002254:	2302      	movs	r3, #2
 8002256:	e033      	b.n	80022c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	2101      	movs	r1, #1
 800225e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2241      	movs	r2, #65	; 0x41
 8002264:	2124      	movs	r1, #36	; 0x24
 8002266:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2241      	movs	r2, #65	; 0x41
 80022ae:	2120      	movs	r1, #32
 80022b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2240      	movs	r2, #64	; 0x40
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
  }
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b004      	add	sp, #16
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	fffff0ff 	.word	0xfffff0ff

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	f000 fb76 	bl	80029cc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_RCC_OscConfig+0x20>
 80022ea:	e08e      	b.n	800240a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ec:	4bc5      	ldr	r3, [pc, #788]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	220c      	movs	r2, #12
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d00e      	beq.n	8002316 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f8:	4bc2      	ldr	r3, [pc, #776]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	220c      	movs	r2, #12
 80022fe:	4013      	ands	r3, r2
 8002300:	2b08      	cmp	r3, #8
 8002302:	d117      	bne.n	8002334 <HAL_RCC_OscConfig+0x68>
 8002304:	4bbf      	ldr	r3, [pc, #764]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	025b      	lsls	r3, r3, #9
 800230c:	401a      	ands	r2, r3
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	429a      	cmp	r2, r3
 8002314:	d10e      	bne.n	8002334 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002316:	4bbb      	ldr	r3, [pc, #748]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d100      	bne.n	8002324 <HAL_RCC_OscConfig+0x58>
 8002322:	e071      	b.n	8002408 <HAL_RCC_OscConfig+0x13c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d000      	beq.n	800232e <HAL_RCC_OscConfig+0x62>
 800232c:	e06c      	b.n	8002408 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f000 fb4c 	bl	80029cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x80>
 800233c:	4bb1      	ldr	r3, [pc, #708]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4bb0      	ldr	r3, [pc, #704]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0249      	lsls	r1, r1, #9
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e02f      	b.n	80023ac <HAL_RCC_OscConfig+0xe0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0xa2>
 8002354:	4bab      	ldr	r3, [pc, #684]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4baa      	ldr	r3, [pc, #680]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800235a:	49ab      	ldr	r1, [pc, #684]	; (8002608 <HAL_RCC_OscConfig+0x33c>)
 800235c:	400a      	ands	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	4ba8      	ldr	r3, [pc, #672]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4ba7      	ldr	r3, [pc, #668]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002366:	49a9      	ldr	r1, [pc, #676]	; (800260c <HAL_RCC_OscConfig+0x340>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e01e      	b.n	80023ac <HAL_RCC_OscConfig+0xe0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10e      	bne.n	8002394 <HAL_RCC_OscConfig+0xc8>
 8002376:	4ba3      	ldr	r3, [pc, #652]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4ba2      	ldr	r3, [pc, #648]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	02c9      	lsls	r1, r1, #11
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	4b9f      	ldr	r3, [pc, #636]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b9e      	ldr	r3, [pc, #632]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	0249      	lsls	r1, r1, #9
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xe0>
 8002394:	4b9b      	ldr	r3, [pc, #620]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b9a      	ldr	r3, [pc, #616]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800239a:	499b      	ldr	r1, [pc, #620]	; (8002608 <HAL_RCC_OscConfig+0x33c>)
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	4b98      	ldr	r3, [pc, #608]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b97      	ldr	r3, [pc, #604]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80023a6:	4999      	ldr	r1, [pc, #612]	; (800260c <HAL_RCC_OscConfig+0x340>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d014      	beq.n	80023de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe ff38 	bl	8001228 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023be:	f7fe ff33 	bl	8001228 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e2fd      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	4b8c      	ldr	r3, [pc, #560]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0xf2>
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe ff23 	bl	8001228 <HAL_GetTick>
 80023e2:	0003      	movs	r3, r0
 80023e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe ff1e 	bl	8001228 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e2e8      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	4013      	ands	r3, r2
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x11c>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2202      	movs	r2, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d100      	bne.n	8002416 <HAL_RCC_OscConfig+0x14a>
 8002414:	e06c      	b.n	80024f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002416:	4b7b      	ldr	r3, [pc, #492]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	220c      	movs	r2, #12
 800241c:	4013      	ands	r3, r2
 800241e:	d00e      	beq.n	800243e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002420:	4b78      	ldr	r3, [pc, #480]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	220c      	movs	r2, #12
 8002426:	4013      	ands	r3, r2
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11f      	bne.n	800246c <HAL_RCC_OscConfig+0x1a0>
 800242c:	4b75      	ldr	r3, [pc, #468]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	23c0      	movs	r3, #192	; 0xc0
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	401a      	ands	r2, r3
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	429a      	cmp	r2, r3
 800243c:	d116      	bne.n	800246c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d005      	beq.n	8002454 <HAL_RCC_OscConfig+0x188>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e2bb      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	22f8      	movs	r2, #248	; 0xf8
 800245a:	4393      	bics	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00da      	lsls	r2, r3, #3
 8002464:	4b67      	ldr	r3, [pc, #412]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	e041      	b.n	80024f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d024      	beq.n	80024be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002474:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b62      	ldr	r3, [pc, #392]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fed2 	bl	8001228 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe fecd 	bl	8001228 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e297      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d0f1      	beq.n	800248a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b57      	ldr	r3, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	22f8      	movs	r2, #248	; 0xf8
 80024ac:	4393      	bics	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	00da      	lsls	r2, r3, #3
 80024b6:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e018      	b.n	80024f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b51      	ldr	r3, [pc, #324]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	438a      	bics	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fead 	bl	8001228 <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe fea8 	bl	8001228 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e272      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2202      	movs	r2, #2
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f1      	bne.n	80024d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2208      	movs	r2, #8
 80024f6:	4013      	ands	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d019      	beq.n	8002536 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b40      	ldr	r3, [pc, #256]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002506:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fe8b 	bl	8001228 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fe86 	bl	8001228 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e250      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0f1      	beq.n	8002518 <HAL_RCC_OscConfig+0x24c>
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002536:	4b33      	ldr	r3, [pc, #204]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253a:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800253c:	2101      	movs	r1, #1
 800253e:	438a      	bics	r2, r1
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe fe71 	bl	8001228 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe fe6c 	bl	8001228 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e236      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d1f1      	bne.n	800254c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2204      	movs	r2, #4
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x2a8>
 8002572:	e0b5      	b.n	80026e0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	201f      	movs	r0, #31
 8002576:	183b      	adds	r3, r7, r0
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	4013      	ands	r3, r2
 8002586:	d110      	bne.n	80025aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	0549      	lsls	r1, r1, #21
 8002592:	430a      	orrs	r2, r1
 8002594:	61da      	str	r2, [r3, #28]
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	055b      	lsls	r3, r3, #21
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025a4:	183b      	adds	r3, r7, r0
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_OscConfig+0x344>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	d11a      	bne.n	80025ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_RCC_OscConfig+0x344>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x344>)
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	0049      	lsls	r1, r1, #1
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c4:	f7fe fe30 	bl	8001228 <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ce:	f7fe fe2b 	bl	8001228 <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	; 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1f5      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x344>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10f      	bne.n	8002614 <HAL_RCC_OscConfig+0x348>
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_RCC_OscConfig+0x338>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	430a      	orrs	r2, r1
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	e036      	b.n	8002670 <HAL_RCC_OscConfig+0x3a4>
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40021000 	.word	0x40021000
 8002608:	fffeffff 	.word	0xfffeffff
 800260c:	fffbffff 	.word	0xfffbffff
 8002610:	40007000 	.word	0x40007000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x36a>
 800261c:	4bca      	ldr	r3, [pc, #808]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	4bc9      	ldr	r3, [pc, #804]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002622:	2101      	movs	r1, #1
 8002624:	438a      	bics	r2, r1
 8002626:	621a      	str	r2, [r3, #32]
 8002628:	4bc7      	ldr	r3, [pc, #796]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	4bc6      	ldr	r3, [pc, #792]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800262e:	2104      	movs	r1, #4
 8002630:	438a      	bics	r2, r1
 8002632:	621a      	str	r2, [r3, #32]
 8002634:	e01c      	b.n	8002670 <HAL_RCC_OscConfig+0x3a4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x38c>
 800263e:	4bc2      	ldr	r3, [pc, #776]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002640:	6a1a      	ldr	r2, [r3, #32]
 8002642:	4bc1      	ldr	r3, [pc, #772]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002644:	2104      	movs	r1, #4
 8002646:	430a      	orrs	r2, r1
 8002648:	621a      	str	r2, [r3, #32]
 800264a:	4bbf      	ldr	r3, [pc, #764]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	4bbe      	ldr	r3, [pc, #760]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	621a      	str	r2, [r3, #32]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0x3a4>
 8002658:	4bbb      	ldr	r3, [pc, #748]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	4bba      	ldr	r3, [pc, #744]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800265e:	2101      	movs	r1, #1
 8002660:	438a      	bics	r2, r1
 8002662:	621a      	str	r2, [r3, #32]
 8002664:	4bb8      	ldr	r3, [pc, #736]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	4bb7      	ldr	r3, [pc, #732]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800266a:	2104      	movs	r1, #4
 800266c:	438a      	bics	r2, r1
 800266e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002678:	f7fe fdd6 	bl	8001228 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e009      	b.n	8002696 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fdd1 	bl	8001228 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4aaf      	ldr	r2, [pc, #700]	; (800294c <HAL_RCC_OscConfig+0x680>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e19a      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	4bac      	ldr	r3, [pc, #688]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x3b6>
 80026a0:	e013      	b.n	80026ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fdc1 	bl	8001228 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026aa:	e009      	b.n	80026c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe fdbc 	bl	8001228 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	4aa5      	ldr	r2, [pc, #660]	; (800294c <HAL_RCC_OscConfig+0x680>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e185      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	4ba1      	ldr	r3, [pc, #644]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b9c      	ldr	r3, [pc, #624]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	4b9b      	ldr	r3, [pc, #620]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026da:	499d      	ldr	r1, [pc, #628]	; (8002950 <HAL_RCC_OscConfig+0x684>)
 80026dc:	400a      	ands	r2, r1
 80026de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2210      	movs	r2, #16
 80026e6:	4013      	ands	r3, r2
 80026e8:	d063      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d12a      	bne.n	8002748 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026f2:	4b95      	ldr	r3, [pc, #596]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f6:	4b94      	ldr	r3, [pc, #592]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026f8:	2104      	movs	r1, #4
 80026fa:	430a      	orrs	r2, r1
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026fe:	4b92      	ldr	r3, [pc, #584]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002702:	4b91      	ldr	r3, [pc, #580]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002704:	2101      	movs	r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7fe fd8d 	bl	8001228 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002714:	f7fe fd88 	bl	8001228 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e152      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d0f1      	beq.n	8002714 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002730:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	22f8      	movs	r2, #248	; 0xf8
 8002736:	4393      	bics	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	00da      	lsls	r2, r3, #3
 8002740:	4b81      	ldr	r3, [pc, #516]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002742:	430a      	orrs	r2, r1
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
 8002746:	e034      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	3305      	adds	r3, #5
 800274e:	d111      	bne.n	8002774 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002750:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002754:	4b7c      	ldr	r3, [pc, #496]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002756:	2104      	movs	r1, #4
 8002758:	438a      	bics	r2, r1
 800275a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800275c:	4b7a      	ldr	r3, [pc, #488]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	22f8      	movs	r2, #248	; 0xf8
 8002762:	4393      	bics	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	00da      	lsls	r2, r3, #3
 800276c:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800276e:	430a      	orrs	r2, r1
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
 8002772:	e01e      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002774:	4b74      	ldr	r3, [pc, #464]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002778:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800277a:	2104      	movs	r1, #4
 800277c:	430a      	orrs	r2, r1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002780:	4b71      	ldr	r3, [pc, #452]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002784:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002786:	2101      	movs	r1, #1
 8002788:	438a      	bics	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278c:	f7fe fd4c 	bl	8001228 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002796:	f7fe fd47 	bl	8001228 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e111      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027a8:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d1f1      	bne.n	8002796 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2220      	movs	r2, #32
 80027b8:	4013      	ands	r3, r2
 80027ba:	d05c      	beq.n	8002876 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027bc:	4b62      	ldr	r3, [pc, #392]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	220c      	movs	r2, #12
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d00e      	beq.n	80027e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027c8:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	220c      	movs	r2, #12
 80027ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d114      	bne.n	80027fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027d4:	4b5c      	ldr	r3, [pc, #368]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	401a      	ands	r2, r3
 80027de:	23c0      	movs	r3, #192	; 0xc0
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	025b      	lsls	r3, r3, #9
 80027ee:	4013      	ands	r3, r2
 80027f0:	d040      	beq.n	8002874 <HAL_RCC_OscConfig+0x5a8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d03c      	beq.n	8002874 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0e6      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01b      	beq.n	800283e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002806:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800280a:	4b4f      	ldr	r3, [pc, #316]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0249      	lsls	r1, r1, #9
 8002810:	430a      	orrs	r2, r1
 8002812:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fd08 	bl	8001228 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281e:	f7fe fd03 	bl	8001228 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0cd      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002830:	4b45      	ldr	r3, [pc, #276]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	025b      	lsls	r3, r3, #9
 8002838:	4013      	ands	r3, r2
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x552>
 800283c:	e01b      	b.n	8002876 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800283e:	4b42      	ldr	r3, [pc, #264]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002844:	4943      	ldr	r1, [pc, #268]	; (8002954 <HAL_RCC_OscConfig+0x688>)
 8002846:	400a      	ands	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe fced 	bl	8001228 <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002854:	f7fe fce8 	bl	8001228 <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0b2      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	025b      	lsls	r3, r3, #9
 800286e:	4013      	ands	r3, r2
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x588>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002874:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	d100      	bne.n	8002880 <HAL_RCC_OscConfig+0x5b4>
 800287e:	e0a4      	b.n	80029ca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	220c      	movs	r2, #12
 8002886:	4013      	ands	r3, r2
 8002888:	2b08      	cmp	r3, #8
 800288a:	d100      	bne.n	800288e <HAL_RCC_OscConfig+0x5c2>
 800288c:	e078      	b.n	8002980 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b02      	cmp	r3, #2
 8002894:	d14c      	bne.n	8002930 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 800289c:	492e      	ldr	r1, [pc, #184]	; (8002958 <HAL_RCC_OscConfig+0x68c>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe fcc1 	bl	8001228 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fcbc 	bl	8001228 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e086      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	049b      	lsls	r3, r3, #18
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	220f      	movs	r2, #15
 80028d0:	4393      	bics	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_RCC_OscConfig+0x690>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	431a      	orrs	r2, r3
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0449      	lsls	r1, r1, #17
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fc8f 	bl	8001228 <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fc8a 	bl	8001228 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e054      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	049b      	lsls	r3, r3, #18
 800292a:	4013      	ands	r3, r2
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x644>
 800292e:	e04c      	b.n	80029ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <HAL_RCC_OscConfig+0x68c>)
 8002938:	400a      	ands	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fc74 	bl	8001228 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x6a6>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	40021000 	.word	0x40021000
 800294c:	00001388 	.word	0x00001388
 8002950:	efffffff 	.word	0xefffffff
 8002954:	fffeffff 	.word	0xfffeffff
 8002958:	feffffff 	.word	0xfeffffff
 800295c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fc62 	bl	8001228 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e02c      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_RCC_OscConfig+0x708>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x694>
 800297e:	e024      	b.n	80029ca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e01f      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_RCC_OscConfig+0x708>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x708>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	23c0      	movs	r3, #192	; 0xc0
 800299c:	025b      	lsls	r3, r3, #9
 800299e:	401a      	ands	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d10e      	bne.n	80029c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	220f      	movs	r2, #15
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	23f0      	movs	r3, #240	; 0xf0
 80029ba:	039b      	lsls	r3, r3, #14
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b008      	add	sp, #32
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0bf      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d911      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0a6      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2202      	movs	r2, #2
 8002a24:	4013      	ands	r3, r2
 8002a26:	d015      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d006      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a38:	21e0      	movs	r1, #224	; 0xe0
 8002a3a:	00c9      	lsls	r1, r1, #3
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	22f0      	movs	r2, #240	; 0xf0
 8002a46:	4393      	bics	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d04c      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d120      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07a      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	049b      	lsls	r3, r3, #18
 8002a86:	4013      	ands	r3, r2
 8002a88:	d114      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06e      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	025b      	lsls	r3, r3, #9
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e062      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4013      	ands	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e05b      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4393      	bics	r3, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fbae 	bl	8001228 <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad2:	f7fe fba9 	bl	8001228 <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <HAL_RCC_ClockConfig+0x1a4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e042      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	220c      	movs	r2, #12
 8002aec:	401a      	ands	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1ec      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d211      	bcs.n	8002b2a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e020      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_RCC_ClockConfig+0x1a8>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b48:	f000 f820 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4c:	0001      	movs	r1, r0
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	220f      	movs	r2, #15
 8002b56:	4013      	ands	r3, r2
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x1ac>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	000a      	movs	r2, r1
 8002b5e:	40da      	lsrs	r2, r3
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002b62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fe fb19 	bl	800119c <HAL_InitTick>
  
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b004      	add	sp, #16
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	00001388 	.word	0x00001388
 8002b80:	fffff8ff 	.word	0xfffff8ff
 8002b84:	08004674 	.word	0x08004674
 8002b88:	20000020 	.word	0x20000020

08002b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b08f      	sub	sp, #60	; 0x3c
 8002b90:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002b92:	2314      	movs	r3, #20
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xec>)
 8002b98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b9a:	c313      	stmia	r3!, {r0, r1, r4}
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	4a36      	ldr	r2, [pc, #216]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002ba4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ba6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	220c      	movs	r2, #12
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	d047      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0xd4>
 8002bd0:	d849      	bhi.n	8002c66 <HAL_RCC_GetSysClockFreq+0xda>
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x50>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x56>
 8002bda:	e044      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002be0:	e044      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	220f      	movs	r2, #15
 8002be8:	4013      	ands	r3, r2
 8002bea:	2214      	movs	r2, #20
 8002bec:	18ba      	adds	r2, r7, r2
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	1d3a      	adds	r2, r7, #4
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c02:	23c0      	movs	r3, #192	; 0xc0
 8002c04:	025b      	lsls	r3, r3, #9
 8002c06:	401a      	ands	r2, r3
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d109      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c12:	481c      	ldr	r0, [pc, #112]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c14:	f7fd fa78 	bl	8000108 <__udivsi3>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	4353      	muls	r3, r2
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
 8002c22:	e01a      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c26:	23c0      	movs	r3, #192	; 0xc0
 8002c28:	025b      	lsls	r3, r3, #9
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	23c0      	movs	r3, #192	; 0xc0
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c36:	4814      	ldr	r0, [pc, #80]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c38:	f7fd fa66 	bl	8000108 <__udivsi3>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	001a      	movs	r2, r3
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	4353      	muls	r3, r2
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c4a:	480e      	ldr	r0, [pc, #56]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c4c:	f7fd fa5c 	bl	8000108 <__udivsi3>
 8002c50:	0003      	movs	r3, r0
 8002c52:	001a      	movs	r2, r3
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	4353      	muls	r3, r2
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c5e:	e005      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c64:	e002      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b00f      	add	sp, #60	; 0x3c
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	08004654 	.word	0x08004654
 8002c7c:	08004664 	.word	0x08004664
 8002c80:	40021000 	.word	0x40021000
 8002c84:	007a1200 	.word	0x007a1200
 8002c88:	02dc6c00 	.word	0x02dc6c00

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	20000020 	.word	0x20000020

08002ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ca4:	f7ff fff2 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002ca8:	0001      	movs	r1, r0
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	40d9      	lsrs	r1, r3
 8002cba:	000b      	movs	r3, r1
}    
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08004684 	.word	0x08004684

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	025b      	lsls	r3, r3, #9
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d100      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ce8:	e08e      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2017      	movs	r0, #23
 8002cec:	183b      	adds	r3, r7, r0
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	055b      	lsls	r3, r3, #21
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d110      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	4b63      	ldr	r3, [pc, #396]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0549      	lsls	r1, r1, #21
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]
 8002d0c:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	055b      	lsls	r3, r3, #21
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	183b      	adds	r3, r7, r0
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d11a      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2c:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b58      	ldr	r3, [pc, #352]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	0049      	lsls	r1, r1, #1
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fa75 	bl	8001228 <HAL_GetTick>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	e008      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fe fa70 	bl	8001228 <HAL_GetTick>
 8002d48:	0002      	movs	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e097      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b4f      	ldr	r3, [pc, #316]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d62:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	23c0      	movs	r3, #192	; 0xc0
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d034      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	23c0      	movs	r3, #192	; 0xc0
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d02c      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d84:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a43      	ldr	r2, [pc, #268]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8e:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d90:	6a1a      	ldr	r2, [r3, #32]
 8002d92:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	0249      	lsls	r1, r1, #9
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da2:	493e      	ldr	r1, [pc, #248]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	4013      	ands	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe fa37 	bl	8001228 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fa32 	bl	8001228 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e058      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df2:	2317      	movs	r3, #23
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e02:	4928      	ldr	r1, [pc, #160]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e12:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	2203      	movs	r2, #3
 8002e18:	4393      	bics	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e22:	430a      	orrs	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	2210      	movs	r2, #16
 8002e36:	4393      	bics	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	4393      	bics	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e80:	430a      	orrs	r2, r1
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b006      	add	sp, #24
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
 8002e98:	fffffcff 	.word	0xfffffcff
 8002e9c:	fffeffff 	.word	0xfffeffff
 8002ea0:	00001388 	.word	0x00001388
 8002ea4:	efffffff 	.word	0xefffffff

08002ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0a8      	b.n	800300c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	2382      	movs	r3, #130	; 0x82
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d009      	beq.n	8002ee2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
 8002ed4:	e005      	b.n	8002ee2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	225d      	movs	r2, #93	; 0x5d
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	225c      	movs	r2, #92	; 0x5c
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7fd ffd0 	bl	8000ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	225d      	movs	r2, #93	; 0x5d
 8002f08:	2102      	movs	r1, #2
 8002f0a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	438a      	bics	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	23e0      	movs	r3, #224	; 0xe0
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d902      	bls.n	8002f2e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e002      	b.n	8002f34 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	015b      	lsls	r3, r3, #5
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	23f0      	movs	r3, #240	; 0xf0
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d008      	beq.n	8002f52 <HAL_SPI_Init+0xaa>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	23e0      	movs	r3, #224	; 0xe0
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d002      	beq.n	8002f52 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	2382      	movs	r3, #130	; 0x82
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6899      	ldr	r1, [r3, #8]
 8002f60:	2384      	movs	r3, #132	; 0x84
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	400b      	ands	r3, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	400b      	ands	r3, r1
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2101      	movs	r1, #1
 8002f78:	400b      	ands	r3, r1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6999      	ldr	r1, [r3, #24]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	400b      	ands	r3, r1
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2138      	movs	r1, #56	; 0x38
 8002f8e:	400b      	ands	r3, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	400b      	ands	r3, r1
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	0011      	movs	r1, r2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	401a      	ands	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	2108      	movs	r1, #8
 8002fca:	400b      	ands	r3, r1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68d9      	ldr	r1, [r3, #12]
 8002fd2:	23f0      	movs	r3, #240	; 0xf0
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	400b      	ands	r3, r1
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	0011      	movs	r1, r2
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	015b      	lsls	r3, r3, #5
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4907      	ldr	r1, [pc, #28]	; (8003014 <HAL_SPI_Init+0x16c>)
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	225d      	movs	r2, #93	; 0x5d
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}
 8003014:	fffff7ff 	.word	0xfffff7ff

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e042      	b.n	80030b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223d      	movs	r2, #61	; 0x3d
 800302e:	5c9b      	ldrb	r3, [r3, r2]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	223c      	movs	r2, #60	; 0x3c
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	0018      	movs	r0, r3
 8003042:	f7fd ff7b 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	223d      	movs	r2, #61	; 0x3d
 800304a:	2102      	movs	r1, #2
 800304c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	0019      	movs	r1, r3
 8003058:	0010      	movs	r0, r2
 800305a:	f000 f871 	bl	8003140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2246      	movs	r2, #70	; 0x46
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	223e      	movs	r2, #62	; 0x3e
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	223f      	movs	r2, #63	; 0x3f
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2241      	movs	r2, #65	; 0x41
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2242      	movs	r2, #66	; 0x42
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2243      	movs	r2, #67	; 0x43
 8003092:	2101      	movs	r1, #1
 8003094:	5499      	strb	r1, [r3, r2]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2244      	movs	r2, #68	; 0x44
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2245      	movs	r2, #69	; 0x45
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	223d      	movs	r2, #61	; 0x3d
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	223d      	movs	r2, #61	; 0x3d
 80030c4:	5c9b      	ldrb	r3, [r3, r2]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e02e      	b.n	800312e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	223d      	movs	r2, #61	; 0x3d
 80030d4:	2102      	movs	r1, #2
 80030d6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_TIM_Base_Start+0x80>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00a      	beq.n	80030f8 <HAL_TIM_Base_Start+0x40>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	05db      	lsls	r3, r3, #23
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_Base_Start+0x40>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <HAL_TIM_Base_Start+0x84>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d111      	bne.n	800311c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2207      	movs	r2, #7
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d010      	beq.n	800312c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2101      	movs	r1, #1
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	e007      	b.n	800312c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2101      	movs	r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40000400 	.word	0x40000400

08003140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a30      	ldr	r2, [pc, #192]	; (8003214 <TIM_Base_SetConfig+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d008      	beq.n	800316a <TIM_Base_SetConfig+0x2a>
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	429a      	cmp	r2, r3
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x2a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2c      	ldr	r2, [pc, #176]	; (8003218 <TIM_Base_SetConfig+0xd8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2270      	movs	r2, #112	; 0x70
 800316e:	4393      	bics	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <TIM_Base_SetConfig+0xd4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d014      	beq.n	80031ae <TIM_Base_SetConfig+0x6e>
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	429a      	cmp	r2, r3
 800318c:	d00f      	beq.n	80031ae <TIM_Base_SetConfig+0x6e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <TIM_Base_SetConfig+0xd8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00b      	beq.n	80031ae <TIM_Base_SetConfig+0x6e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <TIM_Base_SetConfig+0xdc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <TIM_Base_SetConfig+0x6e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <TIM_Base_SetConfig+0xe0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x6e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <TIM_Base_SetConfig+0xe4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d108      	bne.n	80031c0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <TIM_Base_SetConfig+0xe8>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	4393      	bics	r3, r2
 80031c6:	001a      	movs	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <TIM_Base_SetConfig+0xd4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0xbe>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <TIM_Base_SetConfig+0xe0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0xbe>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <TIM_Base_SetConfig+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d103      	bne.n	8003206 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	615a      	str	r2, [r3, #20]
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b004      	add	sp, #16
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40000400 	.word	0x40000400
 800321c:	40002000 	.word	0x40002000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800
 8003228:	fffffcff 	.word	0xfffffcff

0800322c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e044      	b.n	80032c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2274      	movs	r2, #116	; 0x74
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd fe93 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2224      	movs	r2, #36	; 0x24
 800325a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2101      	movs	r1, #1
 8003268:	438a      	bics	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	0018      	movs	r0, r3
 8003270:	f000 fb86 	bl	8003980 <UART_SetConfig>
 8003274:	0003      	movs	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e024      	b.n	80032c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fcb9 	bl	8003c00 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	490d      	ldr	r1, [pc, #52]	; (80032d0 <HAL_UART_Init+0xa4>)
 800329a:	400a      	ands	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	212a      	movs	r1, #42	; 0x2a
 80032aa:	438a      	bics	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 fd51 	bl	8003d68 <UART_CheckIdleState>
 80032c6:	0003      	movs	r3, r0
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	ffffb7ff 	.word	0xffffb7ff

080032d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	1dbb      	adds	r3, r7, #6
 80032e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d150      	bne.n	800338c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_UART_Receive_IT+0x24>
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e048      	b.n	800338e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	015b      	lsls	r3, r3, #5
 8003304:	429a      	cmp	r2, r3
 8003306:	d109      	bne.n	800331c <HAL_UART_Receive_IT+0x48>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2201      	movs	r2, #1
 8003314:	4013      	ands	r3, r2
 8003316:	d001      	beq.n	800331c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e038      	b.n	800338e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2274      	movs	r2, #116	; 0x74
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_UART_Receive_IT+0x56>
 8003326:	2302      	movs	r3, #2
 8003328:	e031      	b.n	800338e <HAL_UART_Receive_IT+0xba>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2274      	movs	r2, #116	; 0x74
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	4013      	ands	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	613b      	str	r3, [r7, #16]
  return(result);
 800334c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	2301      	movs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f383 8810 	msr	PRIMASK, r3
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	04c9      	lsls	r1, r1, #19
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f383 8810 	msr	PRIMASK, r3
}
 8003378:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800337a:	1dbb      	adds	r3, r7, #6
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 fdfc 	bl	8003f80 <UART_Start_Receive_IT>
 8003388:	0003      	movs	r3, r0
 800338a:	e000      	b.n	800338e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b008      	add	sp, #32
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b0ab      	sub	sp, #172	; 0xac
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	22a4      	movs	r2, #164	; 0xa4
 80033a8:	18b9      	adds	r1, r7, r2
 80033aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	20a0      	movs	r0, #160	; 0xa0
 80033b4:	1839      	adds	r1, r7, r0
 80033b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	219c      	movs	r1, #156	; 0x9c
 80033c0:	1879      	adds	r1, r7, r1
 80033c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033c4:	0011      	movs	r1, r2
 80033c6:	18bb      	adds	r3, r7, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a99      	ldr	r2, [pc, #612]	; (8003630 <HAL_UART_IRQHandler+0x298>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	2298      	movs	r2, #152	; 0x98
 80033d0:	18bc      	adds	r4, r7, r2
 80033d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80033d4:	18bb      	adds	r3, r7, r2
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d114      	bne.n	8003406 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2220      	movs	r2, #32
 80033e2:	4013      	ands	r3, r2
 80033e4:	d00f      	beq.n	8003406 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033e6:	183b      	adds	r3, r7, r0
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2220      	movs	r2, #32
 80033ec:	4013      	ands	r3, r2
 80033ee:	d00a      	beq.n	8003406 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d100      	bne.n	80033fa <HAL_UART_IRQHandler+0x62>
 80033f8:	e296      	b.n	8003928 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	0010      	movs	r0, r2
 8003402:	4798      	blx	r3
      }
      return;
 8003404:	e290      	b.n	8003928 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003406:	2398      	movs	r3, #152	; 0x98
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d100      	bne.n	8003412 <HAL_UART_IRQHandler+0x7a>
 8003410:	e114      	b.n	800363c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003412:	239c      	movs	r3, #156	; 0x9c
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	d106      	bne.n	800342c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800341e:	23a0      	movs	r3, #160	; 0xa0
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_UART_IRQHandler+0x29c>)
 8003426:	4013      	ands	r3, r2
 8003428:	d100      	bne.n	800342c <HAL_UART_IRQHandler+0x94>
 800342a:	e107      	b.n	800363c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800342c:	23a4      	movs	r3, #164	; 0xa4
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2201      	movs	r2, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d012      	beq.n	800345e <HAL_UART_IRQHandler+0xc6>
 8003438:	23a0      	movs	r3, #160	; 0xa0
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4013      	ands	r3, r2
 8003444:	d00b      	beq.n	800345e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	589b      	ldr	r3, [r3, r2]
 8003454:	2201      	movs	r2, #1
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800345e:	23a4      	movs	r3, #164	; 0xa4
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d011      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
 800346a:	239c      	movs	r3, #156	; 0x9c
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2201      	movs	r2, #1
 8003472:	4013      	ands	r3, r2
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2202      	movs	r2, #2
 800347c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	589b      	ldr	r3, [r3, r2]
 8003484:	2204      	movs	r2, #4
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800348e:	23a4      	movs	r3, #164	; 0xa4
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2204      	movs	r2, #4
 8003496:	4013      	ands	r3, r2
 8003498:	d011      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
 800349a:	239c      	movs	r3, #156	; 0x9c
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2201      	movs	r2, #1
 80034a2:	4013      	ands	r3, r2
 80034a4:	d00b      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2204      	movs	r2, #4
 80034ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	589b      	ldr	r3, [r3, r2]
 80034b4:	2202      	movs	r2, #2
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034be:	23a4      	movs	r3, #164	; 0xa4
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2208      	movs	r2, #8
 80034c6:	4013      	ands	r3, r2
 80034c8:	d017      	beq.n	80034fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034ca:	23a0      	movs	r3, #160	; 0xa0
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2220      	movs	r2, #32
 80034d2:	4013      	ands	r3, r2
 80034d4:	d105      	bne.n	80034e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034d6:	239c      	movs	r3, #156	; 0x9c
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2201      	movs	r2, #1
 80034de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034e0:	d00b      	beq.n	80034fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2208      	movs	r2, #8
 80034e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	589b      	ldr	r3, [r3, r2]
 80034f0:	2208      	movs	r2, #8
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034fa:	23a4      	movs	r3, #164	; 0xa4
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	4013      	ands	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_UART_IRQHandler+0x198>
 8003508:	23a0      	movs	r3, #160	; 0xa0
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	04db      	lsls	r3, r3, #19
 8003512:	4013      	ands	r3, r2
 8003514:	d00c      	beq.n	8003530 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	589b      	ldr	r3, [r3, r2]
 8003526:	2220      	movs	r2, #32
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	589b      	ldr	r3, [r3, r2]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d100      	bne.n	800353c <HAL_UART_IRQHandler+0x1a4>
 800353a:	e1f7      	b.n	800392c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800353c:	23a4      	movs	r3, #164	; 0xa4
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2220      	movs	r2, #32
 8003544:	4013      	ands	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003548:	23a0      	movs	r3, #160	; 0xa0
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2220      	movs	r2, #32
 8003550:	4013      	ands	r3, r2
 8003552:	d008      	beq.n	8003566 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	0010      	movs	r0, r2
 8003564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	589b      	ldr	r3, [r3, r2]
 800356c:	2194      	movs	r1, #148	; 0x94
 800356e:	187a      	adds	r2, r7, r1
 8003570:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	4013      	ands	r3, r2
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d004      	beq.n	800358a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003580:	187b      	adds	r3, r7, r1
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2228      	movs	r2, #40	; 0x28
 8003586:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003588:	d047      	beq.n	800361a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0018      	movs	r0, r3
 800358e:	f000 fda7 	bl	80040e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2240      	movs	r2, #64	; 0x40
 800359a:	4013      	ands	r3, r2
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d137      	bne.n	8003610 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a0:	f3ef 8310 	mrs	r3, PRIMASK
 80035a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80035a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a8:	2090      	movs	r0, #144	; 0x90
 80035aa:	183a      	adds	r2, r7, r0
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	2301      	movs	r3, #1
 80035b0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2140      	movs	r1, #64	; 0x40
 80035c6:	438a      	bics	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <HAL_UART_IRQHandler+0x2a0>)
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7fd ff5f 	bl	80014b0 <HAL_DMA_Abort_IT>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d01a      	beq.n	800362c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	0018      	movs	r0, r3
 8003602:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e012      	b.n	800362c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f9a5 	bl	8003958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360e:	e00d      	b.n	800362c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 f9a0 	bl	8003958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	e008      	b.n	800362c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f99b 	bl	8003958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	2100      	movs	r1, #0
 8003628:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800362a:	e17f      	b.n	800392c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	46c0      	nop			; (mov r8, r8)
    return;
 800362e:	e17d      	b.n	800392c <HAL_UART_IRQHandler+0x594>
 8003630:	0000080f 	.word	0x0000080f
 8003634:	04000120 	.word	0x04000120
 8003638:	080041a5 	.word	0x080041a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	2b01      	cmp	r3, #1
 8003642:	d000      	beq.n	8003646 <HAL_UART_IRQHandler+0x2ae>
 8003644:	e131      	b.n	80038aa <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003646:	23a4      	movs	r3, #164	; 0xa4
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2210      	movs	r2, #16
 800364e:	4013      	ands	r3, r2
 8003650:	d100      	bne.n	8003654 <HAL_UART_IRQHandler+0x2bc>
 8003652:	e12a      	b.n	80038aa <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003654:	23a0      	movs	r3, #160	; 0xa0
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2210      	movs	r2, #16
 800365c:	4013      	ands	r3, r2
 800365e:	d100      	bne.n	8003662 <HAL_UART_IRQHandler+0x2ca>
 8003660:	e123      	b.n	80038aa <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2210      	movs	r2, #16
 8003668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	4013      	ands	r3, r2
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d000      	beq.n	800367a <HAL_UART_IRQHandler+0x2e2>
 8003678:	e09b      	b.n	80037b2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	217e      	movs	r1, #126	; 0x7e
 8003684:	187b      	adds	r3, r7, r1
 8003686:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003688:	187b      	adds	r3, r7, r1
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <HAL_UART_IRQHandler+0x2fa>
 8003690:	e14e      	b.n	8003930 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2258      	movs	r2, #88	; 0x58
 8003696:	5a9b      	ldrh	r3, [r3, r2]
 8003698:	187a      	adds	r2, r7, r1
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d300      	bcc.n	80036a2 <HAL_UART_IRQHandler+0x30a>
 80036a0:	e146      	b.n	8003930 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	187a      	adds	r2, r7, r1
 80036a6:	215a      	movs	r1, #90	; 0x5a
 80036a8:	8812      	ldrh	r2, [r2, #0]
 80036aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d06e      	beq.n	8003794 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b6:	f3ef 8310 	mrs	r3, PRIMASK
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036be:	67bb      	str	r3, [r7, #120]	; 0x78
 80036c0:	2301      	movs	r3, #1
 80036c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c6:	f383 8810 	msr	PRIMASK, r3
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	499a      	ldr	r1, [pc, #616]	; (8003940 <HAL_UART_IRQHandler+0x5a8>)
 80036d8:	400a      	ands	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	f383 8810 	msr	PRIMASK, r3
}
 80036e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80036ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f0:	677b      	str	r3, [r7, #116]	; 0x74
 80036f2:	2301      	movs	r3, #1
 80036f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	438a      	bics	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003710:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371a:	f3ef 8310 	mrs	r3, PRIMASK
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003720:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003722:	673b      	str	r3, [r7, #112]	; 0x70
 8003724:	2301      	movs	r3, #1
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2140      	movs	r1, #64	; 0x40
 800373c:	438a      	bics	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003758:	f3ef 8310 	mrs	r3, PRIMASK
 800375c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003762:	2301      	movs	r3, #1
 8003764:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003768:	f383 8810 	msr	PRIMASK, r3
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2110      	movs	r1, #16
 800377a:	438a      	bics	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	0018      	movs	r0, r3
 8003790:	f7fd fe56 	bl	8001440 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2258      	movs	r2, #88	; 0x58
 8003798:	5a9a      	ldrh	r2, [r3, r2]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	215a      	movs	r1, #90	; 0x5a
 800379e:	5a5b      	ldrh	r3, [r3, r1]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0011      	movs	r1, r2
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f8dc 	bl	8003968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037b0:	e0be      	b.n	8003930 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2258      	movs	r2, #88	; 0x58
 80037b6:	5a99      	ldrh	r1, [r3, r2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	225a      	movs	r2, #90	; 0x5a
 80037bc:	5a9b      	ldrh	r3, [r3, r2]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	208e      	movs	r0, #142	; 0x8e
 80037c2:	183b      	adds	r3, r7, r0
 80037c4:	1a8a      	subs	r2, r1, r2
 80037c6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	225a      	movs	r2, #90	; 0x5a
 80037cc:	5a9b      	ldrh	r3, [r3, r2]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d100      	bne.n	80037d6 <HAL_UART_IRQHandler+0x43e>
 80037d4:	e0ae      	b.n	8003934 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d100      	bne.n	80037e0 <HAL_UART_IRQHandler+0x448>
 80037de:	e0a9      	b.n	8003934 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e8:	2488      	movs	r4, #136	; 0x88
 80037ea:	193a      	adds	r2, r7, r4
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	2301      	movs	r3, #1
 80037f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	494f      	ldr	r1, [pc, #316]	; (8003944 <HAL_UART_IRQHandler+0x5ac>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	193b      	adds	r3, r7, r4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	61bb      	str	r3, [r7, #24]
  return(result);
 800381e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	2484      	movs	r4, #132	; 0x84
 8003822:	193a      	adds	r2, r7, r4
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	2301      	movs	r3, #1
 8003828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2101      	movs	r1, #1
 800383e:	438a      	bics	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	193b      	adds	r3, r7, r4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f383 8810 	msr	PRIMASK, r3
}
 800384e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003862:	f3ef 8310 	mrs	r3, PRIMASK
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386a:	2480      	movs	r4, #128	; 0x80
 800386c:	193a      	adds	r2, r7, r4
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	2301      	movs	r3, #1
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2110      	movs	r1, #16
 8003888:	438a      	bics	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	193b      	adds	r3, r7, r4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800389a:	183b      	adds	r3, r7, r0
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f860 	bl	8003968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038a8:	e044      	b.n	8003934 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038aa:	23a4      	movs	r3, #164	; 0xa4
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	035b      	lsls	r3, r3, #13
 80038b4:	4013      	ands	r3, r2
 80038b6:	d010      	beq.n	80038da <HAL_UART_IRQHandler+0x542>
 80038b8:	239c      	movs	r3, #156	; 0x9c
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	03db      	lsls	r3, r3, #15
 80038c2:	4013      	ands	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0352      	lsls	r2, r2, #13
 80038ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 fe10 	bl	80044f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038d8:	e02f      	b.n	800393a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038da:	23a4      	movs	r3, #164	; 0xa4
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	4013      	ands	r3, r2
 80038e4:	d00f      	beq.n	8003906 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038e6:	23a0      	movs	r3, #160	; 0xa0
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	4013      	ands	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01e      	beq.n	8003938 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	0010      	movs	r0, r2
 8003902:	4798      	blx	r3
    }
    return;
 8003904:	e018      	b.n	8003938 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003906:	23a4      	movs	r3, #164	; 0xa4
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2240      	movs	r2, #64	; 0x40
 800390e:	4013      	ands	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_UART_IRQHandler+0x5a2>
 8003912:	23a0      	movs	r3, #160	; 0xa0
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	4013      	ands	r3, r2
 800391c:	d00d      	beq.n	800393a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0018      	movs	r0, r3
 8003922:	f000 fc56 	bl	80041d2 <UART_EndTransmit_IT>
    return;
 8003926:	e008      	b.n	800393a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	e006      	b.n	800393a <HAL_UART_IRQHandler+0x5a2>
    return;
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	e004      	b.n	800393a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	e002      	b.n	800393a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	e000      	b.n	800393a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003938:	46c0      	nop			; (mov r8, r8)
  }

}
 800393a:	46bd      	mov	sp, r7
 800393c:	b02b      	add	sp, #172	; 0xac
 800393e:	bd90      	pop	{r4, r7, pc}
 8003940:	fffffeff 	.word	0xfffffeff
 8003944:	fffffedf 	.word	0xfffffedf

08003948 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b002      	add	sp, #8
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	000a      	movs	r2, r1
 8003972:	1cbb      	adds	r3, r7, #2
 8003974:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003988:	231e      	movs	r3, #30
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a8d      	ldr	r2, [pc, #564]	; (8003be4 <UART_SetConfig+0x264>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	0019      	movs	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a88      	ldr	r2, [pc, #544]	; (8003be8 <UART_SetConfig+0x268>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a7f      	ldr	r2, [pc, #508]	; (8003bec <UART_SetConfig+0x26c>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7b      	ldr	r2, [pc, #492]	; (8003bf0 <UART_SetConfig+0x270>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d127      	bne.n	8003a56 <UART_SetConfig+0xd6>
 8003a06:	4b7b      	ldr	r3, [pc, #492]	; (8003bf4 <UART_SetConfig+0x274>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d00d      	beq.n	8003a2e <UART_SetConfig+0xae>
 8003a12:	d81b      	bhi.n	8003a4c <UART_SetConfig+0xcc>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d014      	beq.n	8003a42 <UART_SetConfig+0xc2>
 8003a18:	d818      	bhi.n	8003a4c <UART_SetConfig+0xcc>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0xa4>
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00a      	beq.n	8003a38 <UART_SetConfig+0xb8>
 8003a22:	e013      	b.n	8003a4c <UART_SetConfig+0xcc>
 8003a24:	231f      	movs	r3, #31
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	e021      	b.n	8003a72 <UART_SetConfig+0xf2>
 8003a2e:	231f      	movs	r3, #31
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	2202      	movs	r2, #2
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e01c      	b.n	8003a72 <UART_SetConfig+0xf2>
 8003a38:	231f      	movs	r3, #31
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e017      	b.n	8003a72 <UART_SetConfig+0xf2>
 8003a42:	231f      	movs	r3, #31
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2208      	movs	r2, #8
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e012      	b.n	8003a72 <UART_SetConfig+0xf2>
 8003a4c:	231f      	movs	r3, #31
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2210      	movs	r2, #16
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e00d      	b.n	8003a72 <UART_SetConfig+0xf2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <UART_SetConfig+0x278>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d104      	bne.n	8003a6a <UART_SetConfig+0xea>
 8003a60:	231f      	movs	r3, #31
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e003      	b.n	8003a72 <UART_SetConfig+0xf2>
 8003a6a:	231f      	movs	r3, #31
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2210      	movs	r2, #16
 8003a70:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d15d      	bne.n	8003b3a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003a7e:	231f      	movs	r3, #31
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d015      	beq.n	8003ab4 <UART_SetConfig+0x134>
 8003a88:	dc18      	bgt.n	8003abc <UART_SetConfig+0x13c>
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d00d      	beq.n	8003aaa <UART_SetConfig+0x12a>
 8003a8e:	dc15      	bgt.n	8003abc <UART_SetConfig+0x13c>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <UART_SetConfig+0x11a>
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d005      	beq.n	8003aa4 <UART_SetConfig+0x124>
 8003a98:	e010      	b.n	8003abc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9a:	f7ff f901 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	61bb      	str	r3, [r7, #24]
        break;
 8003aa2:	e012      	b.n	8003aca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa4:	4b55      	ldr	r3, [pc, #340]	; (8003bfc <UART_SetConfig+0x27c>)
 8003aa6:	61bb      	str	r3, [r7, #24]
        break;
 8003aa8:	e00f      	b.n	8003aca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7ff f86f 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	61bb      	str	r3, [r7, #24]
        break;
 8003ab2:	e00a      	b.n	8003aca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	61bb      	str	r3, [r7, #24]
        break;
 8003aba:	e006      	b.n	8003aca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ac0:	231e      	movs	r3, #30
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
        break;
 8003ac8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d100      	bne.n	8003ad2 <UART_SetConfig+0x152>
 8003ad0:	e07b      	b.n	8003bca <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	005a      	lsls	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	18d2      	adds	r2, r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	0010      	movs	r0, r2
 8003ae6:	f7fc fb0f 	bl	8000108 <__udivsi3>
 8003aea:	0003      	movs	r3, r0
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	d91c      	bls.n	8003b30 <UART_SetConfig+0x1b0>
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	025b      	lsls	r3, r3, #9
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d217      	bcs.n	8003b30 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	200e      	movs	r0, #14
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	210f      	movs	r1, #15
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2207      	movs	r2, #7
 8003b16:	4013      	ands	r3, r2
 8003b18:	b299      	uxth	r1, r3
 8003b1a:	183b      	adds	r3, r7, r0
 8003b1c:	183a      	adds	r2, r7, r0
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	183a      	adds	r2, r7, r0
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	e04c      	b.n	8003bca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b30:	231e      	movs	r3, #30
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e047      	b.n	8003bca <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b3a:	231f      	movs	r3, #31
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d015      	beq.n	8003b70 <UART_SetConfig+0x1f0>
 8003b44:	dc18      	bgt.n	8003b78 <UART_SetConfig+0x1f8>
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d00d      	beq.n	8003b66 <UART_SetConfig+0x1e6>
 8003b4a:	dc15      	bgt.n	8003b78 <UART_SetConfig+0x1f8>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <UART_SetConfig+0x1d6>
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d005      	beq.n	8003b60 <UART_SetConfig+0x1e0>
 8003b54:	e010      	b.n	8003b78 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b56:	f7ff f8a3 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	61bb      	str	r3, [r7, #24]
        break;
 8003b5e:	e012      	b.n	8003b86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b60:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <UART_SetConfig+0x27c>)
 8003b62:	61bb      	str	r3, [r7, #24]
        break;
 8003b64:	e00f      	b.n	8003b86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b66:	f7ff f811 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	61bb      	str	r3, [r7, #24]
        break;
 8003b6e:	e00a      	b.n	8003b86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	61bb      	str	r3, [r7, #24]
        break;
 8003b76:	e006      	b.n	8003b86 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b7c:	231e      	movs	r3, #30
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
        break;
 8003b84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01e      	beq.n	8003bca <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	085a      	lsrs	r2, r3, #1
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	18d2      	adds	r2, r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	0010      	movs	r0, r2
 8003b9e:	f7fc fab3 	bl	8000108 <__udivsi3>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	d909      	bls.n	8003bc2 <UART_SetConfig+0x242>
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	025b      	lsls	r3, r3, #9
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d204      	bcs.n	8003bc2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	e003      	b.n	8003bca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc2:	231e      	movs	r3, #30
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bd6:	231e      	movs	r3, #30
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	781b      	ldrb	r3, [r3, #0]
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b008      	add	sp, #32
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	efff69f3 	.word	0xefff69f3
 8003be8:	ffffcfff 	.word	0xffffcfff
 8003bec:	fffff4ff 	.word	0xfffff4ff
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40004400 	.word	0x40004400
 8003bfc:	007a1200 	.word	0x007a1200

08003c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <UART_AdvFeatureConfig+0x144>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2202      	movs	r2, #2
 8003c30:	4013      	ands	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a43      	ldr	r2, [pc, #268]	; (8003d48 <UART_AdvFeatureConfig+0x148>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	2204      	movs	r2, #4
 8003c52:	4013      	ands	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <UART_AdvFeatureConfig+0x14c>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2208      	movs	r2, #8
 8003c74:	4013      	ands	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <UART_AdvFeatureConfig+0x150>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2210      	movs	r2, #16
 8003c96:	4013      	ands	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <UART_AdvFeatureConfig+0x154>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <UART_AdvFeatureConfig+0x158>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2240      	movs	r2, #64	; 0x40
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <UART_AdvFeatureConfig+0x15c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	035b      	lsls	r3, r3, #13
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d10b      	bne.n	8003d1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <UART_AdvFeatureConfig+0x160>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	4013      	ands	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <UART_AdvFeatureConfig+0x164>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	fffdffff 	.word	0xfffdffff
 8003d48:	fffeffff 	.word	0xfffeffff
 8003d4c:	fffbffff 	.word	0xfffbffff
 8003d50:	ffff7fff 	.word	0xffff7fff
 8003d54:	ffffefff 	.word	0xffffefff
 8003d58:	ffffdfff 	.word	0xffffdfff
 8003d5c:	ffefffff 	.word	0xffefffff
 8003d60:	ff9fffff 	.word	0xff9fffff
 8003d64:	fff7ffff 	.word	0xfff7ffff

08003d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	2100      	movs	r1, #0
 8003d76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d78:	f7fd fa56 	bl	8001228 <HAL_GetTick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2208      	movs	r2, #8
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d10c      	bne.n	8003da8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	0391      	lsls	r1, r2, #14
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <UART_CheckIdleState+0x8c>)
 8003d98:	9200      	str	r2, [sp, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f000 f82c 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d001      	beq.n	8003da8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e021      	b.n	8003dec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2204      	movs	r2, #4
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d10c      	bne.n	8003dd0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2280      	movs	r2, #128	; 0x80
 8003dba:	03d1      	lsls	r1, r2, #15
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <UART_CheckIdleState+0x8c>)
 8003dc0:	9200      	str	r2, [sp, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f000 f818 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003dc8:	1e03      	subs	r3, r0, #0
 8003dca:	d001      	beq.n	8003dd0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e00d      	b.n	8003dec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2274      	movs	r2, #116	; 0x74
 8003de6:	2100      	movs	r1, #0
 8003de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b004      	add	sp, #16
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	01ffffff 	.word	0x01ffffff

08003df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b094      	sub	sp, #80	; 0x50
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e08:	e0a3      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	d100      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003e10:	e09f      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fd fa09 	bl	8001228 <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d13d      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e30:	647b      	str	r3, [r7, #68]	; 0x44
 8003e32:	2301      	movs	r3, #1
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	494c      	ldr	r1, [pc, #304]	; (8003f7c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40
 8003e64:	2301      	movs	r3, #1
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	f383 8810 	msr	PRIMASK, r3
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	438a      	bics	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e86:	f383 8810 	msr	PRIMASK, r3
}
 8003e8a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2274      	movs	r2, #116	; 0x74
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e067      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d050      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	401a      	ands	r2, r3
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d146      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ece:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed2:	613b      	str	r3, [r7, #16]
  return(result);
 8003ed4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed8:	2301      	movs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f383 8810 	msr	PRIMASK, r3
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4923      	ldr	r1, [pc, #140]	; (8003f7c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f383 8810 	msr	PRIMASK, r3
}
 8003efe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f00:	f3ef 8310 	mrs	r3, PRIMASK
 8003f04:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f06:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2101      	movs	r1, #1
 8003f22:	438a      	bics	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	f383 8810 	msr	PRIMASK, r3
}
 8003f30:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	2120      	movs	r1, #32
 8003f44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2274      	movs	r2, #116	; 0x74
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e010      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	425a      	negs	r2, r3
 8003f62:	4153      	adcs	r3, r2
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	001a      	movs	r2, r3
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d100      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003f70:	e74b      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b014      	add	sp, #80	; 0x50
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	fffffe5f 	.word	0xfffffe5f

08003f80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	1dbb      	adds	r3, r7, #6
 8003f8c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1dba      	adds	r2, r7, #6
 8003f98:	2158      	movs	r1, #88	; 0x58
 8003f9a:	8812      	ldrh	r2, [r2, #0]
 8003f9c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1dba      	adds	r2, r7, #6
 8003fa2:	215a      	movs	r1, #90	; 0x5a
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	015b      	lsls	r3, r3, #5
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d10d      	bne.n	8003fd6 <UART_Start_Receive_IT+0x56>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <UART_Start_Receive_IT+0x4c>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	225c      	movs	r2, #92	; 0x5c
 8003fc6:	4943      	ldr	r1, [pc, #268]	; (80040d4 <UART_Start_Receive_IT+0x154>)
 8003fc8:	5299      	strh	r1, [r3, r2]
 8003fca:	e02e      	b.n	800402a <UART_Start_Receive_IT+0xaa>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	225c      	movs	r2, #92	; 0x5c
 8003fd0:	21ff      	movs	r1, #255	; 0xff
 8003fd2:	5299      	strh	r1, [r3, r2]
 8003fd4:	e029      	b.n	800402a <UART_Start_Receive_IT+0xaa>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <UART_Start_Receive_IT+0x7a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <UART_Start_Receive_IT+0x70>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	225c      	movs	r2, #92	; 0x5c
 8003fea:	21ff      	movs	r1, #255	; 0xff
 8003fec:	5299      	strh	r1, [r3, r2]
 8003fee:	e01c      	b.n	800402a <UART_Start_Receive_IT+0xaa>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	225c      	movs	r2, #92	; 0x5c
 8003ff4:	217f      	movs	r1, #127	; 0x7f
 8003ff6:	5299      	strh	r1, [r3, r2]
 8003ff8:	e017      	b.n	800402a <UART_Start_Receive_IT+0xaa>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	055b      	lsls	r3, r3, #21
 8004002:	429a      	cmp	r2, r3
 8004004:	d10d      	bne.n	8004022 <UART_Start_Receive_IT+0xa2>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <UART_Start_Receive_IT+0x98>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	225c      	movs	r2, #92	; 0x5c
 8004012:	217f      	movs	r1, #127	; 0x7f
 8004014:	5299      	strh	r1, [r3, r2]
 8004016:	e008      	b.n	800402a <UART_Start_Receive_IT+0xaa>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	225c      	movs	r2, #92	; 0x5c
 800401c:	213f      	movs	r1, #63	; 0x3f
 800401e:	5299      	strh	r1, [r3, r2]
 8004020:	e003      	b.n	800402a <UART_Start_Receive_IT+0xaa>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	225c      	movs	r2, #92	; 0x5c
 8004026:	2100      	movs	r1, #0
 8004028:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	2100      	movs	r1, #0
 8004030:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2222      	movs	r2, #34	; 0x22
 8004036:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8310 	mrs	r3, PRIMASK
 800403c:	61fb      	str	r3, [r7, #28]
  return(result);
 800403e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004042:	2301      	movs	r3, #1
 8004044:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2101      	movs	r1, #1
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	f383 8810 	msr	PRIMASK, r3
}
 8004068:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	015b      	lsls	r3, r3, #5
 8004072:	429a      	cmp	r2, r3
 8004074:	d107      	bne.n	8004086 <UART_Start_Receive_IT+0x106>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <UART_Start_Receive_IT+0x158>)
 8004082:	665a      	str	r2, [r3, #100]	; 0x64
 8004084:	e002      	b.n	800408c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <UART_Start_Receive_IT+0x15c>)
 800408a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2274      	movs	r2, #116	; 0x74
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004094:	f3ef 8310 	mrs	r3, PRIMASK
 8004098:	613b      	str	r3, [r7, #16]
  return(result);
 800409a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2190      	movs	r1, #144	; 0x90
 80040b6:	0049      	lsls	r1, r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b00c      	add	sp, #48	; 0x30
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	000001ff 	.word	0x000001ff
 80040d8:	08004391 	.word	0x08004391
 80040dc:	08004229 	.word	0x08004229

080040e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	617b      	str	r3, [r7, #20]
  return(result);
 80040ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f0:	637b      	str	r3, [r7, #52]	; 0x34
 80040f2:	2301      	movs	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4925      	ldr	r1, [pc, #148]	; (80041a0 <UART_EndRxTransfer+0xc0>)
 800410a:	400a      	ands	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004110:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411a:	f3ef 8310 	mrs	r3, PRIMASK
 800411e:	623b      	str	r3, [r7, #32]
  return(result);
 8004120:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
 8004124:	2301      	movs	r3, #1
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	438a      	bics	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	f383 8810 	msr	PRIMASK, r3
}
 800414a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004150:	2b01      	cmp	r3, #1
 8004152:	d118      	bne.n	8004186 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004154:	f3ef 8310 	mrs	r3, PRIMASK
 8004158:	60bb      	str	r3, [r7, #8]
  return(result);
 800415a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415e:	2301      	movs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f383 8810 	msr	PRIMASK, r3
}
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2110      	movs	r1, #16
 8004176:	438a      	bics	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b00e      	add	sp, #56	; 0x38
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	fffffedf 	.word	0xfffffedf

080041a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	225a      	movs	r2, #90	; 0x5a
 80041b6:	2100      	movs	r1, #0
 80041b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2252      	movs	r2, #82	; 0x52
 80041be:	2100      	movs	r1, #0
 80041c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7ff fbc7 	bl	8003958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b004      	add	sp, #16
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041da:	f3ef 8310 	mrs	r3, PRIMASK
 80041de:	60bb      	str	r3, [r7, #8]
  return(result);
 80041e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	2301      	movs	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f383 8810 	msr	PRIMASK, r3
}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2140      	movs	r1, #64	; 0x40
 80041fc:	438a      	bics	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f383 8810 	msr	PRIMASK, r3
}
 800420a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	0018      	movs	r0, r3
 800421c:	f7ff fb94 	bl	8003948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b006      	add	sp, #24
 8004226:	bd80      	pop	{r7, pc}

08004228 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b090      	sub	sp, #64	; 0x40
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004230:	203e      	movs	r0, #62	; 0x3e
 8004232:	183b      	adds	r3, r7, r0
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	215c      	movs	r1, #92	; 0x5c
 8004238:	5a52      	ldrh	r2, [r2, r1]
 800423a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004240:	2b22      	cmp	r3, #34	; 0x22
 8004242:	d000      	beq.n	8004246 <UART_RxISR_8BIT+0x1e>
 8004244:	e095      	b.n	8004372 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	213c      	movs	r1, #60	; 0x3c
 800424c:	187b      	adds	r3, r7, r1
 800424e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004250:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004252:	187b      	adds	r3, r7, r1
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	183b      	adds	r3, r7, r0
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b2d9      	uxtb	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	400a      	ands	r2, r1
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	225a      	movs	r2, #90	; 0x5a
 8004276:	5a9b      	ldrh	r3, [r3, r2]
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b299      	uxth	r1, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	225a      	movs	r2, #90	; 0x5a
 8004282:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	225a      	movs	r2, #90	; 0x5a
 8004288:	5a9b      	ldrh	r3, [r3, r2]
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d178      	bne.n	8004382 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004290:	f3ef 8310 	mrs	r3, PRIMASK
 8004294:	61bb      	str	r3, [r7, #24]
  return(result);
 8004296:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
 800429a:	2301      	movs	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4936      	ldr	r1, [pc, #216]	; (800438c <UART_RxISR_8BIT+0x164>)
 80042b2:	400a      	ands	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c2:	f3ef 8310 	mrs	r3, PRIMASK
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
 80042cc:	2301      	movs	r3, #1
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	f383 8810 	msr	PRIMASK, r3
}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2101      	movs	r1, #1
 80042e4:	438a      	bics	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	f383 8810 	msr	PRIMASK, r3
}
 80042f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004304:	2b01      	cmp	r3, #1
 8004306:	d12f      	bne.n	8004368 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430e:	f3ef 8310 	mrs	r3, PRIMASK
 8004312:	60fb      	str	r3, [r7, #12]
  return(result);
 8004314:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
 8004318:	2301      	movs	r3, #1
 800431a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2110      	movs	r1, #16
 8004330:	438a      	bics	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f383 8810 	msr	PRIMASK, r3
}
 800433e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	2210      	movs	r2, #16
 8004348:	4013      	ands	r3, r2
 800434a:	2b10      	cmp	r3, #16
 800434c:	d103      	bne.n	8004356 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2210      	movs	r2, #16
 8004354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2258      	movs	r2, #88	; 0x58
 800435a:	5a9a      	ldrh	r2, [r3, r2]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	0011      	movs	r1, r2
 8004360:	0018      	movs	r0, r3
 8004362:	f7ff fb01 	bl	8003968 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004366:	e00c      	b.n	8004382 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	0018      	movs	r0, r3
 800436c:	f7fc fc78 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 8004370:	e007      	b.n	8004382 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2108      	movs	r1, #8
 800437e:	430a      	orrs	r2, r1
 8004380:	619a      	str	r2, [r3, #24]
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b010      	add	sp, #64	; 0x40
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	fffffedf 	.word	0xfffffedf

08004390 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b090      	sub	sp, #64	; 0x40
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004398:	203e      	movs	r0, #62	; 0x3e
 800439a:	183b      	adds	r3, r7, r0
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	215c      	movs	r1, #92	; 0x5c
 80043a0:	5a52      	ldrh	r2, [r2, r1]
 80043a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a8:	2b22      	cmp	r3, #34	; 0x22
 80043aa:	d000      	beq.n	80043ae <UART_RxISR_16BIT+0x1e>
 80043ac:	e095      	b.n	80044da <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	213c      	movs	r1, #60	; 0x3c
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80043b8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	183a      	adds	r2, r7, r0
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	8812      	ldrh	r2, [r2, #0]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	1c9a      	adds	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	225a      	movs	r2, #90	; 0x5a
 80043de:	5a9b      	ldrh	r3, [r3, r2]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b299      	uxth	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	225a      	movs	r2, #90	; 0x5a
 80043ea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	225a      	movs	r2, #90	; 0x5a
 80043f0:	5a9b      	ldrh	r3, [r3, r2]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d178      	bne.n	80044ea <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f8:	f3ef 8310 	mrs	r3, PRIMASK
 80043fc:	617b      	str	r3, [r7, #20]
  return(result);
 80043fe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f383 8810 	msr	PRIMASK, r3
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4936      	ldr	r1, [pc, #216]	; (80044f4 <UART_RxISR_16BIT+0x164>)
 800441a:	400a      	ands	r2, r1
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f383 8810 	msr	PRIMASK, r3
}
 8004428:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442a:	f3ef 8310 	mrs	r3, PRIMASK
 800442e:	623b      	str	r3, [r7, #32]
  return(result);
 8004430:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
 8004434:	2301      	movs	r3, #1
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f383 8810 	msr	PRIMASK, r3
}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2101      	movs	r1, #1
 800444c:	438a      	bics	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	f383 8810 	msr	PRIMASK, r3
}
 800445a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	2b01      	cmp	r3, #1
 800446e:	d12f      	bne.n	80044d0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004476:	f3ef 8310 	mrs	r3, PRIMASK
 800447a:	60bb      	str	r3, [r7, #8]
  return(result);
 800447c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004480:	2301      	movs	r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f383 8810 	msr	PRIMASK, r3
}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2110      	movs	r1, #16
 8004498:	438a      	bics	r2, r1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f383 8810 	msr	PRIMASK, r3
}
 80044a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	2210      	movs	r2, #16
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d103      	bne.n	80044be <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2258      	movs	r2, #88	; 0x58
 80044c2:	5a9a      	ldrh	r2, [r3, r2]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0011      	movs	r1, r2
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7ff fa4d 	bl	8003968 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044ce:	e00c      	b.n	80044ea <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fc fbc4 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 80044d8:	e007      	b.n	80044ea <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2108      	movs	r1, #8
 80044e6:	430a      	orrs	r2, r1
 80044e8:	619a      	str	r2, [r3, #24]
}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b010      	add	sp, #64	; 0x40
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	fffffedf 	.word	0xfffffedf

080044f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004500:	46c0      	nop			; (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}

08004508 <__libc_init_array>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	2600      	movs	r6, #0
 800450c:	4d0c      	ldr	r5, [pc, #48]	; (8004540 <__libc_init_array+0x38>)
 800450e:	4c0d      	ldr	r4, [pc, #52]	; (8004544 <__libc_init_array+0x3c>)
 8004510:	1b64      	subs	r4, r4, r5
 8004512:	10a4      	asrs	r4, r4, #2
 8004514:	42a6      	cmp	r6, r4
 8004516:	d109      	bne.n	800452c <__libc_init_array+0x24>
 8004518:	2600      	movs	r6, #0
 800451a:	f000 f821 	bl	8004560 <_init>
 800451e:	4d0a      	ldr	r5, [pc, #40]	; (8004548 <__libc_init_array+0x40>)
 8004520:	4c0a      	ldr	r4, [pc, #40]	; (800454c <__libc_init_array+0x44>)
 8004522:	1b64      	subs	r4, r4, r5
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	42a6      	cmp	r6, r4
 8004528:	d105      	bne.n	8004536 <__libc_init_array+0x2e>
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	00b3      	lsls	r3, r6, #2
 800452e:	58eb      	ldr	r3, [r5, r3]
 8004530:	4798      	blx	r3
 8004532:	3601      	adds	r6, #1
 8004534:	e7ee      	b.n	8004514 <__libc_init_array+0xc>
 8004536:	00b3      	lsls	r3, r6, #2
 8004538:	58eb      	ldr	r3, [r5, r3]
 800453a:	4798      	blx	r3
 800453c:	3601      	adds	r6, #1
 800453e:	e7f2      	b.n	8004526 <__libc_init_array+0x1e>
 8004540:	0800468c 	.word	0x0800468c
 8004544:	0800468c 	.word	0x0800468c
 8004548:	0800468c 	.word	0x0800468c
 800454c:	08004690 	.word	0x08004690

08004550 <memset>:
 8004550:	0003      	movs	r3, r0
 8004552:	1882      	adds	r2, r0, r2
 8004554:	4293      	cmp	r3, r2
 8004556:	d100      	bne.n	800455a <memset+0xa>
 8004558:	4770      	bx	lr
 800455a:	7019      	strb	r1, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	e7f9      	b.n	8004554 <memset+0x4>

08004560 <_init>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr

0800456c <_fini>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr
