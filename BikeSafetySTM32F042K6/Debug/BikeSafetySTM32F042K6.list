
BikeSafetySTM32F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a0  080046a0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080046a0  080046a0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046a0  080046a0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080046a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000002c  080046d4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080046d4  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001383e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246f  00000000  00000000  00033892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00036cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ab1  00000000  00000000  00037c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013905  00000000  00000000  000516b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094cac  00000000  00000000  00064fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9c62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  000f9cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004574 	.word	0x08004574

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08004574 	.word	0x08004574

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b0c3      	sub	sp, #268	; 0x10c
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//=========================MPU9250
	// Registers
	uint8_t IMUDevAddr 				= 0xd0;
 8000226:	24ff      	movs	r4, #255	; 0xff
 8000228:	193b      	adds	r3, r7, r4
 800022a:	22d0      	movs	r2, #208	; 0xd0
 800022c:	701a      	strb	r2, [r3, #0]
	uint8_t PWR_MGMT_1[2] 			= {0x6b, 0b00100000};	// or 4
 800022e:	25fc      	movs	r5, #252	; 0xfc
 8000230:	197b      	adds	r3, r7, r5
 8000232:	4af9      	ldr	r2, [pc, #996]	; (8000618 <main+0x3f8>)
 8000234:	801a      	strh	r2, [r3, #0]
	uint8_t PWR_MGMT_2[2] 			= {0x6c, 0b00000000};	// 0 to enable all or 255 to disable all
 8000236:	26f8      	movs	r6, #248	; 0xf8
 8000238:	19bb      	adds	r3, r7, r6
 800023a:	226c      	movs	r2, #108	; 0x6c
 800023c:	801a      	strh	r2, [r3, #0]
	uint8_t WHO_AM_I 				= 0x75;
 800023e:	23f7      	movs	r3, #247	; 0xf7
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2275      	movs	r2, #117	; 0x75
 8000244:	701a      	strb	r2, [r3, #0]
	uint8_t LP_ACCEL_ODR[2] 		= {0x1e, 0b00001000}; 	// 8 = output frequency 62.50Hz
 8000246:	22f4      	movs	r2, #244	; 0xf4
 8000248:	18bb      	adds	r3, r7, r2
 800024a:	4af4      	ldr	r2, [pc, #976]	; (800061c <main+0x3fc>)
 800024c:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_CONFIG[2] 		= {0x1c, 0x0}; 			// 0x0 for 2g, 0x8 for 4g, 0x10 for 8g,0x18 for 16g
 800024e:	21f0      	movs	r1, #240	; 0xf0
 8000250:	187b      	adds	r3, r7, r1
 8000252:	221c      	movs	r2, #28
 8000254:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_XOUT_L 			= 0x3c;
 8000256:	20ef      	movs	r0, #239	; 0xef
 8000258:	183b      	adds	r3, r7, r0
 800025a:	223c      	movs	r2, #60	; 0x3c
 800025c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_XOUT_H 			= 0x3b;
 800025e:	20ee      	movs	r0, #238	; 0xee
 8000260:	183b      	adds	r3, r7, r0
 8000262:	223b      	movs	r2, #59	; 0x3b
 8000264:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_L 			= 0x3e;
 8000266:	20ed      	movs	r0, #237	; 0xed
 8000268:	183b      	adds	r3, r7, r0
 800026a:	223e      	movs	r2, #62	; 0x3e
 800026c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_H 			= 0x3d;
 800026e:	20ec      	movs	r0, #236	; 0xec
 8000270:	183b      	adds	r3, r7, r0
 8000272:	223d      	movs	r2, #61	; 0x3d
 8000274:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_L 			= 0x40;
 8000276:	20eb      	movs	r0, #235	; 0xeb
 8000278:	183b      	adds	r3, r7, r0
 800027a:	2240      	movs	r2, #64	; 0x40
 800027c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_H 			= 0x3f;
 800027e:	20ea      	movs	r0, #234	; 0xea
 8000280:	183b      	adds	r3, r7, r0
 8000282:	223f      	movs	r2, #63	; 0x3f
 8000284:	701a      	strb	r2, [r3, #0]
	//=========================MPU9250

	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 8000286:	20e4      	movs	r0, #228	; 0xe4
 8000288:	183b      	adds	r3, r7, r0
 800028a:	4ae5      	ldr	r2, [pc, #916]	; (8000620 <main+0x400>)
 800028c:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 800028e:	20dc      	movs	r0, #220	; 0xdc
 8000290:	183b      	adds	r3, r7, r0
 8000292:	4ae4      	ldr	r2, [pc, #912]	; (8000624 <main+0x404>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	6019      	str	r1, [r3, #0]
 8000298:	7912      	ldrb	r2, [r2, #4]
 800029a:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 800029c:	20d0      	movs	r0, #208	; 0xd0
 800029e:	183b      	adds	r3, r7, r0
 80002a0:	4ae1      	ldr	r2, [pc, #900]	; (8000628 <main+0x408>)
 80002a2:	ca03      	ldmia	r2!, {r0, r1}
 80002a4:	c303      	stmia	r3!, {r0, r1}
 80002a6:	8811      	ldrh	r1, [r2, #0]
 80002a8:	8019      	strh	r1, [r3, #0]
 80002aa:	7892      	ldrb	r2, [r2, #2]
 80002ac:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 80002ae:	20c4      	movs	r0, #196	; 0xc4
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	4ade      	ldr	r2, [pc, #888]	; (800062c <main+0x40c>)
 80002b4:	ca03      	ldmia	r2!, {r0, r1}
 80002b6:	c303      	stmia	r3!, {r0, r1}
 80002b8:	8811      	ldrh	r1, [r2, #0]
 80002ba:	8019      	strh	r1, [r3, #0]
 80002bc:	7892      	ldrb	r2, [r2, #2]
 80002be:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 80002c0:	20b8      	movs	r0, #184	; 0xb8
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	4ada      	ldr	r2, [pc, #872]	; (8000630 <main+0x410>)
 80002c6:	ca03      	ldmia	r2!, {r0, r1}
 80002c8:	c303      	stmia	r3!, {r0, r1}
 80002ca:	8812      	ldrh	r2, [r2, #0]
 80002cc:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 80002ce:	20ac      	movs	r0, #172	; 0xac
 80002d0:	183b      	adds	r3, r7, r0
 80002d2:	4ad8      	ldr	r2, [pc, #864]	; (8000634 <main+0x414>)
 80002d4:	ca03      	ldmia	r2!, {r0, r1}
 80002d6:	c303      	stmia	r3!, {r0, r1}
 80002d8:	8811      	ldrh	r1, [r2, #0]
 80002da:	8019      	strh	r1, [r3, #0]
 80002dc:	7892      	ldrb	r2, [r2, #2]
 80002de:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 80002e0:	20a0      	movs	r0, #160	; 0xa0
 80002e2:	183b      	adds	r3, r7, r0
 80002e4:	4ad4      	ldr	r2, [pc, #848]	; (8000638 <main+0x418>)
 80002e6:	ca03      	ldmia	r2!, {r0, r1}
 80002e8:	c303      	stmia	r3!, {r0, r1}
 80002ea:	8811      	ldrh	r1, [r2, #0]
 80002ec:	8019      	strh	r1, [r3, #0]
 80002ee:	7892      	ldrb	r2, [r2, #2]
 80002f0:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 80002f2:	2090      	movs	r0, #144	; 0x90
 80002f4:	183b      	adds	r3, r7, r0
 80002f6:	4ad1      	ldr	r2, [pc, #836]	; (800063c <main+0x41c>)
 80002f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002fa:	c313      	stmia	r3!, {r0, r1, r4}
 80002fc:	8811      	ldrh	r1, [r2, #0]
 80002fe:	8019      	strh	r1, [r3, #0]
 8000300:	7892      	ldrb	r2, [r2, #2]
 8000302:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8000304:	2088      	movs	r0, #136	; 0x88
 8000306:	183b      	adds	r3, r7, r0
 8000308:	4acd      	ldr	r2, [pc, #820]	; (8000640 <main+0x420>)
 800030a:	ca11      	ldmia	r2!, {r0, r4}
 800030c:	c311      	stmia	r3!, {r0, r4}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 800030e:	207c      	movs	r0, #124	; 0x7c
 8000310:	183b      	adds	r3, r7, r0
 8000312:	4acc      	ldr	r2, [pc, #816]	; (8000644 <main+0x424>)
 8000314:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000316:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8000318:	2078      	movs	r0, #120	; 0x78
 800031a:	183b      	adds	r3, r7, r0
 800031c:	221a      	movs	r2, #26
 800031e:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CMGS_SEND_MSG_BUF[] 	= "AT+CMGS=\"+358443xxxxxx\"\rTesting9";
 8000320:	2054      	movs	r0, #84	; 0x54
 8000322:	183b      	adds	r3, r7, r0
 8000324:	4ac8      	ldr	r2, [pc, #800]	; (8000648 <main+0x428>)
 8000326:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000328:	c313      	stmia	r3!, {r0, r1, r4}
 800032a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800032c:	c313      	stmia	r3!, {r0, r1, r4}
 800032e:	ca11      	ldmia	r2!, {r0, r4}
 8000330:	c311      	stmia	r3!, {r0, r4}
 8000332:	7812      	ldrb	r2, [r2, #0]
 8000334:	701a      	strb	r2, [r3, #0]
	//=========================GSM

	//=========================GNSS
	uint8_t AT_CGNSPWR_ON[] 	= "AT+CGNSPWR=1\r";				// GNSS turns Power ON
 8000336:	2044      	movs	r0, #68	; 0x44
 8000338:	183b      	adds	r3, r7, r0
 800033a:	4ac4      	ldr	r2, [pc, #784]	; (800064c <main+0x42c>)
 800033c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800033e:	c313      	stmia	r3!, {r0, r1, r4}
 8000340:	8812      	ldrh	r2, [r2, #0]
 8000342:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSPWR_OFF[] 	= "AT+CGNSPWR=0\r";				// GNSS turns Power OFF
 8000344:	2034      	movs	r0, #52	; 0x34
 8000346:	183b      	adds	r3, r7, r0
 8000348:	4ac1      	ldr	r2, [pc, #772]	; (8000650 <main+0x430>)
 800034a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800034c:	c313      	stmia	r3!, {r0, r1, r4}
 800034e:	8812      	ldrh	r2, [r2, #0]
 8000350:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSSEQ[] 		= "AT+CGNSSEQ=\"RMC\"\r";		// RMC for GGA
 8000352:	2020      	movs	r0, #32
 8000354:	183b      	adds	r3, r7, r0
 8000356:	4abf      	ldr	r2, [pc, #764]	; (8000654 <main+0x434>)
 8000358:	ca13      	ldmia	r2!, {r0, r1, r4}
 800035a:	c313      	stmia	r3!, {r0, r1, r4}
 800035c:	6811      	ldr	r1, [r2, #0]
 800035e:	6019      	str	r1, [r3, #0]
 8000360:	8892      	ldrh	r2, [r2, #4]
 8000362:	809a      	strh	r2, [r3, #4]
	uint8_t AT_CGNSINF[] 		= "AT+CGNSINF\r";				// Gets data from GNSS
 8000364:	2014      	movs	r0, #20
 8000366:	183b      	adds	r3, r7, r0
 8000368:	4abb      	ldr	r2, [pc, #748]	; (8000658 <main+0x438>)
 800036a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800036c:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CGNSURC[] 		= "AT+CGNSURC=1\r";
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4aba      	ldr	r2, [pc, #744]	; (800065c <main+0x43c>)
 8000372:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000374:	c313      	stmia	r3!, {r0, r1, r4}
 8000376:	8812      	ldrh	r2, [r2, #0]
 8000378:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037a:	f000 feeb 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037e:	f000 faa3 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000382:	f000 fc0d 	bl	8000ba0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000386:	f000 fb05 	bl	8000994 <MX_I2C1_Init>
  MX_SPI1_Init();
 800038a:	f000 fb43 	bl	8000a14 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800038e:	f000 fba7 	bl	8000ae0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000392:	f000 fbd5 	bl	8000b40 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000396:	f000 fb7b 	bl	8000a90 <MX_TIM16_Init>
  memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
  //=========================GNSS
  */

  //=========================MPU9250
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_1, sizeof(PWR_MGMT_1), 10);
 800039a:	24ff      	movs	r4, #255	; 0xff
 800039c:	193b      	adds	r3, r7, r4
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b299      	uxth	r1, r3
 80003a2:	197a      	adds	r2, r7, r5
 80003a4:	48ae      	ldr	r0, [pc, #696]	; (8000660 <main+0x440>)
 80003a6:	230a      	movs	r3, #10
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2302      	movs	r3, #2
 80003ac:	f001 faec 	bl	8001988 <HAL_I2C_Master_Transmit>
 80003b0:	0003      	movs	r3, r0
 80003b2:	001a      	movs	r2, r3
 80003b4:	4bab      	ldr	r3, [pc, #684]	; (8000664 <main+0x444>)
 80003b6:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	b299      	uxth	r1, r3
 80003be:	4aaa      	ldr	r2, [pc, #680]	; (8000668 <main+0x448>)
 80003c0:	48a7      	ldr	r0, [pc, #668]	; (8000660 <main+0x440>)
 80003c2:	23fa      	movs	r3, #250	; 0xfa
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	f001 fbe5 	bl	8001b98 <HAL_I2C_Master_Receive>
 80003ce:	0003      	movs	r3, r0
 80003d0:	001a      	movs	r2, r3
 80003d2:	4ba4      	ldr	r3, [pc, #656]	; (8000664 <main+0x444>)
 80003d4:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 80003d6:	200a      	movs	r0, #10
 80003d8:	f000 ff20 	bl	800121c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_2, sizeof(PWR_MGMT_2), 10);
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b299      	uxth	r1, r3
 80003e2:	19ba      	adds	r2, r7, r6
 80003e4:	489e      	ldr	r0, [pc, #632]	; (8000660 <main+0x440>)
 80003e6:	230a      	movs	r3, #10
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2302      	movs	r3, #2
 80003ec:	f001 facc 	bl	8001988 <HAL_I2C_Master_Transmit>
 80003f0:	0003      	movs	r3, r0
 80003f2:	001a      	movs	r2, r3
 80003f4:	4b9b      	ldr	r3, [pc, #620]	; (8000664 <main+0x444>)
 80003f6:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b299      	uxth	r1, r3
 80003fe:	4a9a      	ldr	r2, [pc, #616]	; (8000668 <main+0x448>)
 8000400:	4897      	ldr	r0, [pc, #604]	; (8000660 <main+0x440>)
 8000402:	23fa      	movs	r3, #250	; 0xfa
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	2301      	movs	r3, #1
 800040a:	f001 fbc5 	bl	8001b98 <HAL_I2C_Master_Receive>
 800040e:	0003      	movs	r3, r0
 8000410:	001a      	movs	r2, r3
 8000412:	4b94      	ldr	r3, [pc, #592]	; (8000664 <main+0x444>)
 8000414:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000416:	200a      	movs	r0, #10
 8000418:	f000 ff00 	bl	800121c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &WHO_AM_I, sizeof(WHO_AM_I), 10);
 800041c:	193b      	adds	r3, r7, r4
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	b299      	uxth	r1, r3
 8000422:	23f7      	movs	r3, #247	; 0xf7
 8000424:	18fa      	adds	r2, r7, r3
 8000426:	488e      	ldr	r0, [pc, #568]	; (8000660 <main+0x440>)
 8000428:	230a      	movs	r3, #10
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2301      	movs	r3, #1
 800042e:	f001 faab 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000432:	0003      	movs	r3, r0
 8000434:	001a      	movs	r2, r3
 8000436:	4b8b      	ldr	r3, [pc, #556]	; (8000664 <main+0x444>)
 8000438:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 800043a:	193b      	adds	r3, r7, r4
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b299      	uxth	r1, r3
 8000440:	4a89      	ldr	r2, [pc, #548]	; (8000668 <main+0x448>)
 8000442:	4887      	ldr	r0, [pc, #540]	; (8000660 <main+0x440>)
 8000444:	23fa      	movs	r3, #250	; 0xfa
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	f001 fba4 	bl	8001b98 <HAL_I2C_Master_Receive>
 8000450:	0003      	movs	r3, r0
 8000452:	001a      	movs	r2, r3
 8000454:	4b83      	ldr	r3, [pc, #524]	; (8000664 <main+0x444>)
 8000456:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000458:	200a      	movs	r0, #10
 800045a:	f000 fedf 	bl	800121c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, LP_ACCEL_ODR, sizeof(LP_ACCEL_ODR), 10);
 800045e:	193b      	adds	r3, r7, r4
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b299      	uxth	r1, r3
 8000464:	22f4      	movs	r2, #244	; 0xf4
 8000466:	18ba      	adds	r2, r7, r2
 8000468:	487d      	ldr	r0, [pc, #500]	; (8000660 <main+0x440>)
 800046a:	230a      	movs	r3, #10
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2302      	movs	r3, #2
 8000470:	f001 fa8a 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000474:	0003      	movs	r3, r0
 8000476:	001a      	movs	r2, r3
 8000478:	4b7a      	ldr	r3, [pc, #488]	; (8000664 <main+0x444>)
 800047a:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 800047c:	193b      	adds	r3, r7, r4
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b299      	uxth	r1, r3
 8000482:	4a79      	ldr	r2, [pc, #484]	; (8000668 <main+0x448>)
 8000484:	4876      	ldr	r0, [pc, #472]	; (8000660 <main+0x440>)
 8000486:	23fa      	movs	r3, #250	; 0xfa
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	2301      	movs	r3, #1
 800048e:	f001 fb83 	bl	8001b98 <HAL_I2C_Master_Receive>
 8000492:	0003      	movs	r3, r0
 8000494:	001a      	movs	r2, r3
 8000496:	4b73      	ldr	r3, [pc, #460]	; (8000664 <main+0x444>)
 8000498:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800049a:	200a      	movs	r0, #10
 800049c:	f000 febe 	bl	800121c <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), 10);
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b299      	uxth	r1, r3
 80004a6:	23f0      	movs	r3, #240	; 0xf0
 80004a8:	18fa      	adds	r2, r7, r3
 80004aa:	486d      	ldr	r0, [pc, #436]	; (8000660 <main+0x440>)
 80004ac:	230a      	movs	r3, #10
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2302      	movs	r3, #2
 80004b2:	f001 fa69 	bl	8001988 <HAL_I2C_Master_Transmit>
 80004b6:	0003      	movs	r3, r0
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b6a      	ldr	r3, [pc, #424]	; (8000664 <main+0x444>)
 80004bc:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b299      	uxth	r1, r3
 80004c4:	4a68      	ldr	r2, [pc, #416]	; (8000668 <main+0x448>)
 80004c6:	4866      	ldr	r0, [pc, #408]	; (8000660 <main+0x440>)
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2301      	movs	r3, #1
 80004d0:	f001 fb62 	bl	8001b98 <HAL_I2C_Master_Receive>
 80004d4:	0003      	movs	r3, r0
 80004d6:	001a      	movs	r2, r3
 80004d8:	4b62      	ldr	r3, [pc, #392]	; (8000664 <main+0x444>)
 80004da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16);
 80004dc:	4b63      	ldr	r3, [pc, #396]	; (800066c <main+0x44c>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fdf4 	bl	80030cc <HAL_TIM_Base_Start>
  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 80004e4:	4962      	ldr	r1, [pc, #392]	; (8000670 <main+0x450>)
 80004e6:	4b63      	ldr	r3, [pc, #396]	; (8000674 <main+0x454>)
 80004e8:	220e      	movs	r2, #14
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 fefc 	bl	80032e8 <HAL_UART_Receive_IT>
 80004f0:	0003      	movs	r3, r0
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b60      	ldr	r3, [pc, #384]	; (8000678 <main+0x458>)
 80004f6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  i2cState = HAL_I2C_GetState(&hi2c1);
 80004f8:	4b59      	ldr	r3, [pc, #356]	; (8000660 <main+0x440>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fc54 	bl	8001da8 <HAL_I2C_GetState>
 8000500:	0003      	movs	r3, r0
 8000502:	001a      	movs	r2, r3
 8000504:	4b5d      	ldr	r3, [pc, #372]	; (800067c <main+0x45c>)
 8000506:	701a      	strb	r2, [r3, #0]

	  //=========================MPU9250
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_L, sizeof(ACCEL_XOUT_L), 10);
 8000508:	24ff      	movs	r4, #255	; 0xff
 800050a:	193b      	adds	r3, r7, r4
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b299      	uxth	r1, r3
 8000510:	23ef      	movs	r3, #239	; 0xef
 8000512:	18fa      	adds	r2, r7, r3
 8000514:	4852      	ldr	r0, [pc, #328]	; (8000660 <main+0x440>)
 8000516:	230a      	movs	r3, #10
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	f001 fa34 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000520:	0003      	movs	r3, r0
 8000522:	001a      	movs	r2, r3
 8000524:	4b4f      	ldr	r3, [pc, #316]	; (8000664 <main+0x444>)
 8000526:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8000528:	193b      	adds	r3, r7, r4
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b299      	uxth	r1, r3
 800052e:	4a4e      	ldr	r2, [pc, #312]	; (8000668 <main+0x448>)
 8000530:	484b      	ldr	r0, [pc, #300]	; (8000660 <main+0x440>)
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	f001 fb2e 	bl	8001b98 <HAL_I2C_Master_Receive>
 800053c:	0003      	movs	r3, r0
 800053e:	001a      	movs	r2, r3
 8000540:	4b48      	ldr	r3, [pc, #288]	; (8000664 <main+0x444>)
 8000542:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = dataReceiveI2cBuffer;
 8000544:	4b48      	ldr	r3, [pc, #288]	; (8000668 <main+0x448>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	001a      	movs	r2, r3
 800054a:	4b4d      	ldr	r3, [pc, #308]	; (8000680 <main+0x460>)
 800054c:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_H, sizeof(ACCEL_XOUT_H), 10);
 800054e:	193b      	adds	r3, r7, r4
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b299      	uxth	r1, r3
 8000554:	23ee      	movs	r3, #238	; 0xee
 8000556:	18fa      	adds	r2, r7, r3
 8000558:	4841      	ldr	r0, [pc, #260]	; (8000660 <main+0x440>)
 800055a:	230a      	movs	r3, #10
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	f001 fa12 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000564:	0003      	movs	r3, r0
 8000566:	001a      	movs	r2, r3
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <main+0x444>)
 800056a:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800056c:	193b      	adds	r3, r7, r4
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b299      	uxth	r1, r3
 8000572:	4a3d      	ldr	r2, [pc, #244]	; (8000668 <main+0x448>)
 8000574:	483a      	ldr	r0, [pc, #232]	; (8000660 <main+0x440>)
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	f001 fb0c 	bl	8001b98 <HAL_I2C_Master_Receive>
 8000580:	0003      	movs	r3, r0
 8000582:	001a      	movs	r2, r3
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <main+0x444>)
 8000586:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = finalXAccValue + (dataReceiveI2cBuffer << 8);
 8000588:	4b37      	ldr	r3, [pc, #220]	; (8000668 <main+0x448>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	001a      	movs	r2, r3
 8000590:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <main+0x460>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	18d2      	adds	r2, r2, r3
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <main+0x460>)
 8000598:	601a      	str	r2, [r3, #0]
	  finalXAccValueWithOffset = finalXAccValue + 40000;
 800059a:	4b39      	ldr	r3, [pc, #228]	; (8000680 <main+0x460>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4d39      	ldr	r5, [pc, #228]	; (8000684 <main+0x464>)
 80005a0:	195a      	adds	r2, r3, r5
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <main+0x468>)
 80005a4:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_L, sizeof(ACCEL_YOUT_L), 10);
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	23ed      	movs	r3, #237	; 0xed
 80005ae:	18fa      	adds	r2, r7, r3
 80005b0:	482b      	ldr	r0, [pc, #172]	; (8000660 <main+0x440>)
 80005b2:	230a      	movs	r3, #10
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	f001 f9e6 	bl	8001988 <HAL_I2C_Master_Transmit>
 80005bc:	0003      	movs	r3, r0
 80005be:	001a      	movs	r2, r3
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <main+0x444>)
 80005c2:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b299      	uxth	r1, r3
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <main+0x448>)
 80005cc:	4824      	ldr	r0, [pc, #144]	; (8000660 <main+0x440>)
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	f001 fae0 	bl	8001b98 <HAL_I2C_Master_Receive>
 80005d8:	0003      	movs	r3, r0
 80005da:	001a      	movs	r2, r3
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0x444>)
 80005de:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = dataReceiveI2cBuffer;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <main+0x448>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	001a      	movs	r2, r3
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <main+0x46c>)
 80005e8:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_H, sizeof(ACCEL_YOUT_H), 10);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b299      	uxth	r1, r3
 80005f0:	23ec      	movs	r3, #236	; 0xec
 80005f2:	18fa      	adds	r2, r7, r3
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <main+0x440>)
 80005f6:	230a      	movs	r3, #10
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	f001 f9c4 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000600:	0003      	movs	r3, r0
 8000602:	001a      	movs	r2, r3
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <main+0x444>)
 8000606:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8000608:	193b      	adds	r3, r7, r4
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b299      	uxth	r1, r3
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <main+0x448>)
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0x440>)
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	e03b      	b.n	8000690 <main+0x470>
 8000618:	0000206b 	.word	0x0000206b
 800061c:	0000081e 	.word	0x0000081e
 8000620:	000d5441 	.word	0x000d5441
 8000624:	0800458c 	.word	0x0800458c
 8000628:	08004594 	.word	0x08004594
 800062c:	080045a0 	.word	0x080045a0
 8000630:	080045ac 	.word	0x080045ac
 8000634:	080045b8 	.word	0x080045b8
 8000638:	080045c4 	.word	0x080045c4
 800063c:	080045d0 	.word	0x080045d0
 8000640:	080045e0 	.word	0x080045e0
 8000644:	080045e8 	.word	0x080045e8
 8000648:	080045f4 	.word	0x080045f4
 800064c:	08004618 	.word	0x08004618
 8000650:	08004628 	.word	0x08004628
 8000654:	08004638 	.word	0x08004638
 8000658:	0800464c 	.word	0x0800464c
 800065c:	08004658 	.word	0x08004658
 8000660:	200000a4 	.word	0x200000a4
 8000664:	200000a0 	.word	0x200000a0
 8000668:	2000007d 	.word	0x2000007d
 800066c:	20000268 	.word	0x20000268
 8000670:	20000080 	.word	0x20000080
 8000674:	200000f4 	.word	0x200000f4
 8000678:	200000f0 	.word	0x200000f0
 800067c:	200002b0 	.word	0x200002b0
 8000680:	20000050 	.word	0x20000050
 8000684:	00009c40 	.word	0x00009c40
 8000688:	20000054 	.word	0x20000054
 800068c:	20000058 	.word	0x20000058
 8000690:	2301      	movs	r3, #1
 8000692:	f001 fa81 	bl	8001b98 <HAL_I2C_Master_Receive>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b7a      	ldr	r3, [pc, #488]	; (8000884 <main+0x664>)
 800069c:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = finalYAccValue + (dataReceiveI2cBuffer << 8);
 800069e:	4b7a      	ldr	r3, [pc, #488]	; (8000888 <main+0x668>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	001a      	movs	r2, r3
 80006a6:	4b79      	ldr	r3, [pc, #484]	; (800088c <main+0x66c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	18d2      	adds	r2, r2, r3
 80006ac:	4b77      	ldr	r3, [pc, #476]	; (800088c <main+0x66c>)
 80006ae:	601a      	str	r2, [r3, #0]
	  finalYAccValueWithOffset = finalYAccValue + 40000;
 80006b0:	4b76      	ldr	r3, [pc, #472]	; (800088c <main+0x66c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	195a      	adds	r2, r3, r5
 80006b6:	4b76      	ldr	r3, [pc, #472]	; (8000890 <main+0x670>)
 80006b8:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_L, sizeof(ACCEL_ZOUT_L), 10);
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b299      	uxth	r1, r3
 80006c0:	23eb      	movs	r3, #235	; 0xeb
 80006c2:	18fa      	adds	r2, r7, r3
 80006c4:	4873      	ldr	r0, [pc, #460]	; (8000894 <main+0x674>)
 80006c6:	230a      	movs	r3, #10
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	f001 f95c 	bl	8001988 <HAL_I2C_Master_Transmit>
 80006d0:	0003      	movs	r3, r0
 80006d2:	001a      	movs	r2, r3
 80006d4:	4b6b      	ldr	r3, [pc, #428]	; (8000884 <main+0x664>)
 80006d6:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b299      	uxth	r1, r3
 80006de:	4a6a      	ldr	r2, [pc, #424]	; (8000888 <main+0x668>)
 80006e0:	486c      	ldr	r0, [pc, #432]	; (8000894 <main+0x674>)
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	f001 fa56 	bl	8001b98 <HAL_I2C_Master_Receive>
 80006ec:	0003      	movs	r3, r0
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b64      	ldr	r3, [pc, #400]	; (8000884 <main+0x664>)
 80006f2:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = dataReceiveI2cBuffer;
 80006f4:	4b64      	ldr	r3, [pc, #400]	; (8000888 <main+0x668>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b67      	ldr	r3, [pc, #412]	; (8000898 <main+0x678>)
 80006fc:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_H, sizeof(ACCEL_ZOUT_H), 10);
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b299      	uxth	r1, r3
 8000704:	23ea      	movs	r3, #234	; 0xea
 8000706:	18fa      	adds	r2, r7, r3
 8000708:	4862      	ldr	r0, [pc, #392]	; (8000894 <main+0x674>)
 800070a:	230a      	movs	r3, #10
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	f001 f93a 	bl	8001988 <HAL_I2C_Master_Transmit>
 8000714:	0003      	movs	r3, r0
 8000716:	001a      	movs	r2, r3
 8000718:	4b5a      	ldr	r3, [pc, #360]	; (8000884 <main+0x664>)
 800071a:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b299      	uxth	r1, r3
 8000722:	4a59      	ldr	r2, [pc, #356]	; (8000888 <main+0x668>)
 8000724:	485b      	ldr	r0, [pc, #364]	; (8000894 <main+0x674>)
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	f001 fa34 	bl	8001b98 <HAL_I2C_Master_Receive>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	4b53      	ldr	r3, [pc, #332]	; (8000884 <main+0x664>)
 8000736:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = finalZAccValue + (dataReceiveI2cBuffer << 8);
 8000738:	4b53      	ldr	r3, [pc, #332]	; (8000888 <main+0x668>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	001a      	movs	r2, r3
 8000740:	4b55      	ldr	r3, [pc, #340]	; (8000898 <main+0x678>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	18d2      	adds	r2, r2, r3
 8000746:	4b54      	ldr	r3, [pc, #336]	; (8000898 <main+0x678>)
 8000748:	601a      	str	r2, [r3, #0]
	  finalZAccValueWithOffset = finalZAccValue + 88000;
 800074a:	4b53      	ldr	r3, [pc, #332]	; (8000898 <main+0x678>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a53      	ldr	r2, [pc, #332]	; (800089c <main+0x67c>)
 8000750:	189a      	adds	r2, r3, r2
 8000752:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <main+0x680>)
 8000754:	601a      	str	r2, [r3, #0]
	  uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
	  HAL_Delay(1000);
	  memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
	  //=========================GNSS
	   */
	  if(counter2 != 0){
 8000756:	4b53      	ldr	r3, [pc, #332]	; (80008a4 <main+0x684>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d017      	beq.n	800078e <main+0x56e>
		  if(__HAL_TIM_GET_COUNTER(&htim16) < timerVal){
 800075e:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <main+0x688>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000764:	4b51      	ldr	r3, [pc, #324]	; (80008ac <main+0x68c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d20b      	bcs.n	8000784 <main+0x564>
			  clockCykles++;
 800076c:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <main+0x690>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b4e      	ldr	r3, [pc, #312]	; (80008b0 <main+0x690>)
 8000776:	701a      	strb	r2, [r3, #0]
			  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000778:	4b4b      	ldr	r3, [pc, #300]	; (80008a8 <main+0x688>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <main+0x68c>)
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	e004      	b.n	800078e <main+0x56e>
		  }
		  else{
			  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000784:	4b48      	ldr	r3, [pc, #288]	; (80008a8 <main+0x688>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800078a:	4b48      	ldr	r3, [pc, #288]	; (80008ac <main+0x68c>)
 800078c:	601a      	str	r2, [r3, #0]
		  }
	  }


	  if(lockedDevice != 1){
 800078e:	4b49      	ldr	r3, [pc, #292]	; (80008b4 <main+0x694>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d05a      	beq.n	800084c <main+0x62c>
		  if(checkKey(receiveUARTData, UARTDataKey)){
 8000796:	4a48      	ldr	r2, [pc, #288]	; (80008b8 <main+0x698>)
 8000798:	4b48      	ldr	r3, [pc, #288]	; (80008bc <main+0x69c>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fa93 	bl	8000cc8 <checkKey>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d01d      	beq.n	80007e2 <main+0x5c2>
			  lockedDevice = 1;
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <main+0x694>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);	// EXTERNAL LED
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	0059      	lsls	r1, r3, #1
 80007b0:	2390      	movs	r3, #144	; 0x90
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2201      	movs	r2, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f818 	bl	80017ec <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80007bc:	23fa      	movs	r3, #250	; 0xfa
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fd2b 	bl	800121c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	0059      	lsls	r1, r3, #1
 80007ca:	2390      	movs	r3, #144	; 0x90
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2200      	movs	r2, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 f80b 	bl	80017ec <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80007d6:	23fa      	movs	r3, #250	; 0xfa
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fd1e 	bl	800121c <HAL_Delay>
 80007e0:	e04a      	b.n	8000878 <main+0x658>
		  }
		  else if(clockCykles > 33 && counter2 < 15){
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <main+0x690>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b21      	cmp	r3, #33	; 0x21
 80007e8:	d90a      	bls.n	8000800 <main+0x5e0>
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <main+0x684>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b0e      	cmp	r3, #14
 80007f0:	d806      	bhi.n	8000800 <main+0x5e0>
			  clockCykles = 0;
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <main+0x690>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
			  counter2 = 0;
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <main+0x684>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e03b      	b.n	8000878 <main+0x658>
		  }
		  else if(counter2 > 15){
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <main+0x684>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d908      	bls.n	800081a <main+0x5fa>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	005a      	lsls	r2, r3, #1
 800080c:	2390      	movs	r3, #144	; 0x90
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f807 	bl	8001826 <HAL_GPIO_TogglePin>
 8000818:	e02e      	b.n	8000878 <main+0x658>
		  }
		  else if(checkMovment()){
 800081a:	f000 fa75 	bl	8000d08 <checkMovment>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d02a      	beq.n	8000878 <main+0x658>
			  if(counter2 == 0){
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <main+0x684>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10a      	bne.n	8000840 <main+0x620>
				  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <main+0x688>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <main+0x68c>)
 8000832:	601a      	str	r2, [r3, #0]
				  counter2++;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <main+0x684>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <main+0x684>)
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	e01b      	b.n	8000878 <main+0x658>
			  }
			  else{
				  counter2++;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <main+0x684>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <main+0x684>)
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e015      	b.n	8000878 <main+0x658>
			  }
		  }
	  }
	  else{
		  if(finalZAccValueWithOffset < 100000){
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <main+0x680>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <main+0x6a0>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d808      	bhi.n	8000868 <main+0x648>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	0059      	lsls	r1, r3, #1
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2201      	movs	r2, #1
 8000860:	0018      	movs	r0, r3
 8000862:	f000 ffc3 	bl	80017ec <HAL_GPIO_WritePin>
 8000866:	e007      	b.n	8000878 <main+0x658>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	0059      	lsls	r1, r3, #1
 800086c:	2390      	movs	r3, #144	; 0x90
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	2200      	movs	r2, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f000 ffba 	bl	80017ec <HAL_GPIO_WritePin>
		  }
	  }

	  counter = counter +1;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <main+0x6a4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <main+0x6a4>)
 8000880:	601a      	str	r2, [r3, #0]
	  i2cState = HAL_I2C_GetState(&hi2c1);
 8000882:	e639      	b.n	80004f8 <main+0x2d8>
 8000884:	200000a0 	.word	0x200000a0
 8000888:	2000007d 	.word	0x2000007d
 800088c:	20000058 	.word	0x20000058
 8000890:	2000005c 	.word	0x2000005c
 8000894:	200000a4 	.word	0x200000a4
 8000898:	20000060 	.word	0x20000060
 800089c:	000157c0 	.word	0x000157c0
 80008a0:	20000064 	.word	0x20000064
 80008a4:	2000004c 	.word	0x2000004c
 80008a8:	20000268 	.word	0x20000268
 80008ac:	20000068 	.word	0x20000068
 80008b0:	2000006c 	.word	0x2000006c
 80008b4:	2000007c 	.word	0x2000007c
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000080 	.word	0x20000080
 80008c0:	0001869f 	.word	0x0001869f
 80008c4:	20000048 	.word	0x20000048

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b099      	sub	sp, #100	; 0x64
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	242c      	movs	r4, #44	; 0x2c
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	0018      	movs	r0, r3
 80008d4:	2334      	movs	r3, #52	; 0x34
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f003 fe43 	bl	8004564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008de:	231c      	movs	r3, #28
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2310      	movs	r3, #16
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f003 fe3b 	bl	8004564 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	0018      	movs	r0, r3
 80008f2:	2318      	movs	r3, #24
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f003 fe34 	bl	8004564 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	0021      	movs	r1, r4
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2201      	movs	r2, #1
 8000908:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2210      	movs	r2, #16
 800090e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2202      	movs	r2, #2
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	0212      	lsls	r2, r2, #8
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	0352      	lsls	r2, r2, #13
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	187b      	adds	r3, r7, r1
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fcd6 	bl	80022e0 <HAL_RCC_OscConfig>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000938:	f000 fa2c 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	211c      	movs	r1, #28
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2202      	movs	r2, #2
 8000948:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2101      	movs	r1, #1
 800095a:	0018      	movs	r0, r3
 800095c:	f002 f846 	bl	80029ec <HAL_RCC_ClockConfig>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000964:	f000 fa16 	bl	8000d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2221      	movs	r2, #33	; 0x21
 800096c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	0018      	movs	r0, r3
 800097e:	f002 f9af 	bl	8002ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000986:	f000 fa05 	bl	8000d94 <Error_Handler>
  }
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b019      	add	sp, #100	; 0x64
 8000990:	bd90      	pop	{r4, r7, pc}
	...

08000994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_I2C1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_I2C1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <MX_I2C1_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 ff43 	bl	800185c <HAL_I2C_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 f9db 	bl	8000d94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fbe4 	bl	80021b0 <HAL_I2CEx_ConfigAnalogFilter>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 f9d2 	bl	8000d94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fc27 	bl	8002248 <HAL_I2CEx_ConfigDigitalFilter>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f9c9 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000a4 	.word	0x200000a4
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	2000090e 	.word	0x2000090e

08000a14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_SPI1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a20:	2282      	movs	r2, #130	; 0x82
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a2e:	22e0      	movs	r2, #224	; 0xe0
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a62:	2207      	movs	r2, #7
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 fa21 	bl	8002ebc <HAL_SPI_Init>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f989 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000017c 	.word	0x2000017c
 8000a8c:	40013000 	.word	0x40013000

08000a90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <MX_TIM16_Init+0x48>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000a9c:	224f      	movs	r2, #79	; 0x4f
 8000a9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <MX_TIM16_Init+0x4c>)
 8000aaa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <MX_TIM16_Init+0x44>)
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f002 fab3 	bl	800302c <HAL_TIM_Base_Init>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000aca:	f000 f963 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000268 	.word	0x20000268
 8000ad8:	40014400 	.word	0x40014400
 8000adc:	0000ffff 	.word	0x0000ffff

08000ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_USART1_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000aec:	2296      	movs	r2, #150	; 0x96
 8000aee:	0192      	lsls	r2, r2, #6
 8000af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <MX_USART1_UART_Init+0x58>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f002 fb8b 	bl	8003240 <HAL_UART_Init>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 f931 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000f4 	.word	0x200000f4
 8000b3c:	40013800 	.word	0x40013800

08000b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_USART2_UART_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b4c:	22e1      	movs	r2, #225	; 0xe1
 8000b4e:	0252      	lsls	r2, r2, #9
 8000b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <MX_USART2_UART_Init+0x58>)
 8000b84:	0018      	movs	r0, r3
 8000b86:	f002 fb5b 	bl	8003240 <HAL_UART_Init>
 8000b8a:	1e03      	subs	r3, r0, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 f901 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001e4 	.word	0x200001e4
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	240c      	movs	r4, #12
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	0018      	movs	r0, r3
 8000bac:	2314      	movs	r3, #20
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f003 fcd7 	bl	8004564 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	03c9      	lsls	r1, r1, #15
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	03db      	lsls	r3, r3, #15
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0289      	lsls	r1, r1, #10
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	029b      	lsls	r3, r3, #10
 8000be8:	4013      	ands	r3, r2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bf0:	695a      	ldr	r2, [r3, #20]
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	02c9      	lsls	r1, r1, #11
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_GPIO_Init+0xe0>)
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	02db      	lsls	r3, r3, #11
 8000c04:	4013      	ands	r3, r2
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	33ff      	adds	r3, #255	; 0xff
 8000c0e:	0019      	movs	r1, r3
 8000c10:	2390      	movs	r3, #144	; 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2200      	movs	r2, #0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fde8 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_GPIO_Init+0xe4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2108      	movs	r1, #8
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fde2 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	32ff      	adds	r2, #255	; 0xff
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	193a      	adds	r2, r7, r4
 8000c44:	2390      	movs	r3, #144	; 0x90
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fc66 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c50:	0021      	movs	r1, r4
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2208      	movs	r2, #8
 8000c56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <MX_GPIO_Init+0xe4>)
 8000c6e:	0019      	movs	r1, r3
 8000c70:	0010      	movs	r0, r2
 8000c72:	f000 fc53 	bl	800151c <HAL_GPIO_Init>

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b009      	add	sp, #36	; 0x24
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000400 	.word	0x48000400

08000c88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// ONBOARD LED
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	005a      	lsls	r2, r3, #1
 8000c94:	2390      	movs	r3, #144	; 0x90
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fdc3 	bl	8001826 <HAL_GPIO_TogglePin>
	 /*HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	  HAL_Delay(500);*/
	  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 8000ca0:	4906      	ldr	r1, [pc, #24]	; (8000cbc <HAL_UART_RxCpltCallback+0x34>)
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_UART_RxCpltCallback+0x38>)
 8000ca4:	220e      	movs	r2, #14
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f002 fb1e 	bl	80032e8 <HAL_UART_Receive_IT>
 8000cac:	0003      	movs	r3, r0
 8000cae:	001a      	movs	r2, r3
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_UART_RxCpltCallback+0x3c>)
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000080 	.word	0x20000080
 8000cc0:	200000f4 	.word	0x200000f4
 8000cc4:	200000f0 	.word	0x200000f0

08000cc8 <checkKey>:

int checkKey(uint8_t arr1[],  uint8_t arr2[])
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < 30; i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	e00e      	b.n	8000cf6 <checkKey+0x2e>
	{
		if(arr1[i] != arr2[i])
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6839      	ldr	r1, [r7, #0]
 8000ce4:	18cb      	adds	r3, r1, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d001      	beq.n	8000cf0 <checkKey+0x28>
		{
			return 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e006      	b.n	8000cfe <checkKey+0x36>
	for(i = 0; i < 30; i++)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b1d      	cmp	r3, #29
 8000cfa:	dded      	ble.n	8000cd8 <checkKey+0x10>
		}
	}
	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <checkMovment>:

int checkMovment()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
	uint32_t xDiff = abs(refXAccValueWithOffset - finalXAccValueWithOffset);
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <checkMovment+0x74>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <checkMovment+0x78>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	17da      	asrs	r2, r3, #31
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	4053      	eors	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
	uint32_t yDiff = abs(refYAccValueWithOffset - finalYAccValueWithOffset);
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <checkMovment+0x7c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <checkMovment+0x80>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	17da      	asrs	r2, r3, #31
 8000d2c:	189b      	adds	r3, r3, r2
 8000d2e:	4053      	eors	r3, r2
 8000d30:	60bb      	str	r3, [r7, #8]
	uint32_t zDiff = abs(refZAccValueWithOffset - finalZAccValueWithOffset);
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <checkMovment+0x84>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <checkMovment+0x88>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	17da      	asrs	r2, r3, #31
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	4053      	eors	r3, r2
 8000d42:	607b      	str	r3, [r7, #4]

	refXAccValueWithOffset = finalXAccValueWithOffset;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <checkMovment+0x78>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <checkMovment+0x74>)
 8000d4a:	601a      	str	r2, [r3, #0]
	refYAccValueWithOffset = finalYAccValueWithOffset;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <checkMovment+0x80>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <checkMovment+0x7c>)
 8000d52:	601a      	str	r2, [r3, #0]
	refZAccValueWithOffset = finalZAccValueWithOffset;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <checkMovment+0x88>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <checkMovment+0x84>)
 8000d5a:	601a      	str	r2, [r3, #0]

	if(xDiff > 200 || yDiff > 200 || zDiff > 200){
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2bc8      	cmp	r3, #200	; 0xc8
 8000d60:	d805      	bhi.n	8000d6e <checkMovment+0x66>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2bc8      	cmp	r3, #200	; 0xc8
 8000d66:	d802      	bhi.n	8000d6e <checkMovment+0x66>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2bc8      	cmp	r3, #200	; 0xc8
 8000d6c:	d901      	bls.n	8000d72 <checkMovment+0x6a>
		return 1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <checkMovment+0x6c>
	}
	else{
		return 0;
 8000d72:	2300      	movs	r3, #0
	}
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b004      	add	sp, #16
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000070 	.word	0x20000070
 8000d80:	20000054 	.word	0x20000054
 8000d84:	20000074 	.word	0x20000074
 8000d88:	2000005c 	.word	0x2000005c
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	20000064 	.word	0x20000064

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x44>)
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_MspInit+0x44>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	619a      	str	r2, [r3, #24]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x44>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	2201      	movs	r2, #1
 8000db8:	4013      	ands	r3, r2
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	69da      	ldr	r2, [r3, #28]
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0549      	lsls	r1, r1, #21
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	61da      	str	r2, [r3, #28]
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_MspInit+0x44>)
 8000dce:	69da      	ldr	r2, [r3, #28]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	055b      	lsls	r3, r3, #21
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b08b      	sub	sp, #44	; 0x2c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	2414      	movs	r4, #20
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	0018      	movs	r0, r3
 8000df6:	2314      	movs	r3, #20
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f003 fbb2 	bl	8004564 <memset>
  if(hi2c->Instance==I2C1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <HAL_I2C_MspInit+0x90>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d131      	bne.n	8000e6e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_I2C_MspInit+0x94>)
 8000e0c:	695a      	ldr	r2, [r3, #20]
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_I2C_MspInit+0x94>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	03c9      	lsls	r1, r1, #15
 8000e14:	430a      	orrs	r2, r1
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_I2C_MspInit+0x94>)
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e26:	0021      	movs	r1, r4
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2212      	movs	r2, #18
 8000e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2201      	movs	r2, #1
 8000e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2201      	movs	r2, #1
 8000e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_I2C_MspInit+0x98>)
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	f000 fb65 	bl	800151c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_I2C_MspInit+0x94>)
 8000e54:	69da      	ldr	r2, [r3, #28]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_I2C_MspInit+0x94>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0389      	lsls	r1, r1, #14
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	61da      	str	r2, [r3, #28]
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_I2C_MspInit+0x94>)
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	039b      	lsls	r3, r3, #14
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b00b      	add	sp, #44	; 0x2c
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48001400 	.word	0x48001400

08000e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b08b      	sub	sp, #44	; 0x2c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	2414      	movs	r4, #20
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	0018      	movs	r0, r3
 8000e92:	2314      	movs	r3, #20
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f003 fb64 	bl	8004564 <memset>
  if(hspi->Instance==SPI1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_SPI_MspInit+0x90>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d132      	bne.n	8000f0c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_SPI_MspInit+0x94>)
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <HAL_SPI_MspInit+0x94>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0149      	lsls	r1, r1, #5
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	619a      	str	r2, [r3, #24]
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_SPI_MspInit+0x94>)
 8000eb6:	699a      	ldr	r2, [r3, #24]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	015b      	lsls	r3, r3, #5
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_SPI_MspInit+0x94>)
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_SPI_MspInit+0x94>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0289      	lsls	r1, r1, #10
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x94>)
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	029b      	lsls	r3, r3, #10
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ede:	0021      	movs	r1, r4
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	22e0      	movs	r2, #224	; 0xe0
 8000ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2202      	movs	r2, #2
 8000eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	187a      	adds	r2, r7, r1
 8000f00:	2390      	movs	r3, #144	; 0x90
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fb08 	bl	800151c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b00b      	add	sp, #44	; 0x2c
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x38>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0289      	lsls	r1, r1, #10
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	619a      	str	r2, [r3, #24]
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40014400 	.word	0x40014400
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b08d      	sub	sp, #52	; 0x34
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	241c      	movs	r4, #28
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	2314      	movs	r3, #20
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f003 faf8 	bl	8004564 <memset>
  if(huart->Instance==USART1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <HAL_UART_MspInit+0x114>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d13c      	bne.n	8000ff8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <HAL_UART_MspInit+0x118>)
 8000f80:	699a      	ldr	r2, [r3, #24]
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <HAL_UART_MspInit+0x118>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	01c9      	lsls	r1, r1, #7
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <HAL_UART_MspInit+0x118>)
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	01db      	lsls	r3, r3, #7
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_UART_MspInit+0x118>)
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_UART_MspInit+0x118>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	0289      	lsls	r1, r1, #10
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <HAL_UART_MspInit+0x118>)
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	029b      	lsls	r3, r3, #10
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	22c0      	movs	r2, #192	; 0xc0
 8000fba:	00d2      	lsls	r2, r2, #3
 8000fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	0021      	movs	r1, r4
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	187a      	adds	r2, r7, r1
 8000fda:	2390      	movs	r3, #144	; 0x90
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 fa9b 	bl	800151c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	201b      	movs	r0, #27
 8000fec:	f000 f9e6 	bl	80013bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff0:	201b      	movs	r0, #27
 8000ff2:	f000 f9f8 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff6:	e037      	b.n	8001068 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <HAL_UART_MspInit+0x11c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d132      	bne.n	8001068 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_UART_MspInit+0x118>)
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_UART_MspInit+0x118>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0289      	lsls	r1, r1, #10
 800100c:	430a      	orrs	r2, r1
 800100e:	61da      	str	r2, [r3, #28]
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_UART_MspInit+0x118>)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_UART_MspInit+0x118>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_UART_MspInit+0x118>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0289      	lsls	r1, r1, #10
 8001028:	430a      	orrs	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_UART_MspInit+0x118>)
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103a:	211c      	movs	r1, #28
 800103c:	187b      	adds	r3, r7, r1
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2202      	movs	r2, #2
 8001046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2203      	movs	r2, #3
 8001052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2201      	movs	r2, #1
 8001058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	187a      	adds	r2, r7, r1
 800105c:	2390      	movs	r3, #144	; 0x90
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	0011      	movs	r1, r2
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fa5a 	bl	800151c <HAL_GPIO_Init>
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b00d      	add	sp, #52	; 0x34
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	40013800 	.word	0x40013800
 8001074:	40021000 	.word	0x40021000
 8001078:	40004400 	.word	0x40004400

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f8a0 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <USART1_IRQHandler+0x14>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 f97a 	bl	80033ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	200000f4 	.word	0x200000f4

080010c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <LoopForever+0x6>)
    LDR R1, [R0]
 80010d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <LoopForever+0xa>)
    CMP R1, R2
 80010dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010de:	d105      	bne.n	80010ec <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <LoopForever+0x12>)
    STR R1, [R0]
 80010e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010e6:	4813      	ldr	r0, [pc, #76]	; (8001134 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80010e8:	4913      	ldr	r1, [pc, #76]	; (8001138 <LoopForever+0x1a>)
    STR R1, [R0]
 80010ea:	6001      	str	r1, [r0, #0]

080010ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <LoopForever+0x1e>)
  ldr r1, =_edata
 80010ee:	4914      	ldr	r1, [pc, #80]	; (8001140 <LoopForever+0x22>)
  ldr r2, =_sidata
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <LoopForever+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001104:	4c11      	ldr	r4, [pc, #68]	; (800114c <LoopForever+0x2e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001112:	f7ff ffd7 	bl	80010c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001116:	f003 fa01 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111a:	f7ff f881 	bl	8000220 <main>

0800111e <LoopForever>:

LoopForever:
    b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
  ldr   r0, =_estack
 8001120:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001124:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001128:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800112c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001130:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001134:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001138:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001144:	080046a8 	.word	0x080046a8
  ldr r2, =_sbss
 8001148:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800114c:	200002b8 	.word	0x200002b8

08001150 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_IRQHandler>
	...

08001154 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_Init+0x24>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_Init+0x24>)
 800115e:	2110      	movs	r1, #16
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f809 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116a:	f7ff fe19 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_InitTick+0x5c>)
 8001186:	681c      	ldr	r4, [r3, #0]
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_InitTick+0x60>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	0019      	movs	r1, r3
 800118e:	23fa      	movs	r3, #250	; 0xfa
 8001190:	0098      	lsls	r0, r3, #2
 8001192:	f7fe ffb9 	bl	8000108 <__udivsi3>
 8001196:	0003      	movs	r3, r0
 8001198:	0019      	movs	r1, r3
 800119a:	0020      	movs	r0, r4
 800119c:	f7fe ffb4 	bl	8000108 <__udivsi3>
 80011a0:	0003      	movs	r3, r0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f92f 	bl	8001406 <HAL_SYSTICK_Config>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e00f      	b.n	80011d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d80b      	bhi.n	80011ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	2301      	movs	r3, #1
 80011ba:	425b      	negs	r3, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f8fc 	bl	80013bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_InitTick+0x64>)
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b003      	add	sp, #12
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	20000020 	.word	0x20000020
 80011dc:	20000028 	.word	0x20000028
 80011e0:	20000024 	.word	0x20000024

080011e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x1c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	001a      	movs	r2, r3
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	18d2      	adds	r2, r2, r3
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_IncTick+0x20>)
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	20000028 	.word	0x20000028
 8001204:	200002b4 	.word	0x200002b4

08001208 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <HAL_GetTick+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	200002b4 	.word	0x200002b4

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff fff0 	bl	8001208 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	001a      	movs	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	189b      	adds	r3, r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	f7ff ffe0 	bl	8001208 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	20000028 	.word	0x20000028

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	0002      	movs	r2, r0
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b7f      	cmp	r3, #127	; 0x7f
 8001276:	d809      	bhi.n	800128c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	001a      	movs	r2, r3
 800127e:	231f      	movs	r3, #31
 8001280:	401a      	ands	r2, r3
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_EnableIRQ+0x30>)
 8001284:	2101      	movs	r1, #1
 8001286:	4091      	lsls	r1, r2
 8001288:	000a      	movs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
  }
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	0002      	movs	r2, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b7f      	cmp	r3, #127	; 0x7f
 80012ac:	d828      	bhi.n	8001300 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ae:	4a2f      	ldr	r2, [pc, #188]	; (800136c <__NVIC_SetPriority+0xd4>)
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	33c0      	adds	r3, #192	; 0xc0
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	589b      	ldr	r3, [r3, r2]
 80012be:	1dfa      	adds	r2, r7, #7
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	0011      	movs	r1, r2
 80012c4:	2203      	movs	r2, #3
 80012c6:	400a      	ands	r2, r1
 80012c8:	00d2      	lsls	r2, r2, #3
 80012ca:	21ff      	movs	r1, #255	; 0xff
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	43d2      	mvns	r2, r2
 80012d2:	401a      	ands	r2, r3
 80012d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	019b      	lsls	r3, r3, #6
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	401a      	ands	r2, r3
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0018      	movs	r0, r3
 80012e4:	2303      	movs	r3, #3
 80012e6:	4003      	ands	r3, r0
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <__NVIC_SetPriority+0xd4>)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	430a      	orrs	r2, r1
 80012f8:	33c0      	adds	r3, #192	; 0xc0
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012fe:	e031      	b.n	8001364 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <__NVIC_SetPriority+0xd8>)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	0019      	movs	r1, r3
 8001308:	230f      	movs	r3, #15
 800130a:	400b      	ands	r3, r1
 800130c:	3b08      	subs	r3, #8
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3306      	adds	r3, #6
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	3304      	adds	r3, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1dfa      	adds	r2, r7, #7
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	0011      	movs	r1, r2
 8001320:	2203      	movs	r2, #3
 8001322:	400a      	ands	r2, r1
 8001324:	00d2      	lsls	r2, r2, #3
 8001326:	21ff      	movs	r1, #255	; 0xff
 8001328:	4091      	lsls	r1, r2
 800132a:	000a      	movs	r2, r1
 800132c:	43d2      	mvns	r2, r2
 800132e:	401a      	ands	r2, r3
 8001330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	019b      	lsls	r3, r3, #6
 8001336:	22ff      	movs	r2, #255	; 0xff
 8001338:	401a      	ands	r2, r3
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	0018      	movs	r0, r3
 8001340:	2303      	movs	r3, #3
 8001342:	4003      	ands	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <__NVIC_SetPriority+0xd8>)
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	001c      	movs	r4, r3
 8001350:	230f      	movs	r3, #15
 8001352:	4023      	ands	r3, r4
 8001354:	3b08      	subs	r3, #8
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	430a      	orrs	r2, r1
 800135a:	3306      	adds	r3, #6
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	18c3      	adds	r3, r0, r3
 8001360:	3304      	adds	r3, #4
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b003      	add	sp, #12
 800136a:	bd90      	pop	{r4, r7, pc}
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	045b      	lsls	r3, r3, #17
 8001384:	429a      	cmp	r2, r3
 8001386:	d301      	bcc.n	800138c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001388:	2301      	movs	r3, #1
 800138a:	e010      	b.n	80013ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <SysTick_Config+0x44>)
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	3a01      	subs	r2, #1
 8001392:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001394:	2301      	movs	r3, #1
 8001396:	425b      	negs	r3, r3
 8001398:	2103      	movs	r1, #3
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff ff7c 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x44>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x44>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	210f      	movs	r1, #15
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	0011      	movs	r1, r2
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b004      	add	sp, #16
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	0002      	movs	r2, r0
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ff33 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff ffaf 	bl	8001374 <SysTick_Config>
 8001416:	0003      	movs	r3, r0
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2221      	movs	r2, #33	; 0x21
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d008      	beq.n	8001446 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2204      	movs	r2, #4
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2220      	movs	r2, #32
 800143e:	2100      	movs	r1, #0
 8001440:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e020      	b.n	8001488 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	210e      	movs	r1, #14
 8001452:	438a      	bics	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	438a      	bics	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146e:	2101      	movs	r1, #1
 8001470:	4091      	lsls	r1, r2
 8001472:	000a      	movs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2221      	movs	r2, #33	; 0x21
 800147a:	2101      	movs	r1, #1
 800147c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2220      	movs	r2, #32
 8001482:	2100      	movs	r1, #0
 8001484:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001498:	210f      	movs	r1, #15
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2221      	movs	r2, #33	; 0x21
 80014a4:	5c9b      	ldrb	r3, [r3, r2]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d006      	beq.n	80014ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2204      	movs	r2, #4
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e028      	b.n	800150c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	210e      	movs	r1, #14
 80014c6:	438a      	bics	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	438a      	bics	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e2:	2101      	movs	r1, #1
 80014e4:	4091      	lsls	r1, r2
 80014e6:	000a      	movs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2221      	movs	r2, #33	; 0x21
 80014ee:	2101      	movs	r1, #1
 80014f0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2220      	movs	r2, #32
 80014f6:	2100      	movs	r1, #0
 80014f8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	0010      	movs	r0, r2
 800150a:	4798      	blx	r3
    } 
  }
  return status;
 800150c:	230f      	movs	r3, #15
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152a:	e149      	b.n	80017c0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4091      	lsls	r1, r2
 8001536:	000a      	movs	r2, r1
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d100      	bne.n	8001544 <HAL_GPIO_Init+0x28>
 8001542:	e13a      	b.n	80017ba <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2203      	movs	r2, #3
 800154a:	4013      	ands	r3, r2
 800154c:	2b01      	cmp	r3, #1
 800154e:	d005      	beq.n	800155c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001558:	2b02      	cmp	r3, #2
 800155a:	d130      	bne.n	80015be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	43da      	mvns	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	409a      	lsls	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001592:	2201      	movs	r2, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	2201      	movs	r2, #1
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d017      	beq.n	80015fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	4013      	ands	r3, r2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d123      	bne.n	800164e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	58d3      	ldr	r3, [r2, r3]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2207      	movs	r2, #7
 8001618:	4013      	ands	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2107      	movs	r1, #7
 8001632:	400b      	ands	r3, r1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	401a      	ands	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	23c0      	movs	r3, #192	; 0xc0
 8001688:	029b      	lsls	r3, r3, #10
 800168a:	4013      	ands	r3, r2
 800168c:	d100      	bne.n	8001690 <HAL_GPIO_Init+0x174>
 800168e:	e094      	b.n	80017ba <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_GPIO_Init+0x2bc>)
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_GPIO_Init+0x2bc>)
 8001696:	2101      	movs	r1, #1
 8001698:	430a      	orrs	r2, r1
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <HAL_GPIO_Init+0x2bc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a8:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_GPIO_Init+0x2c0>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	589b      	ldr	r3, [r3, r2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	2390      	movs	r3, #144	; 0x90
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x1d6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a41      	ldr	r2, [pc, #260]	; (80017e0 <HAL_GPIO_Init+0x2c4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x1d2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a40      	ldr	r2, [pc, #256]	; (80017e4 <HAL_GPIO_Init+0x2c8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x1ce>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x1d8>
 80016ea:	2305      	movs	r3, #5
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x1d8>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x1d8>
 80016f2:	2300      	movs	r3, #0
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	2103      	movs	r1, #3
 80016f8:	400a      	ands	r2, r1
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_GPIO_Init+0x2c0>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43da      	mvns	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4013      	ands	r3, r2
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43da      	mvns	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	4013      	ands	r3, r2
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43da      	mvns	r2, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	035b      	lsls	r3, r3, #13
 800177e:	4013      	ands	r3, r2
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43da      	mvns	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	039b      	lsls	r3, r3, #14
 80017a8:	4013      	ands	r3, r2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	40da      	lsrs	r2, r3
 80017c8:	1e13      	subs	r3, r2, #0
 80017ca:	d000      	beq.n	80017ce <HAL_GPIO_Init+0x2b2>
 80017cc:	e6ae      	b.n	800152c <HAL_GPIO_Init+0x10>
  } 
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b006      	add	sp, #24
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48000800 	.word	0x48000800
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	0008      	movs	r0, r1
 80017f6:	0011      	movs	r1, r2
 80017f8:	1cbb      	adds	r3, r7, #2
 80017fa:	1c02      	adds	r2, r0, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	1c7b      	adds	r3, r7, #1
 8001800:	1c0a      	adds	r2, r1, #0
 8001802:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	1c7b      	adds	r3, r7, #1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180c:	1cbb      	adds	r3, r7, #2
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	000a      	movs	r2, r1
 8001830:	1cbb      	adds	r3, r7, #2
 8001832:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800183a:	1cbb      	adds	r3, r7, #2
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	041a      	lsls	r2, r3, #16
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	1cb9      	adds	r1, r7, #2
 800184a:	8809      	ldrh	r1, [r1, #0]
 800184c:	400b      	ands	r3, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e082      	b.n	8001974 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2241      	movs	r2, #65	; 0x41
 8001872:	5c9b      	ldrb	r3, [r3, r2]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d107      	bne.n	800188a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff faaf 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2241      	movs	r2, #65	; 0x41
 800188e:	2124      	movs	r1, #36	; 0x24
 8001890:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	438a      	bics	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4934      	ldr	r1, [pc, #208]	; (800197c <HAL_I2C_Init+0x120>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4931      	ldr	r1, [pc, #196]	; (8001980 <HAL_I2C_Init+0x124>)
 80018bc:	400a      	ands	r2, r1
 80018be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0209      	lsls	r1, r1, #8
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	e007      	b.n	80018ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2184      	movs	r1, #132	; 0x84
 80018e4:	0209      	lsls	r1, r1, #8
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d104      	bne.n	80018fc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	491f      	ldr	r1, [pc, #124]	; (8001984 <HAL_I2C_Init+0x128>)
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	491a      	ldr	r1, [pc, #104]	; (8001980 <HAL_I2C_Init+0x124>)
 8001918:	400a      	ands	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	431a      	orrs	r2, r3
 8001926:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69d9      	ldr	r1, [r3, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1a      	ldr	r2, [r3, #32]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2241      	movs	r2, #65	; 0x41
 8001960:	2120      	movs	r1, #32
 8001962:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2242      	movs	r2, #66	; 0x42
 800196e:	2100      	movs	r1, #0
 8001970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b002      	add	sp, #8
 800197a:	bd80      	pop	{r7, pc}
 800197c:	f0ffffff 	.word	0xf0ffffff
 8001980:	ffff7fff 	.word	0xffff7fff
 8001984:	02008000 	.word	0x02008000

08001988 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af02      	add	r7, sp, #8
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	0008      	movs	r0, r1
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	0019      	movs	r1, r3
 8001996:	230a      	movs	r3, #10
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	1c02      	adds	r2, r0, #0
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	2308      	movs	r3, #8
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	1c0a      	adds	r2, r1, #0
 80019a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2241      	movs	r2, #65	; 0x41
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d000      	beq.n	80019b4 <HAL_I2C_Master_Transmit+0x2c>
 80019b2:	e0e7      	b.n	8001b84 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	5c9b      	ldrb	r3, [r3, r2]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Master_Transmit+0x3a>
 80019be:	2302      	movs	r3, #2
 80019c0:	e0e1      	b.n	8001b86 <HAL_I2C_Master_Transmit+0x1fe>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ca:	f7ff fc1d 	bl	8001208 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	0219      	lsls	r1, r3, #8
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2319      	movs	r3, #25
 80019de:	2201      	movs	r2, #1
 80019e0:	f000 fa10 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 80019e4:	1e03      	subs	r3, r0, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0cc      	b.n	8001b86 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2241      	movs	r2, #65	; 0x41
 80019f0:	2121      	movs	r1, #33	; 0x21
 80019f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2242      	movs	r2, #66	; 0x42
 80019f8:	2110      	movs	r1, #16
 80019fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	18ba      	adds	r2, r7, r2
 8001a0e:	8812      	ldrh	r2, [r2, #0]
 8001a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2bff      	cmp	r3, #255	; 0xff
 8001a20:	d911      	bls.n	8001a46 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	22ff      	movs	r2, #255	; 0xff
 8001a26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	045c      	lsls	r4, r3, #17
 8001a32:	230a      	movs	r3, #10
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	8819      	ldrh	r1, [r3, #0]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <HAL_I2C_Master_Transmit+0x208>)
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	0023      	movs	r3, r4
 8001a40:	f000 fb80 	bl	8002144 <I2C_TransferConfig>
 8001a44:	e075      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049c      	lsls	r4, r3, #18
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	8819      	ldrh	r1, [r3, #0]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	4b4b      	ldr	r3, [pc, #300]	; (8001b90 <HAL_I2C_Master_Transmit+0x208>)
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	0023      	movs	r3, r4
 8001a68:	f000 fb6c 	bl	8002144 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a6c:	e061      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 fa04 	bl	8001e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e081      	b.n	8001b86 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03a      	beq.n	8001b32 <HAL_I2C_Master_Transmit+0x1aa>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d136      	bne.n	8001b32 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	0013      	movs	r3, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	f000 f997 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e053      	b.n	8001b86 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2bff      	cmp	r3, #255	; 0xff
 8001ae6:	d911      	bls.n	8001b0c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	22ff      	movs	r2, #255	; 0xff
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	045c      	lsls	r4, r3, #17
 8001af8:	230a      	movs	r3, #10
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	8819      	ldrh	r1, [r3, #0]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	0023      	movs	r3, r4
 8001b06:	f000 fb1d 	bl	8002144 <I2C_TransferConfig>
 8001b0a:	e012      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	049c      	lsls	r4, r3, #18
 8001b20:	230a      	movs	r3, #10
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	8819      	ldrh	r1, [r3, #0]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	0023      	movs	r3, r4
 8001b2e:	f000 fb09 	bl	8002144 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d198      	bne.n	8001a6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f9dc 	bl	8001f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b48:	1e03      	subs	r3, r0, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e01a      	b.n	8001b86 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2220      	movs	r2, #32
 8001b56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	490c      	ldr	r1, [pc, #48]	; (8001b94 <HAL_I2C_Master_Transmit+0x20c>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2241      	movs	r2, #65	; 0x41
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2242      	movs	r2, #66	; 0x42
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2240      	movs	r2, #64	; 0x40
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
  }
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b007      	add	sp, #28
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	80002000 	.word	0x80002000
 8001b94:	fe00e800 	.word	0xfe00e800

08001b98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	0008      	movs	r0, r1
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	1c02      	adds	r2, r0, #0
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	2308      	movs	r3, #8
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	1c0a      	adds	r2, r1, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2241      	movs	r2, #65	; 0x41
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d000      	beq.n	8001bc4 <HAL_I2C_Master_Receive+0x2c>
 8001bc2:	e0e8      	b.n	8001d96 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2240      	movs	r2, #64	; 0x40
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_I2C_Master_Receive+0x3a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e0e2      	b.n	8001d98 <HAL_I2C_Master_Receive+0x200>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bda:	f7ff fb15 	bl	8001208 <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	0219      	lsls	r1, r3, #8
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2319      	movs	r3, #25
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f000 f908 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0cd      	b.n	8001d98 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2241      	movs	r2, #65	; 0x41
 8001c00:	2122      	movs	r1, #34	; 0x22
 8001c02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2242      	movs	r2, #66	; 0x42
 8001c08:	2110      	movs	r1, #16
 8001c0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	18ba      	adds	r2, r7, r2
 8001c1e:	8812      	ldrh	r2, [r2, #0]
 8001c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d911      	bls.n	8001c56 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	22ff      	movs	r2, #255	; 0xff
 8001c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	045c      	lsls	r4, r3, #17
 8001c42:	230a      	movs	r3, #10
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	8819      	ldrh	r1, [r3, #0]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_I2C_Master_Receive+0x208>)
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	0023      	movs	r3, r4
 8001c50:	f000 fa78 	bl	8002144 <I2C_TransferConfig>
 8001c54:	e076      	b.n	8001d44 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	049c      	lsls	r4, r3, #18
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	8819      	ldrh	r1, [r3, #0]
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_I2C_Master_Receive+0x208>)
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	0023      	movs	r3, r4
 8001c78:	f000 fa64 	bl	8002144 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c7c:	e062      	b.n	8001d44 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 f977 	bl	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e082      	b.n	8001d98 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03a      	beq.n	8001d44 <HAL_I2C_Master_Receive+0x1ac>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d136      	bne.n	8001d44 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	0013      	movs	r3, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	f000 f88e 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	1e03      	subs	r3, r0, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e053      	b.n	8001d98 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2bff      	cmp	r3, #255	; 0xff
 8001cf8:	d911      	bls.n	8001d1e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	22ff      	movs	r2, #255	; 0xff
 8001cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	045c      	lsls	r4, r3, #17
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	8819      	ldrh	r1, [r3, #0]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	0023      	movs	r3, r4
 8001d18:	f000 fa14 	bl	8002144 <I2C_TransferConfig>
 8001d1c:	e012      	b.n	8001d44 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	049c      	lsls	r4, r3, #18
 8001d32:	230a      	movs	r3, #10
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	8819      	ldrh	r1, [r3, #0]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	0023      	movs	r3, r4
 8001d40:	f000 fa00 	bl	8002144 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d197      	bne.n	8001c7e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f000 f8d3 	bl	8001f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d5a:	1e03      	subs	r3, r0, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e01a      	b.n	8001d98 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2220      	movs	r2, #32
 8001d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	490b      	ldr	r1, [pc, #44]	; (8001da4 <HAL_I2C_Master_Receive+0x20c>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2241      	movs	r2, #65	; 0x41
 8001d7e:	2120      	movs	r1, #32
 8001d80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2242      	movs	r2, #66	; 0x42
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2240      	movs	r2, #64	; 0x40
 8001d8e:	2100      	movs	r1, #0
 8001d90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b007      	add	sp, #28
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	80002400 	.word	0x80002400
 8001da4:	fe00e800 	.word	0xfe00e800

08001da8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2241      	movs	r2, #65	; 0x41
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	b2db      	uxtb	r3, r3
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d103      	bne.n	8001dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d007      	beq.n	8001dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	619a      	str	r2, [r3, #24]
  }
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	1dfb      	adds	r3, r7, #7
 8001e12:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e14:	e021      	b.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	d01e      	beq.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1c:	f7ff f9f4 	bl	8001208 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d302      	bcc.n	8001e32 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d113      	bne.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	2220      	movs	r2, #32
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2241      	movs	r2, #65	; 0x41
 8001e42:	2120      	movs	r1, #32
 8001e44:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2242      	movs	r2, #66	; 0x42
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2240      	movs	r2, #64	; 0x40
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	4013      	ands	r3, r2
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	425a      	negs	r2, r3
 8001e6a:	4153      	adcs	r3, r2
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	001a      	movs	r2, r3
 8001e70:	1dfb      	adds	r3, r7, #7
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d0ce      	beq.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b004      	add	sp, #16
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e8e:	e02b      	b.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f8da 	bl	8002050 <I2C_IsAcknowledgeFailed>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e029      	b.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	d01e      	beq.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eaa:	f7ff f9ad 	bl	8001208 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d113      	bne.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2241      	movs	r2, #65	; 0x41
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2242      	movs	r2, #66	; 0x42
 8001ed8:	2100      	movs	r1, #0
 8001eda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d1cc      	bne.n	8001e90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f0c:	e028      	b.n	8001f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 f89b 	bl	8002050 <I2C_IsAcknowledgeFailed>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d001      	beq.n	8001f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e026      	b.n	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f22:	f7ff f971 	bl	8001208 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d113      	bne.n	8001f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2241      	movs	r2, #65	; 0x41
 8001f48:	2120      	movs	r1, #32
 8001f4a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2242      	movs	r2, #66	; 0x42
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2220      	movs	r2, #32
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d1cf      	bne.n	8001f0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f84:	e055      	b.n	8002032 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 f85f 	bl	8002050 <I2C_IsAcknowledgeFailed>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e053      	b.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d129      	bne.n	8001ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d105      	bne.n	8001fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e03f      	b.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	491d      	ldr	r1, [pc, #116]	; (800204c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2241      	movs	r2, #65	; 0x41
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2242      	movs	r2, #66	; 0x42
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2240      	movs	r2, #64	; 0x40
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e022      	b.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffc:	f7ff f904 	bl	8001208 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	429a      	cmp	r2, r3
 800200a:	d302      	bcc.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	2220      	movs	r2, #32
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2241      	movs	r2, #65	; 0x41
 8002022:	2120      	movs	r1, #32
 8002024:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e007      	b.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2204      	movs	r2, #4
 800203a:	4013      	ands	r3, r2
 800203c:	2b04      	cmp	r3, #4
 800203e:	d1a2      	bne.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	fe00e800 	.word	0xfe00e800

08002050 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2210      	movs	r2, #16
 8002064:	4013      	ands	r3, r2
 8002066:	2b10      	cmp	r3, #16
 8002068:	d164      	bne.n	8002134 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	049b      	lsls	r3, r3, #18
 8002074:	401a      	ands	r2, r3
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	049b      	lsls	r3, r3, #18
 800207a:	429a      	cmp	r2, r3
 800207c:	d02b      	beq.n	80020d6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	01c9      	lsls	r1, r1, #7
 800208c:	430a      	orrs	r2, r1
 800208e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002090:	e021      	b.n	80020d6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3301      	adds	r3, #1
 8002096:	d01e      	beq.n	80020d6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002098:	f7ff f8b6 	bl	8001208 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d302      	bcc.n	80020ae <I2C_IsAcknowledgeFailed+0x5e>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d113      	bne.n	80020d6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	2220      	movs	r2, #32
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2241      	movs	r2, #65	; 0x41
 80020be:	2120      	movs	r1, #32
 80020c0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2242      	movs	r2, #66	; 0x42
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e02f      	b.n	8002136 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2220      	movs	r2, #32
 80020de:	4013      	ands	r3, r2
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d1d6      	bne.n	8002092 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2210      	movs	r2, #16
 80020ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2220      	movs	r2, #32
 80020f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff fe62 	bl	8001dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <I2C_IsAcknowledgeFailed+0xf0>)
 8002108:	400a      	ands	r2, r1
 800210a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2204      	movs	r2, #4
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2241      	movs	r2, #65	; 0x41
 800211c:	2120      	movs	r1, #32
 800211e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2242      	movs	r2, #66	; 0x42
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b004      	add	sp, #16
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	fe00e800 	.word	0xfe00e800

08002144 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	0008      	movs	r0, r1
 800214e:	0011      	movs	r1, r2
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	240a      	movs	r4, #10
 8002154:	193b      	adds	r3, r7, r4
 8002156:	1c02      	adds	r2, r0, #0
 8002158:	801a      	strh	r2, [r3, #0]
 800215a:	2009      	movs	r0, #9
 800215c:	183b      	adds	r3, r7, r0
 800215e:	1c0a      	adds	r2, r1, #0
 8002160:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	0d51      	lsrs	r1, r2, #21
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	00d2      	lsls	r2, r2, #3
 8002170:	400a      	ands	r2, r1
 8002172:	490e      	ldr	r1, [pc, #56]	; (80021ac <I2C_TransferConfig+0x68>)
 8002174:	430a      	orrs	r2, r1
 8002176:	43d2      	mvns	r2, r2
 8002178:	401a      	ands	r2, r3
 800217a:	0011      	movs	r1, r2
 800217c:	193b      	adds	r3, r7, r4
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	059b      	lsls	r3, r3, #22
 8002182:	0d9a      	lsrs	r2, r3, #22
 8002184:	183b      	adds	r3, r7, r0
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	0418      	lsls	r0, r3, #16
 800218a:	23ff      	movs	r3, #255	; 0xff
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	4003      	ands	r3, r0
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b005      	add	sp, #20
 80021a8:	bd90      	pop	{r4, r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	03ff63ff 	.word	0x03ff63ff

080021b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2241      	movs	r2, #65	; 0x41
 80021be:	5c9b      	ldrb	r3, [r3, r2]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d138      	bne.n	8002238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	5c9b      	ldrb	r3, [r3, r2]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e032      	b.n	800223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2240      	movs	r2, #64	; 0x40
 80021d8:	2101      	movs	r1, #1
 80021da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2241      	movs	r2, #65	; 0x41
 80021e0:	2124      	movs	r1, #36	; 0x24
 80021e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	438a      	bics	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4911      	ldr	r1, [pc, #68]	; (8002244 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002200:	400a      	ands	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2241      	movs	r2, #65	; 0x41
 8002228:	2120      	movs	r1, #32
 800222a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2240      	movs	r2, #64	; 0x40
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	ffffefff 	.word	0xffffefff

08002248 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2241      	movs	r2, #65	; 0x41
 8002256:	5c9b      	ldrb	r3, [r3, r2]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b20      	cmp	r3, #32
 800225c:	d139      	bne.n	80022d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	5c9b      	ldrb	r3, [r3, r2]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002268:	2302      	movs	r3, #2
 800226a:	e033      	b.n	80022d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	2101      	movs	r1, #1
 8002272:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2241      	movs	r2, #65	; 0x41
 8002278:	2124      	movs	r1, #36	; 0x24
 800227a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2241      	movs	r2, #65	; 0x41
 80022c2:	2120      	movs	r1, #32
 80022c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022d2:	2302      	movs	r3, #2
  }
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	fffff0ff 	.word	0xfffff0ff

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f000 fb76 	bl	80029e0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	d100      	bne.n	8002300 <HAL_RCC_OscConfig+0x20>
 80022fe:	e08e      	b.n	800241e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002300:	4bc5      	ldr	r3, [pc, #788]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	220c      	movs	r2, #12
 8002306:	4013      	ands	r3, r2
 8002308:	2b04      	cmp	r3, #4
 800230a:	d00e      	beq.n	800232a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800230c:	4bc2      	ldr	r3, [pc, #776]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	220c      	movs	r2, #12
 8002312:	4013      	ands	r3, r2
 8002314:	2b08      	cmp	r3, #8
 8002316:	d117      	bne.n	8002348 <HAL_RCC_OscConfig+0x68>
 8002318:	4bbf      	ldr	r3, [pc, #764]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	23c0      	movs	r3, #192	; 0xc0
 800231e:	025b      	lsls	r3, r3, #9
 8002320:	401a      	ands	r2, r3
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	025b      	lsls	r3, r3, #9
 8002326:	429a      	cmp	r2, r3
 8002328:	d10e      	bne.n	8002348 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	4bbb      	ldr	r3, [pc, #748]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	029b      	lsls	r3, r3, #10
 8002332:	4013      	ands	r3, r2
 8002334:	d100      	bne.n	8002338 <HAL_RCC_OscConfig+0x58>
 8002336:	e071      	b.n	800241c <HAL_RCC_OscConfig+0x13c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d000      	beq.n	8002342 <HAL_RCC_OscConfig+0x62>
 8002340:	e06c      	b.n	800241c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f000 fb4c 	bl	80029e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x80>
 8002350:	4bb1      	ldr	r3, [pc, #708]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4bb0      	ldr	r3, [pc, #704]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	0249      	lsls	r1, r1, #9
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e02f      	b.n	80023c0 <HAL_RCC_OscConfig+0xe0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0xa2>
 8002368:	4bab      	ldr	r3, [pc, #684]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4baa      	ldr	r3, [pc, #680]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800236e:	49ab      	ldr	r1, [pc, #684]	; (800261c <HAL_RCC_OscConfig+0x33c>)
 8002370:	400a      	ands	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	4ba8      	ldr	r3, [pc, #672]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4ba7      	ldr	r3, [pc, #668]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800237a:	49a9      	ldr	r1, [pc, #676]	; (8002620 <HAL_RCC_OscConfig+0x340>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e01e      	b.n	80023c0 <HAL_RCC_OscConfig+0xe0>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d10e      	bne.n	80023a8 <HAL_RCC_OscConfig+0xc8>
 800238a:	4ba3      	ldr	r3, [pc, #652]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4ba2      	ldr	r3, [pc, #648]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	02c9      	lsls	r1, r1, #11
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b9f      	ldr	r3, [pc, #636]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b9e      	ldr	r3, [pc, #632]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	0249      	lsls	r1, r1, #9
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xe0>
 80023a8:	4b9b      	ldr	r3, [pc, #620]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b9a      	ldr	r3, [pc, #616]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80023ae:	499b      	ldr	r1, [pc, #620]	; (800261c <HAL_RCC_OscConfig+0x33c>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	4b98      	ldr	r3, [pc, #608]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b97      	ldr	r3, [pc, #604]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80023ba:	4999      	ldr	r1, [pc, #612]	; (8002620 <HAL_RCC_OscConfig+0x340>)
 80023bc:	400a      	ands	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d014      	beq.n	80023f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe ff1e 	bl	8001208 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d2:	f7fe ff19 	bl	8001208 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e2fd      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e4:	4b8c      	ldr	r3, [pc, #560]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0xf2>
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe ff09 	bl	8001208 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7fe ff04 	bl	8001208 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e2e8      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	4b82      	ldr	r3, [pc, #520]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	029b      	lsls	r3, r3, #10
 8002416:	4013      	ands	r3, r2
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x11c>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d100      	bne.n	800242a <HAL_RCC_OscConfig+0x14a>
 8002428:	e06c      	b.n	8002504 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800242a:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	220c      	movs	r2, #12
 8002430:	4013      	ands	r3, r2
 8002432:	d00e      	beq.n	8002452 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002434:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	220c      	movs	r2, #12
 800243a:	4013      	ands	r3, r2
 800243c:	2b08      	cmp	r3, #8
 800243e:	d11f      	bne.n	8002480 <HAL_RCC_OscConfig+0x1a0>
 8002440:	4b75      	ldr	r3, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	23c0      	movs	r3, #192	; 0xc0
 8002446:	025b      	lsls	r3, r3, #9
 8002448:	401a      	ands	r2, r3
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	429a      	cmp	r2, r3
 8002450:	d116      	bne.n	8002480 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	4b71      	ldr	r3, [pc, #452]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x188>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e2bb      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b6b      	ldr	r3, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	22f8      	movs	r2, #248	; 0xf8
 800246e:	4393      	bics	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00da      	lsls	r2, r3, #3
 8002478:	4b67      	ldr	r3, [pc, #412]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	e041      	b.n	8002504 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d024      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002488:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800248e:	2101      	movs	r1, #1
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe feb8 	bl	8001208 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe feb3 	bl	8001208 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e297      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d0f1      	beq.n	800249e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b57      	ldr	r3, [pc, #348]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22f8      	movs	r2, #248	; 0xf8
 80024c0:	4393      	bics	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	00da      	lsls	r2, r3, #3
 80024ca:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e018      	b.n	8002504 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b51      	ldr	r3, [pc, #324]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80024d8:	2101      	movs	r1, #1
 80024da:	438a      	bics	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fe93 	bl	8001208 <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fe8e 	bl	8001208 <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e272      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d1f1      	bne.n	80024e8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2208      	movs	r2, #8
 800250a:	4013      	ands	r3, r2
 800250c:	d036      	beq.n	800257c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d019      	beq.n	800254a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b40      	ldr	r3, [pc, #256]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800251c:	2101      	movs	r1, #1
 800251e:	430a      	orrs	r2, r1
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fe71 	bl	8001208 <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fe6c 	bl	8001208 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e250      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d0f1      	beq.n	800252c <HAL_RCC_OscConfig+0x24c>
 8002548:	e018      	b.n	800257c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800254c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002550:	2101      	movs	r1, #1
 8002552:	438a      	bics	r2, r1
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe fe57 	bl	8001208 <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fe52 	bl	8001208 <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e236      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2202      	movs	r2, #2
 8002578:	4013      	ands	r3, r2
 800257a:	d1f1      	bne.n	8002560 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2204      	movs	r2, #4
 8002582:	4013      	ands	r3, r2
 8002584:	d100      	bne.n	8002588 <HAL_RCC_OscConfig+0x2a8>
 8002586:	e0b5      	b.n	80026f4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002588:	201f      	movs	r0, #31
 800258a:	183b      	adds	r3, r7, r0
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	055b      	lsls	r3, r3, #21
 8002598:	4013      	ands	r3, r2
 800259a:	d110      	bne.n	80025be <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0549      	lsls	r1, r1, #21
 80025a6:	430a      	orrs	r2, r1
 80025a8:	61da      	str	r2, [r3, #28]
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	055b      	lsls	r3, r3, #21
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_OscConfig+0x344>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d11a      	bne.n	8002600 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_RCC_OscConfig+0x344>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_RCC_OscConfig+0x344>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0049      	lsls	r1, r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d8:	f7fe fe16 	bl	8001208 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7fe fe11 	bl	8001208 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b64      	cmp	r3, #100	; 0x64
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1f5      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_OscConfig+0x344>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10f      	bne.n	8002628 <HAL_RCC_OscConfig+0x348>
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800260a:	6a1a      	ldr	r2, [r3, #32]
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <HAL_RCC_OscConfig+0x338>)
 800260e:	2101      	movs	r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	621a      	str	r2, [r3, #32]
 8002614:	e036      	b.n	8002684 <HAL_RCC_OscConfig+0x3a4>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	40021000 	.word	0x40021000
 800261c:	fffeffff 	.word	0xfffeffff
 8002620:	fffbffff 	.word	0xfffbffff
 8002624:	40007000 	.word	0x40007000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x36a>
 8002630:	4bca      	ldr	r3, [pc, #808]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	4bc9      	ldr	r3, [pc, #804]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002636:	2101      	movs	r1, #1
 8002638:	438a      	bics	r2, r1
 800263a:	621a      	str	r2, [r3, #32]
 800263c:	4bc7      	ldr	r3, [pc, #796]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	4bc6      	ldr	r3, [pc, #792]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002642:	2104      	movs	r1, #4
 8002644:	438a      	bics	r2, r1
 8002646:	621a      	str	r2, [r3, #32]
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x3a4>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x38c>
 8002652:	4bc2      	ldr	r3, [pc, #776]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002654:	6a1a      	ldr	r2, [r3, #32]
 8002656:	4bc1      	ldr	r3, [pc, #772]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002658:	2104      	movs	r1, #4
 800265a:	430a      	orrs	r2, r1
 800265c:	621a      	str	r2, [r3, #32]
 800265e:	4bbf      	ldr	r3, [pc, #764]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	4bbe      	ldr	r3, [pc, #760]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002664:	2101      	movs	r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	621a      	str	r2, [r3, #32]
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0x3a4>
 800266c:	4bbb      	ldr	r3, [pc, #748]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	4bba      	ldr	r3, [pc, #744]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002672:	2101      	movs	r1, #1
 8002674:	438a      	bics	r2, r1
 8002676:	621a      	str	r2, [r3, #32]
 8002678:	4bb8      	ldr	r3, [pc, #736]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	4bb7      	ldr	r3, [pc, #732]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800267e:	2104      	movs	r1, #4
 8002680:	438a      	bics	r2, r1
 8002682:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d014      	beq.n	80026b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7fe fdbc 	bl	8001208 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	e009      	b.n	80026aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe fdb7 	bl	8001208 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	4aaf      	ldr	r2, [pc, #700]	; (8002960 <HAL_RCC_OscConfig+0x680>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e19a      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	4bac      	ldr	r3, [pc, #688]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x3b6>
 80026b4:	e013      	b.n	80026de <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fda7 	bl	8001208 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026be:	e009      	b.n	80026d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fda2 	bl	8001208 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4aa5      	ldr	r2, [pc, #660]	; (8002960 <HAL_RCC_OscConfig+0x680>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e185      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d4:	4ba1      	ldr	r3, [pc, #644]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	2202      	movs	r2, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026de:	231f      	movs	r3, #31
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b9c      	ldr	r3, [pc, #624]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	4b9b      	ldr	r3, [pc, #620]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80026ee:	499d      	ldr	r1, [pc, #628]	; (8002964 <HAL_RCC_OscConfig+0x684>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2210      	movs	r2, #16
 80026fa:	4013      	ands	r3, r2
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12a      	bne.n	800275c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002706:	4b95      	ldr	r3, [pc, #596]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270a:	4b94      	ldr	r3, [pc, #592]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800270c:	2104      	movs	r1, #4
 800270e:	430a      	orrs	r2, r1
 8002710:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002712:	4b92      	ldr	r3, [pc, #584]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002716:	4b91      	ldr	r3, [pc, #580]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7fe fd73 	bl	8001208 <HAL_GetTick>
 8002722:	0003      	movs	r3, r0
 8002724:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002728:	f7fe fd6e 	bl	8001208 <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e152      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800273a:	4b88      	ldr	r3, [pc, #544]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	2202      	movs	r2, #2
 8002740:	4013      	ands	r3, r2
 8002742:	d0f1      	beq.n	8002728 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002744:	4b85      	ldr	r3, [pc, #532]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	22f8      	movs	r2, #248	; 0xf8
 800274a:	4393      	bics	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	00da      	lsls	r2, r3, #3
 8002754:	4b81      	ldr	r3, [pc, #516]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002756:	430a      	orrs	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
 800275a:	e034      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	3305      	adds	r3, #5
 8002762:	d111      	bne.n	8002788 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002764:	4b7d      	ldr	r3, [pc, #500]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002768:	4b7c      	ldr	r3, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800276a:	2104      	movs	r1, #4
 800276c:	438a      	bics	r2, r1
 800276e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002770:	4b7a      	ldr	r3, [pc, #488]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	22f8      	movs	r2, #248	; 0xf8
 8002776:	4393      	bics	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	00da      	lsls	r2, r3, #3
 8002780:	4b76      	ldr	r3, [pc, #472]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002782:	430a      	orrs	r2, r1
 8002784:	635a      	str	r2, [r3, #52]	; 0x34
 8002786:	e01e      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002788:	4b74      	ldr	r3, [pc, #464]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800278a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278c:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800278e:	2104      	movs	r1, #4
 8002790:	430a      	orrs	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002794:	4b71      	ldr	r3, [pc, #452]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002798:	4b70      	ldr	r3, [pc, #448]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800279a:	2101      	movs	r1, #1
 800279c:	438a      	bics	r2, r1
 800279e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe fd32 	bl	8001208 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027aa:	f7fe fd2d 	bl	8001208 <HAL_GetTick>
 80027ae:	0002      	movs	r2, r0
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e111      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027bc:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d1f1      	bne.n	80027aa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2220      	movs	r2, #32
 80027cc:	4013      	ands	r3, r2
 80027ce:	d05c      	beq.n	800288a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027d0:	4b62      	ldr	r3, [pc, #392]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	220c      	movs	r2, #12
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d00e      	beq.n	80027fa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027dc:	4b5f      	ldr	r3, [pc, #380]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	220c      	movs	r2, #12
 80027e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d114      	bne.n	8002812 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027e8:	4b5c      	ldr	r3, [pc, #368]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	23c0      	movs	r3, #192	; 0xc0
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	401a      	ands	r2, r3
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10b      	bne.n	8002812 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80027fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	025b      	lsls	r3, r3, #9
 8002802:	4013      	ands	r3, r2
 8002804:	d040      	beq.n	8002888 <HAL_RCC_OscConfig+0x5a8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d03c      	beq.n	8002888 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0e6      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01b      	beq.n	8002852 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800281a:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800281c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281e:	4b4f      	ldr	r3, [pc, #316]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	0249      	lsls	r1, r1, #9
 8002824:	430a      	orrs	r2, r1
 8002826:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fcee 	bl	8001208 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002832:	f7fe fce9 	bl	8001208 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0cd      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002844:	4b45      	ldr	r3, [pc, #276]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	4013      	ands	r3, r2
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x552>
 8002850:	e01b      	b.n	800288a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002858:	4943      	ldr	r1, [pc, #268]	; (8002968 <HAL_RCC_OscConfig+0x688>)
 800285a:	400a      	ands	r2, r1
 800285c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fcd3 	bl	8001208 <HAL_GetTick>
 8002862:	0003      	movs	r3, r0
 8002864:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002868:	f7fe fcce 	bl	8001208 <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0b2      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800287c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	025b      	lsls	r3, r3, #9
 8002882:	4013      	ands	r3, r2
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x588>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002888:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d100      	bne.n	8002894 <HAL_RCC_OscConfig+0x5b4>
 8002892:	e0a4      	b.n	80029de <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	220c      	movs	r2, #12
 800289a:	4013      	ands	r3, r2
 800289c:	2b08      	cmp	r3, #8
 800289e:	d100      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5c2>
 80028a0:	e078      	b.n	8002994 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d14c      	bne.n	8002944 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80028b0:	492e      	ldr	r1, [pc, #184]	; (800296c <HAL_RCC_OscConfig+0x68c>)
 80028b2:	400a      	ands	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe fca7 	bl	8001208 <HAL_GetTick>
 80028ba:	0003      	movs	r3, r0
 80028bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fca2 	bl	8001208 <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e086      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	049b      	lsls	r3, r3, #18
 80028da:	4013      	ands	r3, r2
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	220f      	movs	r2, #15
 80028e4:	4393      	bics	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_RCC_OscConfig+0x690>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	431a      	orrs	r2, r3
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	0449      	lsls	r1, r1, #17
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fc75 	bl	8001208 <HAL_GetTick>
 800291e:	0003      	movs	r3, r0
 8002920:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe fc70 	bl	8001208 <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e054      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	049b      	lsls	r3, r3, #18
 800293e:	4013      	ands	r3, r2
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x644>
 8002942:	e04c      	b.n	80029de <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <HAL_RCC_OscConfig+0x67c>)
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <HAL_RCC_OscConfig+0x68c>)
 800294c:	400a      	ands	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fc5a 	bl	8001208 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x6a6>
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	40021000 	.word	0x40021000
 8002960:	00001388 	.word	0x00001388
 8002964:	efffffff 	.word	0xefffffff
 8002968:	fffeffff 	.word	0xfffeffff
 800296c:	feffffff 	.word	0xfeffffff
 8002970:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fc48 	bl	8001208 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e02c      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_RCC_OscConfig+0x708>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	049b      	lsls	r3, r3, #18
 800298e:	4013      	ands	r3, r2
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x694>
 8002992:	e024      	b.n	80029de <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e01f      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_RCC_OscConfig+0x708>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_OscConfig+0x708>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	23c0      	movs	r3, #192	; 0xc0
 80029b0:	025b      	lsls	r3, r3, #9
 80029b2:	401a      	ands	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d10e      	bne.n	80029da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	220f      	movs	r2, #15
 80029c0:	401a      	ands	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	23f0      	movs	r3, #240	; 0xf0
 80029ce:	039b      	lsls	r3, r3, #14
 80029d0:	401a      	ands	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b008      	add	sp, #32
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0bf      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d911      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2201      	movs	r2, #1
 8002a14:	4393      	bics	r3, r2
 8002a16:	0019      	movs	r1, r3
 8002a18:	4b5b      	ldr	r3, [pc, #364]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2201      	movs	r2, #1
 8002a26:	4013      	ands	r3, r2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0a6      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d015      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2204      	movs	r2, #4
 8002a42:	4013      	ands	r3, r2
 8002a44:	d006      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002a4c:	21e0      	movs	r1, #224	; 0xe0
 8002a4e:	00c9      	lsls	r1, r1, #3
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	22f0      	movs	r2, #240	; 0xf0
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d04c      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	029b      	lsls	r3, r3, #10
 8002a82:	4013      	ands	r3, r2
 8002a84:	d120      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07a      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	049b      	lsls	r3, r3, #18
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d114      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06e      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002aaa:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	025b      	lsls	r3, r3, #9
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e062      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e05b      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2203      	movs	r2, #3
 8002ace:	4393      	bics	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fb94 	bl	8001208 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae6:	f7fe fb8f 	bl	8001208 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_RCC_ClockConfig+0x1a4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e042      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	220c      	movs	r2, #12
 8002b00:	401a      	ands	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1ec      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d211      	bcs.n	8002b3e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4393      	bics	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x19c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e020      	b.n	8002b80 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2204      	movs	r2, #4
 8002b44:	4013      	ands	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <HAL_RCC_ClockConfig+0x1a8>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b5c:	f000 f820 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b60:	0001      	movs	r1, r0
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1a0>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	220f      	movs	r2, #15
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x1ac>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	000a      	movs	r2, r1
 8002b72:	40da      	lsrs	r2, r3
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002b76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe faff 	bl	800117c <HAL_InitTick>
  
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	00001388 	.word	0x00001388
 8002b94:	fffff8ff 	.word	0xfffff8ff
 8002b98:	08004688 	.word	0x08004688
 8002b9c:	20000020 	.word	0x20000020

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b08f      	sub	sp, #60	; 0x3c
 8002ba4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002ba6:	2314      	movs	r3, #20
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	4a38      	ldr	r2, [pc, #224]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xec>)
 8002bac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bae:	c313      	stmia	r3!, {r0, r1, r4}
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002bb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bba:	c313      	stmia	r3!, {r0, r1, r4}
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc8:	2300      	movs	r3, #0
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	220c      	movs	r2, #12
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d047      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0xd4>
 8002be4:	d849      	bhi.n	8002c7a <HAL_RCC_GetSysClockFreq+0xda>
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x50>
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x56>
 8002bee:	e044      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bf4:	e044      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	0c9b      	lsrs	r3, r3, #18
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2214      	movs	r2, #20
 8002c00:	18ba      	adds	r2, r7, r2
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	1d3a      	adds	r2, r7, #4
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	025b      	lsls	r3, r3, #9
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c26:	481c      	ldr	r0, [pc, #112]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c28:	f7fd fa6e 	bl	8000108 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	001a      	movs	r2, r3
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	4353      	muls	r3, r2
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
 8002c36:	e01a      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3a:	23c0      	movs	r3, #192	; 0xc0
 8002c3c:	025b      	lsls	r3, r3, #9
 8002c3e:	401a      	ands	r2, r3
 8002c40:	23c0      	movs	r3, #192	; 0xc0
 8002c42:	025b      	lsls	r3, r3, #9
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d109      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c4a:	4814      	ldr	r0, [pc, #80]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c4c:	f7fd fa5c 	bl	8000108 <__udivsi3>
 8002c50:	0003      	movs	r3, r0
 8002c52:	001a      	movs	r2, r3
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	4353      	muls	r3, r2
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c5e:	480e      	ldr	r0, [pc, #56]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	001a      	movs	r2, r3
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	4353      	muls	r3, r2
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c72:	e005      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c78:	e002      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b00f      	add	sp, #60	; 0x3c
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	08004668 	.word	0x08004668
 8002c90:	08004678 	.word	0x08004678
 8002c94:	40021000 	.word	0x40021000
 8002c98:	007a1200 	.word	0x007a1200
 8002c9c:	02dc6c00 	.word	0x02dc6c00

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000020 	.word	0x20000020

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002cb8:	f7ff fff2 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cbc:	0001      	movs	r1, r0
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	40d9      	lsrs	r1, r3
 8002cce:	000b      	movs	r3, r1
}    
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08004698 	.word	0x08004698

08002ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	025b      	lsls	r3, r3, #9
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cfc:	e08e      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2017      	movs	r0, #23
 8002d00:	183b      	adds	r3, r7, r0
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	055b      	lsls	r3, r3, #21
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d110      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	0549      	lsls	r1, r1, #21
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	61da      	str	r2, [r3, #28]
 8002d20:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	055b      	lsls	r3, r3, #21
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d11a      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	0049      	lsls	r1, r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fa5b 	bl	8001208 <HAL_GetTick>
 8002d52:	0003      	movs	r3, r0
 8002d54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	e008      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fe fa56 	bl	8001208 <HAL_GetTick>
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e097      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	23c0      	movs	r3, #192	; 0xc0
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d034      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	23c0      	movs	r3, #192	; 0xc0
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d02c      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d98:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a43      	ldr	r2, [pc, #268]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002da2:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0249      	lsls	r1, r1, #9
 8002dac:	430a      	orrs	r2, r1
 8002dae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db0:	4b3c      	ldr	r3, [pc, #240]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db6:	493e      	ldr	r1, [pc, #248]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fa1d 	bl	8001208 <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	e009      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fa18 	bl	8001208 <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	4a35      	ldr	r2, [pc, #212]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e058      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df2:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4a2d      	ldr	r2, [pc, #180]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e06:	2317      	movs	r3, #23
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e16:	4928      	ldr	r1, [pc, #160]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e18:	400a      	ands	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	4393      	bics	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e36:	430a      	orrs	r2, r1
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	4013      	ands	r3, r2
 8002e42:	d009      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	2210      	movs	r2, #16
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e54:	430a      	orrs	r2, r1
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	029b      	lsls	r3, r3, #10
 8002e60:	4013      	ands	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e74:	430a      	orrs	r2, r1
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4013      	ands	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b006      	add	sp, #24
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	fffffcff 	.word	0xfffffcff
 8002eb0:	fffeffff 	.word	0xfffeffff
 8002eb4:	00001388 	.word	0x00001388
 8002eb8:	efffffff 	.word	0xefffffff

08002ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0a8      	b.n	8003020 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	2382      	movs	r3, #130	; 0x82
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d009      	beq.n	8002ef6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
 8002ee8:	e005      	b.n	8002ef6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	225d      	movs	r2, #93	; 0x5d
 8002f00:	5c9b      	ldrb	r3, [r3, r2]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	225c      	movs	r2, #92	; 0x5c
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7fd ffb6 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	225d      	movs	r2, #93	; 0x5d
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2140      	movs	r1, #64	; 0x40
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	23e0      	movs	r3, #224	; 0xe0
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d902      	bls.n	8002f42 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e002      	b.n	8002f48 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	015b      	lsls	r3, r3, #5
 8002f46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	23f0      	movs	r3, #240	; 0xf0
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d008      	beq.n	8002f66 <HAL_SPI_Init+0xaa>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	23e0      	movs	r3, #224	; 0xe0
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d002      	beq.n	8002f66 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	2382      	movs	r3, #130	; 0x82
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	2384      	movs	r3, #132	; 0x84
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	400b      	ands	r3, r1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2102      	movs	r1, #2
 8002f82:	400b      	ands	r3, r1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6999      	ldr	r1, [r3, #24]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	400b      	ands	r3, r1
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2138      	movs	r1, #56	; 0x38
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	400b      	ands	r3, r1
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	0011      	movs	r1, r2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	401a      	ands	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	2204      	movs	r2, #4
 8002fcc:	401a      	ands	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2110      	movs	r1, #16
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	2108      	movs	r1, #8
 8002fde:	400b      	ands	r3, r1
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	23f0      	movs	r3, #240	; 0xf0
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	400b      	ands	r3, r1
 8002fec:	431a      	orrs	r2, r3
 8002fee:	0011      	movs	r1, r2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	015b      	lsls	r3, r3, #5
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4907      	ldr	r1, [pc, #28]	; (8003028 <HAL_SPI_Init+0x16c>)
 800300c:	400a      	ands	r2, r1
 800300e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	225d      	movs	r2, #93	; 0x5d
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b004      	add	sp, #16
 8003026:	bd80      	pop	{r7, pc}
 8003028:	fffff7ff 	.word	0xfffff7ff

0800302c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e042      	b.n	80030c4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223d      	movs	r2, #61	; 0x3d
 8003042:	5c9b      	ldrb	r3, [r3, r2]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223c      	movs	r2, #60	; 0x3c
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f7fd ff61 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	223d      	movs	r2, #61	; 0x3d
 800305e:	2102      	movs	r1, #2
 8003060:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f000 f871 	bl	8003154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2246      	movs	r2, #70	; 0x46
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	223e      	movs	r2, #62	; 0x3e
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	223f      	movs	r2, #63	; 0x3f
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2240      	movs	r2, #64	; 0x40
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2241      	movs	r2, #65	; 0x41
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2242      	movs	r2, #66	; 0x42
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2243      	movs	r2, #67	; 0x43
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2244      	movs	r2, #68	; 0x44
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2245      	movs	r2, #69	; 0x45
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223d      	movs	r2, #61	; 0x3d
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	223d      	movs	r2, #61	; 0x3d
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d001      	beq.n	80030e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e02e      	b.n	8003142 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	223d      	movs	r2, #61	; 0x3d
 80030e8:	2102      	movs	r1, #2
 80030ea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_TIM_Base_Start+0x80>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00a      	beq.n	800310c <HAL_TIM_Base_Start+0x40>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	05db      	lsls	r3, r3, #23
 80030fe:	429a      	cmp	r2, r3
 8003100:	d004      	beq.n	800310c <HAL_TIM_Base_Start+0x40>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_TIM_Base_Start+0x84>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d111      	bne.n	8003130 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2207      	movs	r2, #7
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d010      	beq.n	8003140 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312e:	e007      	b.n	8003140 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2101      	movs	r1, #1
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400

08003154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <TIM_Base_SetConfig+0xd4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d008      	beq.n	800317e <TIM_Base_SetConfig+0x2a>
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	429a      	cmp	r2, r3
 8003174:	d003      	beq.n	800317e <TIM_Base_SetConfig+0x2a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2c      	ldr	r2, [pc, #176]	; (800322c <TIM_Base_SetConfig+0xd8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2270      	movs	r2, #112	; 0x70
 8003182:	4393      	bics	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a25      	ldr	r2, [pc, #148]	; (8003228 <TIM_Base_SetConfig+0xd4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d014      	beq.n	80031c2 <TIM_Base_SetConfig+0x6e>
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	429a      	cmp	r2, r3
 80031a0:	d00f      	beq.n	80031c2 <TIM_Base_SetConfig+0x6e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a21      	ldr	r2, [pc, #132]	; (800322c <TIM_Base_SetConfig+0xd8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_Base_SetConfig+0x6e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <TIM_Base_SetConfig+0xdc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <TIM_Base_SetConfig+0x6e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <TIM_Base_SetConfig+0xe0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_Base_SetConfig+0x6e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <TIM_Base_SetConfig+0xe4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <TIM_Base_SetConfig+0xe8>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	4393      	bics	r3, r2
 80031da:	001a      	movs	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <TIM_Base_SetConfig+0xd4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <TIM_Base_SetConfig+0xbe>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <TIM_Base_SetConfig+0xe0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_Base_SetConfig+0xbe>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <TIM_Base_SetConfig+0xe4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d103      	bne.n	800321a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	615a      	str	r2, [r3, #20]
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b004      	add	sp, #16
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40002000 	.word	0x40002000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800
 800323c:	fffffcff 	.word	0xfffffcff

08003240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e044      	b.n	80032dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2274      	movs	r2, #116	; 0x74
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f7fd fe79 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2224      	movs	r2, #36	; 0x24
 800326e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	438a      	bics	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fb86 	bl	8003994 <UART_SetConfig>
 8003288:	0003      	movs	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e024      	b.n	80032dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f000 fcb9 	bl	8003c14 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	490d      	ldr	r1, [pc, #52]	; (80032e4 <HAL_UART_Init+0xa4>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	212a      	movs	r1, #42	; 0x2a
 80032be:	438a      	bics	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 fd51 	bl	8003d7c <UART_CheckIdleState>
 80032da:	0003      	movs	r3, r0
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	ffffb7ff 	.word	0xffffb7ff

080032e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	1dbb      	adds	r3, r7, #6
 80032f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d150      	bne.n	80033a0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_UART_Receive_IT+0x24>
 8003304:	1dbb      	adds	r3, r7, #6
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e048      	b.n	80033a2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	015b      	lsls	r3, r3, #5
 8003318:	429a      	cmp	r2, r3
 800331a:	d109      	bne.n	8003330 <HAL_UART_Receive_IT+0x48>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2201      	movs	r2, #1
 8003328:	4013      	ands	r3, r2
 800332a:	d001      	beq.n	8003330 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e038      	b.n	80033a2 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2274      	movs	r2, #116	; 0x74
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_UART_Receive_IT+0x56>
 800333a:	2302      	movs	r3, #2
 800333c:	e031      	b.n	80033a2 <HAL_UART_Receive_IT+0xba>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2274      	movs	r2, #116	; 0x74
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	4013      	ands	r3, r2
 8003358:	d019      	beq.n	800338e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335a:	f3ef 8310 	mrs	r3, PRIMASK
 800335e:	613b      	str	r3, [r7, #16]
  return(result);
 8003360:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	2301      	movs	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f383 8810 	msr	PRIMASK, r3
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	04c9      	lsls	r1, r1, #19
 800337e:	430a      	orrs	r2, r1
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800338e:	1dbb      	adds	r3, r7, #6
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 fdfc 	bl	8003f94 <UART_Start_Receive_IT>
 800339c:	0003      	movs	r3, r0
 800339e:	e000      	b.n	80033a2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b008      	add	sp, #32
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b0ab      	sub	sp, #172	; 0xac
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	22a4      	movs	r2, #164	; 0xa4
 80033bc:	18b9      	adds	r1, r7, r2
 80033be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	20a0      	movs	r0, #160	; 0xa0
 80033c8:	1839      	adds	r1, r7, r0
 80033ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	219c      	movs	r1, #156	; 0x9c
 80033d4:	1879      	adds	r1, r7, r1
 80033d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033d8:	0011      	movs	r1, r2
 80033da:	18bb      	adds	r3, r7, r2
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a99      	ldr	r2, [pc, #612]	; (8003644 <HAL_UART_IRQHandler+0x298>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	2298      	movs	r2, #152	; 0x98
 80033e4:	18bc      	adds	r4, r7, r2
 80033e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80033e8:	18bb      	adds	r3, r7, r2
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d114      	bne.n	800341a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2220      	movs	r2, #32
 80033f6:	4013      	ands	r3, r2
 80033f8:	d00f      	beq.n	800341a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033fa:	183b      	adds	r3, r7, r0
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2220      	movs	r2, #32
 8003400:	4013      	ands	r3, r2
 8003402:	d00a      	beq.n	800341a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003408:	2b00      	cmp	r3, #0
 800340a:	d100      	bne.n	800340e <HAL_UART_IRQHandler+0x62>
 800340c:	e296      	b.n	800393c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	0010      	movs	r0, r2
 8003416:	4798      	blx	r3
      }
      return;
 8003418:	e290      	b.n	800393c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800341a:	2398      	movs	r3, #152	; 0x98
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d100      	bne.n	8003426 <HAL_UART_IRQHandler+0x7a>
 8003424:	e114      	b.n	8003650 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003426:	239c      	movs	r3, #156	; 0x9c
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d106      	bne.n	8003440 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003432:	23a0      	movs	r3, #160	; 0xa0
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a83      	ldr	r2, [pc, #524]	; (8003648 <HAL_UART_IRQHandler+0x29c>)
 800343a:	4013      	ands	r3, r2
 800343c:	d100      	bne.n	8003440 <HAL_UART_IRQHandler+0x94>
 800343e:	e107      	b.n	8003650 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003440:	23a4      	movs	r3, #164	; 0xa4
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d012      	beq.n	8003472 <HAL_UART_IRQHandler+0xc6>
 800344c:	23a0      	movs	r3, #160	; 0xa0
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4013      	ands	r3, r2
 8003458:	d00b      	beq.n	8003472 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	589b      	ldr	r3, [r3, r2]
 8003468:	2201      	movs	r2, #1
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003472:	23a4      	movs	r3, #164	; 0xa4
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d011      	beq.n	80034a2 <HAL_UART_IRQHandler+0xf6>
 800347e:	239c      	movs	r3, #156	; 0x9c
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	4013      	ands	r3, r2
 8003488:	d00b      	beq.n	80034a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2202      	movs	r2, #2
 8003490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	589b      	ldr	r3, [r3, r2]
 8003498:	2204      	movs	r2, #4
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a2:	23a4      	movs	r3, #164	; 0xa4
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2204      	movs	r2, #4
 80034aa:	4013      	ands	r3, r2
 80034ac:	d011      	beq.n	80034d2 <HAL_UART_IRQHandler+0x126>
 80034ae:	239c      	movs	r3, #156	; 0x9c
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2204      	movs	r2, #4
 80034c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	589b      	ldr	r3, [r3, r2]
 80034c8:	2202      	movs	r2, #2
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034d2:	23a4      	movs	r3, #164	; 0xa4
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2208      	movs	r2, #8
 80034da:	4013      	ands	r3, r2
 80034dc:	d017      	beq.n	800350e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034de:	23a0      	movs	r3, #160	; 0xa0
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2220      	movs	r2, #32
 80034e6:	4013      	ands	r3, r2
 80034e8:	d105      	bne.n	80034f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034ea:	239c      	movs	r3, #156	; 0x9c
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034f4:	d00b      	beq.n	800350e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2208      	movs	r2, #8
 80034fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	589b      	ldr	r3, [r3, r2]
 8003504:	2208      	movs	r2, #8
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800350e:	23a4      	movs	r3, #164	; 0xa4
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	4013      	ands	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_UART_IRQHandler+0x198>
 800351c:	23a0      	movs	r3, #160	; 0xa0
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	04db      	lsls	r3, r3, #19
 8003526:	4013      	ands	r3, r2
 8003528:	d00c      	beq.n	8003544 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	589b      	ldr	r3, [r3, r2]
 800353a:	2220      	movs	r2, #32
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	589b      	ldr	r3, [r3, r2]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d100      	bne.n	8003550 <HAL_UART_IRQHandler+0x1a4>
 800354e:	e1f7      	b.n	8003940 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003550:	23a4      	movs	r3, #164	; 0xa4
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2220      	movs	r2, #32
 8003558:	4013      	ands	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800355c:	23a0      	movs	r3, #160	; 0xa0
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2220      	movs	r2, #32
 8003564:	4013      	ands	r3, r2
 8003566:	d008      	beq.n	800357a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	0010      	movs	r0, r2
 8003578:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	589b      	ldr	r3, [r3, r2]
 8003580:	2194      	movs	r1, #148	; 0x94
 8003582:	187a      	adds	r2, r7, r1
 8003584:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	4013      	ands	r3, r2
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d004      	beq.n	800359e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003594:	187b      	adds	r3, r7, r1
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2228      	movs	r2, #40	; 0x28
 800359a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800359c:	d047      	beq.n	800362e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fda7 	bl	80040f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2240      	movs	r2, #64	; 0x40
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d137      	bne.n	8003624 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b4:	f3ef 8310 	mrs	r3, PRIMASK
 80035b8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80035ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035bc:	2090      	movs	r0, #144	; 0x90
 80035be:	183a      	adds	r2, r7, r0
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	2301      	movs	r3, #1
 80035c4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035c8:	f383 8810 	msr	PRIMASK, r3
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	438a      	bics	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	183b      	adds	r3, r7, r0
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d012      	beq.n	800361a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <HAL_UART_IRQHandler+0x2a0>)
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	0018      	movs	r0, r3
 8003602:	f7fd ff45 	bl	8001490 <HAL_DMA_Abort_IT>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d01a      	beq.n	8003640 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	0018      	movs	r0, r3
 8003616:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	e012      	b.n	8003640 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f9a5 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003622:	e00d      	b.n	8003640 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f9a0 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	e008      	b.n	8003640 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f99b 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	2100      	movs	r1, #0
 800363c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800363e:	e17f      	b.n	8003940 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	46c0      	nop			; (mov r8, r8)
    return;
 8003642:	e17d      	b.n	8003940 <HAL_UART_IRQHandler+0x594>
 8003644:	0000080f 	.word	0x0000080f
 8003648:	04000120 	.word	0x04000120
 800364c:	080041b9 	.word	0x080041b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	2b01      	cmp	r3, #1
 8003656:	d000      	beq.n	800365a <HAL_UART_IRQHandler+0x2ae>
 8003658:	e131      	b.n	80038be <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800365a:	23a4      	movs	r3, #164	; 0xa4
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2210      	movs	r2, #16
 8003662:	4013      	ands	r3, r2
 8003664:	d100      	bne.n	8003668 <HAL_UART_IRQHandler+0x2bc>
 8003666:	e12a      	b.n	80038be <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003668:	23a0      	movs	r3, #160	; 0xa0
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	4013      	ands	r3, r2
 8003672:	d100      	bne.n	8003676 <HAL_UART_IRQHandler+0x2ca>
 8003674:	e123      	b.n	80038be <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2210      	movs	r2, #16
 800367c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2240      	movs	r2, #64	; 0x40
 8003686:	4013      	ands	r3, r2
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d000      	beq.n	800368e <HAL_UART_IRQHandler+0x2e2>
 800368c:	e09b      	b.n	80037c6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	217e      	movs	r1, #126	; 0x7e
 8003698:	187b      	adds	r3, r7, r1
 800369a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800369c:	187b      	adds	r3, r7, r1
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d100      	bne.n	80036a6 <HAL_UART_IRQHandler+0x2fa>
 80036a4:	e14e      	b.n	8003944 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2258      	movs	r2, #88	; 0x58
 80036aa:	5a9b      	ldrh	r3, [r3, r2]
 80036ac:	187a      	adds	r2, r7, r1
 80036ae:	8812      	ldrh	r2, [r2, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d300      	bcc.n	80036b6 <HAL_UART_IRQHandler+0x30a>
 80036b4:	e146      	b.n	8003944 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	187a      	adds	r2, r7, r1
 80036ba:	215a      	movs	r1, #90	; 0x5a
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d06e      	beq.n	80037a8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ca:	f3ef 8310 	mrs	r3, PRIMASK
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80036d4:	2301      	movs	r3, #1
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	499a      	ldr	r1, [pc, #616]	; (8003954 <HAL_UART_IRQHandler+0x5a8>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	f383 8810 	msr	PRIMASK, r3
}
 80036fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	677b      	str	r3, [r7, #116]	; 0x74
 8003706:	2301      	movs	r3, #1
 8003708:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2101      	movs	r1, #1
 800371e:	438a      	bics	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003724:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003728:	f383 8810 	msr	PRIMASK, r3
}
 800372c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372e:	f3ef 8310 	mrs	r3, PRIMASK
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003734:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	673b      	str	r3, [r7, #112]	; 0x70
 8003738:	2301      	movs	r3, #1
 800373a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373e:	f383 8810 	msr	PRIMASK, r3
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2140      	movs	r1, #64	; 0x40
 8003750:	438a      	bics	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003756:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375a:	f383 8810 	msr	PRIMASK, r3
}
 800375e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800376c:	f3ef 8310 	mrs	r3, PRIMASK
 8003770:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003776:	2301      	movs	r3, #1
 8003778:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2110      	movs	r1, #16
 800378e:	438a      	bics	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003798:	f383 8810 	msr	PRIMASK, r3
}
 800379c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fd fe3c 	bl	8001420 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2258      	movs	r2, #88	; 0x58
 80037ac:	5a9a      	ldrh	r2, [r3, r2]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	215a      	movs	r1, #90	; 0x5a
 80037b2:	5a5b      	ldrh	r3, [r3, r1]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0011      	movs	r1, r2
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f8dc 	bl	800397c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037c4:	e0be      	b.n	8003944 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2258      	movs	r2, #88	; 0x58
 80037ca:	5a99      	ldrh	r1, [r3, r2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	225a      	movs	r2, #90	; 0x5a
 80037d0:	5a9b      	ldrh	r3, [r3, r2]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	208e      	movs	r0, #142	; 0x8e
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	1a8a      	subs	r2, r1, r2
 80037da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	225a      	movs	r2, #90	; 0x5a
 80037e0:	5a9b      	ldrh	r3, [r3, r2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d100      	bne.n	80037ea <HAL_UART_IRQHandler+0x43e>
 80037e8:	e0ae      	b.n	8003948 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d100      	bne.n	80037f4 <HAL_UART_IRQHandler+0x448>
 80037f2:	e0a9      	b.n	8003948 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f4:	f3ef 8310 	mrs	r3, PRIMASK
 80037f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80037fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fc:	2488      	movs	r4, #136	; 0x88
 80037fe:	193a      	adds	r2, r7, r4
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	2301      	movs	r3, #1
 8003804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	494f      	ldr	r1, [pc, #316]	; (8003958 <HAL_UART_IRQHandler+0x5ac>)
 800381a:	400a      	ands	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	193b      	adds	r3, r7, r4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	61bb      	str	r3, [r7, #24]
  return(result);
 8003832:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	2484      	movs	r4, #132	; 0x84
 8003836:	193a      	adds	r2, r7, r4
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	2301      	movs	r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	438a      	bics	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	193b      	adds	r3, r7, r4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8310 	mrs	r3, PRIMASK
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387e:	2480      	movs	r4, #128	; 0x80
 8003880:	193a      	adds	r2, r7, r4
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	2301      	movs	r3, #1
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2110      	movs	r1, #16
 800389c:	438a      	bics	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	f383 8810 	msr	PRIMASK, r3
}
 80038ac:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ae:	183b      	adds	r3, r7, r0
 80038b0:	881a      	ldrh	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0011      	movs	r1, r2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f860 	bl	800397c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038bc:	e044      	b.n	8003948 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038be:	23a4      	movs	r3, #164	; 0xa4
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	035b      	lsls	r3, r3, #13
 80038c8:	4013      	ands	r3, r2
 80038ca:	d010      	beq.n	80038ee <HAL_UART_IRQHandler+0x542>
 80038cc:	239c      	movs	r3, #156	; 0x9c
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	03db      	lsls	r3, r3, #15
 80038d6:	4013      	ands	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	0352      	lsls	r2, r2, #13
 80038e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 fe10 	bl	800450c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038ec:	e02f      	b.n	800394e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038ee:	23a4      	movs	r3, #164	; 0xa4
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00f      	beq.n	800391a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038fa:	23a0      	movs	r3, #160	; 0xa0
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	4013      	ands	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01e      	beq.n	800394c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	0010      	movs	r0, r2
 8003916:	4798      	blx	r3
    }
    return;
 8003918:	e018      	b.n	800394c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800391a:	23a4      	movs	r3, #164	; 0xa4
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2240      	movs	r2, #64	; 0x40
 8003922:	4013      	ands	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_UART_IRQHandler+0x5a2>
 8003926:	23a0      	movs	r3, #160	; 0xa0
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2240      	movs	r2, #64	; 0x40
 800392e:	4013      	ands	r3, r2
 8003930:	d00d      	beq.n	800394e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fc56 	bl	80041e6 <UART_EndTransmit_IT>
    return;
 800393a:	e008      	b.n	800394e <HAL_UART_IRQHandler+0x5a2>
      return;
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	e006      	b.n	800394e <HAL_UART_IRQHandler+0x5a2>
    return;
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	e004      	b.n	800394e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	e002      	b.n	800394e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	e000      	b.n	800394e <HAL_UART_IRQHandler+0x5a2>
    return;
 800394c:	46c0      	nop			; (mov r8, r8)
  }

}
 800394e:	46bd      	mov	sp, r7
 8003950:	b02b      	add	sp, #172	; 0xac
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	fffffeff 	.word	0xfffffeff
 8003958:	fffffedf 	.word	0xfffffedf

0800395c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	000a      	movs	r2, r1
 8003986:	1cbb      	adds	r3, r7, #2
 8003988:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800399c:	231e      	movs	r3, #30
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a8d      	ldr	r2, [pc, #564]	; (8003bf8 <UART_SetConfig+0x264>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a88      	ldr	r2, [pc, #544]	; (8003bfc <UART_SetConfig+0x268>)
 80039da:	4013      	ands	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a7f      	ldr	r2, [pc, #508]	; (8003c00 <UART_SetConfig+0x26c>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a7b      	ldr	r2, [pc, #492]	; (8003c04 <UART_SetConfig+0x270>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d127      	bne.n	8003a6a <UART_SetConfig+0xd6>
 8003a1a:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <UART_SetConfig+0x274>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	2203      	movs	r2, #3
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d00d      	beq.n	8003a42 <UART_SetConfig+0xae>
 8003a26:	d81b      	bhi.n	8003a60 <UART_SetConfig+0xcc>
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d014      	beq.n	8003a56 <UART_SetConfig+0xc2>
 8003a2c:	d818      	bhi.n	8003a60 <UART_SetConfig+0xcc>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <UART_SetConfig+0xa4>
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d00a      	beq.n	8003a4c <UART_SetConfig+0xb8>
 8003a36:	e013      	b.n	8003a60 <UART_SetConfig+0xcc>
 8003a38:	231f      	movs	r3, #31
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e021      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a42:	231f      	movs	r3, #31
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2202      	movs	r2, #2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e01c      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a4c:	231f      	movs	r3, #31
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2204      	movs	r2, #4
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e017      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a56:	231f      	movs	r3, #31
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e012      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a60:	231f      	movs	r3, #31
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2210      	movs	r2, #16
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e00d      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a67      	ldr	r2, [pc, #412]	; (8003c0c <UART_SetConfig+0x278>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d104      	bne.n	8003a7e <UART_SetConfig+0xea>
 8003a74:	231f      	movs	r3, #31
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e003      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a7e:	231f      	movs	r3, #31
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2210      	movs	r2, #16
 8003a84:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d15d      	bne.n	8003b4e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003a92:	231f      	movs	r3, #31
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d015      	beq.n	8003ac8 <UART_SetConfig+0x134>
 8003a9c:	dc18      	bgt.n	8003ad0 <UART_SetConfig+0x13c>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d00d      	beq.n	8003abe <UART_SetConfig+0x12a>
 8003aa2:	dc15      	bgt.n	8003ad0 <UART_SetConfig+0x13c>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <UART_SetConfig+0x11a>
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d005      	beq.n	8003ab8 <UART_SetConfig+0x124>
 8003aac:	e010      	b.n	8003ad0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aae:	f7ff f901 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	61bb      	str	r3, [r7, #24]
        break;
 8003ab6:	e012      	b.n	8003ade <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b55      	ldr	r3, [pc, #340]	; (8003c10 <UART_SetConfig+0x27c>)
 8003aba:	61bb      	str	r3, [r7, #24]
        break;
 8003abc:	e00f      	b.n	8003ade <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7ff f86f 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	61bb      	str	r3, [r7, #24]
        break;
 8003ac6:	e00a      	b.n	8003ade <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	61bb      	str	r3, [r7, #24]
        break;
 8003ace:	e006      	b.n	8003ade <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad4:	231e      	movs	r3, #30
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
        break;
 8003adc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d100      	bne.n	8003ae6 <UART_SetConfig+0x152>
 8003ae4:	e07b      	b.n	8003bde <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	005a      	lsls	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	18d2      	adds	r2, r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	0019      	movs	r1, r3
 8003af8:	0010      	movs	r0, r2
 8003afa:	f7fc fb05 	bl	8000108 <__udivsi3>
 8003afe:	0003      	movs	r3, r0
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	d91c      	bls.n	8003b44 <UART_SetConfig+0x1b0>
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	025b      	lsls	r3, r3, #9
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d217      	bcs.n	8003b44 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	200e      	movs	r0, #14
 8003b1a:	183b      	adds	r3, r7, r0
 8003b1c:	210f      	movs	r1, #15
 8003b1e:	438a      	bics	r2, r1
 8003b20:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2207      	movs	r2, #7
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b299      	uxth	r1, r3
 8003b2e:	183b      	adds	r3, r7, r0
 8003b30:	183a      	adds	r2, r7, r0
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	183a      	adds	r2, r7, r0
 8003b3e:	8812      	ldrh	r2, [r2, #0]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e04c      	b.n	8003bde <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b44:	231e      	movs	r3, #30
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e047      	b.n	8003bde <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4e:	231f      	movs	r3, #31
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d015      	beq.n	8003b84 <UART_SetConfig+0x1f0>
 8003b58:	dc18      	bgt.n	8003b8c <UART_SetConfig+0x1f8>
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d00d      	beq.n	8003b7a <UART_SetConfig+0x1e6>
 8003b5e:	dc15      	bgt.n	8003b8c <UART_SetConfig+0x1f8>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <UART_SetConfig+0x1d6>
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d005      	beq.n	8003b74 <UART_SetConfig+0x1e0>
 8003b68:	e010      	b.n	8003b8c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6a:	f7ff f8a3 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	61bb      	str	r3, [r7, #24]
        break;
 8003b72:	e012      	b.n	8003b9a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <UART_SetConfig+0x27c>)
 8003b76:	61bb      	str	r3, [r7, #24]
        break;
 8003b78:	e00f      	b.n	8003b9a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7ff f811 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	61bb      	str	r3, [r7, #24]
        break;
 8003b82:	e00a      	b.n	8003b9a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	61bb      	str	r3, [r7, #24]
        break;
 8003b8a:	e006      	b.n	8003b9a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b90:	231e      	movs	r3, #30
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
        break;
 8003b98:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01e      	beq.n	8003bde <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	085a      	lsrs	r2, r3, #1
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	18d2      	adds	r2, r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	0019      	movs	r1, r3
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	f7fc faa9 	bl	8000108 <__udivsi3>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	d909      	bls.n	8003bd6 <UART_SetConfig+0x242>
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	025b      	lsls	r3, r3, #9
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d204      	bcs.n	8003bd6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	60da      	str	r2, [r3, #12]
 8003bd4:	e003      	b.n	8003bde <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd6:	231e      	movs	r3, #30
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bea:	231e      	movs	r3, #30
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b008      	add	sp, #32
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	efff69f3 	.word	0xefff69f3
 8003bfc:	ffffcfff 	.word	0xffffcfff
 8003c00:	fffff4ff 	.word	0xfffff4ff
 8003c04:	40013800 	.word	0x40013800
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40004400 	.word	0x40004400
 8003c10:	007a1200 	.word	0x007a1200

08003c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	d00b      	beq.n	8003c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <UART_AdvFeatureConfig+0x144>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2202      	movs	r2, #2
 8003c44:	4013      	ands	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <UART_AdvFeatureConfig+0x148>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2204      	movs	r2, #4
 8003c66:	4013      	ands	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a3b      	ldr	r2, [pc, #236]	; (8003d60 <UART_AdvFeatureConfig+0x14c>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2208      	movs	r2, #8
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4a34      	ldr	r2, [pc, #208]	; (8003d64 <UART_AdvFeatureConfig+0x150>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	2210      	movs	r2, #16
 8003caa:	4013      	ands	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <UART_AdvFeatureConfig+0x154>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2220      	movs	r2, #32
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <UART_AdvFeatureConfig+0x158>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d01d      	beq.n	8003d2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <UART_AdvFeatureConfig+0x15c>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	035b      	lsls	r3, r3, #13
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10b      	bne.n	8003d2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <UART_AdvFeatureConfig+0x160>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	4013      	ands	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <UART_AdvFeatureConfig+0x164>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	0019      	movs	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }
}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	fffdffff 	.word	0xfffdffff
 8003d5c:	fffeffff 	.word	0xfffeffff
 8003d60:	fffbffff 	.word	0xfffbffff
 8003d64:	ffff7fff 	.word	0xffff7fff
 8003d68:	ffffefff 	.word	0xffffefff
 8003d6c:	ffffdfff 	.word	0xffffdfff
 8003d70:	ffefffff 	.word	0xffefffff
 8003d74:	ff9fffff 	.word	0xff9fffff
 8003d78:	fff7ffff 	.word	0xfff7ffff

08003d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2280      	movs	r2, #128	; 0x80
 8003d88:	2100      	movs	r1, #0
 8003d8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d8c:	f7fd fa3c 	bl	8001208 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d10c      	bne.n	8003dbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2280      	movs	r2, #128	; 0x80
 8003da6:	0391      	lsls	r1, r2, #14
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <UART_CheckIdleState+0x8c>)
 8003dac:	9200      	str	r2, [sp, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f000 f82c 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d001      	beq.n	8003dbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e021      	b.n	8003e00 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d10c      	bne.n	8003de4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	03d1      	lsls	r1, r2, #15
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <UART_CheckIdleState+0x8c>)
 8003dd4:	9200      	str	r2, [sp, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f000 f818 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d001      	beq.n	8003de4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e00d      	b.n	8003e00 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2274      	movs	r2, #116	; 0x74
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b004      	add	sp, #16
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	01ffffff 	.word	0x01ffffff

08003e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b094      	sub	sp, #80	; 0x50
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1c:	e0a3      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e20:	3301      	adds	r3, #1
 8003e22:	d100      	bne.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003e24:	e09f      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fd f9ef 	bl	8001208 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d13d      	bne.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e44:	647b      	str	r3, [r7, #68]	; 0x44
 8003e46:	2301      	movs	r3, #1
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	f383 8810 	msr	PRIMASK, r3
}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	494c      	ldr	r1, [pc, #304]	; (8003f90 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e5e:	400a      	ands	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
 8003e78:	2301      	movs	r3, #1
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	f383 8810 	msr	PRIMASK, r3
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2101      	movs	r1, #1
 8003e90:	438a      	bics	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2274      	movs	r2, #116	; 0x74
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e067      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d050      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	401a      	ands	r2, r3
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d146      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ee8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	2301      	movs	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f383 8810 	msr	PRIMASK, r3
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4923      	ldr	r1, [pc, #140]	; (8003f90 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003f04:	400a      	ands	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f383 8810 	msr	PRIMASK, r3
}
 8003f12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f14:	f3ef 8310 	mrs	r3, PRIMASK
 8003f18:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f1e:	2301      	movs	r3, #1
 8003f20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f383 8810 	msr	PRIMASK, r3
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2101      	movs	r1, #1
 8003f36:	438a      	bics	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	2120      	movs	r1, #32
 8003f58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2274      	movs	r2, #116	; 0x74
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e010      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	425a      	negs	r2, r3
 8003f76:	4153      	adcs	r3, r2
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	1dfb      	adds	r3, r7, #7
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d100      	bne.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003f84:	e74b      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b014      	add	sp, #80	; 0x50
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	fffffe5f 	.word	0xfffffe5f

08003f94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	1dbb      	adds	r3, r7, #6
 8003fa0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1dba      	adds	r2, r7, #6
 8003fac:	2158      	movs	r1, #88	; 0x58
 8003fae:	8812      	ldrh	r2, [r2, #0]
 8003fb0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1dba      	adds	r2, r7, #6
 8003fb6:	215a      	movs	r1, #90	; 0x5a
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	015b      	lsls	r3, r3, #5
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10d      	bne.n	8003fea <UART_Start_Receive_IT+0x56>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <UART_Start_Receive_IT+0x4c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	225c      	movs	r2, #92	; 0x5c
 8003fda:	4943      	ldr	r1, [pc, #268]	; (80040e8 <UART_Start_Receive_IT+0x154>)
 8003fdc:	5299      	strh	r1, [r3, r2]
 8003fde:	e02e      	b.n	800403e <UART_Start_Receive_IT+0xaa>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	225c      	movs	r2, #92	; 0x5c
 8003fe4:	21ff      	movs	r1, #255	; 0xff
 8003fe6:	5299      	strh	r1, [r3, r2]
 8003fe8:	e029      	b.n	800403e <UART_Start_Receive_IT+0xaa>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <UART_Start_Receive_IT+0x7a>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <UART_Start_Receive_IT+0x70>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	225c      	movs	r2, #92	; 0x5c
 8003ffe:	21ff      	movs	r1, #255	; 0xff
 8004000:	5299      	strh	r1, [r3, r2]
 8004002:	e01c      	b.n	800403e <UART_Start_Receive_IT+0xaa>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	225c      	movs	r2, #92	; 0x5c
 8004008:	217f      	movs	r1, #127	; 0x7f
 800400a:	5299      	strh	r1, [r3, r2]
 800400c:	e017      	b.n	800403e <UART_Start_Receive_IT+0xaa>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	055b      	lsls	r3, r3, #21
 8004016:	429a      	cmp	r2, r3
 8004018:	d10d      	bne.n	8004036 <UART_Start_Receive_IT+0xa2>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <UART_Start_Receive_IT+0x98>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	225c      	movs	r2, #92	; 0x5c
 8004026:	217f      	movs	r1, #127	; 0x7f
 8004028:	5299      	strh	r1, [r3, r2]
 800402a:	e008      	b.n	800403e <UART_Start_Receive_IT+0xaa>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	225c      	movs	r2, #92	; 0x5c
 8004030:	213f      	movs	r1, #63	; 0x3f
 8004032:	5299      	strh	r1, [r3, r2]
 8004034:	e003      	b.n	800403e <UART_Start_Receive_IT+0xaa>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	225c      	movs	r2, #92	; 0x5c
 800403a:	2100      	movs	r1, #0
 800403c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2280      	movs	r2, #128	; 0x80
 8004042:	2100      	movs	r1, #0
 8004044:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2222      	movs	r2, #34	; 0x22
 800404a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	61fb      	str	r3, [r7, #28]
  return(result);
 8004052:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004056:	2301      	movs	r3, #1
 8004058:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f383 8810 	msr	PRIMASK, r3
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	015b      	lsls	r3, r3, #5
 8004086:	429a      	cmp	r2, r3
 8004088:	d107      	bne.n	800409a <UART_Start_Receive_IT+0x106>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a15      	ldr	r2, [pc, #84]	; (80040ec <UART_Start_Receive_IT+0x158>)
 8004096:	665a      	str	r2, [r3, #100]	; 0x64
 8004098:	e002      	b.n	80040a0 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <UART_Start_Receive_IT+0x15c>)
 800409e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2274      	movs	r2, #116	; 0x74
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ac:	613b      	str	r3, [r7, #16]
  return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b2:	2301      	movs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2190      	movs	r1, #144	; 0x90
 80040ca:	0049      	lsls	r1, r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b00c      	add	sp, #48	; 0x30
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	000001ff 	.word	0x000001ff
 80040ec:	080043a5 	.word	0x080043a5
 80040f0:	0800423d 	.word	0x0800423d

080040f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08e      	sub	sp, #56	; 0x38
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004100:	617b      	str	r3, [r7, #20]
  return(result);
 8004102:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
 8004106:	2301      	movs	r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4925      	ldr	r1, [pc, #148]	; (80041b4 <UART_EndRxTransfer+0xc0>)
 800411e:	400a      	ands	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	623b      	str	r3, [r7, #32]
  return(result);
 8004134:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
 8004138:	2301      	movs	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	438a      	bics	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	2b01      	cmp	r3, #1
 8004166:	d118      	bne.n	800419a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004168:	f3ef 8310 	mrs	r3, PRIMASK
 800416c:	60bb      	str	r3, [r7, #8]
  return(result);
 800416e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004172:	2301      	movs	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2110      	movs	r1, #16
 800418a:	438a      	bics	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b00e      	add	sp, #56	; 0x38
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	fffffedf 	.word	0xfffffedf

080041b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	225a      	movs	r2, #90	; 0x5a
 80041ca:	2100      	movs	r1, #0
 80041cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2252      	movs	r2, #82	; 0x52
 80041d2:	2100      	movs	r1, #0
 80041d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	0018      	movs	r0, r3
 80041da:	f7ff fbc7 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b004      	add	sp, #16
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ee:	f3ef 8310 	mrs	r3, PRIMASK
 80041f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	2301      	movs	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f383 8810 	msr	PRIMASK, r3
}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2140      	movs	r1, #64	; 0x40
 8004210:	438a      	bics	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f383 8810 	msr	PRIMASK, r3
}
 800421e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	0018      	movs	r0, r3
 8004230:	f7ff fb94 	bl	800395c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b006      	add	sp, #24
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b090      	sub	sp, #64	; 0x40
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004244:	203e      	movs	r0, #62	; 0x3e
 8004246:	183b      	adds	r3, r7, r0
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	215c      	movs	r1, #92	; 0x5c
 800424c:	5a52      	ldrh	r2, [r2, r1]
 800424e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004254:	2b22      	cmp	r3, #34	; 0x22
 8004256:	d000      	beq.n	800425a <UART_RxISR_8BIT+0x1e>
 8004258:	e095      	b.n	8004386 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	213c      	movs	r1, #60	; 0x3c
 8004260:	187b      	adds	r3, r7, r1
 8004262:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004264:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004266:	187b      	adds	r3, r7, r1
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	183b      	adds	r3, r7, r0
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b2d9      	uxtb	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	400a      	ands	r2, r1
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	225a      	movs	r2, #90	; 0x5a
 800428a:	5a9b      	ldrh	r3, [r3, r2]
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b299      	uxth	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	225a      	movs	r2, #90	; 0x5a
 8004296:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	225a      	movs	r2, #90	; 0x5a
 800429c:	5a9b      	ldrh	r3, [r3, r2]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d178      	bne.n	8004396 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a4:	f3ef 8310 	mrs	r3, PRIMASK
 80042a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80042aa:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ae:	2301      	movs	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f383 8810 	msr	PRIMASK, r3
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4936      	ldr	r1, [pc, #216]	; (80043a0 <UART_RxISR_8BIT+0x164>)
 80042c6:	400a      	ands	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f383 8810 	msr	PRIMASK, r3
}
 80042d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d6:	f3ef 8310 	mrs	r3, PRIMASK
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
 80042e0:	2301      	movs	r3, #1
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004318:	2b01      	cmp	r3, #1
 800431a:	d12f      	bne.n	800437c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004322:	f3ef 8310 	mrs	r3, PRIMASK
 8004326:	60fb      	str	r3, [r7, #12]
  return(result);
 8004328:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432a:	633b      	str	r3, [r7, #48]	; 0x30
 800432c:	2301      	movs	r3, #1
 800432e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2110      	movs	r1, #16
 8004344:	438a      	bics	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f383 8810 	msr	PRIMASK, r3
}
 8004352:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2210      	movs	r2, #16
 800435c:	4013      	ands	r3, r2
 800435e:	2b10      	cmp	r3, #16
 8004360:	d103      	bne.n	800436a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2258      	movs	r2, #88	; 0x58
 800436e:	5a9a      	ldrh	r2, [r3, r2]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0011      	movs	r1, r2
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff fb01 	bl	800397c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800437a:	e00c      	b.n	8004396 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	0018      	movs	r0, r3
 8004380:	f7fc fc82 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 8004384:	e007      	b.n	8004396 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2108      	movs	r1, #8
 8004392:	430a      	orrs	r2, r1
 8004394:	619a      	str	r2, [r3, #24]
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b010      	add	sp, #64	; 0x40
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	fffffedf 	.word	0xfffffedf

080043a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b090      	sub	sp, #64	; 0x40
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043ac:	203e      	movs	r0, #62	; 0x3e
 80043ae:	183b      	adds	r3, r7, r0
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	215c      	movs	r1, #92	; 0x5c
 80043b4:	5a52      	ldrh	r2, [r2, r1]
 80043b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043bc:	2b22      	cmp	r3, #34	; 0x22
 80043be:	d000      	beq.n	80043c2 <UART_RxISR_16BIT+0x1e>
 80043c0:	e095      	b.n	80044ee <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	213c      	movs	r1, #60	; 0x3c
 80043c8:	187b      	adds	r3, r7, r1
 80043ca:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80043cc:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	183a      	adds	r2, r7, r0
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	4013      	ands	r3, r2
 80043de:	b29a      	uxth	r2, r3
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	225a      	movs	r2, #90	; 0x5a
 80043f2:	5a9b      	ldrh	r3, [r3, r2]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b299      	uxth	r1, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	225a      	movs	r2, #90	; 0x5a
 80043fe:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	225a      	movs	r2, #90	; 0x5a
 8004404:	5a9b      	ldrh	r3, [r3, r2]
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d178      	bne.n	80044fe <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440c:	f3ef 8310 	mrs	r3, PRIMASK
 8004410:	617b      	str	r3, [r7, #20]
  return(result);
 8004412:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	2301      	movs	r3, #1
 8004418:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f383 8810 	msr	PRIMASK, r3
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4936      	ldr	r1, [pc, #216]	; (8004508 <UART_RxISR_16BIT+0x164>)
 800442e:	400a      	ands	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f383 8810 	msr	PRIMASK, r3
}
 800443c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443e:	f3ef 8310 	mrs	r3, PRIMASK
 8004442:	623b      	str	r3, [r7, #32]
  return(result);
 8004444:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
 8004448:	2301      	movs	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2101      	movs	r1, #1
 8004460:	438a      	bics	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	f383 8810 	msr	PRIMASK, r3
}
 800446e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	2b01      	cmp	r3, #1
 8004482:	d12f      	bne.n	80044e4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448a:	f3ef 8310 	mrs	r3, PRIMASK
 800448e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004490:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004494:	2301      	movs	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2110      	movs	r1, #16
 80044ac:	438a      	bics	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	2210      	movs	r2, #16
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d103      	bne.n	80044d2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2210      	movs	r2, #16
 80044d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2258      	movs	r2, #88	; 0x58
 80044d6:	5a9a      	ldrh	r2, [r3, r2]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	0011      	movs	r1, r2
 80044dc:	0018      	movs	r0, r3
 80044de:	f7ff fa4d 	bl	800397c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044e2:	e00c      	b.n	80044fe <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7fc fbce 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 80044ec:	e007      	b.n	80044fe <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699a      	ldr	r2, [r3, #24]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2108      	movs	r1, #8
 80044fa:	430a      	orrs	r2, r1
 80044fc:	619a      	str	r2, [r3, #24]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b010      	add	sp, #64	; 0x40
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	fffffedf 	.word	0xfffffedf

0800450c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	2600      	movs	r6, #0
 8004520:	4d0c      	ldr	r5, [pc, #48]	; (8004554 <__libc_init_array+0x38>)
 8004522:	4c0d      	ldr	r4, [pc, #52]	; (8004558 <__libc_init_array+0x3c>)
 8004524:	1b64      	subs	r4, r4, r5
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	42a6      	cmp	r6, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	2600      	movs	r6, #0
 800452e:	f000 f821 	bl	8004574 <_init>
 8004532:	4d0a      	ldr	r5, [pc, #40]	; (800455c <__libc_init_array+0x40>)
 8004534:	4c0a      	ldr	r4, [pc, #40]	; (8004560 <__libc_init_array+0x44>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	42a6      	cmp	r6, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	00b3      	lsls	r3, r6, #2
 8004542:	58eb      	ldr	r3, [r5, r3]
 8004544:	4798      	blx	r3
 8004546:	3601      	adds	r6, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	00b3      	lsls	r3, r6, #2
 800454c:	58eb      	ldr	r3, [r5, r3]
 800454e:	4798      	blx	r3
 8004550:	3601      	adds	r6, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	080046a0 	.word	0x080046a0
 8004558:	080046a0 	.word	0x080046a0
 800455c:	080046a0 	.word	0x080046a0
 8004560:	080046a4 	.word	0x080046a4

08004564 <memset>:
 8004564:	0003      	movs	r3, r0
 8004566:	1882      	adds	r2, r0, r2
 8004568:	4293      	cmp	r3, r2
 800456a:	d100      	bne.n	800456e <memset+0xa>
 800456c:	4770      	bx	lr
 800456e:	7019      	strb	r1, [r3, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	e7f9      	b.n	8004568 <memset+0x4>

08004574 <_init>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr

08004580 <_fini>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr
