
BikeSafetySTM32F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800486c  0800486c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800486c  0800486c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800486c  0800486c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000002c  080048a0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080048a0  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013de8  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e7  00000000  00000000  00033e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00036428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c88  00000000  00000000  00038438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e6  00000000  00000000  000520c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e72  00000000  00000000  000662a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb4  00000000  00000000  000fb16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004740 	.word	0x08004740

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08004740 	.word	0x08004740

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b0c7      	sub	sp, #284	; 0x11c
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//=========================MPU9250
	// Registers
	uint8_t IMUDevAddr 				= 0xd0;
 8000226:	2410      	movs	r4, #16
 8000228:	34ff      	adds	r4, #255	; 0xff
 800022a:	193b      	adds	r3, r7, r4
 800022c:	22d0      	movs	r2, #208	; 0xd0
 800022e:	701a      	strb	r2, [r3, #0]
	uint8_t PWR_MGMT_1[2] 			= {0x6b, 0b00100000};	// or 4
 8000230:	2586      	movs	r5, #134	; 0x86
 8000232:	006d      	lsls	r5, r5, #1
 8000234:	197b      	adds	r3, r7, r5
 8000236:	4af7      	ldr	r2, [pc, #988]	; (8000614 <main+0x3f4>)
 8000238:	801a      	strh	r2, [r3, #0]
	uint8_t PWR_MGMT_2[2] 			= {0x6c, 0b00000000};	// 0 to enable all or 255 to disable all
 800023a:	2684      	movs	r6, #132	; 0x84
 800023c:	0076      	lsls	r6, r6, #1
 800023e:	19bb      	adds	r3, r7, r6
 8000240:	226c      	movs	r2, #108	; 0x6c
 8000242:	801a      	strh	r2, [r3, #0]
	uint8_t WHO_AM_I 				= 0x75;
 8000244:	2308      	movs	r3, #8
 8000246:	33ff      	adds	r3, #255	; 0xff
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2275      	movs	r2, #117	; 0x75
 800024c:	701a      	strb	r2, [r3, #0]
	uint8_t LP_ACCEL_ODR[2] 		= {0x1e, 0b00001000}; 	// 8 = output frequency 62.50Hz
 800024e:	1d7b      	adds	r3, r7, #5
 8000250:	33ff      	adds	r3, #255	; 0xff
 8000252:	4af1      	ldr	r2, [pc, #964]	; (8000618 <main+0x3f8>)
 8000254:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_CONFIG[2] 		= {0x1c, 0x0}; 			// 0x0 for 2g, 0x8 for 4g, 0x10 for 8g,0x18 for 16g
 8000256:	1c7b      	adds	r3, r7, #1
 8000258:	33ff      	adds	r3, #255	; 0xff
 800025a:	221c      	movs	r2, #28
 800025c:	801a      	strh	r2, [r3, #0]
	uint8_t INT_ENABLE[2] 			= {0x38, 0x00};			// enable motion interrupt
 800025e:	22fc      	movs	r2, #252	; 0xfc
 8000260:	18bb      	adds	r3, r7, r2
 8000262:	2238      	movs	r2, #56	; 0x38
 8000264:	801a      	strh	r2, [r3, #0]
	uint8_t MOT_DETECT_CTRL[2] 		= {0x69, 0b11000000};	// enable hardware intelligence
 8000266:	22f8      	movs	r2, #248	; 0xf8
 8000268:	18bb      	adds	r3, r7, r2
 800026a:	4aec      	ldr	r2, [pc, #944]	; (800061c <main+0x3fc>)
 800026c:	801a      	strh	r2, [r3, #0]
	uint8_t WOM_THR[2]				= {0x1f, 0x7f};			// threshold
 800026e:	22f4      	movs	r2, #244	; 0xf4
 8000270:	18bb      	adds	r3, r7, r2
 8000272:	4aeb      	ldr	r2, [pc, #940]	; (8000620 <main+0x400>)
 8000274:	801a      	strh	r2, [r3, #0]
	uint8_t maskLP_ACCEL_ODR[2] 		= {0x1e, 0b00000100}; 	// frequency of wake-up
 8000276:	22f0      	movs	r2, #240	; 0xf0
 8000278:	18bb      	adds	r3, r7, r2
 800027a:	4aea      	ldr	r2, [pc, #936]	; (8000624 <main+0x404>)
 800027c:	801a      	strh	r2, [r3, #0]
	uint8_t PWR_MGMT_1_new[2] 		= {0x6b, 0b00100000};	// cycle mode
 800027e:	22ec      	movs	r2, #236	; 0xec
 8000280:	18bb      	adds	r3, r7, r2
 8000282:	4ae4      	ldr	r2, [pc, #912]	; (8000614 <main+0x3f4>)
 8000284:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_XOUT_L 			= 0x3c;
 8000286:	22eb      	movs	r2, #235	; 0xeb
 8000288:	18bb      	adds	r3, r7, r2
 800028a:	223c      	movs	r2, #60	; 0x3c
 800028c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_XOUT_H 			= 0x3b;
 800028e:	22ea      	movs	r2, #234	; 0xea
 8000290:	18bb      	adds	r3, r7, r2
 8000292:	223b      	movs	r2, #59	; 0x3b
 8000294:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_L 			= 0x3e;
 8000296:	22e9      	movs	r2, #233	; 0xe9
 8000298:	18bb      	adds	r3, r7, r2
 800029a:	223e      	movs	r2, #62	; 0x3e
 800029c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_H 			= 0x3d;
 800029e:	22e8      	movs	r2, #232	; 0xe8
 80002a0:	18bb      	adds	r3, r7, r2
 80002a2:	223d      	movs	r2, #61	; 0x3d
 80002a4:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_L 			= 0x40;
 80002a6:	22e7      	movs	r2, #231	; 0xe7
 80002a8:	18bb      	adds	r3, r7, r2
 80002aa:	2240      	movs	r2, #64	; 0x40
 80002ac:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_H 			= 0x3f;
 80002ae:	22e6      	movs	r2, #230	; 0xe6
 80002b0:	18bb      	adds	r3, r7, r2
 80002b2:	223f      	movs	r2, #63	; 0x3f
 80002b4:	701a      	strb	r2, [r3, #0]
	//=========================MPU9250

	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 80002b6:	22e0      	movs	r2, #224	; 0xe0
 80002b8:	18bb      	adds	r3, r7, r2
 80002ba:	4adb      	ldr	r2, [pc, #876]	; (8000628 <main+0x408>)
 80002bc:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 80002be:	22d8      	movs	r2, #216	; 0xd8
 80002c0:	18bb      	adds	r3, r7, r2
 80002c2:	4ada      	ldr	r2, [pc, #872]	; (800062c <main+0x40c>)
 80002c4:	6811      	ldr	r1, [r2, #0]
 80002c6:	6019      	str	r1, [r3, #0]
 80002c8:	7912      	ldrb	r2, [r2, #4]
 80002ca:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 80002cc:	22cc      	movs	r2, #204	; 0xcc
 80002ce:	18bb      	adds	r3, r7, r2
 80002d0:	4ad7      	ldr	r2, [pc, #860]	; (8000630 <main+0x410>)
 80002d2:	ca03      	ldmia	r2!, {r0, r1}
 80002d4:	c303      	stmia	r3!, {r0, r1}
 80002d6:	8811      	ldrh	r1, [r2, #0]
 80002d8:	8019      	strh	r1, [r3, #0]
 80002da:	7892      	ldrb	r2, [r2, #2]
 80002dc:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 80002de:	22c0      	movs	r2, #192	; 0xc0
 80002e0:	18bb      	adds	r3, r7, r2
 80002e2:	4ad4      	ldr	r2, [pc, #848]	; (8000634 <main+0x414>)
 80002e4:	ca03      	ldmia	r2!, {r0, r1}
 80002e6:	c303      	stmia	r3!, {r0, r1}
 80002e8:	8811      	ldrh	r1, [r2, #0]
 80002ea:	8019      	strh	r1, [r3, #0]
 80002ec:	7892      	ldrb	r2, [r2, #2]
 80002ee:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 80002f0:	22b4      	movs	r2, #180	; 0xb4
 80002f2:	18bb      	adds	r3, r7, r2
 80002f4:	4ad0      	ldr	r2, [pc, #832]	; (8000638 <main+0x418>)
 80002f6:	ca03      	ldmia	r2!, {r0, r1}
 80002f8:	c303      	stmia	r3!, {r0, r1}
 80002fa:	8812      	ldrh	r2, [r2, #0]
 80002fc:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 80002fe:	22a8      	movs	r2, #168	; 0xa8
 8000300:	18bb      	adds	r3, r7, r2
 8000302:	4ace      	ldr	r2, [pc, #824]	; (800063c <main+0x41c>)
 8000304:	ca03      	ldmia	r2!, {r0, r1}
 8000306:	c303      	stmia	r3!, {r0, r1}
 8000308:	8811      	ldrh	r1, [r2, #0]
 800030a:	8019      	strh	r1, [r3, #0]
 800030c:	7892      	ldrb	r2, [r2, #2]
 800030e:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 8000310:	229c      	movs	r2, #156	; 0x9c
 8000312:	18bb      	adds	r3, r7, r2
 8000314:	4aca      	ldr	r2, [pc, #808]	; (8000640 <main+0x420>)
 8000316:	ca03      	ldmia	r2!, {r0, r1}
 8000318:	c303      	stmia	r3!, {r0, r1}
 800031a:	8811      	ldrh	r1, [r2, #0]
 800031c:	8019      	strh	r1, [r3, #0]
 800031e:	7892      	ldrb	r2, [r2, #2]
 8000320:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 8000322:	228c      	movs	r2, #140	; 0x8c
 8000324:	18bb      	adds	r3, r7, r2
 8000326:	4ac7      	ldr	r2, [pc, #796]	; (8000644 <main+0x424>)
 8000328:	ca13      	ldmia	r2!, {r0, r1, r4}
 800032a:	c313      	stmia	r3!, {r0, r1, r4}
 800032c:	8811      	ldrh	r1, [r2, #0]
 800032e:	8019      	strh	r1, [r3, #0]
 8000330:	7892      	ldrb	r2, [r2, #2]
 8000332:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8000334:	2284      	movs	r2, #132	; 0x84
 8000336:	18bb      	adds	r3, r7, r2
 8000338:	4ac3      	ldr	r2, [pc, #780]	; (8000648 <main+0x428>)
 800033a:	ca03      	ldmia	r2!, {r0, r1}
 800033c:	c303      	stmia	r3!, {r0, r1}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 800033e:	2278      	movs	r2, #120	; 0x78
 8000340:	18bb      	adds	r3, r7, r2
 8000342:	4ac2      	ldr	r2, [pc, #776]	; (800064c <main+0x42c>)
 8000344:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000346:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8000348:	2274      	movs	r2, #116	; 0x74
 800034a:	18bb      	adds	r3, r7, r2
 800034c:	221a      	movs	r2, #26
 800034e:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CMGS_SEND_MSG_BUF[] 	= "AT+CMGS=\"+358443xxxxxx\"\rTesting9";
 8000350:	2250      	movs	r2, #80	; 0x50
 8000352:	18bb      	adds	r3, r7, r2
 8000354:	4abe      	ldr	r2, [pc, #760]	; (8000650 <main+0x430>)
 8000356:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000358:	c313      	stmia	r3!, {r0, r1, r4}
 800035a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800035c:	c313      	stmia	r3!, {r0, r1, r4}
 800035e:	ca03      	ldmia	r2!, {r0, r1}
 8000360:	c303      	stmia	r3!, {r0, r1}
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	701a      	strb	r2, [r3, #0]
	//=========================GSM

	//=========================GNSS
	uint8_t AT_CGNSPWR_ON[] 	= "AT+CGNSPWR=1\r";				// GNSS turns Power ON
 8000366:	2240      	movs	r2, #64	; 0x40
 8000368:	18bb      	adds	r3, r7, r2
 800036a:	4aba      	ldr	r2, [pc, #744]	; (8000654 <main+0x434>)
 800036c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800036e:	c313      	stmia	r3!, {r0, r1, r4}
 8000370:	8812      	ldrh	r2, [r2, #0]
 8000372:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSPWR_OFF[] 	= "AT+CGNSPWR=0\r";				// GNSS turns Power OFF
 8000374:	2230      	movs	r2, #48	; 0x30
 8000376:	18bb      	adds	r3, r7, r2
 8000378:	4ab7      	ldr	r2, [pc, #732]	; (8000658 <main+0x438>)
 800037a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800037c:	c313      	stmia	r3!, {r0, r1, r4}
 800037e:	8812      	ldrh	r2, [r2, #0]
 8000380:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSSEQ[] 		= "AT+CGNSSEQ=\"RMC\"\r";		// RMC for GGA
 8000382:	221c      	movs	r2, #28
 8000384:	18bb      	adds	r3, r7, r2
 8000386:	4ab5      	ldr	r2, [pc, #724]	; (800065c <main+0x43c>)
 8000388:	ca13      	ldmia	r2!, {r0, r1, r4}
 800038a:	c313      	stmia	r3!, {r0, r1, r4}
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	6019      	str	r1, [r3, #0]
 8000390:	8892      	ldrh	r2, [r2, #4]
 8000392:	809a      	strh	r2, [r3, #4]
	uint8_t AT_CGNSINF[] 		= "AT+CGNSINF\r";				// Gets data from GNSS
 8000394:	4bb2      	ldr	r3, [pc, #712]	; (8000660 <main+0x440>)
 8000396:	2288      	movs	r2, #136	; 0x88
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	4694      	mov	ip, r2
 800039c:	44bc      	add	ip, r7
 800039e:	4463      	add	r3, ip
 80003a0:	4ab0      	ldr	r2, [pc, #704]	; (8000664 <main+0x444>)
 80003a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003a4:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CGNSURC[] 		= "AT+CGNSURC=1\r";
 80003a6:	4bb0      	ldr	r3, [pc, #704]	; (8000668 <main+0x448>)
 80003a8:	2288      	movs	r2, #136	; 0x88
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	4694      	mov	ip, r2
 80003ae:	44bc      	add	ip, r7
 80003b0:	4463      	add	r3, ip
 80003b2:	4aae      	ldr	r2, [pc, #696]	; (800066c <main+0x44c>)
 80003b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003b6:	c313      	stmia	r3!, {r0, r1, r4}
 80003b8:	8812      	ldrh	r2, [r2, #0]
 80003ba:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 ff40 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 faa0 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 fc0a 	bl	8000bdc <MX_GPIO_Init>
  MX_I2C1_Init();
 80003c8:	f000 fb02 	bl	80009d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80003cc:	f000 fb40 	bl	8000a50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003d0:	f000 fba4 	bl	8000b1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003d4:	f000 fbd2 	bl	8000b7c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80003d8:	f000 fb78 	bl	8000acc <MX_TIM16_Init>
  memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
  //=========================GNSS
  */

  //=========================MPU9250
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_1, sizeof(PWR_MGMT_1), 10);
 80003dc:	2410      	movs	r4, #16
 80003de:	34ff      	adds	r4, #255	; 0xff
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b299      	uxth	r1, r3
 80003e6:	197a      	adds	r2, r7, r5
 80003e8:	48a1      	ldr	r0, [pc, #644]	; (8000670 <main+0x450>)
 80003ea:	230a      	movs	r3, #10
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2302      	movs	r3, #2
 80003f0:	f001 fb78 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 80003f4:	0003      	movs	r3, r0
 80003f6:	001a      	movs	r2, r3
 80003f8:	4b9e      	ldr	r3, [pc, #632]	; (8000674 <main+0x454>)
 80003fa:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	b299      	uxth	r1, r3
 8000402:	4a9d      	ldr	r2, [pc, #628]	; (8000678 <main+0x458>)
 8000404:	489a      	ldr	r0, [pc, #616]	; (8000670 <main+0x450>)
 8000406:	23fa      	movs	r3, #250	; 0xfa
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2301      	movs	r3, #1
 800040e:	f001 fc71 	bl	8001cf4 <HAL_I2C_Master_Receive>
 8000412:	0003      	movs	r3, r0
 8000414:	001a      	movs	r2, r3
 8000416:	4b97      	ldr	r3, [pc, #604]	; (8000674 <main+0x454>)
 8000418:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800041a:	200a      	movs	r0, #10
 800041c:	f000 ff74 	bl	8001308 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_2, sizeof(PWR_MGMT_2), 10);
 8000420:	193b      	adds	r3, r7, r4
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b299      	uxth	r1, r3
 8000426:	19ba      	adds	r2, r7, r6
 8000428:	4891      	ldr	r0, [pc, #580]	; (8000670 <main+0x450>)
 800042a:	230a      	movs	r3, #10
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2302      	movs	r3, #2
 8000430:	f001 fb58 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 8000434:	0003      	movs	r3, r0
 8000436:	001a      	movs	r2, r3
 8000438:	4b8e      	ldr	r3, [pc, #568]	; (8000674 <main+0x454>)
 800043a:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 800043c:	193b      	adds	r3, r7, r4
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b299      	uxth	r1, r3
 8000442:	4a8d      	ldr	r2, [pc, #564]	; (8000678 <main+0x458>)
 8000444:	488a      	ldr	r0, [pc, #552]	; (8000670 <main+0x450>)
 8000446:	23fa      	movs	r3, #250	; 0xfa
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2301      	movs	r3, #1
 800044e:	f001 fc51 	bl	8001cf4 <HAL_I2C_Master_Receive>
 8000452:	0003      	movs	r3, r0
 8000454:	001a      	movs	r2, r3
 8000456:	4b87      	ldr	r3, [pc, #540]	; (8000674 <main+0x454>)
 8000458:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800045a:	200a      	movs	r0, #10
 800045c:	f000 ff54 	bl	8001308 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &WHO_AM_I, sizeof(WHO_AM_I), 10);
 8000460:	193b      	adds	r3, r7, r4
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b299      	uxth	r1, r3
 8000466:	2308      	movs	r3, #8
 8000468:	33ff      	adds	r3, #255	; 0xff
 800046a:	18fa      	adds	r2, r7, r3
 800046c:	4880      	ldr	r0, [pc, #512]	; (8000670 <main+0x450>)
 800046e:	230a      	movs	r3, #10
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2301      	movs	r3, #1
 8000474:	f001 fb36 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 8000478:	0003      	movs	r3, r0
 800047a:	001a      	movs	r2, r3
 800047c:	4b7d      	ldr	r3, [pc, #500]	; (8000674 <main+0x454>)
 800047e:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 8000480:	193b      	adds	r3, r7, r4
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b299      	uxth	r1, r3
 8000486:	4a7c      	ldr	r2, [pc, #496]	; (8000678 <main+0x458>)
 8000488:	4879      	ldr	r0, [pc, #484]	; (8000670 <main+0x450>)
 800048a:	23fa      	movs	r3, #250	; 0xfa
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2301      	movs	r3, #1
 8000492:	f001 fc2f 	bl	8001cf4 <HAL_I2C_Master_Receive>
 8000496:	0003      	movs	r3, r0
 8000498:	001a      	movs	r2, r3
 800049a:	4b76      	ldr	r3, [pc, #472]	; (8000674 <main+0x454>)
 800049c:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800049e:	200a      	movs	r0, #10
 80004a0:	f000 ff32 	bl	8001308 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, LP_ACCEL_ODR, sizeof(LP_ACCEL_ODR), 10);
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b299      	uxth	r1, r3
 80004aa:	1d7a      	adds	r2, r7, #5
 80004ac:	32ff      	adds	r2, #255	; 0xff
 80004ae:	4870      	ldr	r0, [pc, #448]	; (8000670 <main+0x450>)
 80004b0:	230a      	movs	r3, #10
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2302      	movs	r3, #2
 80004b6:	f001 fb15 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 80004ba:	0003      	movs	r3, r0
 80004bc:	001a      	movs	r2, r3
 80004be:	4b6d      	ldr	r3, [pc, #436]	; (8000674 <main+0x454>)
 80004c0:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	b299      	uxth	r1, r3
 80004c8:	4a6b      	ldr	r2, [pc, #428]	; (8000678 <main+0x458>)
 80004ca:	4869      	ldr	r0, [pc, #420]	; (8000670 <main+0x450>)
 80004cc:	23fa      	movs	r3, #250	; 0xfa
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2301      	movs	r3, #1
 80004d4:	f001 fc0e 	bl	8001cf4 <HAL_I2C_Master_Receive>
 80004d8:	0003      	movs	r3, r0
 80004da:	001a      	movs	r2, r3
 80004dc:	4b65      	ldr	r3, [pc, #404]	; (8000674 <main+0x454>)
 80004de:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 80004e0:	200a      	movs	r0, #10
 80004e2:	f000 ff11 	bl	8001308 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), 10);
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b299      	uxth	r1, r3
 80004ec:	1c7a      	adds	r2, r7, #1
 80004ee:	32ff      	adds	r2, #255	; 0xff
 80004f0:	485f      	ldr	r0, [pc, #380]	; (8000670 <main+0x450>)
 80004f2:	230a      	movs	r3, #10
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2302      	movs	r3, #2
 80004f8:	f001 faf4 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 80004fc:	0003      	movs	r3, r0
 80004fe:	001a      	movs	r2, r3
 8000500:	4b5c      	ldr	r3, [pc, #368]	; (8000674 <main+0x454>)
 8000502:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 8000504:	193b      	adds	r3, r7, r4
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b299      	uxth	r1, r3
 800050a:	4a5b      	ldr	r2, [pc, #364]	; (8000678 <main+0x458>)
 800050c:	4858      	ldr	r0, [pc, #352]	; (8000670 <main+0x450>)
 800050e:	23fa      	movs	r3, #250	; 0xfa
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	f001 fbed 	bl	8001cf4 <HAL_I2C_Master_Receive>
 800051a:	0003      	movs	r3, r0
 800051c:	001a      	movs	r2, r3
 800051e:	4b55      	ldr	r3, [pc, #340]	; (8000674 <main+0x454>)
 8000520:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16);
 8000522:	4b56      	ldr	r3, [pc, #344]	; (800067c <main+0x45c>)
 8000524:	0018      	movs	r0, r3
 8000526:	f002 feb7 	bl	8003298 <HAL_TIM_Base_Start>
  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 800052a:	4955      	ldr	r1, [pc, #340]	; (8000680 <main+0x460>)
 800052c:	4b55      	ldr	r3, [pc, #340]	; (8000684 <main+0x464>)
 800052e:	220e      	movs	r2, #14
 8000530:	0018      	movs	r0, r3
 8000532:	f002 ffbf 	bl	80034b4 <HAL_UART_Receive_IT>
 8000536:	0003      	movs	r3, r0
 8000538:	001a      	movs	r2, r3
 800053a:	4b53      	ldr	r3, [pc, #332]	; (8000688 <main+0x468>)
 800053c:	701a      	strb	r2, [r3, #0]
  while (1)
  {

	  //i2cState = HAL_I2C_GetState(&hi2c1);

	  if(lockedDevice == 1 || counter2 != 0){
 800053e:	4b53      	ldr	r3, [pc, #332]	; (800068c <main+0x46c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d004      	beq.n	8000550 <main+0x330>
 8000546:	4b52      	ldr	r3, [pc, #328]	; (8000690 <main+0x470>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d100      	bne.n	8000550 <main+0x330>
 800054e:	e13b      	b.n	80007c8 <main+0x5a8>
		  i2cState = HAL_I2C_GetState(&hi2c1);
 8000550:	4b47      	ldr	r3, [pc, #284]	; (8000670 <main+0x450>)
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fcd6 	bl	8001f04 <HAL_I2C_GetState>
 8000558:	0003      	movs	r3, r0
 800055a:	001a      	movs	r2, r3
 800055c:	4b4d      	ldr	r3, [pc, #308]	; (8000694 <main+0x474>)
 800055e:	701a      	strb	r2, [r3, #0]
	  //=========================MPU9250
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_L, sizeof(ACCEL_XOUT_L), 10);
 8000560:	2410      	movs	r4, #16
 8000562:	34ff      	adds	r4, #255	; 0xff
 8000564:	193b      	adds	r3, r7, r4
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b299      	uxth	r1, r3
 800056a:	23eb      	movs	r3, #235	; 0xeb
 800056c:	18fa      	adds	r2, r7, r3
 800056e:	4840      	ldr	r0, [pc, #256]	; (8000670 <main+0x450>)
 8000570:	230a      	movs	r3, #10
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	f001 fab5 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 800057a:	0003      	movs	r3, r0
 800057c:	001a      	movs	r2, r3
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <main+0x454>)
 8000580:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8000582:	193b      	adds	r3, r7, r4
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b299      	uxth	r1, r3
 8000588:	4a3b      	ldr	r2, [pc, #236]	; (8000678 <main+0x458>)
 800058a:	4839      	ldr	r0, [pc, #228]	; (8000670 <main+0x450>)
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2301      	movs	r3, #1
 8000592:	f001 fbaf 	bl	8001cf4 <HAL_I2C_Master_Receive>
 8000596:	0003      	movs	r3, r0
 8000598:	001a      	movs	r2, r3
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <main+0x454>)
 800059c:	701a      	strb	r2, [r3, #0]
		  finalXAccValue = dataReceiveI2cBuffer;
 800059e:	4b36      	ldr	r3, [pc, #216]	; (8000678 <main+0x458>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	001a      	movs	r2, r3
 80005a4:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <main+0x478>)
 80005a6:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_H, sizeof(ACCEL_XOUT_H), 10);
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b299      	uxth	r1, r3
 80005ae:	23ea      	movs	r3, #234	; 0xea
 80005b0:	18fa      	adds	r2, r7, r3
 80005b2:	482f      	ldr	r0, [pc, #188]	; (8000670 <main+0x450>)
 80005b4:	230a      	movs	r3, #10
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	f001 fa93 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 80005be:	0003      	movs	r3, r0
 80005c0:	001a      	movs	r2, r3
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <main+0x454>)
 80005c4:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b299      	uxth	r1, r3
 80005cc:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <main+0x458>)
 80005ce:	4828      	ldr	r0, [pc, #160]	; (8000670 <main+0x450>)
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	f001 fb8d 	bl	8001cf4 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	001a      	movs	r2, r3
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <main+0x454>)
 80005e0:	701a      	strb	r2, [r3, #0]
		  finalXAccValue = finalXAccValue + (dataReceiveI2cBuffer << 8);
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <main+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	021b      	lsls	r3, r3, #8
 80005e8:	001a      	movs	r2, r3
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <main+0x478>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	18d2      	adds	r2, r2, r3
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <main+0x478>)
 80005f2:	601a      	str	r2, [r3, #0]
		  finalXAccValueWithOffset = finalXAccValue + 40000;
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <main+0x478>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4d28      	ldr	r5, [pc, #160]	; (800069c <main+0x47c>)
 80005fa:	195a      	adds	r2, r3, r5
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <main+0x480>)
 80005fe:	601a      	str	r2, [r3, #0]

		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_L, sizeof(ACCEL_YOUT_L), 10);
 8000600:	193b      	adds	r3, r7, r4
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b299      	uxth	r1, r3
 8000606:	23e9      	movs	r3, #233	; 0xe9
 8000608:	18fa      	adds	r2, r7, r3
 800060a:	4819      	ldr	r0, [pc, #100]	; (8000670 <main+0x450>)
 800060c:	230a      	movs	r3, #10
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	e047      	b.n	80006a4 <main+0x484>
 8000614:	0000206b 	.word	0x0000206b
 8000618:	0000081e 	.word	0x0000081e
 800061c:	ffffc069 	.word	0xffffc069
 8000620:	00007f1f 	.word	0x00007f1f
 8000624:	0000041e 	.word	0x0000041e
 8000628:	000d5441 	.word	0x000d5441
 800062c:	08004758 	.word	0x08004758
 8000630:	08004760 	.word	0x08004760
 8000634:	0800476c 	.word	0x0800476c
 8000638:	08004778 	.word	0x08004778
 800063c:	08004784 	.word	0x08004784
 8000640:	08004790 	.word	0x08004790
 8000644:	0800479c 	.word	0x0800479c
 8000648:	080047ac 	.word	0x080047ac
 800064c:	080047b4 	.word	0x080047b4
 8000650:	080047c0 	.word	0x080047c0
 8000654:	080047e4 	.word	0x080047e4
 8000658:	080047f4 	.word	0x080047f4
 800065c:	08004804 	.word	0x08004804
 8000660:	ffffff00 	.word	0xffffff00
 8000664:	08004818 	.word	0x08004818
 8000668:	fffffef0 	.word	0xfffffef0
 800066c:	08004824 	.word	0x08004824
 8000670:	200000a4 	.word	0x200000a4
 8000674:	200000a0 	.word	0x200000a0
 8000678:	2000007d 	.word	0x2000007d
 800067c:	20000268 	.word	0x20000268
 8000680:	20000080 	.word	0x20000080
 8000684:	200000f4 	.word	0x200000f4
 8000688:	200000f0 	.word	0x200000f0
 800068c:	2000007c 	.word	0x2000007c
 8000690:	2000004c 	.word	0x2000004c
 8000694:	200002b0 	.word	0x200002b0
 8000698:	20000050 	.word	0x20000050
 800069c:	00009c40 	.word	0x00009c40
 80006a0:	20000054 	.word	0x20000054
 80006a4:	f001 fa1e 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 80006a8:	0003      	movs	r3, r0
 80006aa:	001a      	movs	r2, r3
 80006ac:	4b86      	ldr	r3, [pc, #536]	; (80008c8 <main+0x6a8>)
 80006ae:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b299      	uxth	r1, r3
 80006b6:	4a85      	ldr	r2, [pc, #532]	; (80008cc <main+0x6ac>)
 80006b8:	4885      	ldr	r0, [pc, #532]	; (80008d0 <main+0x6b0>)
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	f001 fb18 	bl	8001cf4 <HAL_I2C_Master_Receive>
 80006c4:	0003      	movs	r3, r0
 80006c6:	001a      	movs	r2, r3
 80006c8:	4b7f      	ldr	r3, [pc, #508]	; (80008c8 <main+0x6a8>)
 80006ca:	701a      	strb	r2, [r3, #0]
		  finalYAccValue = dataReceiveI2cBuffer;
 80006cc:	4b7f      	ldr	r3, [pc, #508]	; (80008cc <main+0x6ac>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	001a      	movs	r2, r3
 80006d2:	4b80      	ldr	r3, [pc, #512]	; (80008d4 <main+0x6b4>)
 80006d4:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_H, sizeof(ACCEL_YOUT_H), 10);
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b299      	uxth	r1, r3
 80006dc:	23e8      	movs	r3, #232	; 0xe8
 80006de:	18fa      	adds	r2, r7, r3
 80006e0:	487b      	ldr	r0, [pc, #492]	; (80008d0 <main+0x6b0>)
 80006e2:	230a      	movs	r3, #10
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	f001 f9fc 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 80006ec:	0003      	movs	r3, r0
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b75      	ldr	r3, [pc, #468]	; (80008c8 <main+0x6a8>)
 80006f2:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	4a74      	ldr	r2, [pc, #464]	; (80008cc <main+0x6ac>)
 80006fc:	4874      	ldr	r0, [pc, #464]	; (80008d0 <main+0x6b0>)
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	f001 faf6 	bl	8001cf4 <HAL_I2C_Master_Receive>
 8000708:	0003      	movs	r3, r0
 800070a:	001a      	movs	r2, r3
 800070c:	4b6e      	ldr	r3, [pc, #440]	; (80008c8 <main+0x6a8>)
 800070e:	701a      	strb	r2, [r3, #0]
		  finalYAccValue = finalYAccValue + (dataReceiveI2cBuffer << 8);
 8000710:	4b6e      	ldr	r3, [pc, #440]	; (80008cc <main+0x6ac>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	001a      	movs	r2, r3
 8000718:	4b6e      	ldr	r3, [pc, #440]	; (80008d4 <main+0x6b4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	18d2      	adds	r2, r2, r3
 800071e:	4b6d      	ldr	r3, [pc, #436]	; (80008d4 <main+0x6b4>)
 8000720:	601a      	str	r2, [r3, #0]
		  finalYAccValueWithOffset = finalYAccValue + 40000;
 8000722:	4b6c      	ldr	r3, [pc, #432]	; (80008d4 <main+0x6b4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	195a      	adds	r2, r3, r5
 8000728:	4b6b      	ldr	r3, [pc, #428]	; (80008d8 <main+0x6b8>)
 800072a:	601a      	str	r2, [r3, #0]

		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_L, sizeof(ACCEL_ZOUT_L), 10);
 800072c:	193b      	adds	r3, r7, r4
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b299      	uxth	r1, r3
 8000732:	23e7      	movs	r3, #231	; 0xe7
 8000734:	18fa      	adds	r2, r7, r3
 8000736:	4866      	ldr	r0, [pc, #408]	; (80008d0 <main+0x6b0>)
 8000738:	230a      	movs	r3, #10
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	f001 f9d1 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 8000742:	0003      	movs	r3, r0
 8000744:	001a      	movs	r2, r3
 8000746:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <main+0x6a8>)
 8000748:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800074a:	193b      	adds	r3, r7, r4
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b299      	uxth	r1, r3
 8000750:	4a5e      	ldr	r2, [pc, #376]	; (80008cc <main+0x6ac>)
 8000752:	485f      	ldr	r0, [pc, #380]	; (80008d0 <main+0x6b0>)
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f001 facb 	bl	8001cf4 <HAL_I2C_Master_Receive>
 800075e:	0003      	movs	r3, r0
 8000760:	001a      	movs	r2, r3
 8000762:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <main+0x6a8>)
 8000764:	701a      	strb	r2, [r3, #0]
		  finalZAccValue = dataReceiveI2cBuffer;
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <main+0x6ac>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	001a      	movs	r2, r3
 800076c:	4b5b      	ldr	r3, [pc, #364]	; (80008dc <main+0x6bc>)
 800076e:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_H, sizeof(ACCEL_ZOUT_H), 10);
 8000770:	193b      	adds	r3, r7, r4
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b299      	uxth	r1, r3
 8000776:	23e6      	movs	r3, #230	; 0xe6
 8000778:	18fa      	adds	r2, r7, r3
 800077a:	4855      	ldr	r0, [pc, #340]	; (80008d0 <main+0x6b0>)
 800077c:	230a      	movs	r3, #10
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	f001 f9af 	bl	8001ae4 <HAL_I2C_Master_Transmit>
 8000786:	0003      	movs	r3, r0
 8000788:	001a      	movs	r2, r3
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <main+0x6a8>)
 800078c:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800078e:	193b      	adds	r3, r7, r4
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b299      	uxth	r1, r3
 8000794:	4a4d      	ldr	r2, [pc, #308]	; (80008cc <main+0x6ac>)
 8000796:	484e      	ldr	r0, [pc, #312]	; (80008d0 <main+0x6b0>)
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	f001 faa9 	bl	8001cf4 <HAL_I2C_Master_Receive>
 80007a2:	0003      	movs	r3, r0
 80007a4:	001a      	movs	r2, r3
 80007a6:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <main+0x6a8>)
 80007a8:	701a      	strb	r2, [r3, #0]
		  finalZAccValue = finalZAccValue + (dataReceiveI2cBuffer << 8);
 80007aa:	4b48      	ldr	r3, [pc, #288]	; (80008cc <main+0x6ac>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	001a      	movs	r2, r3
 80007b2:	4b4a      	ldr	r3, [pc, #296]	; (80008dc <main+0x6bc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	18d2      	adds	r2, r2, r3
 80007b8:	4b48      	ldr	r3, [pc, #288]	; (80008dc <main+0x6bc>)
 80007ba:	601a      	str	r2, [r3, #0]
		  finalZAccValueWithOffset = finalZAccValue + 88000;
 80007bc:	4b47      	ldr	r3, [pc, #284]	; (80008dc <main+0x6bc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a47      	ldr	r2, [pc, #284]	; (80008e0 <main+0x6c0>)
 80007c2:	189a      	adds	r2, r3, r2
 80007c4:	4b47      	ldr	r3, [pc, #284]	; (80008e4 <main+0x6c4>)
 80007c6:	601a      	str	r2, [r3, #0]
	  //=========================MPU9250
	  }
	  if(lockedDevice == 1){
 80007c8:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <main+0x6c8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d116      	bne.n	80007fe <main+0x5de>
		  //counter = counter +1;
		  if(finalZAccValueWithOffset < 100000){
 80007d0:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <main+0x6c4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a45      	ldr	r2, [pc, #276]	; (80008ec <main+0x6cc>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d808      	bhi.n	80007ec <main+0x5cc>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	0059      	lsls	r1, r3, #1
 80007de:	2390      	movs	r3, #144	; 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2201      	movs	r2, #1
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 f893 	bl	8001910 <HAL_GPIO_WritePin>
 80007ea:	e067      	b.n	80008bc <main+0x69c>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	0059      	lsls	r1, r3, #1
 80007f0:	2390      	movs	r3, #144	; 0x90
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	2200      	movs	r2, #0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 f88a 	bl	8001910 <HAL_GPIO_WritePin>
 80007fc:	e05e      	b.n	80008bc <main+0x69c>
		  }
	  }

	  else if(counter2 != 0){
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <main+0x6d0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d050      	beq.n	80008a8 <main+0x688>
		  if(__HAL_TIM_GET_COUNTER(&htim16) < timerVal){
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <main+0x6d4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <main+0x6d8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d20b      	bcs.n	800082c <main+0x60c>
			  clockCykles++;
 8000814:	4b39      	ldr	r3, [pc, #228]	; (80008fc <main+0x6dc>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b37      	ldr	r3, [pc, #220]	; (80008fc <main+0x6dc>)
 800081e:	701a      	strb	r2, [r3, #0]
			  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <main+0x6d4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <main+0x6d8>)
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	e004      	b.n	8000836 <main+0x616>
		  }
		  else{
			  timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <main+0x6d4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <main+0x6d8>)
 8000834:	601a      	str	r2, [r3, #0]
		  }

		  if(clockCykles > 33 && counter2 < 15){
 8000836:	4b31      	ldr	r3, [pc, #196]	; (80008fc <main+0x6dc>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b21      	cmp	r3, #33	; 0x21
 800083c:	d90a      	bls.n	8000854 <main+0x634>
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <main+0x6d0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b0e      	cmp	r3, #14
 8000844:	d806      	bhi.n	8000854 <main+0x634>
			  clockCykles = 0;
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <main+0x6dc>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
			  counter2 = 0;
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <main+0x6d0>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e033      	b.n	80008bc <main+0x69c>
			  //INT_ENABLE[1] = 0x40;
		  }
		  else if(counter2 > 15){
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <main+0x6d0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d91a      	bls.n	8000892 <main+0x672>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);	// EXTERNAL LED
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	0059      	lsls	r1, r3, #1
 8000860:	2390      	movs	r3, #144	; 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	2201      	movs	r2, #1
 8000866:	0018      	movs	r0, r3
 8000868:	f001 f852 	bl	8001910 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 800086c:	23fa      	movs	r3, #250	; 0xfa
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fd49 	bl	8001308 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	0059      	lsls	r1, r3, #1
 800087a:	2390      	movs	r3, #144	; 0x90
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2200      	movs	r2, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f001 f845 	bl	8001910 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8000886:	23fa      	movs	r3, #250	; 0xfa
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fd3c 	bl	8001308 <HAL_Delay>
 8000890:	e014      	b.n	80008bc <main+0x69c>
		  }
		  else if(checkMovment() == 1){
 8000892:	f000 faa7 	bl	8000de4 <checkMovment>
 8000896:	0003      	movs	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	d10f      	bne.n	80008bc <main+0x69c>
			  counter2++;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <main+0x6d0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <main+0x6d0>)
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e009      	b.n	80008bc <main+0x69c>
		  }

	  }

	  else{
		HAL_SuspendTick();
 80008a8:	f000 fd52 	bl	8001350 <HAL_SuspendTick>

		  HAL_PWR_EnableSleepOnExit ();
 80008ac:	f001 fde2 	bl	8002474 <HAL_PWR_EnableSleepOnExit>
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008b0:	2101      	movs	r1, #1
 80008b2:	2000      	movs	r0, #0
 80008b4:	f001 fdc2 	bl	800243c <HAL_PWR_EnterSLEEPMode>

		  HAL_ResumeTick();
 80008b8:	f000 fd58 	bl	800136c <HAL_ResumeTick>
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
		  }
	  }
		*/
	  counter = counter +1;
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <main+0x6e0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <main+0x6e0>)
 80008c4:	601a      	str	r2, [r3, #0]
	  if(lockedDevice == 1 || counter2 != 0){
 80008c6:	e63a      	b.n	800053e <main+0x31e>
 80008c8:	200000a0 	.word	0x200000a0
 80008cc:	2000007d 	.word	0x2000007d
 80008d0:	200000a4 	.word	0x200000a4
 80008d4:	20000058 	.word	0x20000058
 80008d8:	2000005c 	.word	0x2000005c
 80008dc:	20000060 	.word	0x20000060
 80008e0:	000157c0 	.word	0x000157c0
 80008e4:	20000064 	.word	0x20000064
 80008e8:	2000007c 	.word	0x2000007c
 80008ec:	0001869f 	.word	0x0001869f
 80008f0:	2000004c 	.word	0x2000004c
 80008f4:	20000268 	.word	0x20000268
 80008f8:	20000068 	.word	0x20000068
 80008fc:	2000006c 	.word	0x2000006c
 8000900:	20000048 	.word	0x20000048

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b099      	sub	sp, #100	; 0x64
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	242c      	movs	r4, #44	; 0x2c
 800090c:	193b      	adds	r3, r7, r4
 800090e:	0018      	movs	r0, r3
 8000910:	2334      	movs	r3, #52	; 0x34
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f003 ff0b 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091a:	231c      	movs	r3, #28
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	0018      	movs	r0, r3
 8000920:	2310      	movs	r3, #16
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f003 ff03 	bl	8004730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	0018      	movs	r0, r3
 800092e:	2318      	movs	r3, #24
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 fefc 	bl	8004730 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000938:	0021      	movs	r1, r4
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2202      	movs	r2, #2
 800093e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2201      	movs	r2, #1
 8000944:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2210      	movs	r2, #16
 800094a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2202      	movs	r2, #2
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	0212      	lsls	r2, r2, #8
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0352      	lsls	r2, r2, #13
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	187b      	adds	r3, r7, r1
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fd9e 	bl	80024ac <HAL_RCC_OscConfig>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000974:	f000 fa7c 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	211c      	movs	r1, #28
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2202      	movs	r2, #2
 8000984:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2101      	movs	r1, #1
 8000996:	0018      	movs	r0, r3
 8000998:	f002 f90e 	bl	8002bb8 <HAL_RCC_ClockConfig>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009a0:	f000 fa66 	bl	8000e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2221      	movs	r2, #33	; 0x21
 80009a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fa77 	bl	8002eac <HAL_RCCEx_PeriphCLKConfig>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009c2:	f000 fa55 	bl	8000e70 <Error_Handler>
  }
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b019      	add	sp, #100	; 0x64
 80009cc:	bd90      	pop	{r4, r7, pc}
	...

080009d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C1_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 ffd3 	bl	80019b8 <HAL_I2C_Init>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fa2b 	bl	8000e70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fc74 	bl	800230c <HAL_I2CEx_ConfigAnalogFilter>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fa22 	bl	8000e70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 fcb7 	bl	80023a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fa19 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000a4 	.word	0x200000a4
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	2000090e 	.word	0x2000090e

08000a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_SPI1_Init+0x78>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a5c:	2282      	movs	r2, #130	; 0x82
 8000a5e:	0052      	lsls	r2, r2, #1
 8000a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a6a:	22e0      	movs	r2, #224	; 0xe0
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a86:	2210      	movs	r2, #16
 8000a88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f002 fae9 	bl	8003088 <HAL_SPI_Init>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 f9d9 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000017c 	.word	0x2000017c
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MX_TIM16_Init+0x48>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000ad8:	224f      	movs	r2, #79	; 0x4f
 8000ada:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <MX_TIM16_Init+0x4c>)
 8000ae6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <MX_TIM16_Init+0x44>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fb7b 	bl	80031f8 <HAL_TIM_Base_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000b06:	f000 f9b3 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000268 	.word	0x20000268
 8000b14:	40014400 	.word	0x40014400
 8000b18:	0000ffff 	.word	0x0000ffff

08000b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART1_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b28:	2296      	movs	r2, #150	; 0x96
 8000b2a:	0192      	lsls	r2, r2, #6
 8000b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <MX_USART1_UART_Init+0x58>)
 8000b60:	0018      	movs	r0, r3
 8000b62:	f002 fc53 	bl	800340c <HAL_UART_Init>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f981 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000f4 	.word	0x200000f4
 8000b78:	40013800 	.word	0x40013800

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_USART2_UART_Init+0x5c>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b88:	22e1      	movs	r2, #225	; 0xe1
 8000b8a:	0252      	lsls	r2, r2, #9
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 fc23 	bl	800340c <HAL_UART_Init>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bca:	f000 f951 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200001e4 	.word	0x200001e4
 8000bd8:	40004400 	.word	0x40004400

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	240c      	movs	r4, #12
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	0018      	movs	r0, r3
 8000be8:	2314      	movs	r3, #20
 8000bea:	001a      	movs	r2, r3
 8000bec:	2100      	movs	r1, #0
 8000bee:	f003 fd9f 	bl	8004730 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <MX_GPIO_Init+0xf4>)
 8000bf4:	695a      	ldr	r2, [r3, #20]
 8000bf6:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <MX_GPIO_Init+0xf4>)
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	0289      	lsls	r1, r1, #10
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	615a      	str	r2, [r3, #20]
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <MX_GPIO_Init+0xf4>)
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	029b      	lsls	r3, r3, #10
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <MX_GPIO_Init+0xf4>)
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MX_GPIO_Init+0xf4>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	02c9      	lsls	r1, r1, #11
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <MX_GPIO_Init+0xf4>)
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	02db      	lsls	r3, r3, #11
 8000c24:	4013      	ands	r3, r2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	33ff      	adds	r3, #255	; 0xff
 8000c2e:	0019      	movs	r1, r3
 8000c30:	2390      	movs	r3, #144	; 0x90
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	2200      	movs	r2, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fe6a 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fe64 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	32ff      	adds	r2, #255	; 0xff
 8000c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2201      	movs	r2, #1
 8000c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	193a      	adds	r2, r7, r4
 8000c64:	2390      	movs	r3, #144	; 0x90
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fce8 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	2210      	movs	r2, #16
 8000c74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2288      	movs	r2, #136	; 0x88
 8000c7a:	0352      	lsls	r2, r2, #13
 8000c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	193a      	adds	r2, r7, r4
 8000c86:	2390      	movs	r3, #144	; 0x90
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fcd7 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c92:	0021      	movs	r1, r4
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2208      	movs	r2, #8
 8000c98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	0010      	movs	r0, r2
 8000cb4:	f000 fcc4 	bl	8001640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2007      	movs	r0, #7
 8000cbe:	f000 fc0f 	bl	80014e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f000 fc21 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b009      	add	sp, #36	; 0x24
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_4 && lockedDevice == 0) // If The INT Source Is EXTI Line4 (A4 Pin)
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	2b10      	cmp	r3, #16
 8000cea:	d114      	bne.n	8000d16 <HAL_GPIO_EXTI_Callback+0x3e>
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d110      	bne.n	8000d16 <HAL_GPIO_EXTI_Callback+0x3e>
    {
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Toggle The ONBOARD LED
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fe26 	bl	800194a <HAL_GPIO_TogglePin>
    	timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x50>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x54>)
 8000d06:	601a      	str	r2, [r3, #0]
    	counter2++;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d10:	601a      	str	r2, [r3, #0]
    	HAL_PWR_DisableSleepOnExit ();
 8000d12:	f001 fbbd 	bl	8002490 <HAL_PWR_DisableSleepOnExit>
    	//uint8_t INT_ENABLE[2] 			= {0x38, 0x00};
    }

}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	2000007c 	.word	0x2000007c
 8000d24:	48000400 	.word	0x48000400
 8000d28:	20000268 	.word	0x20000268
 8000d2c:	20000068 	.word	0x20000068
 8000d30:	2000004c 	.word	0x2000004c

08000d34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// ONBOARD LED
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
	 /*HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	  HAL_Delay(500);*/
	  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 8000d3c:	4913      	ldr	r1, [pc, #76]	; (8000d8c <HAL_UART_RxCpltCallback+0x58>)
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_UART_RxCpltCallback+0x5c>)
 8000d40:	220e      	movs	r2, #14
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 fbb6 	bl	80034b4 <HAL_UART_Receive_IT>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_UART_RxCpltCallback+0x60>)
 8000d4e:	701a      	strb	r2, [r3, #0]
	  if(checkKey(receiveUARTData, UARTDataKey) == 1){
 8000d50:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <HAL_UART_RxCpltCallback+0x64>)
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_UART_RxCpltCallback+0x58>)
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f824 	bl	8000da4 <checkKey>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10f      	bne.n	8000d82 <HAL_UART_RxCpltCallback+0x4e>
		  if(!lockedDevice){
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_UART_RxCpltCallback+0x68>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d108      	bne.n	8000d7c <HAL_UART_RxCpltCallback+0x48>
			  lockedDevice = 1;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_UART_RxCpltCallback+0x68>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
			  counter2 = 0;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_UART_RxCpltCallback+0x6c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			  HAL_PWR_DisableSleepOnExit ();
 8000d76:	f001 fb8b 	bl	8002490 <HAL_PWR_DisableSleepOnExit>

			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		  }

	  }
}
 8000d7a:	e002      	b.n	8000d82 <HAL_UART_RxCpltCallback+0x4e>
			  lockedDevice = 0;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_UART_RxCpltCallback+0x68>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000080 	.word	0x20000080
 8000d90:	200000f4 	.word	0x200000f4
 8000d94:	200000f0 	.word	0x200000f0
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	2000007c 	.word	0x2000007c
 8000da0:	2000004c 	.word	0x2000004c

08000da4 <checkKey>:

int checkKey(uint8_t arr1[],  uint8_t arr2[])
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < 30; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	e00e      	b.n	8000dd2 <checkKey+0x2e>
	{
		if(arr1[i] != arr2[i])
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	18cb      	adds	r3, r1, r3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d001      	beq.n	8000dcc <checkKey+0x28>
		{
			return 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e006      	b.n	8000dda <checkKey+0x36>
	for(i = 0; i < 30; i++)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b1d      	cmp	r3, #29
 8000dd6:	dded      	ble.n	8000db4 <checkKey+0x10>
		}
	}
	return 1;
 8000dd8:	2301      	movs	r3, #1
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <checkMovment>:

int checkMovment()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
	uint32_t xDiff = abs(refXAccValueWithOffset - finalXAccValueWithOffset);
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <checkMovment+0x74>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <checkMovment+0x78>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	17da      	asrs	r2, r3, #31
 8000df6:	189b      	adds	r3, r3, r2
 8000df8:	4053      	eors	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
	uint32_t yDiff = abs(refYAccValueWithOffset - finalYAccValueWithOffset);
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <checkMovment+0x7c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <checkMovment+0x80>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	17da      	asrs	r2, r3, #31
 8000e08:	189b      	adds	r3, r3, r2
 8000e0a:	4053      	eors	r3, r2
 8000e0c:	60bb      	str	r3, [r7, #8]
	uint32_t zDiff = abs(refZAccValueWithOffset - finalZAccValueWithOffset);
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <checkMovment+0x84>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <checkMovment+0x88>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	17da      	asrs	r2, r3, #31
 8000e1a:	189b      	adds	r3, r3, r2
 8000e1c:	4053      	eors	r3, r2
 8000e1e:	607b      	str	r3, [r7, #4]

	refXAccValueWithOffset = finalXAccValueWithOffset;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <checkMovment+0x78>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <checkMovment+0x74>)
 8000e26:	601a      	str	r2, [r3, #0]
	refYAccValueWithOffset = finalYAccValueWithOffset;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <checkMovment+0x80>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <checkMovment+0x7c>)
 8000e2e:	601a      	str	r2, [r3, #0]
	refZAccValueWithOffset = finalZAccValueWithOffset;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <checkMovment+0x88>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <checkMovment+0x84>)
 8000e36:	601a      	str	r2, [r3, #0]

	if(xDiff > 200 || yDiff > 200 || zDiff > 200){
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2bc8      	cmp	r3, #200	; 0xc8
 8000e3c:	d805      	bhi.n	8000e4a <checkMovment+0x66>
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2bc8      	cmp	r3, #200	; 0xc8
 8000e42:	d802      	bhi.n	8000e4a <checkMovment+0x66>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2bc8      	cmp	r3, #200	; 0xc8
 8000e48:	d901      	bls.n	8000e4e <checkMovment+0x6a>
		return 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <checkMovment+0x6c>
	}
	else{
		return 0;
 8000e4e:	2300      	movs	r3, #0
	}
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000070 	.word	0x20000070
 8000e5c:	20000054 	.word	0x20000054
 8000e60:	20000074 	.word	0x20000074
 8000e64:	2000005c 	.word	0x2000005c
 8000e68:	20000078 	.word	0x20000078
 8000e6c:	20000064 	.word	0x20000064

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	619a      	str	r2, [r3, #24]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2201      	movs	r2, #1
 8000e94:	4013      	ands	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	69da      	ldr	r2, [r3, #28]
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0549      	lsls	r1, r1, #21
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	61da      	str	r2, [r3, #28]
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_MspInit+0x44>)
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	055b      	lsls	r3, r3, #21
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b08b      	sub	sp, #44	; 0x2c
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	2414      	movs	r4, #20
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f003 fc2a 	bl	8004730 <memset>
  if(hi2c->Instance==I2C1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d133      	bne.n	8000f4e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <HAL_I2C_MspInit+0x98>)
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_I2C_MspInit+0x98>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0289      	lsls	r1, r1, #10
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_I2C_MspInit+0x98>)
 8000ef6:	695a      	ldr	r2, [r3, #20]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA11     ------> I2C1_SCL
    PA12     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	22c0      	movs	r2, #192	; 0xc0
 8000f06:	0152      	lsls	r2, r2, #5
 8000f08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2212      	movs	r2, #18
 8000f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2201      	movs	r2, #1
 8000f16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C1;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2205      	movs	r2, #5
 8000f22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	187a      	adds	r2, r7, r1
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 fb87 	bl	8001640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_I2C_MspInit+0x98>)
 8000f34:	69da      	ldr	r2, [r3, #28]
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_I2C_MspInit+0x98>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	0389      	lsls	r1, r1, #14
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	61da      	str	r2, [r3, #28]
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_I2C_MspInit+0x98>)
 8000f42:	69da      	ldr	r2, [r3, #28]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	039b      	lsls	r3, r3, #14
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b00b      	add	sp, #44	; 0x2c
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	2414      	movs	r4, #20
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2314      	movs	r3, #20
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f003 fbdc 	bl	8004730 <memset>
  if(hspi->Instance==SPI1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_SPI_MspInit+0x90>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d132      	bne.n	8000fe8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_SPI_MspInit+0x94>)
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_SPI_MspInit+0x94>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0149      	lsls	r1, r1, #5
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	619a      	str	r2, [r3, #24]
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_SPI_MspInit+0x94>)
 8000f92:	699a      	ldr	r2, [r3, #24]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	015b      	lsls	r3, r3, #5
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_SPI_MspInit+0x94>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_SPI_MspInit+0x94>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0289      	lsls	r1, r1, #10
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_SPI_MspInit+0x94>)
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	029b      	lsls	r3, r3, #10
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fba:	0021      	movs	r1, r4
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	22e0      	movs	r2, #224	; 0xe0
 8000fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	187a      	adds	r2, r7, r1
 8000fdc:	2390      	movs	r3, #144	; 0x90
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fb2c 	bl	8001640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b00b      	add	sp, #44	; 0x2c
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	40013000 	.word	0x40013000
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10d      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 800100c:	699a      	ldr	r2, [r3, #24]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0289      	lsls	r1, r1, #10
 8001014:	430a      	orrs	r2, r1
 8001016:	619a      	str	r2, [r3, #24]
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b004      	add	sp, #16
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40014400 	.word	0x40014400
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08d      	sub	sp, #52	; 0x34
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	241c      	movs	r4, #28
 8001042:	193b      	adds	r3, r7, r4
 8001044:	0018      	movs	r0, r3
 8001046:	2314      	movs	r3, #20
 8001048:	001a      	movs	r2, r3
 800104a:	2100      	movs	r1, #0
 800104c:	f003 fb70 	bl	8004730 <memset>
  if(huart->Instance==USART1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a3d      	ldr	r2, [pc, #244]	; (800114c <HAL_UART_MspInit+0x114>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d13c      	bne.n	80010d4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_UART_MspInit+0x118>)
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <HAL_UART_MspInit+0x118>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	01c9      	lsls	r1, r1, #7
 8001064:	430a      	orrs	r2, r1
 8001066:	619a      	str	r2, [r3, #24]
 8001068:	4b39      	ldr	r3, [pc, #228]	; (8001150 <HAL_UART_MspInit+0x118>)
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	01db      	lsls	r3, r3, #7
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b36      	ldr	r3, [pc, #216]	; (8001150 <HAL_UART_MspInit+0x118>)
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <HAL_UART_MspInit+0x118>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0289      	lsls	r1, r1, #10
 8001080:	430a      	orrs	r2, r1
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <HAL_UART_MspInit+0x118>)
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	22c0      	movs	r2, #192	; 0xc0
 8001096:	00d2      	lsls	r2, r2, #3
 8001098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	0021      	movs	r1, r4
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2202      	movs	r2, #2
 80010a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2203      	movs	r2, #3
 80010ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2201      	movs	r2, #1
 80010b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	187a      	adds	r2, r7, r1
 80010b6:	2390      	movs	r3, #144	; 0x90
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 fabf 	bl	8001640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	201b      	movs	r0, #27
 80010c8:	f000 fa0a 	bl	80014e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010cc:	201b      	movs	r0, #27
 80010ce:	f000 fa1c 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d2:	e037      	b.n	8001144 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_UART_MspInit+0x11c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d132      	bne.n	8001144 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_UART_MspInit+0x118>)
 80010e0:	69da      	ldr	r2, [r3, #28]
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_UART_MspInit+0x118>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	0289      	lsls	r1, r1, #10
 80010e8:	430a      	orrs	r2, r1
 80010ea:	61da      	str	r2, [r3, #28]
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_UART_MspInit+0x118>)
 80010ee:	69da      	ldr	r2, [r3, #28]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0x118>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_UART_MspInit+0x118>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0289      	lsls	r1, r1, #10
 8001104:	430a      	orrs	r2, r1
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_UART_MspInit+0x118>)
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001116:	211c      	movs	r1, #28
 8001118:	187b      	adds	r3, r7, r1
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2202      	movs	r2, #2
 8001122:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2203      	movs	r2, #3
 800112e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2201      	movs	r2, #1
 8001134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	187a      	adds	r2, r7, r1
 8001138:	2390      	movs	r3, #144	; 0x90
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fa7e 	bl	8001640 <HAL_GPIO_Init>
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b00d      	add	sp, #52	; 0x34
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	40013800 	.word	0x40013800
 8001150:	40021000 	.word	0x40021000
 8001154:	40004400 	.word	0x40004400

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f8a8 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800118a:	2010      	movs	r0, #16
 800118c:	f000 fbf8 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <USART1_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 f9ea 	bl	8003578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	200000f4 	.word	0x200000f4

080011b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011bc:	4813      	ldr	r0, [pc, #76]	; (800120c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011be:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <LoopForever+0x6>)
    LDR R1, [R0]
 80011c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80011c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <LoopForever+0xa>)
    CMP R1, R2
 80011c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80011ca:	d105      	bne.n	80011d8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80011ce:	4913      	ldr	r1, [pc, #76]	; (800121c <LoopForever+0x12>)
    STR R1, [R0]
 80011d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80011d2:	4813      	ldr	r0, [pc, #76]	; (8001220 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80011d4:	4913      	ldr	r1, [pc, #76]	; (8001224 <LoopForever+0x1a>)
    STR R1, [R0]
 80011d6:	6001      	str	r1, [r0, #0]

080011d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <LoopForever+0x1e>)
  ldr r1, =_edata
 80011da:	4914      	ldr	r1, [pc, #80]	; (800122c <LoopForever+0x22>)
  ldr r2, =_sidata
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <LoopForever+0x26>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80011f0:	4c11      	ldr	r4, [pc, #68]	; (8001238 <LoopForever+0x2e>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001202:	f003 fa71 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001206:	f7ff f80b 	bl	8000220 <main>

0800120a <LoopForever>:

LoopForever:
    b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   r0, =_estack
 800120c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001210:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001214:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001218:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800121c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001220:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001224:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001230:	08004874 	.word	0x08004874
  ldr r2, =_sbss
 8001234:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001238:	200002b8 	.word	0x200002b8

0800123c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_IRQHandler>
	...

08001240 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_Init+0x24>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_Init+0x24>)
 800124a:	2110      	movs	r1, #16
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001250:	2000      	movs	r0, #0
 8001252:	f000 f809 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001256:	f7ff fe11 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_InitTick+0x5c>)
 8001272:	681c      	ldr	r4, [r3, #0]
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	0019      	movs	r1, r3
 800127a:	23fa      	movs	r3, #250	; 0xfa
 800127c:	0098      	lsls	r0, r3, #2
 800127e:	f7fe ff43 	bl	8000108 <__udivsi3>
 8001282:	0003      	movs	r3, r0
 8001284:	0019      	movs	r1, r3
 8001286:	0020      	movs	r0, r4
 8001288:	f7fe ff3e 	bl	8000108 <__udivsi3>
 800128c:	0003      	movs	r3, r0
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f94b 	bl	800152a <HAL_SYSTICK_Config>
 8001294:	1e03      	subs	r3, r0, #0
 8001296:	d001      	beq.n	800129c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e00f      	b.n	80012bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d80b      	bhi.n	80012ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	2301      	movs	r3, #1
 80012a6:	425b      	negs	r3, r3
 80012a8:	2200      	movs	r2, #0
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 f918 	bl	80014e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_InitTick+0x64>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b003      	add	sp, #12
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	20000020 	.word	0x20000020
 80012c8:	20000028 	.word	0x20000028
 80012cc:	20000024 	.word	0x20000024

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x1c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	001a      	movs	r2, r3
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x20>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	18d2      	adds	r2, r2, r3
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_IncTick+0x20>)
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	20000028 	.word	0x20000028
 80012f0:	200002b4 	.word	0x200002b4

080012f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <HAL_GetTick+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	200002b4 	.word	0x200002b4

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff fff0 	bl	80012f4 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3301      	adds	r3, #1
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	001a      	movs	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	189b      	adds	r3, r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	f7ff ffe0 	bl	80012f4 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	20000028 	.word	0x20000028

08001350 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_SuspendTick+0x18>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_SuspendTick+0x18>)
 800135a:	2102      	movs	r1, #2
 800135c:	438a      	bics	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_ResumeTick+0x18>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_ResumeTick+0x18>)
 8001376:	2102      	movs	r1, #2
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	e000e010 	.word	0xe000e010

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b7f      	cmp	r3, #127	; 0x7f
 800139a:	d809      	bhi.n	80013b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	001a      	movs	r2, r3
 80013a2:	231f      	movs	r3, #31
 80013a4:	401a      	ands	r2, r3
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_EnableIRQ+0x30>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	4091      	lsls	r1, r2
 80013ac:	000a      	movs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
  }
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	0002      	movs	r2, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b7f      	cmp	r3, #127	; 0x7f
 80013d0:	d828      	bhi.n	8001424 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d2:	4a2f      	ldr	r2, [pc, #188]	; (8001490 <__NVIC_SetPriority+0xd4>)
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	33c0      	adds	r3, #192	; 0xc0
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	589b      	ldr	r3, [r3, r2]
 80013e2:	1dfa      	adds	r2, r7, #7
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	0011      	movs	r1, r2
 80013e8:	2203      	movs	r2, #3
 80013ea:	400a      	ands	r2, r1
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	21ff      	movs	r1, #255	; 0xff
 80013f0:	4091      	lsls	r1, r2
 80013f2:	000a      	movs	r2, r1
 80013f4:	43d2      	mvns	r2, r2
 80013f6:	401a      	ands	r2, r3
 80013f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	019b      	lsls	r3, r3, #6
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	401a      	ands	r2, r3
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	0018      	movs	r0, r3
 8001408:	2303      	movs	r3, #3
 800140a:	4003      	ands	r3, r0
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001410:	481f      	ldr	r0, [pc, #124]	; (8001490 <__NVIC_SetPriority+0xd4>)
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b25b      	sxtb	r3, r3
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	430a      	orrs	r2, r1
 800141c:	33c0      	adds	r3, #192	; 0xc0
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001422:	e031      	b.n	8001488 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <__NVIC_SetPriority+0xd8>)
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0019      	movs	r1, r3
 800142c:	230f      	movs	r3, #15
 800142e:	400b      	ands	r3, r1
 8001430:	3b08      	subs	r3, #8
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3306      	adds	r3, #6
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	18d3      	adds	r3, r2, r3
 800143a:	3304      	adds	r3, #4
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1dfa      	adds	r2, r7, #7
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	0011      	movs	r1, r2
 8001444:	2203      	movs	r2, #3
 8001446:	400a      	ands	r2, r1
 8001448:	00d2      	lsls	r2, r2, #3
 800144a:	21ff      	movs	r1, #255	; 0xff
 800144c:	4091      	lsls	r1, r2
 800144e:	000a      	movs	r2, r1
 8001450:	43d2      	mvns	r2, r2
 8001452:	401a      	ands	r2, r3
 8001454:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	401a      	ands	r2, r3
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	0018      	movs	r0, r3
 8001464:	2303      	movs	r3, #3
 8001466:	4003      	ands	r3, r0
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <__NVIC_SetPriority+0xd8>)
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	001c      	movs	r4, r3
 8001474:	230f      	movs	r3, #15
 8001476:	4023      	ands	r3, r4
 8001478:	3b08      	subs	r3, #8
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	430a      	orrs	r2, r1
 800147e:	3306      	adds	r3, #6
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	18c3      	adds	r3, r0, r3
 8001484:	3304      	adds	r3, #4
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b003      	add	sp, #12
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1e5a      	subs	r2, r3, #1
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	045b      	lsls	r3, r3, #17
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d301      	bcc.n	80014b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ac:	2301      	movs	r3, #1
 80014ae:	e010      	b.n	80014d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <SysTick_Config+0x44>)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	3a01      	subs	r2, #1
 80014b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b8:	2301      	movs	r3, #1
 80014ba:	425b      	negs	r3, r3
 80014bc:	2103      	movs	r1, #3
 80014be:	0018      	movs	r0, r3
 80014c0:	f7ff ff7c 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x44>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x44>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	210f      	movs	r1, #15
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	1c02      	adds	r2, r0, #0
 80014f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	0011      	movs	r1, r2
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	0002      	movs	r2, r0
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25b      	sxtb	r3, r3
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff ff33 	bl	8001388 <__NVIC_EnableIRQ>
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b002      	add	sp, #8
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff ffaf 	bl	8001498 <SysTick_Config>
 800153a:	0003      	movs	r3, r0
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2221      	movs	r2, #33	; 0x21
 8001550:	5c9b      	ldrb	r3, [r3, r2]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d008      	beq.n	800156a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2220      	movs	r2, #32
 8001562:	2100      	movs	r1, #0
 8001564:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e020      	b.n	80015ac <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	210e      	movs	r1, #14
 8001576:	438a      	bics	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	438a      	bics	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001592:	2101      	movs	r1, #1
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2221      	movs	r2, #33	; 0x21
 800159e:	2101      	movs	r1, #1
 80015a0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2220      	movs	r2, #32
 80015a6:	2100      	movs	r1, #0
 80015a8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	210f      	movs	r1, #15
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2221      	movs	r2, #33	; 0x21
 80015c8:	5c9b      	ldrb	r3, [r3, r2]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d006      	beq.n	80015de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2204      	movs	r2, #4
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e028      	b.n	8001630 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	210e      	movs	r1, #14
 80015ea:	438a      	bics	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	438a      	bics	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	2101      	movs	r1, #1
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2221      	movs	r2, #33	; 0x21
 8001612:	2101      	movs	r1, #1
 8001614:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2220      	movs	r2, #32
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	0010      	movs	r0, r2
 800162e:	4798      	blx	r3
    } 
  }
  return status;
 8001630:	230f      	movs	r3, #15
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164e:	e149      	b.n	80018e4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d100      	bne.n	8001668 <HAL_GPIO_Init+0x28>
 8001666:	e13a      	b.n	80018de <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	2b01      	cmp	r3, #1
 8001672:	d005      	beq.n	8001680 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2203      	movs	r2, #3
 800167a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800167c:	2b02      	cmp	r3, #2
 800167e:	d130      	bne.n	80016e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	409a      	lsls	r2, r3
 800168e:	0013      	movs	r3, r2
 8001690:	43da      	mvns	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	2201      	movs	r2, #1
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d017      	beq.n	800171e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2203      	movs	r2, #3
 8001724:	4013      	ands	r3, r2
 8001726:	2b02      	cmp	r3, #2
 8001728:	d123      	bne.n	8001772 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	58d3      	ldr	r3, [r2, r3]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2207      	movs	r2, #7
 800173c:	4013      	ands	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2107      	movs	r1, #7
 8001756:	400b      	ands	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	6939      	ldr	r1, [r7, #16]
 8001770:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	401a      	ands	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	029b      	lsls	r3, r3, #10
 80017ae:	4013      	ands	r3, r2
 80017b0:	d100      	bne.n	80017b4 <HAL_GPIO_Init+0x174>
 80017b2:	e094      	b.n	80018de <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_GPIO_Init+0x2bc>)
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_GPIO_Init+0x2bc>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	619a      	str	r2, [r3, #24]
 80017c0:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_GPIO_Init+0x2bc>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017cc:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <HAL_GPIO_Init+0x2c0>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	589b      	ldr	r3, [r3, r2]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2203      	movs	r2, #3
 80017de:	4013      	ands	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	409a      	lsls	r2, r3
 80017e6:	0013      	movs	r3, r2
 80017e8:	43da      	mvns	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	2390      	movs	r3, #144	; 0x90
 80017f4:	05db      	lsls	r3, r3, #23
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x1d6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a41      	ldr	r2, [pc, #260]	; (8001904 <HAL_GPIO_Init+0x2c4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x1d2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a40      	ldr	r2, [pc, #256]	; (8001908 <HAL_GPIO_Init+0x2c8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x1ce>
 800180a:	2302      	movs	r3, #2
 800180c:	e004      	b.n	8001818 <HAL_GPIO_Init+0x1d8>
 800180e:	2305      	movs	r3, #5
 8001810:	e002      	b.n	8001818 <HAL_GPIO_Init+0x1d8>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x1d8>
 8001816:	2300      	movs	r3, #0
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	2103      	movs	r1, #3
 800181c:	400a      	ands	r2, r1
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	4093      	lsls	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001828:	4935      	ldr	r1, [pc, #212]	; (8001900 <HAL_GPIO_Init+0x2c0>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001836:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_GPIO_Init+0x2cc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43da      	mvns	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	4013      	ands	r3, r2
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_GPIO_Init+0x2cc>)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_GPIO_Init+0x2cc>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43da      	mvns	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	029b      	lsls	r3, r3, #10
 8001878:	4013      	ands	r3, r2
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_GPIO_Init+0x2cc>)
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_GPIO_Init+0x2cc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	035b      	lsls	r3, r3, #13
 80018a2:	4013      	ands	r3, r2
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_GPIO_Init+0x2cc>)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_GPIO_Init+0x2cc>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43da      	mvns	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	039b      	lsls	r3, r3, #14
 80018cc:	4013      	ands	r3, r2
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_GPIO_Init+0x2cc>)
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	40da      	lsrs	r2, r3
 80018ec:	1e13      	subs	r3, r2, #0
 80018ee:	d000      	beq.n	80018f2 <HAL_GPIO_Init+0x2b2>
 80018f0:	e6ae      	b.n	8001650 <HAL_GPIO_Init+0x10>
  } 
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b006      	add	sp, #24
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	48000400 	.word	0x48000400
 8001908:	48000800 	.word	0x48000800
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	0008      	movs	r0, r1
 800191a:	0011      	movs	r1, r2
 800191c:	1cbb      	adds	r3, r7, #2
 800191e:	1c02      	adds	r2, r0, #0
 8001920:	801a      	strh	r2, [r3, #0]
 8001922:	1c7b      	adds	r3, r7, #1
 8001924:	1c0a      	adds	r2, r1, #0
 8001926:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001928:	1c7b      	adds	r3, r7, #1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001930:	1cbb      	adds	r3, r7, #2
 8001932:	881a      	ldrh	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001938:	e003      	b.n	8001942 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800193a:	1cbb      	adds	r3, r7, #2
 800193c:	881a      	ldrh	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	b002      	add	sp, #8
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	000a      	movs	r2, r1
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800195e:	1cbb      	adds	r3, r7, #2
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	041a      	lsls	r2, r3, #16
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	1cb9      	adds	r1, r7, #2
 800196e:	8809      	ldrh	r1, [r1, #0]
 8001970:	400b      	ands	r3, r1
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	0002      	movs	r2, r0
 8001988:	1dbb      	adds	r3, r7, #6
 800198a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	1dba      	adds	r2, r7, #6
 8001992:	8812      	ldrh	r2, [r2, #0]
 8001994:	4013      	ands	r3, r2
 8001996:	d008      	beq.n	80019aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800199a:	1dba      	adds	r2, r7, #6
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff f997 	bl	8000cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e082      	b.n	8001ad0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2241      	movs	r2, #65	; 0x41
 80019ce:	5c9b      	ldrb	r3, [r3, r2]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d107      	bne.n	80019e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	2100      	movs	r1, #0
 80019dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff fa6f 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2241      	movs	r2, #65	; 0x41
 80019ea:	2124      	movs	r1, #36	; 0x24
 80019ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	438a      	bics	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <HAL_I2C_Init+0x120>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4931      	ldr	r1, [pc, #196]	; (8001adc <HAL_I2C_Init+0x124>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	0209      	lsls	r1, r1, #8
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	e007      	b.n	8001a46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2184      	movs	r1, #132	; 0x84
 8001a40:	0209      	lsls	r1, r1, #8
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d104      	bne.n	8001a58 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	491f      	ldr	r1, [pc, #124]	; (8001ae0 <HAL_I2C_Init+0x128>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	491a      	ldr	r1, [pc, #104]	; (8001adc <HAL_I2C_Init+0x124>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69d9      	ldr	r1, [r3, #28]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2241      	movs	r2, #65	; 0x41
 8001abc:	2120      	movs	r1, #32
 8001abe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2242      	movs	r2, #66	; 0x42
 8001aca:	2100      	movs	r1, #0
 8001acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	f0ffffff 	.word	0xf0ffffff
 8001adc:	ffff7fff 	.word	0xffff7fff
 8001ae0:	02008000 	.word	0x02008000

08001ae4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	0008      	movs	r0, r1
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	0019      	movs	r1, r3
 8001af2:	230a      	movs	r3, #10
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	1c02      	adds	r2, r0, #0
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	2308      	movs	r3, #8
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	1c0a      	adds	r2, r1, #0
 8001b00:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2241      	movs	r2, #65	; 0x41
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d000      	beq.n	8001b10 <HAL_I2C_Master_Transmit+0x2c>
 8001b0e:	e0e7      	b.n	8001ce0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	5c9b      	ldrb	r3, [r3, r2]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_I2C_Master_Transmit+0x3a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e0e1      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1fe>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b26:	f7ff fbe5 	bl	80012f4 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	0219      	lsls	r1, r3, #8
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2319      	movs	r3, #25
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f000 fa10 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0cc      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2241      	movs	r2, #65	; 0x41
 8001b4c:	2121      	movs	r1, #33	; 0x21
 8001b4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2242      	movs	r2, #66	; 0x42
 8001b54:	2110      	movs	r1, #16
 8001b56:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2208      	movs	r2, #8
 8001b68:	18ba      	adds	r2, r7, r2
 8001b6a:	8812      	ldrh	r2, [r2, #0]
 8001b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d911      	bls.n	8001ba2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	22ff      	movs	r2, #255	; 0xff
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	045c      	lsls	r4, r3, #17
 8001b8e:	230a      	movs	r3, #10
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	8819      	ldrh	r1, [r3, #0]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	4b55      	ldr	r3, [pc, #340]	; (8001cec <HAL_I2C_Master_Transmit+0x208>)
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	0023      	movs	r3, r4
 8001b9c:	f000 fb80 	bl	80022a0 <I2C_TransferConfig>
 8001ba0:	e075      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	049c      	lsls	r4, r3, #18
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	8819      	ldrh	r1, [r3, #0]
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <HAL_I2C_Master_Transmit+0x208>)
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	0023      	movs	r3, r4
 8001bc4:	f000 fb6c 	bl	80022a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bc8:	e061      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f000 fa04 	bl	8001fde <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e081      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d03a      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0x1aa>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d136      	bne.n	8001c8e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	0013      	movs	r3, r2
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	f000 f997 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e053      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2bff      	cmp	r3, #255	; 0xff
 8001c42:	d911      	bls.n	8001c68 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	045c      	lsls	r4, r3, #17
 8001c54:	230a      	movs	r3, #10
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	8819      	ldrh	r1, [r3, #0]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	0023      	movs	r3, r4
 8001c62:	f000 fb1d 	bl	80022a0 <I2C_TransferConfig>
 8001c66:	e012      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	049c      	lsls	r4, r3, #18
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	8819      	ldrh	r1, [r3, #0]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	2300      	movs	r3, #0
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	0023      	movs	r3, r4
 8001c8a:	f000 fb09 	bl	80022a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d198      	bne.n	8001bca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 f9dc 	bl	800205c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e01a      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <HAL_I2C_Master_Transmit+0x20c>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2241      	movs	r2, #65	; 0x41
 8001cc8:	2120      	movs	r1, #32
 8001cca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2242      	movs	r2, #66	; 0x42
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	2100      	movs	r1, #0
 8001cda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
  }
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b007      	add	sp, #28
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	80002000 	.word	0x80002000
 8001cf0:	fe00e800 	.word	0xfe00e800

08001cf4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	0008      	movs	r0, r1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	0019      	movs	r1, r3
 8001d02:	230a      	movs	r3, #10
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	1c02      	adds	r2, r0, #0
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	1c0a      	adds	r2, r1, #0
 8001d10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2241      	movs	r2, #65	; 0x41
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d000      	beq.n	8001d20 <HAL_I2C_Master_Receive+0x2c>
 8001d1e:	e0e8      	b.n	8001ef2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_I2C_Master_Receive+0x3a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e0e2      	b.n	8001ef4 <HAL_I2C_Master_Receive+0x200>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2240      	movs	r2, #64	; 0x40
 8001d32:	2101      	movs	r1, #1
 8001d34:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d36:	f7ff fadd 	bl	80012f4 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	0219      	lsls	r1, r3, #8
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2319      	movs	r3, #25
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f000 f908 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0cd      	b.n	8001ef4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2241      	movs	r2, #65	; 0x41
 8001d5c:	2122      	movs	r1, #34	; 0x22
 8001d5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2242      	movs	r2, #66	; 0x42
 8001d64:	2110      	movs	r1, #16
 8001d66:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2208      	movs	r2, #8
 8001d78:	18ba      	adds	r2, r7, r2
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d911      	bls.n	8001db2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	045c      	lsls	r4, r3, #17
 8001d9e:	230a      	movs	r3, #10
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	8819      	ldrh	r1, [r3, #0]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	4b55      	ldr	r3, [pc, #340]	; (8001efc <HAL_I2C_Master_Receive+0x208>)
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	0023      	movs	r3, r4
 8001dac:	f000 fa78 	bl	80022a0 <I2C_TransferConfig>
 8001db0:	e076      	b.n	8001ea0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	049c      	lsls	r4, r3, #18
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	8819      	ldrh	r1, [r3, #0]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <HAL_I2C_Master_Receive+0x208>)
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	0023      	movs	r3, r4
 8001dd4:	f000 fa64 	bl	80022a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001dd8:	e062      	b.n	8001ea0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 f977 	bl	80020d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e082      	b.n	8001ef4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03a      	beq.n	8001ea0 <HAL_I2C_Master_Receive+0x1ac>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d136      	bne.n	8001ea0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	f000 f88e 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e053      	b.n	8001ef4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d911      	bls.n	8001e7a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	22ff      	movs	r2, #255	; 0xff
 8001e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	045c      	lsls	r4, r3, #17
 8001e66:	230a      	movs	r3, #10
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	8819      	ldrh	r1, [r3, #0]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	0023      	movs	r3, r4
 8001e74:	f000 fa14 	bl	80022a0 <I2C_TransferConfig>
 8001e78:	e012      	b.n	8001ea0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	049c      	lsls	r4, r3, #18
 8001e8e:	230a      	movs	r3, #10
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	8819      	ldrh	r1, [r3, #0]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	0023      	movs	r3, r4
 8001e9c:	f000 fa00 	bl	80022a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d197      	bne.n	8001dda <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f8d3 	bl	800205c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01a      	b.n	8001ef4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	490b      	ldr	r1, [pc, #44]	; (8001f00 <HAL_I2C_Master_Receive+0x20c>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2241      	movs	r2, #65	; 0x41
 8001eda:	2120      	movs	r1, #32
 8001edc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2242      	movs	r2, #66	; 0x42
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2240      	movs	r2, #64	; 0x40
 8001eea:	2100      	movs	r1, #0
 8001eec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b007      	add	sp, #28
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	80002400 	.word	0x80002400
 8001f00:	fe00e800 	.word	0xfe00e800

08001f04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2241      	movs	r2, #65	; 0x41
 8001f10:	5c9b      	ldrb	r3, [r3, r2]
 8001f12:	b2db      	uxtb	r3, r3
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d103      	bne.n	8001f3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d007      	beq.n	8001f58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2101      	movs	r1, #1
 8001f54:	430a      	orrs	r2, r1
 8001f56:	619a      	str	r2, [r3, #24]
  }
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f70:	e021      	b.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	d01e      	beq.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f78:	f7ff f9bc 	bl	80012f4 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d302      	bcc.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d113      	bne.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	2220      	movs	r2, #32
 8001f94:	431a      	orrs	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2241      	movs	r2, #65	; 0x41
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2242      	movs	r2, #66	; 0x42
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2240      	movs	r2, #64	; 0x40
 8001fae:	2100      	movs	r1, #0
 8001fb0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	425a      	negs	r2, r3
 8001fc6:	4153      	adcs	r3, r2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	001a      	movs	r2, r3
 8001fcc:	1dfb      	adds	r3, r7, #7
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d0ce      	beq.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fea:	e02b      	b.n	8002044 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 f8da 	bl	80021ac <I2C_IsAcknowledgeFailed>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d001      	beq.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e029      	b.n	8002054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3301      	adds	r3, #1
 8002004:	d01e      	beq.n	8002044 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002006:	f7ff f975 	bl	80012f4 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	429a      	cmp	r2, r3
 8002014:	d302      	bcc.n	800201c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d113      	bne.n	8002044 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	2220      	movs	r2, #32
 8002022:	431a      	orrs	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2241      	movs	r2, #65	; 0x41
 800202c:	2120      	movs	r1, #32
 800202e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2242      	movs	r2, #66	; 0x42
 8002034:	2100      	movs	r1, #0
 8002036:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	2100      	movs	r1, #0
 800203e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e007      	b.n	8002054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2202      	movs	r2, #2
 800204c:	4013      	ands	r3, r2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d1cc      	bne.n	8001fec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b004      	add	sp, #16
 800205a:	bd80      	pop	{r7, pc}

0800205c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002068:	e028      	b.n	80020bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f89b 	bl	80021ac <I2C_IsAcknowledgeFailed>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d001      	beq.n	800207e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e026      	b.n	80020cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7ff f939 	bl	80012f4 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d113      	bne.n	80020bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	2220      	movs	r2, #32
 800209a:	431a      	orrs	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2241      	movs	r2, #65	; 0x41
 80020a4:	2120      	movs	r1, #32
 80020a6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2242      	movs	r2, #66	; 0x42
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e007      	b.n	80020cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2220      	movs	r2, #32
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d1cf      	bne.n	800206a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020e0:	e055      	b.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 f85f 	bl	80021ac <I2C_IsAcknowledgeFailed>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d001      	beq.n	80020f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e053      	b.n	800219e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2220      	movs	r2, #32
 80020fe:	4013      	ands	r3, r2
 8002100:	2b20      	cmp	r3, #32
 8002102:	d129      	bne.n	8002158 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
 800210e:	2b04      	cmp	r3, #4
 8002110:	d105      	bne.n	800211e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e03f      	b.n	800219e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2220      	movs	r2, #32
 8002124:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	491d      	ldr	r1, [pc, #116]	; (80021a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002132:	400a      	ands	r2, r1
 8002134:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2241      	movs	r2, #65	; 0x41
 8002140:	2120      	movs	r1, #32
 8002142:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2242      	movs	r2, #66	; 0x42
 8002148:	2100      	movs	r1, #0
 800214a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e022      	b.n	800219e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002158:	f7ff f8cc 	bl	80012f4 <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d302      	bcc.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10f      	bne.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	2220      	movs	r2, #32
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2241      	movs	r2, #65	; 0x41
 800217e:	2120      	movs	r1, #32
 8002180:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2240      	movs	r2, #64	; 0x40
 8002186:	2100      	movs	r1, #0
 8002188:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	2b04      	cmp	r3, #4
 800219a:	d1a2      	bne.n	80020e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	fe00e800 	.word	0xfe00e800

080021ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2210      	movs	r2, #16
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d164      	bne.n	8002290 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	049b      	lsls	r3, r3, #18
 80021d0:	401a      	ands	r2, r3
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	049b      	lsls	r3, r3, #18
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d02b      	beq.n	8002232 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	01c9      	lsls	r1, r1, #7
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ec:	e021      	b.n	8002232 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3301      	adds	r3, #1
 80021f2:	d01e      	beq.n	8002232 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7ff f87e 	bl	80012f4 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <I2C_IsAcknowledgeFailed+0x5e>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	2220      	movs	r2, #32
 8002210:	431a      	orrs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2241      	movs	r2, #65	; 0x41
 800221a:	2120      	movs	r1, #32
 800221c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2242      	movs	r2, #66	; 0x42
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e02f      	b.n	8002292 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2220      	movs	r2, #32
 800223a:	4013      	ands	r3, r2
 800223c:	2b20      	cmp	r3, #32
 800223e:	d1d6      	bne.n	80021ee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2220      	movs	r2, #32
 800224e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff fe62 	bl	8001f1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	490e      	ldr	r1, [pc, #56]	; (800229c <I2C_IsAcknowledgeFailed+0xf0>)
 8002264:	400a      	ands	r2, r1
 8002266:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	2204      	movs	r2, #4
 800226e:	431a      	orrs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2241      	movs	r2, #65	; 0x41
 8002278:	2120      	movs	r1, #32
 800227a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2242      	movs	r2, #66	; 0x42
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2240      	movs	r2, #64	; 0x40
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	b004      	add	sp, #16
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	fe00e800 	.word	0xfe00e800

080022a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	0008      	movs	r0, r1
 80022aa:	0011      	movs	r1, r2
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	240a      	movs	r4, #10
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	1c02      	adds	r2, r0, #0
 80022b4:	801a      	strh	r2, [r3, #0]
 80022b6:	2009      	movs	r0, #9
 80022b8:	183b      	adds	r3, r7, r0
 80022ba:	1c0a      	adds	r2, r1, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	0d51      	lsrs	r1, r2, #21
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	00d2      	lsls	r2, r2, #3
 80022cc:	400a      	ands	r2, r1
 80022ce:	490e      	ldr	r1, [pc, #56]	; (8002308 <I2C_TransferConfig+0x68>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	43d2      	mvns	r2, r2
 80022d4:	401a      	ands	r2, r3
 80022d6:	0011      	movs	r1, r2
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	059b      	lsls	r3, r3, #22
 80022de:	0d9a      	lsrs	r2, r3, #22
 80022e0:	183b      	adds	r3, r7, r0
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	0418      	lsls	r0, r3, #16
 80022e6:	23ff      	movs	r3, #255	; 0xff
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	4003      	ands	r3, r0
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b005      	add	sp, #20
 8002304:	bd90      	pop	{r4, r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	03ff63ff 	.word	0x03ff63ff

0800230c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b20      	cmp	r3, #32
 8002320:	d138      	bne.n	8002394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	; 0x40
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e032      	b.n	8002396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2241      	movs	r2, #65	; 0x41
 800233c:	2124      	movs	r1, #36	; 0x24
 800233e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4911      	ldr	r1, [pc, #68]	; (80023a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800235c:	400a      	ands	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6819      	ldr	r1, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2241      	movs	r2, #65	; 0x41
 8002384:	2120      	movs	r1, #32
 8002386:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002394:	2302      	movs	r3, #2
  }
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	ffffefff 	.word	0xffffefff

080023a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2241      	movs	r2, #65	; 0x41
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d139      	bne.n	800242e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e033      	b.n	8002430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2241      	movs	r2, #65	; 0x41
 80023d4:	2124      	movs	r1, #36	; 0x24
 80023d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a11      	ldr	r2, [pc, #68]	; (8002438 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2241      	movs	r2, #65	; 0x41
 800241e:	2120      	movs	r1, #32
 8002420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2240      	movs	r2, #64	; 0x40
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fffff0ff 	.word	0xfffff0ff

0800243c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	000a      	movs	r2, r1
 8002446:	1cfb      	adds	r3, r7, #3
 8002448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_PWR_EnterSLEEPMode+0x34>)
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002450:	2104      	movs	r1, #4
 8002452:	438a      	bics	r2, r1
 8002454:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002456:	1cfb      	adds	r3, r7, #3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800245e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002460:	e002      	b.n	8002468 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8002462:	bf40      	sev
    __WFE();
 8002464:	bf20      	wfe
    __WFE();
 8002466:	bf20      	wfe
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_PWR_EnableSleepOnExit+0x18>)
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_PWR_EnableSleepOnExit+0x18>)
 800247e:	2102      	movs	r1, #2
 8002480:	430a      	orrs	r2, r1
 8002482:	611a      	str	r2, [r3, #16]
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_PWR_DisableSleepOnExit+0x18>)
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_PWR_DisableSleepOnExit+0x18>)
 800249a:	2102      	movs	r1, #2
 800249c:	438a      	bics	r2, r1
 800249e:	611a      	str	r2, [r3, #16]
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 fb76 	bl	8002bac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d100      	bne.n	80024cc <HAL_RCC_OscConfig+0x20>
 80024ca:	e08e      	b.n	80025ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024cc:	4bc5      	ldr	r3, [pc, #788]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	220c      	movs	r2, #12
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00e      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d8:	4bc2      	ldr	r3, [pc, #776]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	220c      	movs	r2, #12
 80024de:	4013      	ands	r3, r2
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d117      	bne.n	8002514 <HAL_RCC_OscConfig+0x68>
 80024e4:	4bbf      	ldr	r3, [pc, #764]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	23c0      	movs	r3, #192	; 0xc0
 80024ea:	025b      	lsls	r3, r3, #9
 80024ec:	401a      	ands	r2, r3
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	025b      	lsls	r3, r3, #9
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10e      	bne.n	8002514 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4bbb      	ldr	r3, [pc, #748]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4013      	ands	r3, r2
 8002500:	d100      	bne.n	8002504 <HAL_RCC_OscConfig+0x58>
 8002502:	e071      	b.n	80025e8 <HAL_RCC_OscConfig+0x13c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d000      	beq.n	800250e <HAL_RCC_OscConfig+0x62>
 800250c:	e06c      	b.n	80025e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	f000 fb4c 	bl	8002bac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x80>
 800251c:	4bb1      	ldr	r3, [pc, #708]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4bb0      	ldr	r3, [pc, #704]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0249      	lsls	r1, r1, #9
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e02f      	b.n	800258c <HAL_RCC_OscConfig+0xe0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0xa2>
 8002534:	4bab      	ldr	r3, [pc, #684]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4baa      	ldr	r3, [pc, #680]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800253a:	49ab      	ldr	r1, [pc, #684]	; (80027e8 <HAL_RCC_OscConfig+0x33c>)
 800253c:	400a      	ands	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	4ba8      	ldr	r3, [pc, #672]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4ba7      	ldr	r3, [pc, #668]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002546:	49a9      	ldr	r1, [pc, #676]	; (80027ec <HAL_RCC_OscConfig+0x340>)
 8002548:	400a      	ands	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e01e      	b.n	800258c <HAL_RCC_OscConfig+0xe0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d10e      	bne.n	8002574 <HAL_RCC_OscConfig+0xc8>
 8002556:	4ba3      	ldr	r3, [pc, #652]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4ba2      	ldr	r3, [pc, #648]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	02c9      	lsls	r1, r1, #11
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4b9f      	ldr	r3, [pc, #636]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b9e      	ldr	r3, [pc, #632]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xe0>
 8002574:	4b9b      	ldr	r3, [pc, #620]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b9a      	ldr	r3, [pc, #616]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800257a:	499b      	ldr	r1, [pc, #620]	; (80027e8 <HAL_RCC_OscConfig+0x33c>)
 800257c:	400a      	ands	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	4b98      	ldr	r3, [pc, #608]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b97      	ldr	r3, [pc, #604]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002586:	4999      	ldr	r1, [pc, #612]	; (80027ec <HAL_RCC_OscConfig+0x340>)
 8002588:	400a      	ands	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d014      	beq.n	80025be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe feae 	bl	80012f4 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259e:	f7fe fea9 	bl	80012f4 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e2fd      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b0:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0xf2>
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fe99 	bl	80012f4 <HAL_GetTick>
 80025c2:	0003      	movs	r3, r0
 80025c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fe94 	bl	80012f4 <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e2e8      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	029b      	lsls	r3, r3, #10
 80025e2:	4013      	ands	r3, r2
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x11c>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x14a>
 80025f4:	e06c      	b.n	80026d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025f6:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	220c      	movs	r2, #12
 80025fc:	4013      	ands	r3, r2
 80025fe:	d00e      	beq.n	800261e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002600:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	220c      	movs	r2, #12
 8002606:	4013      	ands	r3, r2
 8002608:	2b08      	cmp	r3, #8
 800260a:	d11f      	bne.n	800264c <HAL_RCC_OscConfig+0x1a0>
 800260c:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	23c0      	movs	r3, #192	; 0xc0
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	401a      	ands	r2, r3
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	429a      	cmp	r2, r3
 800261c:	d116      	bne.n	800264c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	4b71      	ldr	r3, [pc, #452]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x188>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e2bb      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b6b      	ldr	r3, [pc, #428]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	22f8      	movs	r2, #248	; 0xf8
 800263a:	4393      	bics	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	e041      	b.n	80026d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d024      	beq.n	800269e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fe48 	bl	80012f4 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266a:	f7fe fe43 	bl	80012f4 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e297      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d0f1      	beq.n	800266a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b57      	ldr	r3, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	22f8      	movs	r2, #248	; 0xf8
 800268c:	4393      	bics	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	00da      	lsls	r2, r3, #3
 8002696:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e018      	b.n	80026d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fe23 	bl	80012f4 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe fe1e 	bl	80012f4 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e272      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2202      	movs	r2, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	d1f1      	bne.n	80026b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2208      	movs	r2, #8
 80026d6:	4013      	ands	r3, r2
 80026d8:	d036      	beq.n	8002748 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d019      	beq.n	8002716 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e2:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e6:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fe01 	bl	80012f4 <HAL_GetTick>
 80026f2:	0003      	movs	r3, r0
 80026f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fdfc 	bl	80012f4 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e250      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2202      	movs	r2, #2
 8002710:	4013      	ands	r3, r2
 8002712:	d0f1      	beq.n	80026f8 <HAL_RCC_OscConfig+0x24c>
 8002714:	e018      	b.n	8002748 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800271c:	2101      	movs	r1, #1
 800271e:	438a      	bics	r2, r1
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7fe fde7 	bl	80012f4 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fde2 	bl	80012f4 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e236      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d1f1      	bne.n	800272c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2204      	movs	r2, #4
 800274e:	4013      	ands	r3, r2
 8002750:	d100      	bne.n	8002754 <HAL_RCC_OscConfig+0x2a8>
 8002752:	e0b5      	b.n	80028c0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002754:	201f      	movs	r0, #31
 8002756:	183b      	adds	r3, r7, r0
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	055b      	lsls	r3, r3, #21
 8002764:	4013      	ands	r3, r2
 8002766:	d110      	bne.n	800278a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	0549      	lsls	r1, r1, #21
 8002772:	430a      	orrs	r2, r1
 8002774:	61da      	str	r2, [r3, #28]
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	055b      	lsls	r3, r3, #21
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002784:	183b      	adds	r3, r7, r0
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d11a      	bne.n	80027cc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	0049      	lsls	r1, r1, #1
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a4:	f7fe fda6 	bl	80012f4 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe fda1 	bl	80012f4 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1f5      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4013      	ands	r3, r2
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10f      	bne.n	80027f4 <HAL_RCC_OscConfig+0x348>
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80027d6:	6a1a      	ldr	r2, [r3, #32]
 80027d8:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80027da:	2101      	movs	r1, #1
 80027dc:	430a      	orrs	r2, r1
 80027de:	621a      	str	r2, [r3, #32]
 80027e0:	e036      	b.n	8002850 <HAL_RCC_OscConfig+0x3a4>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40021000 	.word	0x40021000
 80027e8:	fffeffff 	.word	0xfffeffff
 80027ec:	fffbffff 	.word	0xfffbffff
 80027f0:	40007000 	.word	0x40007000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x36a>
 80027fc:	4bca      	ldr	r3, [pc, #808]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	4bc9      	ldr	r3, [pc, #804]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002802:	2101      	movs	r1, #1
 8002804:	438a      	bics	r2, r1
 8002806:	621a      	str	r2, [r3, #32]
 8002808:	4bc7      	ldr	r3, [pc, #796]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	4bc6      	ldr	r3, [pc, #792]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800280e:	2104      	movs	r1, #4
 8002810:	438a      	bics	r2, r1
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x3a4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x38c>
 800281e:	4bc2      	ldr	r3, [pc, #776]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002820:	6a1a      	ldr	r2, [r3, #32]
 8002822:	4bc1      	ldr	r3, [pc, #772]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002824:	2104      	movs	r1, #4
 8002826:	430a      	orrs	r2, r1
 8002828:	621a      	str	r2, [r3, #32]
 800282a:	4bbf      	ldr	r3, [pc, #764]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	4bbe      	ldr	r3, [pc, #760]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002830:	2101      	movs	r1, #1
 8002832:	430a      	orrs	r2, r1
 8002834:	621a      	str	r2, [r3, #32]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x3a4>
 8002838:	4bbb      	ldr	r3, [pc, #748]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800283a:	6a1a      	ldr	r2, [r3, #32]
 800283c:	4bba      	ldr	r3, [pc, #744]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800283e:	2101      	movs	r1, #1
 8002840:	438a      	bics	r2, r1
 8002842:	621a      	str	r2, [r3, #32]
 8002844:	4bb8      	ldr	r3, [pc, #736]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	4bb7      	ldr	r3, [pc, #732]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800284a:	2104      	movs	r1, #4
 800284c:	438a      	bics	r2, r1
 800284e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d014      	beq.n	8002882 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7fe fd4c 	bl	80012f4 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	e009      	b.n	8002876 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fd47 	bl	80012f4 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	4aaf      	ldr	r2, [pc, #700]	; (8002b2c <HAL_RCC_OscConfig+0x680>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e19a      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	4bac      	ldr	r3, [pc, #688]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x3b6>
 8002880:	e013      	b.n	80028aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fd37 	bl	80012f4 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288a:	e009      	b.n	80028a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fd32 	bl	80012f4 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	4aa5      	ldr	r2, [pc, #660]	; (8002b2c <HAL_RCC_OscConfig+0x680>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e185      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4ba1      	ldr	r3, [pc, #644]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028aa:	231f      	movs	r3, #31
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b9c      	ldr	r3, [pc, #624]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	4b9b      	ldr	r3, [pc, #620]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028ba:	499d      	ldr	r1, [pc, #628]	; (8002b30 <HAL_RCC_OscConfig+0x684>)
 80028bc:	400a      	ands	r2, r1
 80028be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d12a      	bne.n	8002928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028d2:	4b95      	ldr	r3, [pc, #596]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	4b94      	ldr	r3, [pc, #592]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028d8:	2104      	movs	r1, #4
 80028da:	430a      	orrs	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028de:	4b92      	ldr	r3, [pc, #584]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	4b91      	ldr	r3, [pc, #580]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe fd03 	bl	80012f4 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028f4:	f7fe fcfe 	bl	80012f4 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e152      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002906:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	2202      	movs	r2, #2
 800290c:	4013      	ands	r3, r2
 800290e:	d0f1      	beq.n	80028f4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002910:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	22f8      	movs	r2, #248	; 0xf8
 8002916:	4393      	bics	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	00da      	lsls	r2, r3, #3
 8002920:	4b81      	ldr	r3, [pc, #516]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002922:	430a      	orrs	r2, r1
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
 8002926:	e034      	b.n	8002992 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	3305      	adds	r3, #5
 800292e:	d111      	bne.n	8002954 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002930:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002934:	4b7c      	ldr	r3, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002936:	2104      	movs	r1, #4
 8002938:	438a      	bics	r2, r1
 800293a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800293c:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	22f8      	movs	r2, #248	; 0xf8
 8002942:	4393      	bics	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	00da      	lsls	r2, r3, #3
 800294c:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800294e:	430a      	orrs	r2, r1
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
 8002952:	e01e      	b.n	8002992 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002954:	4b74      	ldr	r3, [pc, #464]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800295a:	2104      	movs	r1, #4
 800295c:	430a      	orrs	r2, r1
 800295e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002960:	4b71      	ldr	r3, [pc, #452]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002966:	2101      	movs	r1, #1
 8002968:	438a      	bics	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7fe fcc2 	bl	80012f4 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002976:	f7fe fcbd 	bl	80012f4 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e111      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002988:	4b67      	ldr	r3, [pc, #412]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d1f1      	bne.n	8002976 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	d05c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800299c:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	220c      	movs	r2, #12
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d00e      	beq.n	80029c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029a8:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	220c      	movs	r2, #12
 80029ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d114      	bne.n	80029de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	23c0      	movs	r3, #192	; 0xc0
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	401a      	ands	r2, r3
 80029be:	23c0      	movs	r3, #192	; 0xc0
 80029c0:	025b      	lsls	r3, r3, #9
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10b      	bne.n	80029de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029c6:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	025b      	lsls	r3, r3, #9
 80029ce:	4013      	ands	r3, r2
 80029d0:	d040      	beq.n	8002a54 <HAL_RCC_OscConfig+0x5a8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d03c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0e6      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029e6:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0249      	lsls	r1, r1, #9
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fc7e 	bl	80012f4 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029fe:	f7fe fc79 	bl	80012f4 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0cd      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a10:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	025b      	lsls	r3, r3, #9
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x552>
 8002a1c:	e01b      	b.n	8002a56 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a1e:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a24:	4943      	ldr	r1, [pc, #268]	; (8002b34 <HAL_RCC_OscConfig+0x688>)
 8002a26:	400a      	ands	r2, r1
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fc63 	bl	80012f4 <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a34:	f7fe fc5e 	bl	80012f4 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0b2      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x588>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a54:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d100      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5b4>
 8002a5e:	e0a4      	b.n	8002baa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a60:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	220c      	movs	r2, #12
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d100      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5c2>
 8002a6c:	e078      	b.n	8002b60 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d14c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a7c:	492e      	ldr	r1, [pc, #184]	; (8002b38 <HAL_RCC_OscConfig+0x68c>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe fc37 	bl	80012f4 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fc32 	bl	80012f4 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e086      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	049b      	lsls	r3, r3, #18
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	220f      	movs	r2, #15
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_RCC_OscConfig+0x690>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0449      	lsls	r1, r1, #17
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fc05 	bl	80012f4 <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fc00 	bl	80012f4 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e054      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	049b      	lsls	r3, r3, #18
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x644>
 8002b0e:	e04c      	b.n	8002baa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <HAL_RCC_OscConfig+0x68c>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fbea 	bl	80012f4 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x6a6>
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	00001388 	.word	0x00001388
 8002b30:	efffffff 	.word	0xefffffff
 8002b34:	fffeffff 	.word	0xfffeffff
 8002b38:	feffffff 	.word	0xfeffffff
 8002b3c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fbd8 	bl	80012f4 <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e02c      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_RCC_OscConfig+0x708>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	049b      	lsls	r3, r3, #18
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x694>
 8002b5e:	e024      	b.n	8002baa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e01f      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_OscConfig+0x708>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_OscConfig+0x708>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	025b      	lsls	r3, r3, #9
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d10e      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	23f0      	movs	r3, #240	; 0xf0
 8002b9a:	039b      	lsls	r3, r3, #14
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b008      	add	sp, #32
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0bf      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d911      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b5e      	ldr	r3, [pc, #376]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0a6      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d006      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c18:	21e0      	movs	r1, #224	; 0xe0
 8002c1a:	00c9      	lsls	r1, r1, #3
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	22f0      	movs	r2, #240	; 0xf0
 8002c26:	4393      	bics	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d04c      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	029b      	lsls	r3, r3, #10
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d120      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07a      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	049b      	lsls	r3, r3, #18
 8002c66:	4013      	ands	r3, r2
 8002c68:	d114      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06e      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	025b      	lsls	r3, r3, #9
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d108      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e062      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e05b      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fb24 	bl	80012f4 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb0:	e009      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb2:	f7fe fb1f 	bl	80012f4 <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <HAL_RCC_ClockConfig+0x1a4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e042      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	220c      	movs	r2, #12
 8002ccc:	401a      	ands	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1ec      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d211      	bcs.n	8002d0a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	4393      	bics	r3, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e020      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <HAL_RCC_ClockConfig+0x1a8>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d28:	f000 f820 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2c:	0001      	movs	r1, r0
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	220f      	movs	r2, #15
 8002d36:	4013      	ands	r3, r2
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1ac>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	000a      	movs	r2, r1
 8002d3e:	40da      	lsrs	r2, r3
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1b0>)
 8002d42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe fa8f 	bl	8001268 <HAL_InitTick>
  
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	00001388 	.word	0x00001388
 8002d60:	fffff8ff 	.word	0xfffff8ff
 8002d64:	08004854 	.word	0x08004854
 8002d68:	20000020 	.word	0x20000020

08002d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b08f      	sub	sp, #60	; 0x3c
 8002d70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d72:	2314      	movs	r3, #20
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xec>)
 8002d78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d7a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	4a36      	ldr	r2, [pc, #216]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002d84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d86:	c313      	stmia	r3!, {r0, r1, r4}
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d90:	2300      	movs	r3, #0
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	2300      	movs	r3, #0
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	220c      	movs	r2, #12
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d047      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0xd4>
 8002db0:	d849      	bhi.n	8002e46 <HAL_RCC_GetSysClockFreq+0xda>
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x50>
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x56>
 8002dba:	e044      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dc0:	e044      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	0c9b      	lsrs	r3, r3, #18
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2214      	movs	r2, #20
 8002dcc:	18ba      	adds	r2, r7, r2
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	4013      	ands	r3, r2
 8002dda:	1d3a      	adds	r2, r7, #4
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	401a      	ands	r2, r3
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	025b      	lsls	r3, r3, #9
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df2:	481c      	ldr	r0, [pc, #112]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002df4:	f7fd f988 	bl	8000108 <__udivsi3>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	4353      	muls	r3, r2
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
 8002e02:	e01a      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	025b      	lsls	r3, r3, #9
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	23c0      	movs	r3, #192	; 0xc0
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d109      	bne.n	8002e28 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e16:	4814      	ldr	r0, [pc, #80]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e18:	f7fd f976 	bl	8000108 <__udivsi3>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	001a      	movs	r2, r3
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	4353      	muls	r3, r2
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2a:	480e      	ldr	r0, [pc, #56]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2c:	f7fd f96c 	bl	8000108 <__udivsi3>
 8002e30:	0003      	movs	r3, r0
 8002e32:	001a      	movs	r2, r3
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	4353      	muls	r3, r2
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e44:	e002      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b00f      	add	sp, #60	; 0x3c
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	08004834 	.word	0x08004834
 8002e5c:	08004844 	.word	0x08004844
 8002e60:	40021000 	.word	0x40021000
 8002e64:	007a1200 	.word	0x007a1200
 8002e68:	02dc6c00 	.word	0x02dc6c00

08002e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	20000020 	.word	0x20000020

08002e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e84:	f7ff fff2 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002e88:	0001      	movs	r1, r0
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	2207      	movs	r2, #7
 8002e92:	4013      	ands	r3, r2
 8002e94:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	40d9      	lsrs	r1, r3
 8002e9a:	000b      	movs	r3, r1
}    
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08004864 	.word	0x08004864

08002eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	025b      	lsls	r3, r3, #9
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d100      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ec8:	e08e      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2017      	movs	r0, #23
 8002ecc:	183b      	adds	r3, r7, r0
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	055b      	lsls	r3, r3, #21
 8002eda:	4013      	ands	r3, r2
 8002edc:	d110      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	4b64      	ldr	r3, [pc, #400]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	0549      	lsls	r1, r1, #21
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]
 8002eec:	4b60      	ldr	r3, [pc, #384]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	055b      	lsls	r3, r3, #21
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	183b      	adds	r3, r7, r0
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d11a      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	0049      	lsls	r1, r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f9eb 	bl	80012f4 <HAL_GetTick>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	e008      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f24:	f7fe f9e6 	bl	80012f4 <HAL_GetTick>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e097      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	23c0      	movs	r3, #192	; 0xc0
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d034      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	23c0      	movs	r3, #192	; 0xc0
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d02c      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a43      	ldr	r2, [pc, #268]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f6e:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	0249      	lsls	r1, r1, #9
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7c:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f82:	493e      	ldr	r1, [pc, #248]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fe f9ad 	bl	80012f4 <HAL_GetTick>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	e009      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fe f9a8 	bl	80012f4 <HAL_GetTick>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	4a35      	ldr	r2, [pc, #212]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e058      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fd2:	2317      	movs	r3, #23
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fe2:	4928      	ldr	r1, [pc, #160]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	4393      	bics	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003002:	430a      	orrs	r2, r1
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2220      	movs	r2, #32
 800300c:	4013      	ands	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	2210      	movs	r2, #16
 8003016:	4393      	bics	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003020:	430a      	orrs	r2, r1
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	029b      	lsls	r3, r3, #10
 800302c:	4013      	ands	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	4393      	bics	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003040:	430a      	orrs	r2, r1
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4013      	ands	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	2240      	movs	r2, #64	; 0x40
 8003056:	4393      	bics	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003060:	430a      	orrs	r2, r1
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b006      	add	sp, #24
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021000 	.word	0x40021000
 8003074:	40007000 	.word	0x40007000
 8003078:	fffffcff 	.word	0xfffffcff
 800307c:	fffeffff 	.word	0xfffeffff
 8003080:	00001388 	.word	0x00001388
 8003084:	efffffff 	.word	0xefffffff

08003088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0a8      	b.n	80031ec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	2382      	movs	r3, #130	; 0x82
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d009      	beq.n	80030c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]
 80030b4:	e005      	b.n	80030c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	225d      	movs	r2, #93	; 0x5d
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	225c      	movs	r2, #92	; 0x5c
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f7fd ff3e 	bl	8000f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	225d      	movs	r2, #93	; 0x5d
 80030e8:	2102      	movs	r1, #2
 80030ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2140      	movs	r1, #64	; 0x40
 80030f8:	438a      	bics	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	23e0      	movs	r3, #224	; 0xe0
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e002      	b.n	8003114 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	23f0      	movs	r3, #240	; 0xf0
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	429a      	cmp	r2, r3
 800311e:	d008      	beq.n	8003132 <HAL_SPI_Init+0xaa>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	23e0      	movs	r3, #224	; 0xe0
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	429a      	cmp	r2, r3
 800312a:	d002      	beq.n	8003132 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	2382      	movs	r3, #130	; 0x82
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	2384      	movs	r3, #132	; 0x84
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	400b      	ands	r3, r1
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2102      	movs	r1, #2
 800314e:	400b      	ands	r3, r1
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2101      	movs	r1, #1
 8003158:	400b      	ands	r3, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6999      	ldr	r1, [r3, #24]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	400b      	ands	r3, r1
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2138      	movs	r1, #56	; 0x38
 800316e:	400b      	ands	r3, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	400b      	ands	r3, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	0011      	movs	r1, r2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	2204      	movs	r2, #4
 8003198:	401a      	ands	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2110      	movs	r1, #16
 80031a0:	400b      	ands	r3, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	2108      	movs	r1, #8
 80031aa:	400b      	ands	r3, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68d9      	ldr	r1, [r3, #12]
 80031b2:	23f0      	movs	r3, #240	; 0xf0
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	400b      	ands	r3, r1
 80031b8:	431a      	orrs	r2, r3
 80031ba:	0011      	movs	r1, r2
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	015b      	lsls	r3, r3, #5
 80031c2:	401a      	ands	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4907      	ldr	r1, [pc, #28]	; (80031f4 <HAL_SPI_Init+0x16c>)
 80031d8:	400a      	ands	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	225d      	movs	r2, #93	; 0x5d
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	fffff7ff 	.word	0xfffff7ff

080031f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e042      	b.n	8003290 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	223d      	movs	r2, #61	; 0x3d
 800320e:	5c9b      	ldrb	r3, [r3, r2]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223c      	movs	r2, #60	; 0x3c
 800321a:	2100      	movs	r1, #0
 800321c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0018      	movs	r0, r3
 8003222:	f7fd fee9 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	223d      	movs	r2, #61	; 0x3d
 800322a:	2102      	movs	r1, #2
 800322c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	0019      	movs	r1, r3
 8003238:	0010      	movs	r0, r2
 800323a:	f000 f871 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2246      	movs	r2, #70	; 0x46
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223e      	movs	r2, #62	; 0x3e
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	223f      	movs	r2, #63	; 0x3f
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2240      	movs	r2, #64	; 0x40
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2241      	movs	r2, #65	; 0x41
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2242      	movs	r2, #66	; 0x42
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2243      	movs	r2, #67	; 0x43
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2244      	movs	r2, #68	; 0x44
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2245      	movs	r2, #69	; 0x45
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223d      	movs	r2, #61	; 0x3d
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	223d      	movs	r2, #61	; 0x3d
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e02e      	b.n	800330e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	223d      	movs	r2, #61	; 0x3d
 80032b4:	2102      	movs	r1, #2
 80032b6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_TIM_Base_Start+0x80>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00a      	beq.n	80032d8 <HAL_TIM_Base_Start+0x40>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	05db      	lsls	r3, r3, #23
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d004      	beq.n	80032d8 <HAL_TIM_Base_Start+0x40>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_TIM_Base_Start+0x84>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d111      	bne.n	80032fc <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2207      	movs	r2, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d010      	beq.n	800330c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2101      	movs	r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fa:	e007      	b.n	800330c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2101      	movs	r1, #1
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <TIM_Base_SetConfig+0xd4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d008      	beq.n	800334a <TIM_Base_SetConfig+0x2a>
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	05db      	lsls	r3, r3, #23
 800333e:	429a      	cmp	r2, r3
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0x2a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <TIM_Base_SetConfig+0xd8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2270      	movs	r2, #112	; 0x70
 800334e:	4393      	bics	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0xd4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d014      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	429a      	cmp	r2, r3
 800336c:	d00f      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <TIM_Base_SetConfig+0xd8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <TIM_Base_SetConfig+0xdc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <TIM_Base_SetConfig+0xe0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <TIM_Base_SetConfig+0xe4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <TIM_Base_SetConfig+0xe8>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	4393      	bics	r3, r2
 80033a6:	001a      	movs	r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <TIM_Base_SetConfig+0xd4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_Base_SetConfig+0xbe>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <TIM_Base_SetConfig+0xe0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_Base_SetConfig+0xbe>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <TIM_Base_SetConfig+0xe4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d103      	bne.n	80033e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	615a      	str	r2, [r3, #20]
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40002000 	.word	0x40002000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800
 8003408:	fffffcff 	.word	0xfffffcff

0800340c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e044      	b.n	80034a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2274      	movs	r2, #116	; 0x74
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f7fd fe01 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2224      	movs	r2, #36	; 0x24
 800343a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2101      	movs	r1, #1
 8003448:	438a      	bics	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f000 fb86 	bl	8003b60 <UART_SetConfig>
 8003454:	0003      	movs	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e024      	b.n	80034a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 fcb9 	bl	8003de0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	490d      	ldr	r1, [pc, #52]	; (80034b0 <HAL_UART_Init+0xa4>)
 800347a:	400a      	ands	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	212a      	movs	r1, #42	; 0x2a
 800348a:	438a      	bics	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fd51 	bl	8003f48 <UART_CheckIdleState>
 80034a6:	0003      	movs	r3, r0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	ffffb7ff 	.word	0xffffb7ff

080034b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	1dbb      	adds	r3, r7, #6
 80034c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d150      	bne.n	800356c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_UART_Receive_IT+0x24>
 80034d0:	1dbb      	adds	r3, r7, #6
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e048      	b.n	800356e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	015b      	lsls	r3, r3, #5
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d109      	bne.n	80034fc <HAL_UART_Receive_IT+0x48>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	d001      	beq.n	80034fc <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e038      	b.n	800356e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2274      	movs	r2, #116	; 0x74
 8003500:	5c9b      	ldrb	r3, [r3, r2]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_UART_Receive_IT+0x56>
 8003506:	2302      	movs	r3, #2
 8003508:	e031      	b.n	800356e <HAL_UART_Receive_IT+0xba>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2274      	movs	r2, #116	; 0x74
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	4013      	ands	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	613b      	str	r3, [r7, #16]
  return(result);
 800352c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	2301      	movs	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2180      	movs	r1, #128	; 0x80
 8003548:	04c9      	lsls	r1, r1, #19
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800355a:	1dbb      	adds	r3, r7, #6
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 fdfc 	bl	8004160 <UART_Start_Receive_IT>
 8003568:	0003      	movs	r3, r0
 800356a:	e000      	b.n	800356e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b008      	add	sp, #32
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b0ab      	sub	sp, #172	; 0xac
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	22a4      	movs	r2, #164	; 0xa4
 8003588:	18b9      	adds	r1, r7, r2
 800358a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	20a0      	movs	r0, #160	; 0xa0
 8003594:	1839      	adds	r1, r7, r0
 8003596:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	219c      	movs	r1, #156	; 0x9c
 80035a0:	1879      	adds	r1, r7, r1
 80035a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035a4:	0011      	movs	r1, r2
 80035a6:	18bb      	adds	r3, r7, r2
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a99      	ldr	r2, [pc, #612]	; (8003810 <HAL_UART_IRQHandler+0x298>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	2298      	movs	r2, #152	; 0x98
 80035b0:	18bc      	adds	r4, r7, r2
 80035b2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80035b4:	18bb      	adds	r3, r7, r2
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d114      	bne.n	80035e6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2220      	movs	r2, #32
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2220      	movs	r2, #32
 80035cc:	4013      	ands	r3, r2
 80035ce:	d00a      	beq.n	80035e6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d100      	bne.n	80035da <HAL_UART_IRQHandler+0x62>
 80035d8:	e296      	b.n	8003b08 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	0010      	movs	r0, r2
 80035e2:	4798      	blx	r3
      }
      return;
 80035e4:	e290      	b.n	8003b08 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035e6:	2398      	movs	r3, #152	; 0x98
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d100      	bne.n	80035f2 <HAL_UART_IRQHandler+0x7a>
 80035f0:	e114      	b.n	800381c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035f2:	239c      	movs	r3, #156	; 0x9c
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	d106      	bne.n	800360c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035fe:	23a0      	movs	r3, #160	; 0xa0
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a83      	ldr	r2, [pc, #524]	; (8003814 <HAL_UART_IRQHandler+0x29c>)
 8003606:	4013      	ands	r3, r2
 8003608:	d100      	bne.n	800360c <HAL_UART_IRQHandler+0x94>
 800360a:	e107      	b.n	800381c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800360c:	23a4      	movs	r3, #164	; 0xa4
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	d012      	beq.n	800363e <HAL_UART_IRQHandler+0xc6>
 8003618:	23a0      	movs	r3, #160	; 0xa0
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4013      	ands	r3, r2
 8003624:	d00b      	beq.n	800363e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	589b      	ldr	r3, [r3, r2]
 8003634:	2201      	movs	r2, #1
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800363e:	23a4      	movs	r3, #164	; 0xa4
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	4013      	ands	r3, r2
 8003648:	d011      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
 800364a:	239c      	movs	r3, #156	; 0x9c
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2202      	movs	r2, #2
 800365c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	589b      	ldr	r3, [r3, r2]
 8003664:	2204      	movs	r2, #4
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2180      	movs	r1, #128	; 0x80
 800366c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800366e:	23a4      	movs	r3, #164	; 0xa4
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d011      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
 800367a:	239c      	movs	r3, #156	; 0x9c
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	4013      	ands	r3, r2
 8003684:	d00b      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2204      	movs	r2, #4
 800368c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	589b      	ldr	r3, [r3, r2]
 8003694:	2202      	movs	r2, #2
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800369e:	23a4      	movs	r3, #164	; 0xa4
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2208      	movs	r2, #8
 80036a6:	4013      	ands	r3, r2
 80036a8:	d017      	beq.n	80036da <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036aa:	23a0      	movs	r3, #160	; 0xa0
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2220      	movs	r2, #32
 80036b2:	4013      	ands	r3, r2
 80036b4:	d105      	bne.n	80036c2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036b6:	239c      	movs	r3, #156	; 0x9c
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036c0:	d00b      	beq.n	80036da <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2208      	movs	r2, #8
 80036c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	2208      	movs	r2, #8
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036da:	23a4      	movs	r3, #164	; 0xa4
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4013      	ands	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_UART_IRQHandler+0x198>
 80036e8:	23a0      	movs	r3, #160	; 0xa0
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	04db      	lsls	r3, r3, #19
 80036f2:	4013      	ands	r3, r2
 80036f4:	d00c      	beq.n	8003710 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2280      	movs	r2, #128	; 0x80
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	589b      	ldr	r3, [r3, r2]
 8003706:	2220      	movs	r2, #32
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	589b      	ldr	r3, [r3, r2]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d100      	bne.n	800371c <HAL_UART_IRQHandler+0x1a4>
 800371a:	e1f7      	b.n	8003b0c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800371c:	23a4      	movs	r3, #164	; 0xa4
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2220      	movs	r2, #32
 8003724:	4013      	ands	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003728:	23a0      	movs	r3, #160	; 0xa0
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2220      	movs	r2, #32
 8003730:	4013      	ands	r3, r2
 8003732:	d008      	beq.n	8003746 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	0010      	movs	r0, r2
 8003744:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	589b      	ldr	r3, [r3, r2]
 800374c:	2194      	movs	r1, #148	; 0x94
 800374e:	187a      	adds	r2, r7, r1
 8003750:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	4013      	ands	r3, r2
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d004      	beq.n	800376a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003760:	187b      	adds	r3, r7, r1
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2228      	movs	r2, #40	; 0x28
 8003766:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003768:	d047      	beq.n	80037fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 fda7 	bl	80042c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	4013      	ands	r3, r2
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d137      	bne.n	80037f0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003780:	f3ef 8310 	mrs	r3, PRIMASK
 8003784:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003788:	2090      	movs	r0, #144	; 0x90
 800378a:	183a      	adds	r2, r7, r0
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	2301      	movs	r3, #1
 8003790:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	438a      	bics	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	183b      	adds	r3, r7, r0
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_UART_IRQHandler+0x2a0>)
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd fef1 	bl	80015b4 <HAL_DMA_Abort_IT>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d01a      	beq.n	800380c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	0018      	movs	r0, r3
 80037e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e012      	b.n	800380c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f9a5 	bl	8003b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ee:	e00d      	b.n	800380c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f9a0 	bl	8003b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	e008      	b.n	800380c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f99b 	bl	8003b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	2100      	movs	r1, #0
 8003808:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800380a:	e17f      	b.n	8003b0c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	46c0      	nop			; (mov r8, r8)
    return;
 800380e:	e17d      	b.n	8003b0c <HAL_UART_IRQHandler+0x594>
 8003810:	0000080f 	.word	0x0000080f
 8003814:	04000120 	.word	0x04000120
 8003818:	08004385 	.word	0x08004385

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003820:	2b01      	cmp	r3, #1
 8003822:	d000      	beq.n	8003826 <HAL_UART_IRQHandler+0x2ae>
 8003824:	e131      	b.n	8003a8a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003826:	23a4      	movs	r3, #164	; 0xa4
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2210      	movs	r2, #16
 800382e:	4013      	ands	r3, r2
 8003830:	d100      	bne.n	8003834 <HAL_UART_IRQHandler+0x2bc>
 8003832:	e12a      	b.n	8003a8a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003834:	23a0      	movs	r3, #160	; 0xa0
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2210      	movs	r2, #16
 800383c:	4013      	ands	r3, r2
 800383e:	d100      	bne.n	8003842 <HAL_UART_IRQHandler+0x2ca>
 8003840:	e123      	b.n	8003a8a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2210      	movs	r2, #16
 8003848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2240      	movs	r2, #64	; 0x40
 8003852:	4013      	ands	r3, r2
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d000      	beq.n	800385a <HAL_UART_IRQHandler+0x2e2>
 8003858:	e09b      	b.n	8003992 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	217e      	movs	r1, #126	; 0x7e
 8003864:	187b      	adds	r3, r7, r1
 8003866:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003868:	187b      	adds	r3, r7, r1
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d100      	bne.n	8003872 <HAL_UART_IRQHandler+0x2fa>
 8003870:	e14e      	b.n	8003b10 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2258      	movs	r2, #88	; 0x58
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	187a      	adds	r2, r7, r1
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d300      	bcc.n	8003882 <HAL_UART_IRQHandler+0x30a>
 8003880:	e146      	b.n	8003b10 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	187a      	adds	r2, r7, r1
 8003886:	215a      	movs	r1, #90	; 0x5a
 8003888:	8812      	ldrh	r2, [r2, #0]
 800388a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b20      	cmp	r3, #32
 8003894:	d06e      	beq.n	8003974 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003896:	f3ef 8310 	mrs	r3, PRIMASK
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800389e:	67bb      	str	r3, [r7, #120]	; 0x78
 80038a0:	2301      	movs	r3, #1
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	499a      	ldr	r1, [pc, #616]	; (8003b20 <HAL_UART_IRQHandler+0x5a8>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c8:	f3ef 8310 	mrs	r3, PRIMASK
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80038ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	677b      	str	r3, [r7, #116]	; 0x74
 80038d2:	2301      	movs	r3, #1
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	438a      	bics	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003900:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003902:	673b      	str	r3, [r7, #112]	; 0x70
 8003904:	2301      	movs	r3, #1
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2140      	movs	r1, #64	; 0x40
 800391c:	438a      	bics	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003922:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003938:	f3ef 8310 	mrs	r3, PRIMASK
 800393c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003942:	2301      	movs	r3, #1
 8003944:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003948:	f383 8810 	msr	PRIMASK, r3
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2110      	movs	r1, #16
 800395a:	438a      	bics	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003964:	f383 8810 	msr	PRIMASK, r3
}
 8003968:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	0018      	movs	r0, r3
 8003970:	f7fd fde8 	bl	8001544 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2258      	movs	r2, #88	; 0x58
 8003978:	5a9a      	ldrh	r2, [r3, r2]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	215a      	movs	r1, #90	; 0x5a
 800397e:	5a5b      	ldrh	r3, [r3, r1]
 8003980:	b29b      	uxth	r3, r3
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0011      	movs	r1, r2
 800398a:	0018      	movs	r0, r3
 800398c:	f000 f8dc 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003990:	e0be      	b.n	8003b10 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2258      	movs	r2, #88	; 0x58
 8003996:	5a99      	ldrh	r1, [r3, r2]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	225a      	movs	r2, #90	; 0x5a
 800399c:	5a9b      	ldrh	r3, [r3, r2]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	208e      	movs	r0, #142	; 0x8e
 80039a2:	183b      	adds	r3, r7, r0
 80039a4:	1a8a      	subs	r2, r1, r2
 80039a6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	225a      	movs	r2, #90	; 0x5a
 80039ac:	5a9b      	ldrh	r3, [r3, r2]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d100      	bne.n	80039b6 <HAL_UART_IRQHandler+0x43e>
 80039b4:	e0ae      	b.n	8003b14 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80039b6:	183b      	adds	r3, r7, r0
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d100      	bne.n	80039c0 <HAL_UART_IRQHandler+0x448>
 80039be:	e0a9      	b.n	8003b14 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8310 	mrs	r3, PRIMASK
 80039c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80039c6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c8:	2488      	movs	r4, #136	; 0x88
 80039ca:	193a      	adds	r2, r7, r4
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	2301      	movs	r3, #1
 80039d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	494f      	ldr	r1, [pc, #316]	; (8003b24 <HAL_UART_IRQHandler+0x5ac>)
 80039e6:	400a      	ands	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f383 8810 	msr	PRIMASK, r3
}
 80039f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f8:	f3ef 8310 	mrs	r3, PRIMASK
 80039fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80039fe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a00:	2484      	movs	r4, #132	; 0x84
 8003a02:	193a      	adds	r2, r7, r4
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	2301      	movs	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	438a      	bics	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4a:	2480      	movs	r4, #128	; 0x80
 8003a4c:	193a      	adds	r2, r7, r4
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	2301      	movs	r3, #1
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	f383 8810 	msr	PRIMASK, r3
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2110      	movs	r1, #16
 8003a68:	438a      	bics	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0011      	movs	r1, r2
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f860 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a88:	e044      	b.n	8003b14 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a8a:	23a4      	movs	r3, #164	; 0xa4
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	035b      	lsls	r3, r3, #13
 8003a94:	4013      	ands	r3, r2
 8003a96:	d010      	beq.n	8003aba <HAL_UART_IRQHandler+0x542>
 8003a98:	239c      	movs	r3, #156	; 0x9c
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	03db      	lsls	r3, r3, #15
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	0352      	lsls	r2, r2, #13
 8003aae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 fe10 	bl	80046d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ab8:	e02f      	b.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003aba:	23a4      	movs	r3, #164	; 0xa4
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ac6:	23a0      	movs	r3, #160	; 0xa0
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01e      	beq.n	8003b18 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	0010      	movs	r0, r2
 8003ae2:	4798      	blx	r3
    }
    return;
 8003ae4:	e018      	b.n	8003b18 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ae6:	23a4      	movs	r3, #164	; 0xa4
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	4013      	ands	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
 8003af2:	23a0      	movs	r3, #160	; 0xa0
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	4013      	ands	r3, r2
 8003afc:	d00d      	beq.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fc56 	bl	80043b2 <UART_EndTransmit_IT>
    return;
 8003b06:	e008      	b.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	e006      	b.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	e004      	b.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	e002      	b.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	e000      	b.n	8003b1a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003b18:	46c0      	nop			; (mov r8, r8)
  }

}
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b02b      	add	sp, #172	; 0xac
 8003b1e:	bd90      	pop	{r4, r7, pc}
 8003b20:	fffffeff 	.word	0xfffffeff
 8003b24:	fffffedf 	.word	0xfffffedf

08003b28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	000a      	movs	r2, r1
 8003b52:	1cbb      	adds	r3, r7, #2
 8003b54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b68:	231e      	movs	r3, #30
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a8d      	ldr	r2, [pc, #564]	; (8003dc4 <UART_SetConfig+0x264>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a88      	ldr	r2, [pc, #544]	; (8003dc8 <UART_SetConfig+0x268>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	0019      	movs	r1, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a7f      	ldr	r2, [pc, #508]	; (8003dcc <UART_SetConfig+0x26c>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7b      	ldr	r2, [pc, #492]	; (8003dd0 <UART_SetConfig+0x270>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d127      	bne.n	8003c36 <UART_SetConfig+0xd6>
 8003be6:	4b7b      	ldr	r3, [pc, #492]	; (8003dd4 <UART_SetConfig+0x274>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	2203      	movs	r2, #3
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d00d      	beq.n	8003c0e <UART_SetConfig+0xae>
 8003bf2:	d81b      	bhi.n	8003c2c <UART_SetConfig+0xcc>
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d014      	beq.n	8003c22 <UART_SetConfig+0xc2>
 8003bf8:	d818      	bhi.n	8003c2c <UART_SetConfig+0xcc>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0xa4>
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d00a      	beq.n	8003c18 <UART_SetConfig+0xb8>
 8003c02:	e013      	b.n	8003c2c <UART_SetConfig+0xcc>
 8003c04:	231f      	movs	r3, #31
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e021      	b.n	8003c52 <UART_SetConfig+0xf2>
 8003c0e:	231f      	movs	r3, #31
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e01c      	b.n	8003c52 <UART_SetConfig+0xf2>
 8003c18:	231f      	movs	r3, #31
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e017      	b.n	8003c52 <UART_SetConfig+0xf2>
 8003c22:	231f      	movs	r3, #31
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	2208      	movs	r2, #8
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e012      	b.n	8003c52 <UART_SetConfig+0xf2>
 8003c2c:	231f      	movs	r3, #31
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	2210      	movs	r2, #16
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e00d      	b.n	8003c52 <UART_SetConfig+0xf2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <UART_SetConfig+0x278>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d104      	bne.n	8003c4a <UART_SetConfig+0xea>
 8003c40:	231f      	movs	r3, #31
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e003      	b.n	8003c52 <UART_SetConfig+0xf2>
 8003c4a:	231f      	movs	r3, #31
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	2210      	movs	r2, #16
 8003c50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d15d      	bne.n	8003d1a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003c5e:	231f      	movs	r3, #31
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d015      	beq.n	8003c94 <UART_SetConfig+0x134>
 8003c68:	dc18      	bgt.n	8003c9c <UART_SetConfig+0x13c>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d00d      	beq.n	8003c8a <UART_SetConfig+0x12a>
 8003c6e:	dc15      	bgt.n	8003c9c <UART_SetConfig+0x13c>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <UART_SetConfig+0x11a>
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d005      	beq.n	8003c84 <UART_SetConfig+0x124>
 8003c78:	e010      	b.n	8003c9c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7a:	f7ff f901 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	61bb      	str	r3, [r7, #24]
        break;
 8003c82:	e012      	b.n	8003caa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c84:	4b55      	ldr	r3, [pc, #340]	; (8003ddc <UART_SetConfig+0x27c>)
 8003c86:	61bb      	str	r3, [r7, #24]
        break;
 8003c88:	e00f      	b.n	8003caa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8a:	f7ff f86f 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	61bb      	str	r3, [r7, #24]
        break;
 8003c92:	e00a      	b.n	8003caa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	61bb      	str	r3, [r7, #24]
        break;
 8003c9a:	e006      	b.n	8003caa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ca0:	231e      	movs	r3, #30
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
        break;
 8003ca8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d100      	bne.n	8003cb2 <UART_SetConfig+0x152>
 8003cb0:	e07b      	b.n	8003daa <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	005a      	lsls	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	18d2      	adds	r2, r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	0010      	movs	r0, r2
 8003cc6:	f7fc fa1f 	bl	8000108 <__udivsi3>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b0f      	cmp	r3, #15
 8003cd4:	d91c      	bls.n	8003d10 <UART_SetConfig+0x1b0>
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	025b      	lsls	r3, r3, #9
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d217      	bcs.n	8003d10 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	200e      	movs	r0, #14
 8003ce6:	183b      	adds	r3, r7, r0
 8003ce8:	210f      	movs	r1, #15
 8003cea:	438a      	bics	r2, r1
 8003cec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	b299      	uxth	r1, r3
 8003cfa:	183b      	adds	r3, r7, r0
 8003cfc:	183a      	adds	r2, r7, r0
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	183a      	adds	r2, r7, r0
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e04c      	b.n	8003daa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d10:	231e      	movs	r3, #30
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e047      	b.n	8003daa <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d1a:	231f      	movs	r3, #31
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d015      	beq.n	8003d50 <UART_SetConfig+0x1f0>
 8003d24:	dc18      	bgt.n	8003d58 <UART_SetConfig+0x1f8>
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d00d      	beq.n	8003d46 <UART_SetConfig+0x1e6>
 8003d2a:	dc15      	bgt.n	8003d58 <UART_SetConfig+0x1f8>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <UART_SetConfig+0x1d6>
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d005      	beq.n	8003d40 <UART_SetConfig+0x1e0>
 8003d34:	e010      	b.n	8003d58 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d36:	f7ff f8a3 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	61bb      	str	r3, [r7, #24]
        break;
 8003d3e:	e012      	b.n	8003d66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d40:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <UART_SetConfig+0x27c>)
 8003d42:	61bb      	str	r3, [r7, #24]
        break;
 8003d44:	e00f      	b.n	8003d66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d46:	f7ff f811 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	61bb      	str	r3, [r7, #24]
        break;
 8003d4e:	e00a      	b.n	8003d66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	61bb      	str	r3, [r7, #24]
        break;
 8003d56:	e006      	b.n	8003d66 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d5c:	231e      	movs	r3, #30
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
        break;
 8003d64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01e      	beq.n	8003daa <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	085a      	lsrs	r2, r3, #1
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	18d2      	adds	r2, r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	0010      	movs	r0, r2
 8003d7e:	f7fc f9c3 	bl	8000108 <__udivsi3>
 8003d82:	0003      	movs	r3, r0
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0f      	cmp	r3, #15
 8003d8c:	d909      	bls.n	8003da2 <UART_SetConfig+0x242>
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	025b      	lsls	r3, r3, #9
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d204      	bcs.n	8003da2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	e003      	b.n	8003daa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003da2:	231e      	movs	r3, #30
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003db6:	231e      	movs	r3, #30
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	781b      	ldrb	r3, [r3, #0]
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b008      	add	sp, #32
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	efff69f3 	.word	0xefff69f3
 8003dc8:	ffffcfff 	.word	0xffffcfff
 8003dcc:	fffff4ff 	.word	0xfffff4ff
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40004400 	.word	0x40004400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	; (8003f24 <UART_AdvFeatureConfig+0x144>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4a43      	ldr	r2, [pc, #268]	; (8003f28 <UART_AdvFeatureConfig+0x148>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2204      	movs	r2, #4
 8003e32:	4013      	ands	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4a3b      	ldr	r2, [pc, #236]	; (8003f2c <UART_AdvFeatureConfig+0x14c>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	0019      	movs	r1, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2208      	movs	r2, #8
 8003e54:	4013      	ands	r3, r2
 8003e56:	d00b      	beq.n	8003e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a34      	ldr	r2, [pc, #208]	; (8003f30 <UART_AdvFeatureConfig+0x150>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2210      	movs	r2, #16
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <UART_AdvFeatureConfig+0x154>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2220      	movs	r2, #32
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <UART_AdvFeatureConfig+0x158>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2240      	movs	r2, #64	; 0x40
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d01d      	beq.n	8003efa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <UART_AdvFeatureConfig+0x15c>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	035b      	lsls	r3, r3, #13
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10b      	bne.n	8003efa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <UART_AdvFeatureConfig+0x160>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	4013      	ands	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <UART_AdvFeatureConfig+0x164>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b002      	add	sp, #8
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	fffdffff 	.word	0xfffdffff
 8003f28:	fffeffff 	.word	0xfffeffff
 8003f2c:	fffbffff 	.word	0xfffbffff
 8003f30:	ffff7fff 	.word	0xffff7fff
 8003f34:	ffffefff 	.word	0xffffefff
 8003f38:	ffffdfff 	.word	0xffffdfff
 8003f3c:	ffefffff 	.word	0xffefffff
 8003f40:	ff9fffff 	.word	0xff9fffff
 8003f44:	fff7ffff 	.word	0xfff7ffff

08003f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	2100      	movs	r1, #0
 8003f56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f58:	f7fd f9cc 	bl	80012f4 <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2208      	movs	r2, #8
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d10c      	bne.n	8003f88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	0391      	lsls	r1, r2, #14
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <UART_CheckIdleState+0x8c>)
 8003f78:	9200      	str	r2, [sp, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f000 f82c 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d001      	beq.n	8003f88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e021      	b.n	8003fcc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d10c      	bne.n	8003fb0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2280      	movs	r2, #128	; 0x80
 8003f9a:	03d1      	lsls	r1, r2, #15
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <UART_CheckIdleState+0x8c>)
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f000 f818 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003fa8:	1e03      	subs	r3, r0, #0
 8003faa:	d001      	beq.n	8003fb0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e00d      	b.n	8003fcc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2274      	movs	r2, #116	; 0x74
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	01ffffff 	.word	0x01ffffff

08003fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b094      	sub	sp, #80	; 0x50
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	1dfb      	adds	r3, r7, #7
 8003fe6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	e0a3      	b.n	8004132 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fec:	3301      	adds	r3, #1
 8003fee:	d100      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ff0:	e09f      	b.n	8004132 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fd f97f 	bl	80012f4 <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <UART_WaitOnFlagUntilTimeout+0x30>
 8004002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004004:	2b00      	cmp	r3, #0
 8004006:	d13d      	bne.n	8004084 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004008:	f3ef 8310 	mrs	r3, PRIMASK
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004010:	647b      	str	r3, [r7, #68]	; 0x44
 8004012:	2301      	movs	r3, #1
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	f383 8810 	msr	PRIMASK, r3
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	494c      	ldr	r1, [pc, #304]	; (800415c <UART_WaitOnFlagUntilTimeout+0x184>)
 800402a:	400a      	ands	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004030:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	f383 8810 	msr	PRIMASK, r3
}
 8004038:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403a:	f3ef 8310 	mrs	r3, PRIMASK
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	643b      	str	r3, [r7, #64]	; 0x40
 8004044:	2301      	movs	r3, #1
 8004046:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	f383 8810 	msr	PRIMASK, r3
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2101      	movs	r1, #1
 800405c:	438a      	bics	r2, r1
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004066:	f383 8810 	msr	PRIMASK, r3
}
 800406a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2274      	movs	r2, #116	; 0x74
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e067      	b.n	8004154 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	d050      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	401a      	ands	r2, r3
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d146      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2280      	movs	r2, #128	; 0x80
 80040aa:	0112      	lsls	r2, r2, #4
 80040ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	613b      	str	r3, [r7, #16]
  return(result);
 80040b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	2301      	movs	r3, #1
 80040ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4923      	ldr	r1, [pc, #140]	; (800415c <UART_WaitOnFlagUntilTimeout+0x184>)
 80040d0:	400a      	ands	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e0:	f3ef 8310 	mrs	r3, PRIMASK
 80040e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80040e6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ea:	2301      	movs	r3, #1
 80040ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f383 8810 	msr	PRIMASK, r3
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2101      	movs	r1, #1
 8004102:	438a      	bics	r2, r1
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	2120      	movs	r1, #32
 8004124:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2274      	movs	r2, #116	; 0x74
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e010      	b.n	8004154 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	425a      	negs	r2, r3
 8004142:	4153      	adcs	r3, r2
 8004144:	b2db      	uxtb	r3, r3
 8004146:	001a      	movs	r2, r3
 8004148:	1dfb      	adds	r3, r7, #7
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d100      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004150:	e74b      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	b014      	add	sp, #80	; 0x50
 800415a:	bd80      	pop	{r7, pc}
 800415c:	fffffe5f 	.word	0xfffffe5f

08004160 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08c      	sub	sp, #48	; 0x30
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	1dbb      	adds	r3, r7, #6
 800416c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1dba      	adds	r2, r7, #6
 8004178:	2158      	movs	r1, #88	; 0x58
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1dba      	adds	r2, r7, #6
 8004182:	215a      	movs	r1, #90	; 0x5a
 8004184:	8812      	ldrh	r2, [r2, #0]
 8004186:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	015b      	lsls	r3, r3, #5
 8004196:	429a      	cmp	r2, r3
 8004198:	d10d      	bne.n	80041b6 <UART_Start_Receive_IT+0x56>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <UART_Start_Receive_IT+0x4c>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	225c      	movs	r2, #92	; 0x5c
 80041a6:	4943      	ldr	r1, [pc, #268]	; (80042b4 <UART_Start_Receive_IT+0x154>)
 80041a8:	5299      	strh	r1, [r3, r2]
 80041aa:	e02e      	b.n	800420a <UART_Start_Receive_IT+0xaa>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	225c      	movs	r2, #92	; 0x5c
 80041b0:	21ff      	movs	r1, #255	; 0xff
 80041b2:	5299      	strh	r1, [r3, r2]
 80041b4:	e029      	b.n	800420a <UART_Start_Receive_IT+0xaa>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10d      	bne.n	80041da <UART_Start_Receive_IT+0x7a>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <UART_Start_Receive_IT+0x70>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	225c      	movs	r2, #92	; 0x5c
 80041ca:	21ff      	movs	r1, #255	; 0xff
 80041cc:	5299      	strh	r1, [r3, r2]
 80041ce:	e01c      	b.n	800420a <UART_Start_Receive_IT+0xaa>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	225c      	movs	r2, #92	; 0x5c
 80041d4:	217f      	movs	r1, #127	; 0x7f
 80041d6:	5299      	strh	r1, [r3, r2]
 80041d8:	e017      	b.n	800420a <UART_Start_Receive_IT+0xaa>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	055b      	lsls	r3, r3, #21
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d10d      	bne.n	8004202 <UART_Start_Receive_IT+0xa2>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <UART_Start_Receive_IT+0x98>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	225c      	movs	r2, #92	; 0x5c
 80041f2:	217f      	movs	r1, #127	; 0x7f
 80041f4:	5299      	strh	r1, [r3, r2]
 80041f6:	e008      	b.n	800420a <UART_Start_Receive_IT+0xaa>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	225c      	movs	r2, #92	; 0x5c
 80041fc:	213f      	movs	r1, #63	; 0x3f
 80041fe:	5299      	strh	r1, [r3, r2]
 8004200:	e003      	b.n	800420a <UART_Start_Receive_IT+0xaa>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	225c      	movs	r2, #92	; 0x5c
 8004206:	2100      	movs	r1, #0
 8004208:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	2100      	movs	r1, #0
 8004210:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2222      	movs	r2, #34	; 0x22
 8004216:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004218:	f3ef 8310 	mrs	r3, PRIMASK
 800421c:	61fb      	str	r3, [r7, #28]
  return(result);
 800421e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004222:	2301      	movs	r3, #1
 8004224:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f383 8810 	msr	PRIMASK, r3
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2101      	movs	r1, #1
 800423a:	430a      	orrs	r2, r1
 800423c:	609a      	str	r2, [r3, #8]
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	f383 8810 	msr	PRIMASK, r3
}
 8004248:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	015b      	lsls	r3, r3, #5
 8004252:	429a      	cmp	r2, r3
 8004254:	d107      	bne.n	8004266 <UART_Start_Receive_IT+0x106>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <UART_Start_Receive_IT+0x158>)
 8004262:	665a      	str	r2, [r3, #100]	; 0x64
 8004264:	e002      	b.n	800426c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <UART_Start_Receive_IT+0x15c>)
 800426a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2274      	movs	r2, #116	; 0x74
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	613b      	str	r3, [r7, #16]
  return(result);
 800427a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
 800427e:	2301      	movs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2190      	movs	r1, #144	; 0x90
 8004296:	0049      	lsls	r1, r1, #1
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f383 8810 	msr	PRIMASK, r3
}
 80042a6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b00c      	add	sp, #48	; 0x30
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	000001ff 	.word	0x000001ff
 80042b8:	08004571 	.word	0x08004571
 80042bc:	08004409 	.word	0x08004409

080042c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08e      	sub	sp, #56	; 0x38
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c8:	f3ef 8310 	mrs	r3, PRIMASK
 80042cc:	617b      	str	r3, [r7, #20]
  return(result);
 80042ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
 80042d2:	2301      	movs	r3, #1
 80042d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f383 8810 	msr	PRIMASK, r3
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4925      	ldr	r1, [pc, #148]	; (8004380 <UART_EndRxTransfer+0xc0>)
 80042ea:	400a      	ands	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f383 8810 	msr	PRIMASK, r3
}
 80042f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fa:	f3ef 8310 	mrs	r3, PRIMASK
 80042fe:	623b      	str	r3, [r7, #32]
  return(result);
 8004300:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	633b      	str	r3, [r7, #48]	; 0x30
 8004304:	2301      	movs	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2101      	movs	r1, #1
 800431c:	438a      	bics	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	f383 8810 	msr	PRIMASK, r3
}
 800432a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	2b01      	cmp	r3, #1
 8004332:	d118      	bne.n	8004366 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004334:	f3ef 8310 	mrs	r3, PRIMASK
 8004338:	60bb      	str	r3, [r7, #8]
  return(result);
 800433a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	2301      	movs	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f383 8810 	msr	PRIMASK, r3
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2110      	movs	r1, #16
 8004356:	438a      	bics	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b00e      	add	sp, #56	; 0x38
 800437e:	bd80      	pop	{r7, pc}
 8004380:	fffffedf 	.word	0xfffffedf

08004384 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	225a      	movs	r2, #90	; 0x5a
 8004396:	2100      	movs	r1, #0
 8004398:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2252      	movs	r2, #82	; 0x52
 800439e:	2100      	movs	r1, #0
 80043a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7ff fbc7 	bl	8003b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b004      	add	sp, #16
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ba:	f3ef 8310 	mrs	r3, PRIMASK
 80043be:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	2301      	movs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f383 8810 	msr	PRIMASK, r3
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	438a      	bics	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7ff fb94 	bl	8003b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004400:	46c0      	nop			; (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	b006      	add	sp, #24
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b090      	sub	sp, #64	; 0x40
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004410:	203e      	movs	r0, #62	; 0x3e
 8004412:	183b      	adds	r3, r7, r0
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	215c      	movs	r1, #92	; 0x5c
 8004418:	5a52      	ldrh	r2, [r2, r1]
 800441a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004420:	2b22      	cmp	r3, #34	; 0x22
 8004422:	d000      	beq.n	8004426 <UART_RxISR_8BIT+0x1e>
 8004424:	e095      	b.n	8004552 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	213c      	movs	r1, #60	; 0x3c
 800442c:	187b      	adds	r3, r7, r1
 800442e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004430:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004432:	187b      	adds	r3, r7, r1
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	183b      	adds	r3, r7, r0
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b2d9      	uxtb	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	400a      	ands	r2, r1
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	225a      	movs	r2, #90	; 0x5a
 8004456:	5a9b      	ldrh	r3, [r3, r2]
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b299      	uxth	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	225a      	movs	r2, #90	; 0x5a
 8004462:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	225a      	movs	r2, #90	; 0x5a
 8004468:	5a9b      	ldrh	r3, [r3, r2]
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d178      	bne.n	8004562 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004470:	f3ef 8310 	mrs	r3, PRIMASK
 8004474:	61bb      	str	r3, [r7, #24]
  return(result);
 8004476:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004478:	63bb      	str	r3, [r7, #56]	; 0x38
 800447a:	2301      	movs	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f383 8810 	msr	PRIMASK, r3
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4936      	ldr	r1, [pc, #216]	; (800456c <UART_RxISR_8BIT+0x164>)
 8004492:	400a      	ands	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f383 8810 	msr	PRIMASK, r3
}
 80044a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a2:	f3ef 8310 	mrs	r3, PRIMASK
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
 80044ac:	2301      	movs	r3, #1
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	f383 8810 	msr	PRIMASK, r3
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2101      	movs	r1, #1
 80044c4:	438a      	bics	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d12f      	bne.n	8004548 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ee:	f3ef 8310 	mrs	r3, PRIMASK
 80044f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80044f4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f6:	633b      	str	r3, [r7, #48]	; 0x30
 80044f8:	2301      	movs	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2110      	movs	r1, #16
 8004510:	438a      	bics	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	2210      	movs	r2, #16
 8004528:	4013      	ands	r3, r2
 800452a:	2b10      	cmp	r3, #16
 800452c:	d103      	bne.n	8004536 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2258      	movs	r2, #88	; 0x58
 800453a:	5a9a      	ldrh	r2, [r3, r2]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0011      	movs	r1, r2
 8004540:	0018      	movs	r0, r3
 8004542:	f7ff fb01 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004546:	e00c      	b.n	8004562 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f7fc fbf2 	bl	8000d34 <HAL_UART_RxCpltCallback>
}
 8004550:	e007      	b.n	8004562 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2108      	movs	r1, #8
 800455e:	430a      	orrs	r2, r1
 8004560:	619a      	str	r2, [r3, #24]
}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b010      	add	sp, #64	; 0x40
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	fffffedf 	.word	0xfffffedf

08004570 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b090      	sub	sp, #64	; 0x40
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004578:	203e      	movs	r0, #62	; 0x3e
 800457a:	183b      	adds	r3, r7, r0
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	215c      	movs	r1, #92	; 0x5c
 8004580:	5a52      	ldrh	r2, [r2, r1]
 8004582:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004588:	2b22      	cmp	r3, #34	; 0x22
 800458a:	d000      	beq.n	800458e <UART_RxISR_16BIT+0x1e>
 800458c:	e095      	b.n	80046ba <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	213c      	movs	r1, #60	; 0x3c
 8004594:	187b      	adds	r3, r7, r1
 8004596:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004598:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80045a0:	187b      	adds	r3, r7, r1
 80045a2:	183a      	adds	r2, r7, r0
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	4013      	ands	r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	1c9a      	adds	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	225a      	movs	r2, #90	; 0x5a
 80045be:	5a9b      	ldrh	r3, [r3, r2]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b299      	uxth	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	225a      	movs	r2, #90	; 0x5a
 80045ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	225a      	movs	r2, #90	; 0x5a
 80045d0:	5a9b      	ldrh	r3, [r3, r2]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d178      	bne.n	80046ca <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d8:	f3ef 8310 	mrs	r3, PRIMASK
 80045dc:	617b      	str	r3, [r7, #20]
  return(result);
 80045de:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
 80045e2:	2301      	movs	r3, #1
 80045e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4936      	ldr	r1, [pc, #216]	; (80046d4 <UART_RxISR_16BIT+0x164>)
 80045fa:	400a      	ands	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f383 8810 	msr	PRIMASK, r3
}
 8004608:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460a:	f3ef 8310 	mrs	r3, PRIMASK
 800460e:	623b      	str	r3, [r7, #32]
  return(result);
 8004610:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	633b      	str	r3, [r7, #48]	; 0x30
 8004614:	2301      	movs	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f383 8810 	msr	PRIMASK, r3
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2101      	movs	r1, #1
 800462c:	438a      	bics	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	2b01      	cmp	r3, #1
 800464e:	d12f      	bne.n	80046b0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004656:	f3ef 8310 	mrs	r3, PRIMASK
 800465a:	60bb      	str	r3, [r7, #8]
  return(result);
 800465c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004660:	2301      	movs	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2110      	movs	r1, #16
 8004678:	438a      	bics	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	2210      	movs	r2, #16
 8004690:	4013      	ands	r3, r2
 8004692:	2b10      	cmp	r3, #16
 8004694:	d103      	bne.n	800469e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2258      	movs	r2, #88	; 0x58
 80046a2:	5a9a      	ldrh	r2, [r3, r2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7ff fa4d 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046ae:	e00c      	b.n	80046ca <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f7fc fb3e 	bl	8000d34 <HAL_UART_RxCpltCallback>
}
 80046b8:	e007      	b.n	80046ca <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2108      	movs	r1, #8
 80046c6:	430a      	orrs	r2, r1
 80046c8:	619a      	str	r2, [r3, #24]
}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b010      	add	sp, #64	; 0x40
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	fffffedf 	.word	0xfffffedf

080046d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	2600      	movs	r6, #0
 80046ec:	4d0c      	ldr	r5, [pc, #48]	; (8004720 <__libc_init_array+0x38>)
 80046ee:	4c0d      	ldr	r4, [pc, #52]	; (8004724 <__libc_init_array+0x3c>)
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	42a6      	cmp	r6, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	2600      	movs	r6, #0
 80046fa:	f000 f821 	bl	8004740 <_init>
 80046fe:	4d0a      	ldr	r5, [pc, #40]	; (8004728 <__libc_init_array+0x40>)
 8004700:	4c0a      	ldr	r4, [pc, #40]	; (800472c <__libc_init_array+0x44>)
 8004702:	1b64      	subs	r4, r4, r5
 8004704:	10a4      	asrs	r4, r4, #2
 8004706:	42a6      	cmp	r6, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	00b3      	lsls	r3, r6, #2
 800470e:	58eb      	ldr	r3, [r5, r3]
 8004710:	4798      	blx	r3
 8004712:	3601      	adds	r6, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	00b3      	lsls	r3, r6, #2
 8004718:	58eb      	ldr	r3, [r5, r3]
 800471a:	4798      	blx	r3
 800471c:	3601      	adds	r6, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	0800486c 	.word	0x0800486c
 8004724:	0800486c 	.word	0x0800486c
 8004728:	0800486c 	.word	0x0800486c
 800472c:	08004870 	.word	0x08004870

08004730 <memset>:
 8004730:	0003      	movs	r3, r0
 8004732:	1882      	adds	r2, r0, r2
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	7019      	strb	r1, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <_init>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr

0800474c <_fini>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr
