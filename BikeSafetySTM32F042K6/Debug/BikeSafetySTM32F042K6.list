
BikeSafetySTM32F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003394  08003394  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003394  08003394  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003394  08003394  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800339c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000000c  080033a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080033a8  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8c8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c39  00000000  00000000  0002e8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00030538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00031028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b21  00000000  00000000  00031a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e639  00000000  00000000  0004a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c987  00000000  00000000  00058bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  000e55a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003268 	.word	0x08003268

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003268 	.word	0x08003268

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b0c3      	sub	sp, #268	; 0x10c
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//=========================MPU9250
	// Registers
	uint8_t IMUDevAddr 				= 0xd0;
 8000226:	24ff      	movs	r4, #255	; 0xff
 8000228:	193b      	adds	r3, r7, r4
 800022a:	22d0      	movs	r2, #208	; 0xd0
 800022c:	701a      	strb	r2, [r3, #0]
	uint8_t PWR_MGMT_1[2] 			= {0x6b, 0b00100000};	// or 4
 800022e:	25fc      	movs	r5, #252	; 0xfc
 8000230:	197b      	adds	r3, r7, r5
 8000232:	4af8      	ldr	r2, [pc, #992]	; (8000614 <main+0x3f4>)
 8000234:	801a      	strh	r2, [r3, #0]
	uint8_t PWR_MGMT_2[2] 			= {0x6c, 0b00000000};	// 0 to enable all or 255 to disable all
 8000236:	26f8      	movs	r6, #248	; 0xf8
 8000238:	19bb      	adds	r3, r7, r6
 800023a:	226c      	movs	r2, #108	; 0x6c
 800023c:	801a      	strh	r2, [r3, #0]
	uint8_t WHO_AM_I 				= 0x75;
 800023e:	23f7      	movs	r3, #247	; 0xf7
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2275      	movs	r2, #117	; 0x75
 8000244:	701a      	strb	r2, [r3, #0]
	uint8_t LP_ACCEL_ODR[2] 		= {0x1e, 0b00001000}; 	// 8 = output frequency 62.50Hz
 8000246:	22f4      	movs	r2, #244	; 0xf4
 8000248:	18bb      	adds	r3, r7, r2
 800024a:	4af3      	ldr	r2, [pc, #972]	; (8000618 <main+0x3f8>)
 800024c:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_CONFIG[2] 		= {0x1c, 0x0}; 			// 0x0 for 2g, 0x8 for 4g, 0x10 for 8g,0x18 for 16g
 800024e:	21f0      	movs	r1, #240	; 0xf0
 8000250:	187b      	adds	r3, r7, r1
 8000252:	221c      	movs	r2, #28
 8000254:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_XOUT_L 			= 0x3c;
 8000256:	20ef      	movs	r0, #239	; 0xef
 8000258:	183b      	adds	r3, r7, r0
 800025a:	223c      	movs	r2, #60	; 0x3c
 800025c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_XOUT_H 			= 0x3b;
 800025e:	20ee      	movs	r0, #238	; 0xee
 8000260:	183b      	adds	r3, r7, r0
 8000262:	223b      	movs	r2, #59	; 0x3b
 8000264:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_L 			= 0x3e;
 8000266:	20ed      	movs	r0, #237	; 0xed
 8000268:	183b      	adds	r3, r7, r0
 800026a:	223e      	movs	r2, #62	; 0x3e
 800026c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_H 			= 0x3d;
 800026e:	20ec      	movs	r0, #236	; 0xec
 8000270:	183b      	adds	r3, r7, r0
 8000272:	223d      	movs	r2, #61	; 0x3d
 8000274:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_L 			= 0x40;
 8000276:	20eb      	movs	r0, #235	; 0xeb
 8000278:	183b      	adds	r3, r7, r0
 800027a:	2240      	movs	r2, #64	; 0x40
 800027c:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_H 			= 0x3f;
 800027e:	20ea      	movs	r0, #234	; 0xea
 8000280:	183b      	adds	r3, r7, r0
 8000282:	223f      	movs	r2, #63	; 0x3f
 8000284:	701a      	strb	r2, [r3, #0]
	//=========================MPU9250

	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 8000286:	20e4      	movs	r0, #228	; 0xe4
 8000288:	183b      	adds	r3, r7, r0
 800028a:	4ae4      	ldr	r2, [pc, #912]	; (800061c <main+0x3fc>)
 800028c:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 800028e:	20dc      	movs	r0, #220	; 0xdc
 8000290:	183b      	adds	r3, r7, r0
 8000292:	4ae3      	ldr	r2, [pc, #908]	; (8000620 <main+0x400>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	6019      	str	r1, [r3, #0]
 8000298:	7912      	ldrb	r2, [r2, #4]
 800029a:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 800029c:	20d0      	movs	r0, #208	; 0xd0
 800029e:	183b      	adds	r3, r7, r0
 80002a0:	4ae0      	ldr	r2, [pc, #896]	; (8000624 <main+0x404>)
 80002a2:	ca03      	ldmia	r2!, {r0, r1}
 80002a4:	c303      	stmia	r3!, {r0, r1}
 80002a6:	8811      	ldrh	r1, [r2, #0]
 80002a8:	8019      	strh	r1, [r3, #0]
 80002aa:	7892      	ldrb	r2, [r2, #2]
 80002ac:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 80002ae:	20c4      	movs	r0, #196	; 0xc4
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	4add      	ldr	r2, [pc, #884]	; (8000628 <main+0x408>)
 80002b4:	ca03      	ldmia	r2!, {r0, r1}
 80002b6:	c303      	stmia	r3!, {r0, r1}
 80002b8:	8811      	ldrh	r1, [r2, #0]
 80002ba:	8019      	strh	r1, [r3, #0]
 80002bc:	7892      	ldrb	r2, [r2, #2]
 80002be:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 80002c0:	20b8      	movs	r0, #184	; 0xb8
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	4ad9      	ldr	r2, [pc, #868]	; (800062c <main+0x40c>)
 80002c6:	ca03      	ldmia	r2!, {r0, r1}
 80002c8:	c303      	stmia	r3!, {r0, r1}
 80002ca:	8812      	ldrh	r2, [r2, #0]
 80002cc:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 80002ce:	20ac      	movs	r0, #172	; 0xac
 80002d0:	183b      	adds	r3, r7, r0
 80002d2:	4ad7      	ldr	r2, [pc, #860]	; (8000630 <main+0x410>)
 80002d4:	ca03      	ldmia	r2!, {r0, r1}
 80002d6:	c303      	stmia	r3!, {r0, r1}
 80002d8:	8811      	ldrh	r1, [r2, #0]
 80002da:	8019      	strh	r1, [r3, #0]
 80002dc:	7892      	ldrb	r2, [r2, #2]
 80002de:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 80002e0:	20a0      	movs	r0, #160	; 0xa0
 80002e2:	183b      	adds	r3, r7, r0
 80002e4:	4ad3      	ldr	r2, [pc, #844]	; (8000634 <main+0x414>)
 80002e6:	ca03      	ldmia	r2!, {r0, r1}
 80002e8:	c303      	stmia	r3!, {r0, r1}
 80002ea:	8811      	ldrh	r1, [r2, #0]
 80002ec:	8019      	strh	r1, [r3, #0]
 80002ee:	7892      	ldrb	r2, [r2, #2]
 80002f0:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 80002f2:	2090      	movs	r0, #144	; 0x90
 80002f4:	183b      	adds	r3, r7, r0
 80002f6:	4ad0      	ldr	r2, [pc, #832]	; (8000638 <main+0x418>)
 80002f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002fa:	c313      	stmia	r3!, {r0, r1, r4}
 80002fc:	8811      	ldrh	r1, [r2, #0]
 80002fe:	8019      	strh	r1, [r3, #0]
 8000300:	7892      	ldrb	r2, [r2, #2]
 8000302:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8000304:	2088      	movs	r0, #136	; 0x88
 8000306:	183b      	adds	r3, r7, r0
 8000308:	4acc      	ldr	r2, [pc, #816]	; (800063c <main+0x41c>)
 800030a:	ca11      	ldmia	r2!, {r0, r4}
 800030c:	c311      	stmia	r3!, {r0, r4}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 800030e:	207c      	movs	r0, #124	; 0x7c
 8000310:	183b      	adds	r3, r7, r0
 8000312:	4acb      	ldr	r2, [pc, #812]	; (8000640 <main+0x420>)
 8000314:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000316:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8000318:	2078      	movs	r0, #120	; 0x78
 800031a:	183b      	adds	r3, r7, r0
 800031c:	221a      	movs	r2, #26
 800031e:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CMGS_SEND_MSG_BUF[] 	= "AT+CMGS=\"+358443500786\"\rTesting9";
 8000320:	2054      	movs	r0, #84	; 0x54
 8000322:	183b      	adds	r3, r7, r0
 8000324:	4ac7      	ldr	r2, [pc, #796]	; (8000644 <main+0x424>)
 8000326:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000328:	c313      	stmia	r3!, {r0, r1, r4}
 800032a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800032c:	c313      	stmia	r3!, {r0, r1, r4}
 800032e:	ca11      	ldmia	r2!, {r0, r4}
 8000330:	c311      	stmia	r3!, {r0, r4}
 8000332:	7812      	ldrb	r2, [r2, #0]
 8000334:	701a      	strb	r2, [r3, #0]
	//=========================GSM

	//=========================GNSS
	uint8_t AT_CGNSPWR_ON[] 	= "AT+CGNSPWR=1\r";				// GNSS turns Power ON
 8000336:	2044      	movs	r0, #68	; 0x44
 8000338:	183b      	adds	r3, r7, r0
 800033a:	4ac3      	ldr	r2, [pc, #780]	; (8000648 <main+0x428>)
 800033c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800033e:	c313      	stmia	r3!, {r0, r1, r4}
 8000340:	8812      	ldrh	r2, [r2, #0]
 8000342:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSPWR_OFF[] 	= "AT+CGNSPWR=0\r";				// GNSS turns Power OFF
 8000344:	2034      	movs	r0, #52	; 0x34
 8000346:	183b      	adds	r3, r7, r0
 8000348:	4ac0      	ldr	r2, [pc, #768]	; (800064c <main+0x42c>)
 800034a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800034c:	c313      	stmia	r3!, {r0, r1, r4}
 800034e:	8812      	ldrh	r2, [r2, #0]
 8000350:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSSEQ[] 		= "AT+CGNSSEQ=\"RMC\"\r";		// RMC for GGA
 8000352:	2020      	movs	r0, #32
 8000354:	183b      	adds	r3, r7, r0
 8000356:	4abe      	ldr	r2, [pc, #760]	; (8000650 <main+0x430>)
 8000358:	ca13      	ldmia	r2!, {r0, r1, r4}
 800035a:	c313      	stmia	r3!, {r0, r1, r4}
 800035c:	6811      	ldr	r1, [r2, #0]
 800035e:	6019      	str	r1, [r3, #0]
 8000360:	8892      	ldrh	r2, [r2, #4]
 8000362:	809a      	strh	r2, [r3, #4]
	uint8_t AT_CGNSINF[] 		= "AT+CGNSINF\r";				// Gets data from GNSS
 8000364:	2014      	movs	r0, #20
 8000366:	183b      	adds	r3, r7, r0
 8000368:	4aba      	ldr	r2, [pc, #744]	; (8000654 <main+0x434>)
 800036a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800036c:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CGNSURC[] 		= "AT+CGNSURC=1\r";
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4ab9      	ldr	r2, [pc, #740]	; (8000658 <main+0x438>)
 8000372:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000374:	c313      	stmia	r3!, {r0, r1, r4}
 8000376:	8812      	ldrh	r2, [r2, #0]
 8000378:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037a:	f000 fd4b 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037e:	f000 f9eb 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000382:	f000 fb2d 	bl	80009e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000386:	f000 fa4d 	bl	8000824 <MX_I2C1_Init>
  MX_SPI1_Init();
 800038a:	f000 fa8b 	bl	80008a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800038e:	f000 fac7 	bl	8000920 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000392:	f000 faf5 	bl	8000980 <MX_USART2_UART_Init>
  memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
  //=========================GNSS
  */

  //=========================MPU9250
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_1, sizeof(PWR_MGMT_1), 10);
 8000396:	24ff      	movs	r4, #255	; 0xff
 8000398:	193b      	adds	r3, r7, r4
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b299      	uxth	r1, r3
 800039e:	197a      	adds	r2, r7, r5
 80003a0:	48ae      	ldr	r0, [pc, #696]	; (800065c <main+0x43c>)
 80003a2:	230a      	movs	r3, #10
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	2302      	movs	r3, #2
 80003a8:	f001 f88c 	bl	80014c4 <HAL_I2C_Master_Transmit>
 80003ac:	0003      	movs	r3, r0
 80003ae:	001a      	movs	r2, r3
 80003b0:	4bab      	ldr	r3, [pc, #684]	; (8000660 <main+0x440>)
 80003b2:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b299      	uxth	r1, r3
 80003ba:	4aaa      	ldr	r2, [pc, #680]	; (8000664 <main+0x444>)
 80003bc:	48a7      	ldr	r0, [pc, #668]	; (800065c <main+0x43c>)
 80003be:	23fa      	movs	r3, #250	; 0xfa
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2301      	movs	r3, #1
 80003c6:	f001 f985 	bl	80016d4 <HAL_I2C_Master_Receive>
 80003ca:	0003      	movs	r3, r0
 80003cc:	001a      	movs	r2, r3
 80003ce:	4ba4      	ldr	r3, [pc, #656]	; (8000660 <main+0x440>)
 80003d0:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 80003d2:	200a      	movs	r0, #10
 80003d4:	f000 fd82 	bl	8000edc <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_2, sizeof(PWR_MGMT_2), 10);
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b299      	uxth	r1, r3
 80003de:	19ba      	adds	r2, r7, r6
 80003e0:	489e      	ldr	r0, [pc, #632]	; (800065c <main+0x43c>)
 80003e2:	230a      	movs	r3, #10
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2302      	movs	r3, #2
 80003e8:	f001 f86c 	bl	80014c4 <HAL_I2C_Master_Transmit>
 80003ec:	0003      	movs	r3, r0
 80003ee:	001a      	movs	r2, r3
 80003f0:	4b9b      	ldr	r3, [pc, #620]	; (8000660 <main+0x440>)
 80003f2:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	b299      	uxth	r1, r3
 80003fa:	4a9a      	ldr	r2, [pc, #616]	; (8000664 <main+0x444>)
 80003fc:	4897      	ldr	r0, [pc, #604]	; (800065c <main+0x43c>)
 80003fe:	23fa      	movs	r3, #250	; 0xfa
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2301      	movs	r3, #1
 8000406:	f001 f965 	bl	80016d4 <HAL_I2C_Master_Receive>
 800040a:	0003      	movs	r3, r0
 800040c:	001a      	movs	r2, r3
 800040e:	4b94      	ldr	r3, [pc, #592]	; (8000660 <main+0x440>)
 8000410:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000412:	200a      	movs	r0, #10
 8000414:	f000 fd62 	bl	8000edc <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &WHO_AM_I, sizeof(WHO_AM_I), 10);
 8000418:	193b      	adds	r3, r7, r4
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b299      	uxth	r1, r3
 800041e:	23f7      	movs	r3, #247	; 0xf7
 8000420:	18fa      	adds	r2, r7, r3
 8000422:	488e      	ldr	r0, [pc, #568]	; (800065c <main+0x43c>)
 8000424:	230a      	movs	r3, #10
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2301      	movs	r3, #1
 800042a:	f001 f84b 	bl	80014c4 <HAL_I2C_Master_Transmit>
 800042e:	0003      	movs	r3, r0
 8000430:	001a      	movs	r2, r3
 8000432:	4b8b      	ldr	r3, [pc, #556]	; (8000660 <main+0x440>)
 8000434:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 8000436:	193b      	adds	r3, r7, r4
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b299      	uxth	r1, r3
 800043c:	4a89      	ldr	r2, [pc, #548]	; (8000664 <main+0x444>)
 800043e:	4887      	ldr	r0, [pc, #540]	; (800065c <main+0x43c>)
 8000440:	23fa      	movs	r3, #250	; 0xfa
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	f001 f944 	bl	80016d4 <HAL_I2C_Master_Receive>
 800044c:	0003      	movs	r3, r0
 800044e:	001a      	movs	r2, r3
 8000450:	4b83      	ldr	r3, [pc, #524]	; (8000660 <main+0x440>)
 8000452:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000454:	200a      	movs	r0, #10
 8000456:	f000 fd41 	bl	8000edc <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, LP_ACCEL_ODR, sizeof(LP_ACCEL_ODR), 10);
 800045a:	193b      	adds	r3, r7, r4
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b299      	uxth	r1, r3
 8000460:	22f4      	movs	r2, #244	; 0xf4
 8000462:	18ba      	adds	r2, r7, r2
 8000464:	487d      	ldr	r0, [pc, #500]	; (800065c <main+0x43c>)
 8000466:	230a      	movs	r3, #10
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2302      	movs	r3, #2
 800046c:	f001 f82a 	bl	80014c4 <HAL_I2C_Master_Transmit>
 8000470:	0003      	movs	r3, r0
 8000472:	001a      	movs	r2, r3
 8000474:	4b7a      	ldr	r3, [pc, #488]	; (8000660 <main+0x440>)
 8000476:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 8000478:	193b      	adds	r3, r7, r4
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	b299      	uxth	r1, r3
 800047e:	4a79      	ldr	r2, [pc, #484]	; (8000664 <main+0x444>)
 8000480:	4876      	ldr	r0, [pc, #472]	; (800065c <main+0x43c>)
 8000482:	23fa      	movs	r3, #250	; 0xfa
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2301      	movs	r3, #1
 800048a:	f001 f923 	bl	80016d4 <HAL_I2C_Master_Receive>
 800048e:	0003      	movs	r3, r0
 8000490:	001a      	movs	r2, r3
 8000492:	4b73      	ldr	r3, [pc, #460]	; (8000660 <main+0x440>)
 8000494:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 8000496:	200a      	movs	r0, #10
 8000498:	f000 fd20 	bl	8000edc <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), 10);
 800049c:	193b      	adds	r3, r7, r4
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	b299      	uxth	r1, r3
 80004a2:	23f0      	movs	r3, #240	; 0xf0
 80004a4:	18fa      	adds	r2, r7, r3
 80004a6:	486d      	ldr	r0, [pc, #436]	; (800065c <main+0x43c>)
 80004a8:	230a      	movs	r3, #10
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2302      	movs	r3, #2
 80004ae:	f001 f809 	bl	80014c4 <HAL_I2C_Master_Transmit>
 80004b2:	0003      	movs	r3, r0
 80004b4:	001a      	movs	r2, r3
 80004b6:	4b6a      	ldr	r3, [pc, #424]	; (8000660 <main+0x440>)
 80004b8:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 1000);
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	b299      	uxth	r1, r3
 80004c0:	4a68      	ldr	r2, [pc, #416]	; (8000664 <main+0x444>)
 80004c2:	4866      	ldr	r0, [pc, #408]	; (800065c <main+0x43c>)
 80004c4:	23fa      	movs	r3, #250	; 0xfa
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2301      	movs	r3, #1
 80004cc:	f001 f902 	bl	80016d4 <HAL_I2C_Master_Receive>
 80004d0:	0003      	movs	r3, r0
 80004d2:	001a      	movs	r2, r3
 80004d4:	4b62      	ldr	r3, [pc, #392]	; (8000660 <main+0x440>)
 80004d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  i2cState = HAL_I2C_GetState(&hi2c1);
 80004d8:	4b60      	ldr	r3, [pc, #384]	; (800065c <main+0x43c>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fa02 	bl	80018e4 <HAL_I2C_GetState>
 80004e0:	0003      	movs	r3, r0
 80004e2:	001a      	movs	r2, r3
 80004e4:	4b60      	ldr	r3, [pc, #384]	; (8000668 <main+0x448>)
 80004e6:	701a      	strb	r2, [r3, #0]

	  //=========================MPU9250
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_L, sizeof(ACCEL_XOUT_L), 10);
 80004e8:	24ff      	movs	r4, #255	; 0xff
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b299      	uxth	r1, r3
 80004f0:	23ef      	movs	r3, #239	; 0xef
 80004f2:	18fa      	adds	r2, r7, r3
 80004f4:	4859      	ldr	r0, [pc, #356]	; (800065c <main+0x43c>)
 80004f6:	230a      	movs	r3, #10
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2301      	movs	r3, #1
 80004fc:	f000 ffe2 	bl	80014c4 <HAL_I2C_Master_Transmit>
 8000500:	0003      	movs	r3, r0
 8000502:	001a      	movs	r2, r3
 8000504:	4b56      	ldr	r3, [pc, #344]	; (8000660 <main+0x440>)
 8000506:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8000508:	193b      	adds	r3, r7, r4
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	b299      	uxth	r1, r3
 800050e:	4a55      	ldr	r2, [pc, #340]	; (8000664 <main+0x444>)
 8000510:	4852      	ldr	r0, [pc, #328]	; (800065c <main+0x43c>)
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2301      	movs	r3, #1
 8000518:	f001 f8dc 	bl	80016d4 <HAL_I2C_Master_Receive>
 800051c:	0003      	movs	r3, r0
 800051e:	001a      	movs	r2, r3
 8000520:	4b4f      	ldr	r3, [pc, #316]	; (8000660 <main+0x440>)
 8000522:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = dataReceiveI2cBuffer;
 8000524:	4b4f      	ldr	r3, [pc, #316]	; (8000664 <main+0x444>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	001a      	movs	r2, r3
 800052a:	4b50      	ldr	r3, [pc, #320]	; (800066c <main+0x44c>)
 800052c:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_H, sizeof(ACCEL_XOUT_H), 10);
 800052e:	193b      	adds	r3, r7, r4
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b299      	uxth	r1, r3
 8000534:	23ee      	movs	r3, #238	; 0xee
 8000536:	18fa      	adds	r2, r7, r3
 8000538:	4848      	ldr	r0, [pc, #288]	; (800065c <main+0x43c>)
 800053a:	230a      	movs	r3, #10
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	f000 ffc0 	bl	80014c4 <HAL_I2C_Master_Transmit>
 8000544:	0003      	movs	r3, r0
 8000546:	001a      	movs	r2, r3
 8000548:	4b45      	ldr	r3, [pc, #276]	; (8000660 <main+0x440>)
 800054a:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800054c:	193b      	adds	r3, r7, r4
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b299      	uxth	r1, r3
 8000552:	4a44      	ldr	r2, [pc, #272]	; (8000664 <main+0x444>)
 8000554:	4841      	ldr	r0, [pc, #260]	; (800065c <main+0x43c>)
 8000556:	2364      	movs	r3, #100	; 0x64
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	f001 f8ba 	bl	80016d4 <HAL_I2C_Master_Receive>
 8000560:	0003      	movs	r3, r0
 8000562:	001a      	movs	r2, r3
 8000564:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <main+0x440>)
 8000566:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = finalXAccValue + (dataReceiveI2cBuffer << 8);
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <main+0x444>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	021b      	lsls	r3, r3, #8
 800056e:	001a      	movs	r2, r3
 8000570:	4b3e      	ldr	r3, [pc, #248]	; (800066c <main+0x44c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	18d2      	adds	r2, r2, r3
 8000576:	4b3d      	ldr	r3, [pc, #244]	; (800066c <main+0x44c>)
 8000578:	601a      	str	r2, [r3, #0]
	  finalXAccValueWithOffset = finalXAccValue + 40000;
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <main+0x44c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4d3c      	ldr	r5, [pc, #240]	; (8000670 <main+0x450>)
 8000580:	195a      	adds	r2, r3, r5
 8000582:	4b3c      	ldr	r3, [pc, #240]	; (8000674 <main+0x454>)
 8000584:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_L, sizeof(ACCEL_YOUT_L), 10);
 8000586:	193b      	adds	r3, r7, r4
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	b299      	uxth	r1, r3
 800058c:	23ed      	movs	r3, #237	; 0xed
 800058e:	18fa      	adds	r2, r7, r3
 8000590:	4832      	ldr	r0, [pc, #200]	; (800065c <main+0x43c>)
 8000592:	230a      	movs	r3, #10
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	f000 ff94 	bl	80014c4 <HAL_I2C_Master_Transmit>
 800059c:	0003      	movs	r3, r0
 800059e:	001a      	movs	r2, r3
 80005a0:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <main+0x440>)
 80005a2:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b299      	uxth	r1, r3
 80005aa:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <main+0x444>)
 80005ac:	482b      	ldr	r0, [pc, #172]	; (800065c <main+0x43c>)
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2301      	movs	r3, #1
 80005b4:	f001 f88e 	bl	80016d4 <HAL_I2C_Master_Receive>
 80005b8:	0003      	movs	r3, r0
 80005ba:	001a      	movs	r2, r3
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <main+0x440>)
 80005be:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = dataReceiveI2cBuffer;
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <main+0x444>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001a      	movs	r2, r3
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <main+0x458>)
 80005c8:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_H, sizeof(ACCEL_YOUT_H), 10);
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b299      	uxth	r1, r3
 80005d0:	23ec      	movs	r3, #236	; 0xec
 80005d2:	18fa      	adds	r2, r7, r3
 80005d4:	4821      	ldr	r0, [pc, #132]	; (800065c <main+0x43c>)
 80005d6:	230a      	movs	r3, #10
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	f000 ff72 	bl	80014c4 <HAL_I2C_Master_Transmit>
 80005e0:	0003      	movs	r3, r0
 80005e2:	001a      	movs	r2, r3
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <main+0x440>)
 80005e6:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b299      	uxth	r1, r3
 80005ee:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <main+0x444>)
 80005f0:	481a      	ldr	r0, [pc, #104]	; (800065c <main+0x43c>)
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	f001 f86c 	bl	80016d4 <HAL_I2C_Master_Receive>
 80005fc:	0003      	movs	r3, r0
 80005fe:	001a      	movs	r2, r3
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <main+0x440>)
 8000602:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = finalYAccValue + (dataReceiveI2cBuffer << 8);
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <main+0x444>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	001a      	movs	r2, r3
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <main+0x458>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	18d2      	adds	r2, r2, r3
 8000612:	e033      	b.n	800067c <main+0x45c>
 8000614:	0000206b 	.word	0x0000206b
 8000618:	0000081e 	.word	0x0000081e
 800061c:	000d5441 	.word	0x000d5441
 8000620:	08003280 	.word	0x08003280
 8000624:	08003288 	.word	0x08003288
 8000628:	08003294 	.word	0x08003294
 800062c:	080032a0 	.word	0x080032a0
 8000630:	080032ac 	.word	0x080032ac
 8000634:	080032b8 	.word	0x080032b8
 8000638:	080032c4 	.word	0x080032c4
 800063c:	080032d4 	.word	0x080032d4
 8000640:	080032dc 	.word	0x080032dc
 8000644:	080032e8 	.word	0x080032e8
 8000648:	0800330c 	.word	0x0800330c
 800064c:	0800331c 	.word	0x0800331c
 8000650:	0800332c 	.word	0x0800332c
 8000654:	08003340 	.word	0x08003340
 8000658:	0800334c 	.word	0x0800334c
 800065c:	2000004c 	.word	0x2000004c
 8000660:	20000048 	.word	0x20000048
 8000664:	20000044 	.word	0x20000044
 8000668:	20000210 	.word	0x20000210
 800066c:	2000002c 	.word	0x2000002c
 8000670:	00009c40 	.word	0x00009c40
 8000674:	20000030 	.word	0x20000030
 8000678:	20000034 	.word	0x20000034
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <main+0x514>)
 800067e:	601a      	str	r2, [r3, #0]
	  finalYAccValueWithOffset = finalYAccValue + 40000;
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <main+0x514>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	195a      	adds	r2, r3, r5
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <main+0x518>)
 8000688:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_L, sizeof(ACCEL_ZOUT_L), 10);
 800068a:	193b      	adds	r3, r7, r4
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b299      	uxth	r1, r3
 8000690:	23eb      	movs	r3, #235	; 0xeb
 8000692:	18fa      	adds	r2, r7, r3
 8000694:	4829      	ldr	r0, [pc, #164]	; (800073c <main+0x51c>)
 8000696:	230a      	movs	r3, #10
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	f000 ff12 	bl	80014c4 <HAL_I2C_Master_Transmit>
 80006a0:	0003      	movs	r3, r0
 80006a2:	001a      	movs	r2, r3
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <main+0x520>)
 80006a6:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b299      	uxth	r1, r3
 80006ae:	4a25      	ldr	r2, [pc, #148]	; (8000744 <main+0x524>)
 80006b0:	4822      	ldr	r0, [pc, #136]	; (800073c <main+0x51c>)
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	f001 f80c 	bl	80016d4 <HAL_I2C_Master_Receive>
 80006bc:	0003      	movs	r3, r0
 80006be:	001a      	movs	r2, r3
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <main+0x520>)
 80006c2:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = dataReceiveI2cBuffer;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <main+0x524>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <main+0x528>)
 80006cc:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_H, sizeof(ACCEL_ZOUT_H), 10);
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b299      	uxth	r1, r3
 80006d4:	23ea      	movs	r3, #234	; 0xea
 80006d6:	18fa      	adds	r2, r7, r3
 80006d8:	4818      	ldr	r0, [pc, #96]	; (800073c <main+0x51c>)
 80006da:	230a      	movs	r3, #10
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	f000 fef0 	bl	80014c4 <HAL_I2C_Master_Transmit>
 80006e4:	0003      	movs	r3, r0
 80006e6:	001a      	movs	r2, r3
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <main+0x520>)
 80006ea:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b299      	uxth	r1, r3
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <main+0x524>)
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <main+0x51c>)
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	f000 ffea 	bl	80016d4 <HAL_I2C_Master_Receive>
 8000700:	0003      	movs	r3, r0
 8000702:	001a      	movs	r2, r3
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <main+0x520>)
 8000706:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = finalZAccValue + (dataReceiveI2cBuffer << 8);
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <main+0x524>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	001a      	movs	r2, r3
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <main+0x528>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	18d2      	adds	r2, r2, r3
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <main+0x528>)
 8000718:	601a      	str	r2, [r3, #0]
	  finalZAccValueWithOffset = finalZAccValue + 88000;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <main+0x528>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <main+0x52c>)
 8000720:	189a      	adds	r2, r3, r2
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <main+0x530>)
 8000724:	601a      	str	r2, [r3, #0]
	  memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
	  //=========================GNSS
	   */


	  counter = counter +1;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <main+0x534>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <main+0x534>)
 800072e:	601a      	str	r2, [r3, #0]
	  i2cState = HAL_I2C_GetState(&hi2c1);
 8000730:	e6d2      	b.n	80004d8 <main+0x2b8>
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	20000034 	.word	0x20000034
 8000738:	20000038 	.word	0x20000038
 800073c:	2000004c 	.word	0x2000004c
 8000740:	20000048 	.word	0x20000048
 8000744:	20000044 	.word	0x20000044
 8000748:	2000003c 	.word	0x2000003c
 800074c:	000157c0 	.word	0x000157c0
 8000750:	20000040 	.word	0x20000040
 8000754:	20000028 	.word	0x20000028

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b099      	sub	sp, #100	; 0x64
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	242c      	movs	r4, #44	; 0x2c
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2334      	movs	r3, #52	; 0x34
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f002 fd75 	bl	8003258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076e:	231c      	movs	r3, #28
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	0018      	movs	r0, r3
 8000774:	2310      	movs	r3, #16
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f002 fd6d 	bl	8003258 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	0018      	movs	r0, r3
 8000782:	2318      	movs	r3, #24
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f002 fd66 	bl	8003258 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	0021      	movs	r1, r4
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2202      	movs	r2, #2
 8000792:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2201      	movs	r2, #1
 8000798:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2210      	movs	r2, #16
 800079e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2202      	movs	r2, #2
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	0212      	lsls	r2, r2, #8
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	0352      	lsls	r2, r2, #13
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fb2c 	bl	8001e1c <HAL_RCC_OscConfig>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007c8:	f000 f97a 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	211c      	movs	r1, #28
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2202      	movs	r2, #2
 80007d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2101      	movs	r1, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 fe9c 	bl	8002528 <HAL_RCC_ClockConfig>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007f4:	f000 f964 	bl	8000ac0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2221      	movs	r2, #33	; 0x21
 80007fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	0018      	movs	r0, r3
 800080e:	f002 f805 	bl	800281c <HAL_RCCEx_PeriphCLKConfig>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000816:	f000 f953 	bl	8000ac0 <Error_Handler>
  }
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b019      	add	sp, #100	; 0x64
 8000820:	bd90      	pop	{r4, r7, pc}
	...

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C1_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C1_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2C1_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fd99 	bl	8001398 <HAL_I2C_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 f929 	bl	8000ac0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_I2C1_Init+0x74>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f001 fa3a 	bl	8001cec <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 f920 	bl	8000ac0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_I2C1_Init+0x74>)
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fa7d 	bl	8001d84 <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f917 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000004c 	.word	0x2000004c
 800089c:	40005400 	.word	0x40005400
 80008a0:	2000090e 	.word	0x2000090e

080008a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_SPI1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <MX_SPI1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_SPI1_Init+0x74>)
 80008b0:	2282      	movs	r2, #130	; 0x82
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_SPI1_Init+0x74>)
 80008be:	22e0      	movs	r2, #224	; 0xe0
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_SPI1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_SPI1_Init+0x74>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	0092      	lsls	r2, r2, #2
 80008d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_SPI1_Init+0x74>)
 80008da:	2210      	movs	r2, #16
 80008dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_SPI1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_SPI1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_SPI1_Init+0x74>)
 80008f2:	2207      	movs	r2, #7
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_SPI1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SPI1_Init+0x74>)
 80008fe:	2208      	movs	r2, #8
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_SPI1_Init+0x74>)
 8000904:	0018      	movs	r0, r3
 8000906:	f002 f877 	bl	80029f8 <HAL_SPI_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 f8d7 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000124 	.word	0x20000124
 800091c:	40013000 	.word	0x40013000

08000920 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_USART1_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800092c:	2296      	movs	r2, #150	; 0x96
 800092e:	0192      	lsls	r2, r2, #6
 8000930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000964:	0018      	movs	r0, r3
 8000966:	f002 f8ff 	bl	8002b68 <HAL_UART_Init>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f8a7 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000009c 	.word	0x2000009c
 800097c:	40013800 	.word	0x40013800

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_USART2_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 800098c:	22e1      	movs	r2, #225	; 0xe1
 800098e:	0252      	lsls	r2, r2, #9
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <MX_USART2_UART_Init+0x58>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f002 f8cf 	bl	8002b68 <HAL_UART_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f877 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000018c 	.word	0x2000018c
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	240c      	movs	r4, #12
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	0018      	movs	r0, r3
 80009ec:	2314      	movs	r3, #20
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f002 fc31 	bl	8003258 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	03c9      	lsls	r1, r1, #15
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a06:	695a      	ldr	r2, [r3, #20]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	03db      	lsls	r3, r3, #15
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0289      	lsls	r1, r1, #10
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	029b      	lsls	r3, r3, #10
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a30:	695a      	ldr	r2, [r3, #20]
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	02c9      	lsls	r1, r1, #11
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	02db      	lsls	r3, r3, #11
 8000a44:	4013      	ands	r3, r2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a4a:	2390      	movs	r3, #144	; 0x90
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2101      	movs	r1, #1
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fc82 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_GPIO_Init+0xdc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fc7c 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	193a      	adds	r2, r7, r4
 8000a7e:	2390      	movs	r3, #144	; 0x90
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fb01 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a8a:	0021      	movs	r1, r4
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2208      	movs	r2, #8
 8000a90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2201      	movs	r2, #1
 8000a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <MX_GPIO_Init+0xdc>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f000 faee 	bl	800108c <HAL_GPIO_Init>

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b009      	add	sp, #36	; 0x24
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000400 	.word	0x48000400

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	430a      	orrs	r2, r1
 8000adc:	619a      	str	r2, [r3, #24]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x44>)
 8000aec:	69da      	ldr	r2, [r3, #28]
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_MspInit+0x44>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	0549      	lsls	r1, r1, #21
 8000af4:	430a      	orrs	r2, r1
 8000af6:	61da      	str	r2, [r3, #28]
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_MspInit+0x44>)
 8000afa:	69da      	ldr	r2, [r3, #28]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	055b      	lsls	r3, r3, #21
 8000b00:	4013      	ands	r3, r2
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b08b      	sub	sp, #44	; 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	2414      	movs	r4, #20
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	2314      	movs	r3, #20
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f002 fb96 	bl	8003258 <memset>
  if(hi2c->Instance==I2C1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_I2C_MspInit+0x90>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d131      	bne.n	8000b9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_I2C_MspInit+0x94>)
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_I2C_MspInit+0x94>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	03c9      	lsls	r1, r1, #15
 8000b40:	430a      	orrs	r2, r1
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_I2C_MspInit+0x94>)
 8000b46:	695a      	ldr	r2, [r3, #20]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	03db      	lsls	r3, r3, #15
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b52:	0021      	movs	r1, r4
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2203      	movs	r2, #3
 8000b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2212      	movs	r2, #18
 8000b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2201      	movs	r2, #1
 8000b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2201      	movs	r2, #1
 8000b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_I2C_MspInit+0x98>)
 8000b76:	0019      	movs	r1, r3
 8000b78:	0010      	movs	r0, r2
 8000b7a:	f000 fa87 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_I2C_MspInit+0x94>)
 8000b80:	69da      	ldr	r2, [r3, #28]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_I2C_MspInit+0x94>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0389      	lsls	r1, r1, #14
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	61da      	str	r2, [r3, #28]
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_I2C_MspInit+0x94>)
 8000b8e:	69da      	ldr	r2, [r3, #28]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	039b      	lsls	r3, r3, #14
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b00b      	add	sp, #44	; 0x2c
 8000ba0:	bd90      	pop	{r4, r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48001400 	.word	0x48001400

08000bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b08b      	sub	sp, #44	; 0x2c
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	2414      	movs	r4, #20
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f002 fb48 	bl	8003258 <memset>
  if(hspi->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_SPI_MspInit+0x90>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d132      	bne.n	8000c38 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_SPI_MspInit+0x94>)
 8000bd4:	699a      	ldr	r2, [r3, #24]
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_SPI_MspInit+0x94>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0149      	lsls	r1, r1, #5
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	619a      	str	r2, [r3, #24]
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_SPI_MspInit+0x94>)
 8000be2:	699a      	ldr	r2, [r3, #24]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	015b      	lsls	r3, r3, #5
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_SPI_MspInit+0x94>)
 8000bf0:	695a      	ldr	r2, [r3, #20]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_SPI_MspInit+0x94>)
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	0289      	lsls	r1, r1, #10
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_SPI_MspInit+0x94>)
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	029b      	lsls	r3, r3, #10
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	22e0      	movs	r2, #224	; 0xe0
 8000c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2202      	movs	r2, #2
 8000c16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2203      	movs	r2, #3
 8000c22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	187a      	adds	r2, r7, r1
 8000c2c:	2390      	movs	r3, #144	; 0x90
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fa2a 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b00b      	add	sp, #44	; 0x2c
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	40013000 	.word	0x40013000
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b08d      	sub	sp, #52	; 0x34
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	241c      	movs	r4, #28
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	2314      	movs	r3, #20
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f002 fafc 	bl	8003258 <memset>
  if(huart->Instance==USART1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a39      	ldr	r2, [pc, #228]	; (8000d4c <HAL_UART_MspInit+0x104>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d134      	bne.n	8000cd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000c6c:	699a      	ldr	r2, [r3, #24]
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	01c9      	lsls	r1, r1, #7
 8000c74:	430a      	orrs	r2, r1
 8000c76:	619a      	str	r2, [r3, #24]
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000c7a:	699a      	ldr	r2, [r3, #24]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	01db      	lsls	r3, r3, #7
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	0289      	lsls	r1, r1, #10
 8000c90:	430a      	orrs	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	22c0      	movs	r2, #192	; 0xc0
 8000ca6:	00d2      	lsls	r2, r2, #3
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	0021      	movs	r1, r4
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2202      	movs	r2, #2
 8000cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	187a      	adds	r2, r7, r1
 8000cc6:	2390      	movs	r3, #144	; 0x90
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 f9dd 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd2:	e037      	b.n	8000d44 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_UART_MspInit+0x10c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d132      	bne.n	8000d44 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000ce0:	69da      	ldr	r2, [r3, #28]
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0289      	lsls	r1, r1, #10
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	61da      	str	r2, [r3, #28]
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000cee:	69da      	ldr	r2, [r3, #28]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	029b      	lsls	r3, r3, #10
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0289      	lsls	r1, r1, #10
 8000d04:	430a      	orrs	r2, r1
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0x108>)
 8000d0a:	695a      	ldr	r2, [r3, #20]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	029b      	lsls	r3, r3, #10
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d16:	211c      	movs	r1, #28
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2202      	movs	r2, #2
 8000d22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	187a      	adds	r2, r7, r1
 8000d38:	2390      	movs	r3, #144	; 0x90
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f9a4 	bl	800108c <HAL_GPIO_Init>
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b00d      	add	sp, #52	; 0x34
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40004400 	.word	0x40004400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f892 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d96:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d98:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <LoopForever+0xa>)
    CMP R1, R2
 8000d9c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d9e:	d105      	bne.n	8000dac <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000da2:	4913      	ldr	r1, [pc, #76]	; (8000df0 <LoopForever+0x12>)
    STR R1, [R0]
 8000da4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000da6:	4813      	ldr	r0, [pc, #76]	; (8000df4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000da8:	4913      	ldr	r1, [pc, #76]	; (8000df8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000daa:	6001      	str	r1, [r0, #0]

08000dac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <LoopForever+0x1e>)
  ldr r1, =_edata
 8000dae:	4914      	ldr	r1, [pc, #80]	; (8000e00 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <LoopForever+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dc4:	4c11      	ldr	r4, [pc, #68]	; (8000e0c <LoopForever+0x2e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dd2:	f7ff ffd8 	bl	8000d86 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dd6:	f002 fa1b 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dda:	f7ff fa21 	bl	8000220 <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   r0, =_estack
 8000de0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000de4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000de8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000dec:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000df0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000df4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000df8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e04:	0800339c 	.word	0x0800339c
  ldr r2, =_sbss
 8000e08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e0c:	20000218 	.word	0x20000218

08000e10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_IRQHandler>
	...

08000e14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_Init+0x24>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_Init+0x24>)
 8000e1e:	2110      	movs	r1, #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 f809 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2a:	f7ff fe4f 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e46:	681c      	ldr	r4, [r3, #0]
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	23fa      	movs	r3, #250	; 0xfa
 8000e50:	0098      	lsls	r0, r3, #2
 8000e52:	f7ff f959 	bl	8000108 <__udivsi3>
 8000e56:	0003      	movs	r3, r0
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	f7ff f954 	bl	8000108 <__udivsi3>
 8000e60:	0003      	movs	r3, r0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f905 	bl	8001072 <HAL_SYSTICK_Config>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e00f      	b.n	8000e90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d80b      	bhi.n	8000e8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 f8e2 	bl	8001048 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_InitTick+0x64>)
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b003      	add	sp, #12
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	001a      	movs	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000214 	.word	0x20000214

08000ec8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	20000214 	.word	0x20000214

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fff0 	bl	8000ec8 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	001a      	movs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	189b      	adds	r3, r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	f7ff ffe0 	bl	8000ec8 <HAL_GetTick>
 8000f08:	0002      	movs	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b7f      	cmp	r3, #127	; 0x7f
 8000f38:	d828      	bhi.n	8000f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	33c0      	adds	r3, #192	; 0xc0
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	589b      	ldr	r3, [r3, r2]
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	400a      	ands	r2, r1
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	21ff      	movs	r1, #255	; 0xff
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	4003      	ands	r3, r0
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	33c0      	adds	r3, #192	; 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8a:	e031      	b.n	8000ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0019      	movs	r1, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	400b      	ands	r3, r1
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	; 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <__NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001c      	movs	r4, r3
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4023      	ands	r3, r4
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	3306      	adds	r3, #6
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	18c3      	adds	r3, r0, r3
 8000fec:	3304      	adds	r3, #4
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	045b      	lsls	r3, r3, #17
 8001010:	429a      	cmp	r2, r3
 8001012:	d301      	bcc.n	8001018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001014:	2301      	movs	r3, #1
 8001016:	e010      	b.n	800103a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <SysTick_Config+0x44>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3a01      	subs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2103      	movs	r1, #3
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff7c 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x44>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	210f      	movs	r1, #15
 8001054:	187b      	adds	r3, r7, r1
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ffbf 	bl	8001000 <SysTick_Config>
 8001082:	0003      	movs	r3, r0
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e149      	b.n	8001330 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000a      	movs	r2, r1
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d100      	bne.n	80010b4 <HAL_GPIO_Init+0x28>
 80010b2:	e13a      	b.n	800132a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	409a      	lsls	r2, r3
 80010ee:	0013      	movs	r3, r2
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	2201      	movs	r2, #1
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	4013      	ands	r3, r2
 8001136:	2b03      	cmp	r3, #3
 8001138:	d017      	beq.n	800116a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2203      	movs	r2, #3
 8001170:	4013      	ands	r3, r2
 8001172:	2b02      	cmp	r3, #2
 8001174:	d123      	bne.n	80011be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	58d3      	ldr	r3, [r2, r3]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2207      	movs	r2, #7
 8001188:	4013      	ands	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2107      	movs	r1, #7
 80011a2:	400b      	ands	r3, r1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	6939      	ldr	r1, [r7, #16]
 80011bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2203      	movs	r2, #3
 80011dc:	401a      	ands	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d100      	bne.n	8001200 <HAL_GPIO_Init+0x174>
 80011fe:	e094      	b.n	800132a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	4b51      	ldr	r3, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	4b50      	ldr	r3, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 8001206:	2101      	movs	r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	619a      	str	r2, [r3, #24]
 800120c:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	2201      	movs	r2, #1
 8001212:	4013      	ands	r3, r2
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x2c0>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	589b      	ldr	r3, [r3, r2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2203      	movs	r2, #3
 800122a:	4013      	ands	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	409a      	lsls	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	43da      	mvns	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	2390      	movs	r3, #144	; 0x90
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	429a      	cmp	r2, r3
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x1d6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a41      	ldr	r2, [pc, #260]	; (8001350 <HAL_GPIO_Init+0x2c4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x1d2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a40      	ldr	r2, [pc, #256]	; (8001354 <HAL_GPIO_Init+0x2c8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x1ce>
 8001256:	2302      	movs	r3, #2
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x1d8>
 800125a:	2305      	movs	r3, #5
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x1d8>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x1d8>
 8001262:	2300      	movs	r3, #0
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	2103      	movs	r1, #3
 8001268:	400a      	ands	r2, r1
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x2c0>)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	4013      	ands	r3, r2
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	029b      	lsls	r3, r3, #10
 80012c4:	4013      	ands	r3, r2
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43da      	mvns	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	035b      	lsls	r3, r3, #13
 80012ee:	4013      	ands	r3, r2
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43da      	mvns	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	039b      	lsls	r3, r3, #14
 8001318:	4013      	ands	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	40da      	lsrs	r2, r3
 8001338:	1e13      	subs	r3, r2, #0
 800133a:	d000      	beq.n	800133e <HAL_GPIO_Init+0x2b2>
 800133c:	e6ae      	b.n	800109c <HAL_GPIO_Init+0x10>
  } 
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b006      	add	sp, #24
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	40010400 	.word	0x40010400

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	0008      	movs	r0, r1
 8001366:	0011      	movs	r1, r2
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	1c7b      	adds	r3, r7, #1
 8001370:	1c0a      	adds	r2, r1, #0
 8001372:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001374:	1c7b      	adds	r3, r7, #1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137c:	1cbb      	adds	r3, r7, #2
 800137e:	881a      	ldrh	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001386:	1cbb      	adds	r3, r7, #2
 8001388:	881a      	ldrh	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e082      	b.n	80014b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2241      	movs	r2, #65	; 0x41
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2240      	movs	r2, #64	; 0x40
 80013ba:	2100      	movs	r1, #0
 80013bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fba7 	bl	8000b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2241      	movs	r2, #65	; 0x41
 80013ca:	2124      	movs	r1, #36	; 0x24
 80013cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	438a      	bics	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4934      	ldr	r1, [pc, #208]	; (80014b8 <HAL_I2C_Init+0x120>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4931      	ldr	r1, [pc, #196]	; (80014bc <HAL_I2C_Init+0x124>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0209      	lsls	r1, r1, #8
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e007      	b.n	8001426 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2184      	movs	r1, #132	; 0x84
 8001420:	0209      	lsls	r1, r1, #8
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d104      	bne.n	8001438 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	491f      	ldr	r1, [pc, #124]	; (80014c0 <HAL_I2C_Init+0x128>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	491a      	ldr	r1, [pc, #104]	; (80014bc <HAL_I2C_Init+0x124>)
 8001454:	400a      	ands	r2, r1
 8001456:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	431a      	orrs	r2, r3
 8001462:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69d9      	ldr	r1, [r3, #28]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1a      	ldr	r2, [r3, #32]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2241      	movs	r2, #65	; 0x41
 800149c:	2120      	movs	r1, #32
 800149e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2242      	movs	r2, #66	; 0x42
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	f0ffffff 	.word	0xf0ffffff
 80014bc:	ffff7fff 	.word	0xffff7fff
 80014c0:	02008000 	.word	0x02008000

080014c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	0008      	movs	r0, r1
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	0019      	movs	r1, r3
 80014d2:	230a      	movs	r3, #10
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	2308      	movs	r3, #8
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	1c0a      	adds	r2, r1, #0
 80014e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2241      	movs	r2, #65	; 0x41
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d000      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x2c>
 80014ee:	e0e7      	b.n	80016c0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2240      	movs	r2, #64	; 0x40
 80014f4:	5c9b      	ldrb	r3, [r3, r2]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_I2C_Master_Transmit+0x3a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e0e1      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1fe>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001506:	f7ff fcdf 	bl	8000ec8 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	0219      	lsls	r1, r3, #8
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2319      	movs	r3, #25
 800151a:	2201      	movs	r2, #1
 800151c:	f000 fa10 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0cc      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2241      	movs	r2, #65	; 0x41
 800152c:	2121      	movs	r1, #33	; 0x21
 800152e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2242      	movs	r2, #66	; 0x42
 8001534:	2110      	movs	r1, #16
 8001536:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2208      	movs	r2, #8
 8001548:	18ba      	adds	r2, r7, r2
 800154a:	8812      	ldrh	r2, [r2, #0]
 800154c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d911      	bls.n	8001582 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	22ff      	movs	r2, #255	; 0xff
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	b2da      	uxtb	r2, r3
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	045c      	lsls	r4, r3, #17
 800156e:	230a      	movs	r3, #10
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	8819      	ldrh	r1, [r3, #0]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <HAL_I2C_Master_Transmit+0x208>)
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	0023      	movs	r3, r4
 800157c:	f000 fb80 	bl	8001c80 <I2C_TransferConfig>
 8001580:	e075      	b.n	800166e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	b2da      	uxtb	r2, r3
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	049c      	lsls	r4, r3, #18
 8001596:	230a      	movs	r3, #10
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	8819      	ldrh	r1, [r3, #0]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_I2C_Master_Transmit+0x208>)
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	0023      	movs	r3, r4
 80015a4:	f000 fb6c 	bl	8001c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015a8:	e061      	b.n	800166e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 fa04 	bl	80019be <I2C_WaitOnTXISFlagUntilTimeout>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e081      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d03a      	beq.n	800166e <HAL_I2C_Master_Transmit+0x1aa>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d136      	bne.n	800166e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	0013      	movs	r3, r2
 800160a:	2200      	movs	r2, #0
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	f000 f997 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e053      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	2bff      	cmp	r3, #255	; 0xff
 8001622:	d911      	bls.n	8001648 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	22ff      	movs	r2, #255	; 0xff
 8001628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162e:	b2da      	uxtb	r2, r3
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	045c      	lsls	r4, r3, #17
 8001634:	230a      	movs	r3, #10
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	8819      	ldrh	r1, [r3, #0]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	2300      	movs	r3, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	0023      	movs	r3, r4
 8001642:	f000 fb1d 	bl	8001c80 <I2C_TransferConfig>
 8001646:	e012      	b.n	800166e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001656:	b2da      	uxtb	r2, r3
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	049c      	lsls	r4, r3, #18
 800165c:	230a      	movs	r3, #10
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	8819      	ldrh	r1, [r3, #0]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	2300      	movs	r3, #0
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	0023      	movs	r3, r4
 800166a:	f000 fb09 	bl	8001c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001672:	b29b      	uxth	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d198      	bne.n	80015aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f9dc 	bl	8001a3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e01a      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2220      	movs	r2, #32
 8001692:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	490c      	ldr	r1, [pc, #48]	; (80016d0 <HAL_I2C_Master_Transmit+0x20c>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2241      	movs	r2, #65	; 0x41
 80016a8:	2120      	movs	r1, #32
 80016aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2242      	movs	r2, #66	; 0x42
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	e000      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80016c0:	2302      	movs	r3, #2
  }
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b007      	add	sp, #28
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	80002000 	.word	0x80002000
 80016d0:	fe00e800 	.word	0xfe00e800

080016d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	0008      	movs	r0, r1
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	0019      	movs	r1, r3
 80016e2:	230a      	movs	r3, #10
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	1c02      	adds	r2, r0, #0
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	2308      	movs	r3, #8
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	1c0a      	adds	r2, r1, #0
 80016f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2241      	movs	r2, #65	; 0x41
 80016f6:	5c9b      	ldrb	r3, [r3, r2]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d000      	beq.n	8001700 <HAL_I2C_Master_Receive+0x2c>
 80016fe:	e0e8      	b.n	80018d2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2240      	movs	r2, #64	; 0x40
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_I2C_Master_Receive+0x3a>
 800170a:	2302      	movs	r3, #2
 800170c:	e0e2      	b.n	80018d4 <HAL_I2C_Master_Receive+0x200>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001716:	f7ff fbd7 	bl	8000ec8 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	0219      	lsls	r1, r3, #8
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2319      	movs	r3, #25
 800172a:	2201      	movs	r2, #1
 800172c:	f000 f908 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 8001730:	1e03      	subs	r3, r0, #0
 8001732:	d001      	beq.n	8001738 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cd      	b.n	80018d4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2241      	movs	r2, #65	; 0x41
 800173c:	2122      	movs	r1, #34	; 0x22
 800173e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2242      	movs	r2, #66	; 0x42
 8001744:	2110      	movs	r1, #16
 8001746:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2208      	movs	r2, #8
 8001758:	18ba      	adds	r2, r7, r2
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	d911      	bls.n	8001792 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	22ff      	movs	r2, #255	; 0xff
 8001772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	b2da      	uxtb	r2, r3
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	045c      	lsls	r4, r3, #17
 800177e:	230a      	movs	r3, #10
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	8819      	ldrh	r1, [r3, #0]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_I2C_Master_Receive+0x208>)
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	0023      	movs	r3, r4
 800178c:	f000 fa78 	bl	8001c80 <I2C_TransferConfig>
 8001790:	e076      	b.n	8001880 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	049c      	lsls	r4, r3, #18
 80017a6:	230a      	movs	r3, #10
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	8819      	ldrh	r1, [r3, #0]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_I2C_Master_Receive+0x208>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	0023      	movs	r3, r4
 80017b4:	f000 fa64 	bl	8001c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80017b8:	e062      	b.n	8001880 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 f977 	bl	8001ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e082      	b.n	80018d4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03a      	beq.n	8001880 <HAL_I2C_Master_Receive+0x1ac>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	2b00      	cmp	r3, #0
 8001810:	d136      	bne.n	8001880 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	0013      	movs	r3, r2
 800181c:	2200      	movs	r2, #0
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	f000 f88e 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e053      	b.n	80018d4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d911      	bls.n	800185a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	b2da      	uxtb	r2, r3
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	045c      	lsls	r4, r3, #17
 8001846:	230a      	movs	r3, #10
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	8819      	ldrh	r1, [r3, #0]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	2300      	movs	r3, #0
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	0023      	movs	r3, r4
 8001854:	f000 fa14 	bl	8001c80 <I2C_TransferConfig>
 8001858:	e012      	b.n	8001880 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	b2da      	uxtb	r2, r3
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	049c      	lsls	r4, r3, #18
 800186e:	230a      	movs	r3, #10
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	8819      	ldrh	r1, [r3, #0]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	0023      	movs	r3, r4
 800187c:	f000 fa00 	bl	8001c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d197      	bne.n	80017ba <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f8d3 	bl	8001a3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d001      	beq.n	800189e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e01a      	b.n	80018d4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2220      	movs	r2, #32
 80018a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	490b      	ldr	r1, [pc, #44]	; (80018e0 <HAL_I2C_Master_Receive+0x20c>)
 80018b2:	400a      	ands	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2241      	movs	r2, #65	; 0x41
 80018ba:	2120      	movs	r1, #32
 80018bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2242      	movs	r2, #66	; 0x42
 80018c2:	2100      	movs	r1, #0
 80018c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	2100      	movs	r1, #0
 80018cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
  }
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b007      	add	sp, #28
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	80002400 	.word	0x80002400
 80018e0:	fe00e800 	.word	0xfe00e800

080018e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	b2db      	uxtb	r3, r3
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}

080018fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d103      	bne.n	800191a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	2b01      	cmp	r3, #1
 8001926:	d007      	beq.n	8001938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	619a      	str	r2, [r3, #24]
  }
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001950:	e021      	b.n	8001996 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	d01e      	beq.n	8001996 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001958:	f7ff fab6 	bl	8000ec8 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d302      	bcc.n	800196e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d113      	bne.n	8001996 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	2220      	movs	r2, #32
 8001974:	431a      	orrs	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2241      	movs	r2, #65	; 0x41
 800197e:	2120      	movs	r1, #32
 8001980:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2242      	movs	r2, #66	; 0x42
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2240      	movs	r2, #64	; 0x40
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	4013      	ands	r3, r2
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	425a      	negs	r2, r3
 80019a6:	4153      	adcs	r3, r2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	001a      	movs	r2, r3
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d0ce      	beq.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bd80      	pop	{r7, pc}

080019be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019ca:	e02b      	b.n	8001a24 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f8da 	bl	8001b8c <I2C_IsAcknowledgeFailed>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d001      	beq.n	80019e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e029      	b.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	3301      	adds	r3, #1
 80019e4:	d01e      	beq.n	8001a24 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7ff fa6f 	bl	8000ec8 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d113      	bne.n	8001a24 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	2220      	movs	r2, #32
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2241      	movs	r2, #65	; 0x41
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2242      	movs	r2, #66	; 0x42
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e007      	b.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d1cc      	bne.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a48:	e028      	b.n	8001a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 f89b 	bl	8001b8c <I2C_IsAcknowledgeFailed>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e026      	b.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5e:	f7ff fa33 	bl	8000ec8 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d302      	bcc.n	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d113      	bne.n	8001a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	2220      	movs	r2, #32
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2120      	movs	r1, #32
 8001a86:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2242      	movs	r2, #66	; 0x42
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e007      	b.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d1cf      	bne.n	8001a4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b004      	add	sp, #16
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ac0:	e055      	b.n	8001b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 f85f 	bl	8001b8c <I2C_IsAcknowledgeFailed>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e053      	b.n	8001b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d129      	bne.n	8001b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d105      	bne.n	8001afe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e03f      	b.n	8001b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2220      	movs	r2, #32
 8001b04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	491d      	ldr	r1, [pc, #116]	; (8001b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001b12:	400a      	ands	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2241      	movs	r2, #65	; 0x41
 8001b20:	2120      	movs	r1, #32
 8001b22:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2242      	movs	r2, #66	; 0x42
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e022      	b.n	8001b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b38:	f7ff f9c6 	bl	8000ec8 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d302      	bcc.n	8001b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	2220      	movs	r2, #32
 8001b54:	431a      	orrs	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2241      	movs	r2, #65	; 0x41
 8001b5e:	2120      	movs	r1, #32
 8001b60:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e007      	b.n	8001b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2204      	movs	r2, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d1a2      	bne.n	8001ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b004      	add	sp, #16
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	fe00e800 	.word	0xfe00e800

08001b8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d164      	bne.n	8001c70 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	049b      	lsls	r3, r3, #18
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	049b      	lsls	r3, r3, #18
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d02b      	beq.n	8001c12 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	01c9      	lsls	r1, r1, #7
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bcc:	e021      	b.n	8001c12 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	d01e      	beq.n	8001c12 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd4:	f7ff f978 	bl	8000ec8 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d302      	bcc.n	8001bea <I2C_IsAcknowledgeFailed+0x5e>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d113      	bne.n	8001c12 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	2220      	movs	r2, #32
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2241      	movs	r2, #65	; 0x41
 8001bfa:	2120      	movs	r1, #32
 8001bfc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2242      	movs	r2, #66	; 0x42
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2240      	movs	r2, #64	; 0x40
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e02f      	b.n	8001c72 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d1d6      	bne.n	8001bce <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2210      	movs	r2, #16
 8001c26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff fe62 	bl	80018fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	490e      	ldr	r1, [pc, #56]	; (8001c7c <I2C_IsAcknowledgeFailed+0xf0>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2241      	movs	r2, #65	; 0x41
 8001c58:	2120      	movs	r1, #32
 8001c5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2242      	movs	r2, #66	; 0x42
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	fe00e800 	.word	0xfe00e800

08001c80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	0008      	movs	r0, r1
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	240a      	movs	r4, #10
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	1c02      	adds	r2, r0, #0
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	2009      	movs	r0, #9
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	1c0a      	adds	r2, r1, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	0d51      	lsrs	r1, r2, #21
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	00d2      	lsls	r2, r2, #3
 8001cac:	400a      	ands	r2, r1
 8001cae:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <I2C_TransferConfig+0x68>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	43d2      	mvns	r2, r2
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	193b      	adds	r3, r7, r4
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	059b      	lsls	r3, r3, #22
 8001cbe:	0d9a      	lsrs	r2, r3, #22
 8001cc0:	183b      	adds	r3, r7, r0
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	0418      	lsls	r0, r3, #16
 8001cc6:	23ff      	movs	r3, #255	; 0xff
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	4003      	ands	r3, r0
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b005      	add	sp, #20
 8001ce4:	bd90      	pop	{r4, r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	03ff63ff 	.word	0x03ff63ff

08001cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2241      	movs	r2, #65	; 0x41
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d138      	bne.n	8001d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e032      	b.n	8001d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	2101      	movs	r1, #1
 8001d16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2241      	movs	r2, #65	; 0x41
 8001d1c:	2124      	movs	r1, #36	; 0x24
 8001d1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4911      	ldr	r1, [pc, #68]	; (8001d80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2241      	movs	r2, #65	; 0x41
 8001d64:	2120      	movs	r1, #32
 8001d66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	ffffefff 	.word	0xffffefff

08001d84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2241      	movs	r2, #65	; 0x41
 8001d92:	5c9b      	ldrb	r3, [r3, r2]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d139      	bne.n	8001e0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2240      	movs	r2, #64	; 0x40
 8001d9e:	5c9b      	ldrb	r3, [r3, r2]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e033      	b.n	8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	2101      	movs	r1, #1
 8001dae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2241      	movs	r2, #65	; 0x41
 8001db4:	2124      	movs	r1, #36	; 0x24
 8001db6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2241      	movs	r2, #65	; 0x41
 8001dfe:	2120      	movs	r1, #32
 8001e00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	2100      	movs	r1, #0
 8001e08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	fffff0ff 	.word	0xfffff0ff

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f000 fb76 	bl	800251c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d100      	bne.n	8001e3c <HAL_RCC_OscConfig+0x20>
 8001e3a:	e08e      	b.n	8001f5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e3c:	4bc5      	ldr	r3, [pc, #788]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	220c      	movs	r2, #12
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d00e      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e48:	4bc2      	ldr	r3, [pc, #776]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	220c      	movs	r2, #12
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d117      	bne.n	8001e84 <HAL_RCC_OscConfig+0x68>
 8001e54:	4bbf      	ldr	r3, [pc, #764]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10e      	bne.n	8001e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4bbb      	ldr	r3, [pc, #748]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d100      	bne.n	8001e74 <HAL_RCC_OscConfig+0x58>
 8001e72:	e071      	b.n	8001f58 <HAL_RCC_OscConfig+0x13c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d000      	beq.n	8001e7e <HAL_RCC_OscConfig+0x62>
 8001e7c:	e06c      	b.n	8001f58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f000 fb4c 	bl	800251c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x80>
 8001e8c:	4bb1      	ldr	r3, [pc, #708]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4bb0      	ldr	r3, [pc, #704]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0249      	lsls	r1, r1, #9
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e02f      	b.n	8001efc <HAL_RCC_OscConfig+0xe0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCC_OscConfig+0xa2>
 8001ea4:	4bab      	ldr	r3, [pc, #684]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4baa      	ldr	r3, [pc, #680]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	49ab      	ldr	r1, [pc, #684]	; (8002158 <HAL_RCC_OscConfig+0x33c>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4ba8      	ldr	r3, [pc, #672]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4ba7      	ldr	r3, [pc, #668]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	49a9      	ldr	r1, [pc, #676]	; (800215c <HAL_RCC_OscConfig+0x340>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e01e      	b.n	8001efc <HAL_RCC_OscConfig+0xe0>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xc8>
 8001ec6:	4ba3      	ldr	r3, [pc, #652]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4ba2      	ldr	r3, [pc, #648]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	02c9      	lsls	r1, r1, #11
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	4b9f      	ldr	r3, [pc, #636]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b9e      	ldr	r3, [pc, #632]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	0249      	lsls	r1, r1, #9
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xe0>
 8001ee4:	4b9b      	ldr	r3, [pc, #620]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b9a      	ldr	r3, [pc, #616]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001eea:	499b      	ldr	r1, [pc, #620]	; (8002158 <HAL_RCC_OscConfig+0x33c>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	4b98      	ldr	r3, [pc, #608]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b97      	ldr	r3, [pc, #604]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ef6:	4999      	ldr	r1, [pc, #612]	; (800215c <HAL_RCC_OscConfig+0x340>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d014      	beq.n	8001f2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe ffe0 	bl	8000ec8 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0e:	f7fe ffdb 	bl	8000ec8 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e2fd      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f20:	4b8c      	ldr	r3, [pc, #560]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	029b      	lsls	r3, r3, #10
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0xf2>
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe ffcb 	bl	8000ec8 <HAL_GetTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7fe ffc6 	bl	8000ec8 <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e2e8      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	029b      	lsls	r3, r3, #10
 8001f52:	4013      	ands	r3, r2
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x11c>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	d100      	bne.n	8001f66 <HAL_RCC_OscConfig+0x14a>
 8001f64:	e06c      	b.n	8002040 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f66:	4b7b      	ldr	r3, [pc, #492]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d00e      	beq.n	8001f8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f70:	4b78      	ldr	r3, [pc, #480]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	220c      	movs	r2, #12
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d11f      	bne.n	8001fbc <HAL_RCC_OscConfig+0x1a0>
 8001f7c:	4b75      	ldr	r3, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	23c0      	movs	r3, #192	; 0xc0
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	401a      	ands	r2, r3
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b71      	ldr	r3, [pc, #452]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x188>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e2bb      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	22f8      	movs	r2, #248	; 0xf8
 8001faa:	4393      	bics	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00da      	lsls	r2, r3, #3
 8001fb4:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e041      	b.n	8002040 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d024      	beq.n	800200e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b62      	ldr	r3, [pc, #392]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff7a 	bl	8000ec8 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fda:	f7fe ff75 	bl	8000ec8 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e297      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d0f1      	beq.n	8001fda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	22f8      	movs	r2, #248	; 0xf8
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	00da      	lsls	r2, r3, #3
 8002006:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e018      	b.n	8002040 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002014:	2101      	movs	r1, #1
 8002016:	438a      	bics	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe ff55 	bl	8000ec8 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7fe ff50 	bl	8000ec8 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e272      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d1f1      	bne.n	8002024 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2208      	movs	r2, #8
 8002046:	4013      	ands	r3, r2
 8002048:	d036      	beq.n	80020b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b40      	ldr	r3, [pc, #256]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002058:	2101      	movs	r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7fe ff33 	bl	8000ec8 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002068:	f7fe ff2e 	bl	8000ec8 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e250      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d0f1      	beq.n	8002068 <HAL_RCC_OscConfig+0x24c>
 8002084:	e018      	b.n	80020b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 800208c:	2101      	movs	r1, #1
 800208e:	438a      	bics	r2, r1
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7fe ff19 	bl	8000ec8 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe ff14 	bl	8000ec8 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e236      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2202      	movs	r2, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	d1f1      	bne.n	800209c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d100      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2a8>
 80020c2:	e0b5      	b.n	8002230 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c4:	201f      	movs	r0, #31
 80020c6:	183b      	adds	r3, r7, r0
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	4013      	ands	r3, r2
 80020d6:	d110      	bne.n	80020fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	0549      	lsls	r1, r1, #21
 80020e2:	430a      	orrs	r2, r1
 80020e4:	61da      	str	r2, [r3, #28]
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	055b      	lsls	r3, r3, #21
 80020ee:	4013      	ands	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020f4:	183b      	adds	r3, r7, r0
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_OscConfig+0x344>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4013      	ands	r3, r2
 8002104:	d11a      	bne.n	800213c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_RCC_OscConfig+0x344>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x344>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0049      	lsls	r1, r1, #1
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002114:	f7fe fed8 	bl	8000ec8 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7fe fed3 	bl	8000ec8 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1f5      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x344>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10f      	bne.n	8002164 <HAL_RCC_OscConfig+0x348>
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <HAL_RCC_OscConfig+0x338>)
 800214a:	2101      	movs	r1, #1
 800214c:	430a      	orrs	r2, r1
 800214e:	621a      	str	r2, [r3, #32]
 8002150:	e036      	b.n	80021c0 <HAL_RCC_OscConfig+0x3a4>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40021000 	.word	0x40021000
 8002158:	fffeffff 	.word	0xfffeffff
 800215c:	fffbffff 	.word	0xfffbffff
 8002160:	40007000 	.word	0x40007000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_OscConfig+0x36a>
 800216c:	4bca      	ldr	r3, [pc, #808]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	4bc9      	ldr	r3, [pc, #804]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002172:	2101      	movs	r1, #1
 8002174:	438a      	bics	r2, r1
 8002176:	621a      	str	r2, [r3, #32]
 8002178:	4bc7      	ldr	r3, [pc, #796]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	4bc6      	ldr	r3, [pc, #792]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800217e:	2104      	movs	r1, #4
 8002180:	438a      	bics	r2, r1
 8002182:	621a      	str	r2, [r3, #32]
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x3a4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x38c>
 800218e:	4bc2      	ldr	r3, [pc, #776]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	4bc1      	ldr	r3, [pc, #772]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002194:	2104      	movs	r1, #4
 8002196:	430a      	orrs	r2, r1
 8002198:	621a      	str	r2, [r3, #32]
 800219a:	4bbf      	ldr	r3, [pc, #764]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	4bbe      	ldr	r3, [pc, #760]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	621a      	str	r2, [r3, #32]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x3a4>
 80021a8:	4bbb      	ldr	r3, [pc, #748]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	6a1a      	ldr	r2, [r3, #32]
 80021ac:	4bba      	ldr	r3, [pc, #744]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	438a      	bics	r2, r1
 80021b2:	621a      	str	r2, [r3, #32]
 80021b4:	4bb8      	ldr	r3, [pc, #736]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	4bb7      	ldr	r3, [pc, #732]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80021ba:	2104      	movs	r1, #4
 80021bc:	438a      	bics	r2, r1
 80021be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d014      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe fe7e 	bl	8000ec8 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	e009      	b.n	80021e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe fe79 	bl	8000ec8 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4aaf      	ldr	r2, [pc, #700]	; (800249c <HAL_RCC_OscConfig+0x680>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e19a      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4bac      	ldr	r3, [pc, #688]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x3b6>
 80021f0:	e013      	b.n	800221a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fe69 	bl	8000ec8 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	e009      	b.n	8002210 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe fe64 	bl	8000ec8 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	4aa5      	ldr	r2, [pc, #660]	; (800249c <HAL_RCC_OscConfig+0x680>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e185      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4ba1      	ldr	r3, [pc, #644]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800221a:	231f      	movs	r3, #31
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b9c      	ldr	r3, [pc, #624]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002226:	69da      	ldr	r2, [r3, #28]
 8002228:	4b9b      	ldr	r3, [pc, #620]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800222a:	499d      	ldr	r1, [pc, #628]	; (80024a0 <HAL_RCC_OscConfig+0x684>)
 800222c:	400a      	ands	r2, r1
 800222e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2210      	movs	r2, #16
 8002236:	4013      	ands	r3, r2
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d12a      	bne.n	8002298 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002242:	4b95      	ldr	r3, [pc, #596]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002246:	4b94      	ldr	r3, [pc, #592]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002248:	2104      	movs	r1, #4
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800224e:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002252:	4b91      	ldr	r3, [pc, #580]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe fe35 	bl	8000ec8 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002264:	f7fe fe30 	bl	8000ec8 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e152      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227a:	2202      	movs	r2, #2
 800227c:	4013      	ands	r3, r2
 800227e:	d0f1      	beq.n	8002264 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002280:	4b85      	ldr	r3, [pc, #532]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	22f8      	movs	r2, #248	; 0xf8
 8002286:	4393      	bics	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	00da      	lsls	r2, r3, #3
 8002290:	4b81      	ldr	r3, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002292:	430a      	orrs	r2, r1
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
 8002296:	e034      	b.n	8002302 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	3305      	adds	r3, #5
 800229e:	d111      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80022a0:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022a6:	2104      	movs	r1, #4
 80022a8:	438a      	bics	r2, r1
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	22f8      	movs	r2, #248	; 0xf8
 80022b2:	4393      	bics	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	00da      	lsls	r2, r3, #3
 80022bc:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34
 80022c2:	e01e      	b.n	8002302 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022c4:	4b74      	ldr	r3, [pc, #464]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c8:	4b73      	ldr	r3, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	2104      	movs	r1, #4
 80022cc:	430a      	orrs	r2, r1
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022d0:	4b71      	ldr	r3, [pc, #452]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d4:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	438a      	bics	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe fdf4 	bl	8000ec8 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022e6:	f7fe fdef 	bl	8000ec8 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e111      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022f8:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d1f1      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2220      	movs	r2, #32
 8002308:	4013      	ands	r3, r2
 800230a:	d05c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	220c      	movs	r2, #12
 8002312:	4013      	ands	r3, r2
 8002314:	2b0c      	cmp	r3, #12
 8002316:	d00e      	beq.n	8002336 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	220c      	movs	r2, #12
 800231e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002320:	2b08      	cmp	r3, #8
 8002322:	d114      	bne.n	800234e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002324:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	23c0      	movs	r3, #192	; 0xc0
 800232a:	025b      	lsls	r3, r3, #9
 800232c:	401a      	ands	r2, r3
 800232e:	23c0      	movs	r3, #192	; 0xc0
 8002330:	025b      	lsls	r3, r3, #9
 8002332:	429a      	cmp	r2, r3
 8002334:	d10b      	bne.n	800234e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002336:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	4013      	ands	r3, r2
 8002340:	d040      	beq.n	80023c4 <HAL_RCC_OscConfig+0x5a8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d03c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0e6      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01b      	beq.n	800238e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002356:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235a:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0249      	lsls	r1, r1, #9
 8002360:	430a      	orrs	r2, r1
 8002362:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fdb0 	bl	8000ec8 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800236e:	f7fe fdab 	bl	8000ec8 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e0cd      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002380:	4b45      	ldr	r3, [pc, #276]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	4013      	ands	r3, r2
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x552>
 800238c:	e01b      	b.n	80023c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800238e:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002394:	4943      	ldr	r1, [pc, #268]	; (80024a4 <HAL_RCC_OscConfig+0x688>)
 8002396:	400a      	ands	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fd95 	bl	8000ec8 <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a4:	f7fe fd90 	bl	8000ec8 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0b2      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023b6:	4b38      	ldr	r3, [pc, #224]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80023b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	025b      	lsls	r3, r3, #9
 80023be:	4013      	ands	r3, r2
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x588>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d100      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5b4>
 80023ce:	e0a4      	b.n	800251a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	220c      	movs	r2, #12
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d100      	bne.n	80023de <HAL_RCC_OscConfig+0x5c2>
 80023dc:	e078      	b.n	80024d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d14c      	bne.n	8002480 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 80023ec:	492e      	ldr	r1, [pc, #184]	; (80024a8 <HAL_RCC_OscConfig+0x68c>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd69 	bl	8000ec8 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fd64 	bl	8000ec8 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e086      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	049b      	lsls	r3, r3, #18
 8002416:	4013      	ands	r3, r2
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	220f      	movs	r2, #15
 8002420:	4393      	bics	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800242a:	430a      	orrs	r2, r1
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_RCC_OscConfig+0x690>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	431a      	orrs	r2, r3
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0449      	lsls	r1, r1, #17
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe fd37 	bl	8000ec8 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fd32 	bl	8000ec8 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e054      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	049b      	lsls	r3, r3, #18
 800247a:	4013      	ands	r3, r2
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x644>
 800247e:	e04c      	b.n	800251a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_RCC_OscConfig+0x67c>)
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <HAL_RCC_OscConfig+0x68c>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fd1c 	bl	8000ec8 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x6a6>
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40021000 	.word	0x40021000
 800249c:	00001388 	.word	0x00001388
 80024a0:	efffffff 	.word	0xefffffff
 80024a4:	fffeffff 	.word	0xfffeffff
 80024a8:	feffffff 	.word	0xfeffffff
 80024ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fd0a 	bl	8000ec8 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e02c      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_RCC_OscConfig+0x708>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	049b      	lsls	r3, r3, #18
 80024ca:	4013      	ands	r3, r2
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x694>
 80024ce:	e024      	b.n	800251a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e01f      	b.n	800251c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_OscConfig+0x708>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x708>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	23c0      	movs	r3, #192	; 0xc0
 80024ec:	025b      	lsls	r3, r3, #9
 80024ee:	401a      	ands	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d10e      	bne.n	8002516 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	220f      	movs	r2, #15
 80024fc:	401a      	ands	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d107      	bne.n	8002516 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	23f0      	movs	r3, #240	; 0xf0
 800250a:	039b      	lsls	r3, r3, #14
 800250c:	401a      	ands	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b008      	add	sp, #32
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0bf      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d911      	bls.n	800256e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b5e      	ldr	r3, [pc, #376]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4393      	bics	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	4b5b      	ldr	r3, [pc, #364]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d001      	beq.n	800256e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0a6      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2202      	movs	r2, #2
 8002574:	4013      	ands	r3, r2
 8002576:	d015      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2204      	movs	r2, #4
 800257e:	4013      	ands	r3, r2
 8002580:	d006      	beq.n	8002590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002582:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002588:	21e0      	movs	r1, #224	; 0xe0
 800258a:	00c9      	lsls	r1, r1, #3
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	22f0      	movs	r2, #240	; 0xf0
 8002596:	4393      	bics	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	d04c      	beq.n	8002648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	029b      	lsls	r3, r3, #10
 80025be:	4013      	ands	r3, r2
 80025c0:	d120      	bne.n	8002604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07a      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	049b      	lsls	r3, r3, #18
 80025d6:	4013      	ands	r3, r2
 80025d8:	d114      	bne.n	8002604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06e      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 80025e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	025b      	lsls	r3, r3, #9
 80025ee:	4013      	ands	r3, r2
 80025f0:	d108      	bne.n	8002604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e062      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e05b      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	4393      	bics	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002618:	f7fe fc56 	bl	8000ec8 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	e009      	b.n	8002636 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7fe fc51 	bl	8000ec8 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	4a27      	ldr	r2, [pc, #156]	; (80026cc <HAL_RCC_ClockConfig+0x1a4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e042      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	220c      	movs	r2, #12
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1ec      	bne.n	8002622 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2201      	movs	r2, #1
 800264e:	4013      	ands	r3, r2
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d211      	bcs.n	800267a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	4393      	bics	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_RCC_ClockConfig+0x19c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2201      	movs	r2, #1
 800266e:	4013      	ands	r3, r2
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e020      	b.n	80026bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_RCC_ClockConfig+0x1a8>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002698:	f000 f820 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269c:	0001      	movs	r1, r0
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x1a0>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	220f      	movs	r2, #15
 80026a6:	4013      	ands	r3, r2
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1ac>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	000a      	movs	r2, r1
 80026ae:	40da      	lsrs	r2, r3
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1b0>)
 80026b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fbc1 	bl	8000e3c <HAL_InitTick>
  
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b004      	add	sp, #16
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	00001388 	.word	0x00001388
 80026d0:	fffff8ff 	.word	0xfffff8ff
 80026d4:	0800337c 	.word	0x0800337c
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b08f      	sub	sp, #60	; 0x3c
 80026e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026e2:	2314      	movs	r3, #20
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xec>)
 80026e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ea:	c313      	stmia	r3!, {r0, r1, r4}
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	4a36      	ldr	r2, [pc, #216]	; (80027cc <HAL_RCC_GetSysClockFreq+0xf0>)
 80026f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026f6:	c313      	stmia	r3!, {r0, r1, r4}
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002700:	2300      	movs	r3, #0
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002710:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	220c      	movs	r2, #12
 800271a:	4013      	ands	r3, r2
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d047      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0xd4>
 8002720:	d849      	bhi.n	80027b6 <HAL_RCC_GetSysClockFreq+0xda>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x50>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x56>
 800272a:	e044      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002730:	e044      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	0c9b      	lsrs	r3, r3, #18
 8002736:	220f      	movs	r2, #15
 8002738:	4013      	ands	r3, r2
 800273a:	2214      	movs	r2, #20
 800273c:	18ba      	adds	r2, r7, r2
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	220f      	movs	r2, #15
 8002748:	4013      	ands	r3, r2
 800274a:	1d3a      	adds	r2, r7, #4
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002752:	23c0      	movs	r3, #192	; 0xc0
 8002754:	025b      	lsls	r3, r3, #9
 8002756:	401a      	ands	r2, r3
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	429a      	cmp	r2, r3
 800275e:	d109      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002762:	481c      	ldr	r0, [pc, #112]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002764:	f7fd fcd0 	bl	8000108 <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	001a      	movs	r2, r3
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	4353      	muls	r3, r2
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
 8002772:	e01a      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	025b      	lsls	r3, r3, #9
 800277a:	401a      	ands	r2, r3
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	025b      	lsls	r3, r3, #9
 8002780:	429a      	cmp	r2, r3
 8002782:	d109      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	4814      	ldr	r0, [pc, #80]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002788:	f7fd fcbe 	bl	8000108 <__udivsi3>
 800278c:	0003      	movs	r3, r0
 800278e:	001a      	movs	r2, r3
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	4353      	muls	r3, r2
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
 8002796:	e008      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279a:	480e      	ldr	r0, [pc, #56]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800279c:	f7fd fcb4 	bl	8000108 <__udivsi3>
 80027a0:	0003      	movs	r3, r0
 80027a2:	001a      	movs	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	4353      	muls	r3, r2
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ae:	e005      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027b4:	e002      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b00f      	add	sp, #60	; 0x3c
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	0800335c 	.word	0x0800335c
 80027cc:	0800336c 	.word	0x0800336c
 80027d0:	40021000 	.word	0x40021000
 80027d4:	007a1200 	.word	0x007a1200
 80027d8:	02dc6c00 	.word	0x02dc6c00

080027dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <HAL_RCC_GetHCLKFreq+0x10>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000000 	.word	0x20000000

080027f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027f4:	f7ff fff2 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 80027f8:	0001      	movs	r1, r0
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	2207      	movs	r2, #7
 8002802:	4013      	ands	r3, r2
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	40d9      	lsrs	r1, r3
 800280a:	000b      	movs	r3, r1
}    
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40021000 	.word	0x40021000
 8002818:	0800338c 	.word	0x0800338c

0800281c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	4013      	ands	r3, r2
 8002836:	d100      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002838:	e08e      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2017      	movs	r0, #23
 800283c:	183b      	adds	r3, r7, r0
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	055b      	lsls	r3, r3, #21
 800284a:	4013      	ands	r3, r2
 800284c:	d110      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	0549      	lsls	r1, r1, #21
 8002858:	430a      	orrs	r2, r1
 800285a:	61da      	str	r2, [r3, #28]
 800285c:	4b60      	ldr	r3, [pc, #384]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	055b      	lsls	r3, r3, #21
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	183b      	adds	r3, r7, r0
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b5c      	ldr	r3, [pc, #368]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d11a      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b58      	ldr	r3, [pc, #352]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	0049      	lsls	r1, r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7fe fb1d 	bl	8000ec8 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	e008      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fb18 	bl	8000ec8 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e097      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028b2:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d034      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	23c0      	movs	r3, #192	; 0xc0
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d02c      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a43      	ldr	r2, [pc, #268]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028da:	4013      	ands	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028de:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028e0:	6a1a      	ldr	r2, [r3, #32]
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	0249      	lsls	r1, r1, #9
 80028e8:	430a      	orrs	r2, r1
 80028ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028f2:	493e      	ldr	r1, [pc, #248]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028f8:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fadf 	bl	8000ec8 <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	e009      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fada 	bl	8000ec8 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	4a35      	ldr	r2, [pc, #212]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e058      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	2202      	movs	r2, #2
 800292a:	4013      	ands	r3, r2
 800292c:	d0f0      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800292e:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a2d      	ldr	r2, [pc, #180]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800293e:	430a      	orrs	r2, r1
 8002940:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002942:	2317      	movs	r3, #23
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002952:	4928      	ldr	r1, [pc, #160]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002954:	400a      	ands	r2, r1
 8002956:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	4013      	ands	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	2203      	movs	r2, #3
 8002968:	4393      	bics	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002972:	430a      	orrs	r2, r1
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2220      	movs	r2, #32
 800297c:	4013      	ands	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2210      	movs	r2, #16
 8002986:	4393      	bics	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002990:	430a      	orrs	r2, r1
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	4013      	ands	r3, r2
 800299e:	d009      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	4393      	bics	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	d009      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	4393      	bics	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b006      	add	sp, #24
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	fffffcff 	.word	0xfffffcff
 80029ec:	fffeffff 	.word	0xfffeffff
 80029f0:	00001388 	.word	0x00001388
 80029f4:	efffffff 	.word	0xefffffff

080029f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0a8      	b.n	8002b5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	2382      	movs	r3, #130	; 0x82
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d009      	beq.n	8002a32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	61da      	str	r2, [r3, #28]
 8002a24:	e005      	b.n	8002a32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	225d      	movs	r2, #93	; 0x5d
 8002a3c:	5c9b      	ldrb	r3, [r3, r2]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	225c      	movs	r2, #92	; 0x5c
 8002a48:	2100      	movs	r1, #0
 8002a4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7fe f8ae 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	225d      	movs	r2, #93	; 0x5d
 8002a58:	2102      	movs	r1, #2
 8002a5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2140      	movs	r1, #64	; 0x40
 8002a68:	438a      	bics	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	23e0      	movs	r3, #224	; 0xe0
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d902      	bls.n	8002a7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e002      	b.n	8002a84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	015b      	lsls	r3, r3, #5
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	23f0      	movs	r3, #240	; 0xf0
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d008      	beq.n	8002aa2 <HAL_SPI_Init+0xaa>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	23e0      	movs	r3, #224	; 0xe0
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	2382      	movs	r3, #130	; 0x82
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	401a      	ands	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	2384      	movs	r3, #132	; 0x84
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2102      	movs	r1, #2
 8002abe:	400b      	ands	r3, r1
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	400b      	ands	r3, r1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6999      	ldr	r1, [r3, #24]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2138      	movs	r1, #56	; 0x38
 8002ade:	400b      	ands	r3, r1
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	400b      	ands	r3, r1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	0011      	movs	r1, r2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	401a      	ands	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	2204      	movs	r2, #4
 8002b08:	401a      	ands	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2110      	movs	r1, #16
 8002b10:	400b      	ands	r3, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	2108      	movs	r1, #8
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	23f0      	movs	r3, #240	; 0xf0
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	400b      	ands	r3, r1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	015b      	lsls	r3, r3, #5
 8002b32:	401a      	ands	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4907      	ldr	r1, [pc, #28]	; (8002b64 <HAL_SPI_Init+0x16c>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	225d      	movs	r2, #93	; 0x5d
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	fffff7ff 	.word	0xfffff7ff

08002b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e044      	b.n	8002c04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2274      	movs	r2, #116	; 0x74
 8002b86:	2100      	movs	r1, #0
 8002b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fe f85b 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2224      	movs	r2, #36	; 0x24
 8002b96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f830 	bl	8002c10 <UART_SetConfig>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e024      	b.n	8002c04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 f963 	bl	8002e90 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	490d      	ldr	r1, [pc, #52]	; (8002c0c <HAL_UART_Init+0xa4>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	212a      	movs	r1, #42	; 0x2a
 8002be6:	438a      	bics	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 f9fb 	bl	8002ff8 <UART_CheckIdleState>
 8002c02:	0003      	movs	r3, r0
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	ffffb7ff 	.word	0xffffb7ff

08002c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c18:	231e      	movs	r3, #30
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a8d      	ldr	r2, [pc, #564]	; (8002e74 <UART_SetConfig+0x264>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a88      	ldr	r2, [pc, #544]	; (8002e78 <UART_SetConfig+0x268>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a7f      	ldr	r2, [pc, #508]	; (8002e7c <UART_SetConfig+0x26c>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7b      	ldr	r2, [pc, #492]	; (8002e80 <UART_SetConfig+0x270>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d127      	bne.n	8002ce6 <UART_SetConfig+0xd6>
 8002c96:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <UART_SetConfig+0x274>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d00d      	beq.n	8002cbe <UART_SetConfig+0xae>
 8002ca2:	d81b      	bhi.n	8002cdc <UART_SetConfig+0xcc>
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d014      	beq.n	8002cd2 <UART_SetConfig+0xc2>
 8002ca8:	d818      	bhi.n	8002cdc <UART_SetConfig+0xcc>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <UART_SetConfig+0xa4>
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d00a      	beq.n	8002cc8 <UART_SetConfig+0xb8>
 8002cb2:	e013      	b.n	8002cdc <UART_SetConfig+0xcc>
 8002cb4:	231f      	movs	r3, #31
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e021      	b.n	8002d02 <UART_SetConfig+0xf2>
 8002cbe:	231f      	movs	r3, #31
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e01c      	b.n	8002d02 <UART_SetConfig+0xf2>
 8002cc8:	231f      	movs	r3, #31
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2204      	movs	r2, #4
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e017      	b.n	8002d02 <UART_SetConfig+0xf2>
 8002cd2:	231f      	movs	r3, #31
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e012      	b.n	8002d02 <UART_SetConfig+0xf2>
 8002cdc:	231f      	movs	r3, #31
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e00d      	b.n	8002d02 <UART_SetConfig+0xf2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a67      	ldr	r2, [pc, #412]	; (8002e88 <UART_SetConfig+0x278>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d104      	bne.n	8002cfa <UART_SetConfig+0xea>
 8002cf0:	231f      	movs	r3, #31
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e003      	b.n	8002d02 <UART_SetConfig+0xf2>
 8002cfa:	231f      	movs	r3, #31
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2210      	movs	r2, #16
 8002d00:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d15d      	bne.n	8002dca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002d0e:	231f      	movs	r3, #31
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d015      	beq.n	8002d44 <UART_SetConfig+0x134>
 8002d18:	dc18      	bgt.n	8002d4c <UART_SetConfig+0x13c>
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00d      	beq.n	8002d3a <UART_SetConfig+0x12a>
 8002d1e:	dc15      	bgt.n	8002d4c <UART_SetConfig+0x13c>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <UART_SetConfig+0x11a>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d005      	beq.n	8002d34 <UART_SetConfig+0x124>
 8002d28:	e010      	b.n	8002d4c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d2a:	f7ff fd61 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	61bb      	str	r3, [r7, #24]
        break;
 8002d32:	e012      	b.n	8002d5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d34:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <UART_SetConfig+0x27c>)
 8002d36:	61bb      	str	r3, [r7, #24]
        break;
 8002d38:	e00f      	b.n	8002d5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3a:	f7ff fccf 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	61bb      	str	r3, [r7, #24]
        break;
 8002d42:	e00a      	b.n	8002d5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	61bb      	str	r3, [r7, #24]
        break;
 8002d4a:	e006      	b.n	8002d5a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d50:	231e      	movs	r3, #30
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
        break;
 8002d58:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d100      	bne.n	8002d62 <UART_SetConfig+0x152>
 8002d60:	e07b      	b.n	8002e5a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	005a      	lsls	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	18d2      	adds	r2, r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0019      	movs	r1, r3
 8002d74:	0010      	movs	r0, r2
 8002d76:	f7fd f9c7 	bl	8000108 <__udivsi3>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d91c      	bls.n	8002dc0 <UART_SetConfig+0x1b0>
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	025b      	lsls	r3, r3, #9
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d217      	bcs.n	8002dc0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	200e      	movs	r0, #14
 8002d96:	183b      	adds	r3, r7, r0
 8002d98:	210f      	movs	r1, #15
 8002d9a:	438a      	bics	r2, r1
 8002d9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2207      	movs	r2, #7
 8002da6:	4013      	ands	r3, r2
 8002da8:	b299      	uxth	r1, r3
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	183a      	adds	r2, r7, r0
 8002dae:	8812      	ldrh	r2, [r2, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	183a      	adds	r2, r7, r0
 8002dba:	8812      	ldrh	r2, [r2, #0]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	e04c      	b.n	8002e5a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc0:	231e      	movs	r3, #30
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e047      	b.n	8002e5a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dca:	231f      	movs	r3, #31
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d015      	beq.n	8002e00 <UART_SetConfig+0x1f0>
 8002dd4:	dc18      	bgt.n	8002e08 <UART_SetConfig+0x1f8>
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00d      	beq.n	8002df6 <UART_SetConfig+0x1e6>
 8002dda:	dc15      	bgt.n	8002e08 <UART_SetConfig+0x1f8>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <UART_SetConfig+0x1d6>
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d005      	beq.n	8002df0 <UART_SetConfig+0x1e0>
 8002de4:	e010      	b.n	8002e08 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de6:	f7ff fd03 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 8002dea:	0003      	movs	r3, r0
 8002dec:	61bb      	str	r3, [r7, #24]
        break;
 8002dee:	e012      	b.n	8002e16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <UART_SetConfig+0x27c>)
 8002df2:	61bb      	str	r3, [r7, #24]
        break;
 8002df4:	e00f      	b.n	8002e16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002df6:	f7ff fc71 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	61bb      	str	r3, [r7, #24]
        break;
 8002dfe:	e00a      	b.n	8002e16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	61bb      	str	r3, [r7, #24]
        break;
 8002e06:	e006      	b.n	8002e16 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e0c:	231e      	movs	r3, #30
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
        break;
 8002e14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01e      	beq.n	8002e5a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	085a      	lsrs	r2, r3, #1
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	18d2      	adds	r2, r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	0010      	movs	r0, r2
 8002e2e:	f7fd f96b 	bl	8000108 <__udivsi3>
 8002e32:	0003      	movs	r3, r0
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d909      	bls.n	8002e52 <UART_SetConfig+0x242>
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	025b      	lsls	r3, r3, #9
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d204      	bcs.n	8002e52 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	e003      	b.n	8002e5a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002e52:	231e      	movs	r3, #30
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e66:	231e      	movs	r3, #30
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b008      	add	sp, #32
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	efff69f3 	.word	0xefff69f3
 8002e78:	ffffcfff 	.word	0xffffcfff
 8002e7c:	fffff4ff 	.word	0xfffff4ff
 8002e80:	40013800 	.word	0x40013800
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40004400 	.word	0x40004400
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d00b      	beq.n	8002eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a4a      	ldr	r2, [pc, #296]	; (8002fd4 <UART_AdvFeatureConfig+0x144>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a43      	ldr	r2, [pc, #268]	; (8002fd8 <UART_AdvFeatureConfig+0x148>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <UART_AdvFeatureConfig+0x14c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2208      	movs	r2, #8
 8002f04:	4013      	ands	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a34      	ldr	r2, [pc, #208]	; (8002fe0 <UART_AdvFeatureConfig+0x150>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2210      	movs	r2, #16
 8002f26:	4013      	ands	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <UART_AdvFeatureConfig+0x154>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2220      	movs	r2, #32
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <UART_AdvFeatureConfig+0x158>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2240      	movs	r2, #64	; 0x40
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d01d      	beq.n	8002faa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <UART_AdvFeatureConfig+0x15c>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	035b      	lsls	r3, r3, #13
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d10b      	bne.n	8002faa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <UART_AdvFeatureConfig+0x160>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <UART_AdvFeatureConfig+0x164>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	fffdffff 	.word	0xfffdffff
 8002fd8:	fffeffff 	.word	0xfffeffff
 8002fdc:	fffbffff 	.word	0xfffbffff
 8002fe0:	ffff7fff 	.word	0xffff7fff
 8002fe4:	ffffefff 	.word	0xffffefff
 8002fe8:	ffffdfff 	.word	0xffffdfff
 8002fec:	ffefffff 	.word	0xffefffff
 8002ff0:	ff9fffff 	.word	0xff9fffff
 8002ff4:	fff7ffff 	.word	0xfff7ffff

08002ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	2100      	movs	r1, #0
 8003006:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003008:	f7fd ff5e 	bl	8000ec8 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	4013      	ands	r3, r2
 800301a:	2b08      	cmp	r3, #8
 800301c:	d10c      	bne.n	8003038 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	0391      	lsls	r1, r2, #14
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4a17      	ldr	r2, [pc, #92]	; (8003084 <UART_CheckIdleState+0x8c>)
 8003028:	9200      	str	r2, [sp, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	f000 f82c 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d001      	beq.n	8003038 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e021      	b.n	800307c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2204      	movs	r2, #4
 8003040:	4013      	ands	r3, r2
 8003042:	2b04      	cmp	r3, #4
 8003044:	d10c      	bne.n	8003060 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	03d1      	lsls	r1, r2, #15
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <UART_CheckIdleState+0x8c>)
 8003050:	9200      	str	r2, [sp, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	f000 f818 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e00d      	b.n	800307c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2274      	movs	r2, #116	; 0x74
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}
 8003084:	01ffffff 	.word	0x01ffffff

08003088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b094      	sub	sp, #80	; 0x50
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003098:	e0a3      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309c:	3301      	adds	r3, #1
 800309e:	d100      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80030a0:	e09f      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7fd ff11 	bl	8000ec8 <HAL_GetTick>
 80030a6:	0002      	movs	r2, r0
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d13d      	bne.n	8003134 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
 80030c2:	2301      	movs	r3, #1
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	494c      	ldr	r1, [pc, #304]	; (800320c <UART_WaitOnFlagUntilTimeout+0x184>)
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
 80030f4:	2301      	movs	r3, #1
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003116:	f383 8810 	msr	PRIMASK, r3
}
 800311a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2274      	movs	r2, #116	; 0x74
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e067      	b.n	8003204 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2204      	movs	r2, #4
 800313c:	4013      	ands	r3, r2
 800313e:	d050      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	401a      	ands	r2, r3
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	429a      	cmp	r2, r3
 8003152:	d146      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	0112      	lsls	r2, r2, #4
 800315c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315e:	f3ef 8310 	mrs	r3, PRIMASK
 8003162:	613b      	str	r3, [r7, #16]
  return(result);
 8003164:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003168:	2301      	movs	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f383 8810 	msr	PRIMASK, r3
}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4923      	ldr	r1, [pc, #140]	; (800320c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003180:	400a      	ands	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003186:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	61fb      	str	r3, [r7, #28]
  return(result);
 8003196:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
 800319a:	2301      	movs	r3, #1
 800319c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	438a      	bics	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	f383 8810 	msr	PRIMASK, r3
}
 80031c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	2120      	movs	r1, #32
 80031d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2274      	movs	r2, #116	; 0x74
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e010      	b.n	8003204 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	425a      	negs	r2, r3
 80031f2:	4153      	adcs	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	001a      	movs	r2, r3
 80031f8:	1dfb      	adds	r3, r7, #7
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d100      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003200:	e74b      	b.n	800309a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b014      	add	sp, #80	; 0x50
 800320a:	bd80      	pop	{r7, pc}
 800320c:	fffffe5f 	.word	0xfffffe5f

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4d0c      	ldr	r5, [pc, #48]	; (8003248 <__libc_init_array+0x38>)
 8003216:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	2600      	movs	r6, #0
 8003222:	f000 f821 	bl	8003268 <_init>
 8003226:	4d0a      	ldr	r5, [pc, #40]	; (8003250 <__libc_init_array+0x40>)
 8003228:	4c0a      	ldr	r4, [pc, #40]	; (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	00b3      	lsls	r3, r6, #2
 8003236:	58eb      	ldr	r3, [r5, r3]
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	00b3      	lsls	r3, r6, #2
 8003240:	58eb      	ldr	r3, [r5, r3]
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003394 	.word	0x08003394
 800324c:	08003394 	.word	0x08003394
 8003250:	08003394 	.word	0x08003394
 8003254:	08003398 	.word	0x08003398

08003258 <memset>:
 8003258:	0003      	movs	r3, r0
 800325a:	1882      	adds	r2, r0, r2
 800325c:	4293      	cmp	r3, r2
 800325e:	d100      	bne.n	8003262 <memset+0xa>
 8003260:	4770      	bx	lr
 8003262:	7019      	strb	r1, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	e7f9      	b.n	800325c <memset+0x4>

08003268 <_init>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr

08003274 <_fini>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr
