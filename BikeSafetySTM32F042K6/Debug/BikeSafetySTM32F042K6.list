
BikeSafetySTM32F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080068f4  080068f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b78  08006b78  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006b78  08006b78  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b78  08006b78  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b7c  08006b7c  00016b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000090  08006c10  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08006c10  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014557  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d7  00000000  00000000  0003460f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00037c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019db6  00000000  00000000  00038c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001478f  00000000  00000000  00052a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009528e  00000000  00000000  0006719d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc42b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f08  00000000  00000000  000fc480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068dc 	.word	0x080068dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	080068dc 	.word	0x080068dc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_fsub>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	4646      	mov	r6, r8
 8000234:	46d6      	mov	lr, sl
 8000236:	464f      	mov	r7, r9
 8000238:	0243      	lsls	r3, r0, #9
 800023a:	0a5b      	lsrs	r3, r3, #9
 800023c:	00da      	lsls	r2, r3, #3
 800023e:	4694      	mov	ip, r2
 8000240:	024a      	lsls	r2, r1, #9
 8000242:	b5c0      	push	{r6, r7, lr}
 8000244:	0044      	lsls	r4, r0, #1
 8000246:	0a56      	lsrs	r6, r2, #9
 8000248:	1c05      	adds	r5, r0, #0
 800024a:	46b0      	mov	r8, r6
 800024c:	0e24      	lsrs	r4, r4, #24
 800024e:	004e      	lsls	r6, r1, #1
 8000250:	0992      	lsrs	r2, r2, #6
 8000252:	001f      	movs	r7, r3
 8000254:	0020      	movs	r0, r4
 8000256:	4692      	mov	sl, r2
 8000258:	0fed      	lsrs	r5, r5, #31
 800025a:	0e36      	lsrs	r6, r6, #24
 800025c:	0fc9      	lsrs	r1, r1, #31
 800025e:	2eff      	cmp	r6, #255	; 0xff
 8000260:	d100      	bne.n	8000264 <__aeabi_fsub+0x34>
 8000262:	e07f      	b.n	8000364 <__aeabi_fsub+0x134>
 8000264:	2201      	movs	r2, #1
 8000266:	4051      	eors	r1, r2
 8000268:	428d      	cmp	r5, r1
 800026a:	d051      	beq.n	8000310 <__aeabi_fsub+0xe0>
 800026c:	1ba2      	subs	r2, r4, r6
 800026e:	4691      	mov	r9, r2
 8000270:	2a00      	cmp	r2, #0
 8000272:	dc00      	bgt.n	8000276 <__aeabi_fsub+0x46>
 8000274:	e07e      	b.n	8000374 <__aeabi_fsub+0x144>
 8000276:	2e00      	cmp	r6, #0
 8000278:	d100      	bne.n	800027c <__aeabi_fsub+0x4c>
 800027a:	e099      	b.n	80003b0 <__aeabi_fsub+0x180>
 800027c:	2cff      	cmp	r4, #255	; 0xff
 800027e:	d100      	bne.n	8000282 <__aeabi_fsub+0x52>
 8000280:	e08c      	b.n	800039c <__aeabi_fsub+0x16c>
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	4652      	mov	r2, sl
 8000286:	04db      	lsls	r3, r3, #19
 8000288:	431a      	orrs	r2, r3
 800028a:	4692      	mov	sl, r2
 800028c:	464a      	mov	r2, r9
 800028e:	2301      	movs	r3, #1
 8000290:	2a1b      	cmp	r2, #27
 8000292:	dc08      	bgt.n	80002a6 <__aeabi_fsub+0x76>
 8000294:	4653      	mov	r3, sl
 8000296:	2120      	movs	r1, #32
 8000298:	40d3      	lsrs	r3, r2
 800029a:	1a89      	subs	r1, r1, r2
 800029c:	4652      	mov	r2, sl
 800029e:	408a      	lsls	r2, r1
 80002a0:	1e51      	subs	r1, r2, #1
 80002a2:	418a      	sbcs	r2, r1
 80002a4:	4313      	orrs	r3, r2
 80002a6:	4662      	mov	r2, ip
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	015a      	lsls	r2, r3, #5
 80002ac:	d400      	bmi.n	80002b0 <__aeabi_fsub+0x80>
 80002ae:	e0f3      	b.n	8000498 <__aeabi_fsub+0x268>
 80002b0:	019b      	lsls	r3, r3, #6
 80002b2:	099e      	lsrs	r6, r3, #6
 80002b4:	0030      	movs	r0, r6
 80002b6:	f001 f877 	bl	80013a8 <__clzsi2>
 80002ba:	3805      	subs	r0, #5
 80002bc:	4086      	lsls	r6, r0
 80002be:	4284      	cmp	r4, r0
 80002c0:	dd00      	ble.n	80002c4 <__aeabi_fsub+0x94>
 80002c2:	e0f7      	b.n	80004b4 <__aeabi_fsub+0x284>
 80002c4:	0032      	movs	r2, r6
 80002c6:	1b04      	subs	r4, r0, r4
 80002c8:	2020      	movs	r0, #32
 80002ca:	3401      	adds	r4, #1
 80002cc:	40e2      	lsrs	r2, r4
 80002ce:	1b04      	subs	r4, r0, r4
 80002d0:	40a6      	lsls	r6, r4
 80002d2:	0033      	movs	r3, r6
 80002d4:	1e5e      	subs	r6, r3, #1
 80002d6:	41b3      	sbcs	r3, r6
 80002d8:	2400      	movs	r4, #0
 80002da:	4313      	orrs	r3, r2
 80002dc:	075a      	lsls	r2, r3, #29
 80002de:	d004      	beq.n	80002ea <__aeabi_fsub+0xba>
 80002e0:	220f      	movs	r2, #15
 80002e2:	401a      	ands	r2, r3
 80002e4:	2a04      	cmp	r2, #4
 80002e6:	d000      	beq.n	80002ea <__aeabi_fsub+0xba>
 80002e8:	3304      	adds	r3, #4
 80002ea:	015a      	lsls	r2, r3, #5
 80002ec:	d400      	bmi.n	80002f0 <__aeabi_fsub+0xc0>
 80002ee:	e0d6      	b.n	800049e <__aeabi_fsub+0x26e>
 80002f0:	1c62      	adds	r2, r4, #1
 80002f2:	2cfe      	cmp	r4, #254	; 0xfe
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fsub+0xc8>
 80002f6:	e0da      	b.n	80004ae <__aeabi_fsub+0x27e>
 80002f8:	019b      	lsls	r3, r3, #6
 80002fa:	0a5f      	lsrs	r7, r3, #9
 80002fc:	b2d0      	uxtb	r0, r2
 80002fe:	05c0      	lsls	r0, r0, #23
 8000300:	4338      	orrs	r0, r7
 8000302:	07ed      	lsls	r5, r5, #31
 8000304:	4328      	orrs	r0, r5
 8000306:	bce0      	pop	{r5, r6, r7}
 8000308:	46ba      	mov	sl, r7
 800030a:	46b1      	mov	r9, r6
 800030c:	46a8      	mov	r8, r5
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	1ba2      	subs	r2, r4, r6
 8000312:	4691      	mov	r9, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	dd63      	ble.n	80003e0 <__aeabi_fsub+0x1b0>
 8000318:	2e00      	cmp	r6, #0
 800031a:	d100      	bne.n	800031e <__aeabi_fsub+0xee>
 800031c:	e099      	b.n	8000452 <__aeabi_fsub+0x222>
 800031e:	2cff      	cmp	r4, #255	; 0xff
 8000320:	d03c      	beq.n	800039c <__aeabi_fsub+0x16c>
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	4652      	mov	r2, sl
 8000326:	04db      	lsls	r3, r3, #19
 8000328:	431a      	orrs	r2, r3
 800032a:	4692      	mov	sl, r2
 800032c:	464a      	mov	r2, r9
 800032e:	2301      	movs	r3, #1
 8000330:	2a1b      	cmp	r2, #27
 8000332:	dc08      	bgt.n	8000346 <__aeabi_fsub+0x116>
 8000334:	4653      	mov	r3, sl
 8000336:	2120      	movs	r1, #32
 8000338:	40d3      	lsrs	r3, r2
 800033a:	1a89      	subs	r1, r1, r2
 800033c:	4652      	mov	r2, sl
 800033e:	408a      	lsls	r2, r1
 8000340:	1e51      	subs	r1, r2, #1
 8000342:	418a      	sbcs	r2, r1
 8000344:	4313      	orrs	r3, r2
 8000346:	4463      	add	r3, ip
 8000348:	015a      	lsls	r2, r3, #5
 800034a:	d400      	bmi.n	800034e <__aeabi_fsub+0x11e>
 800034c:	e0a4      	b.n	8000498 <__aeabi_fsub+0x268>
 800034e:	3401      	adds	r4, #1
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d100      	bne.n	8000356 <__aeabi_fsub+0x126>
 8000354:	e0ab      	b.n	80004ae <__aeabi_fsub+0x27e>
 8000356:	2201      	movs	r2, #1
 8000358:	4997      	ldr	r1, [pc, #604]	; (80005b8 <__aeabi_fsub+0x388>)
 800035a:	401a      	ands	r2, r3
 800035c:	085b      	lsrs	r3, r3, #1
 800035e:	400b      	ands	r3, r1
 8000360:	4313      	orrs	r3, r2
 8000362:	e7bb      	b.n	80002dc <__aeabi_fsub+0xac>
 8000364:	2a00      	cmp	r2, #0
 8000366:	d032      	beq.n	80003ce <__aeabi_fsub+0x19e>
 8000368:	428d      	cmp	r5, r1
 800036a:	d035      	beq.n	80003d8 <__aeabi_fsub+0x1a8>
 800036c:	22ff      	movs	r2, #255	; 0xff
 800036e:	4252      	negs	r2, r2
 8000370:	4691      	mov	r9, r2
 8000372:	44a1      	add	r9, r4
 8000374:	464a      	mov	r2, r9
 8000376:	2a00      	cmp	r2, #0
 8000378:	d051      	beq.n	800041e <__aeabi_fsub+0x1ee>
 800037a:	1b30      	subs	r0, r6, r4
 800037c:	2c00      	cmp	r4, #0
 800037e:	d000      	beq.n	8000382 <__aeabi_fsub+0x152>
 8000380:	e09c      	b.n	80004bc <__aeabi_fsub+0x28c>
 8000382:	4663      	mov	r3, ip
 8000384:	2b00      	cmp	r3, #0
 8000386:	d100      	bne.n	800038a <__aeabi_fsub+0x15a>
 8000388:	e0df      	b.n	800054a <__aeabi_fsub+0x31a>
 800038a:	3801      	subs	r0, #1
 800038c:	2800      	cmp	r0, #0
 800038e:	d100      	bne.n	8000392 <__aeabi_fsub+0x162>
 8000390:	e0f7      	b.n	8000582 <__aeabi_fsub+0x352>
 8000392:	2eff      	cmp	r6, #255	; 0xff
 8000394:	d000      	beq.n	8000398 <__aeabi_fsub+0x168>
 8000396:	e099      	b.n	80004cc <__aeabi_fsub+0x29c>
 8000398:	000d      	movs	r5, r1
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d100      	bne.n	80003a2 <__aeabi_fsub+0x172>
 80003a0:	e085      	b.n	80004ae <__aeabi_fsub+0x27e>
 80003a2:	2780      	movs	r7, #128	; 0x80
 80003a4:	03ff      	lsls	r7, r7, #15
 80003a6:	431f      	orrs	r7, r3
 80003a8:	027f      	lsls	r7, r7, #9
 80003aa:	20ff      	movs	r0, #255	; 0xff
 80003ac:	0a7f      	lsrs	r7, r7, #9
 80003ae:	e7a6      	b.n	80002fe <__aeabi_fsub+0xce>
 80003b0:	4652      	mov	r2, sl
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d074      	beq.n	80004a0 <__aeabi_fsub+0x270>
 80003b6:	2201      	movs	r2, #1
 80003b8:	4252      	negs	r2, r2
 80003ba:	4690      	mov	r8, r2
 80003bc:	44c1      	add	r9, r8
 80003be:	464a      	mov	r2, r9
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	d100      	bne.n	80003c6 <__aeabi_fsub+0x196>
 80003c4:	e0c8      	b.n	8000558 <__aeabi_fsub+0x328>
 80003c6:	2cff      	cmp	r4, #255	; 0xff
 80003c8:	d000      	beq.n	80003cc <__aeabi_fsub+0x19c>
 80003ca:	e75f      	b.n	800028c <__aeabi_fsub+0x5c>
 80003cc:	e7e6      	b.n	800039c <__aeabi_fsub+0x16c>
 80003ce:	2201      	movs	r2, #1
 80003d0:	4051      	eors	r1, r2
 80003d2:	42a9      	cmp	r1, r5
 80003d4:	d000      	beq.n	80003d8 <__aeabi_fsub+0x1a8>
 80003d6:	e749      	b.n	800026c <__aeabi_fsub+0x3c>
 80003d8:	22ff      	movs	r2, #255	; 0xff
 80003da:	4252      	negs	r2, r2
 80003dc:	4691      	mov	r9, r2
 80003de:	44a1      	add	r9, r4
 80003e0:	464a      	mov	r2, r9
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	d043      	beq.n	800046e <__aeabi_fsub+0x23e>
 80003e6:	1b31      	subs	r1, r6, r4
 80003e8:	2c00      	cmp	r4, #0
 80003ea:	d100      	bne.n	80003ee <__aeabi_fsub+0x1be>
 80003ec:	e08c      	b.n	8000508 <__aeabi_fsub+0x2d8>
 80003ee:	2eff      	cmp	r6, #255	; 0xff
 80003f0:	d100      	bne.n	80003f4 <__aeabi_fsub+0x1c4>
 80003f2:	e092      	b.n	800051a <__aeabi_fsub+0x2ea>
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	4662      	mov	r2, ip
 80003f8:	04db      	lsls	r3, r3, #19
 80003fa:	431a      	orrs	r2, r3
 80003fc:	4694      	mov	ip, r2
 80003fe:	2301      	movs	r3, #1
 8000400:	291b      	cmp	r1, #27
 8000402:	dc09      	bgt.n	8000418 <__aeabi_fsub+0x1e8>
 8000404:	2020      	movs	r0, #32
 8000406:	4663      	mov	r3, ip
 8000408:	4662      	mov	r2, ip
 800040a:	40cb      	lsrs	r3, r1
 800040c:	1a41      	subs	r1, r0, r1
 800040e:	408a      	lsls	r2, r1
 8000410:	0011      	movs	r1, r2
 8000412:	1e48      	subs	r0, r1, #1
 8000414:	4181      	sbcs	r1, r0
 8000416:	430b      	orrs	r3, r1
 8000418:	0034      	movs	r4, r6
 800041a:	4453      	add	r3, sl
 800041c:	e794      	b.n	8000348 <__aeabi_fsub+0x118>
 800041e:	22fe      	movs	r2, #254	; 0xfe
 8000420:	1c66      	adds	r6, r4, #1
 8000422:	4232      	tst	r2, r6
 8000424:	d164      	bne.n	80004f0 <__aeabi_fsub+0x2c0>
 8000426:	2c00      	cmp	r4, #0
 8000428:	d000      	beq.n	800042c <__aeabi_fsub+0x1fc>
 800042a:	e082      	b.n	8000532 <__aeabi_fsub+0x302>
 800042c:	4663      	mov	r3, ip
 800042e:	2b00      	cmp	r3, #0
 8000430:	d100      	bne.n	8000434 <__aeabi_fsub+0x204>
 8000432:	e0ab      	b.n	800058c <__aeabi_fsub+0x35c>
 8000434:	4653      	mov	r3, sl
 8000436:	2b00      	cmp	r3, #0
 8000438:	d100      	bne.n	800043c <__aeabi_fsub+0x20c>
 800043a:	e760      	b.n	80002fe <__aeabi_fsub+0xce>
 800043c:	4663      	mov	r3, ip
 800043e:	4652      	mov	r2, sl
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	015a      	lsls	r2, r3, #5
 8000444:	d400      	bmi.n	8000448 <__aeabi_fsub+0x218>
 8000446:	e0aa      	b.n	800059e <__aeabi_fsub+0x36e>
 8000448:	4663      	mov	r3, ip
 800044a:	4652      	mov	r2, sl
 800044c:	000d      	movs	r5, r1
 800044e:	1ad3      	subs	r3, r2, r3
 8000450:	e744      	b.n	80002dc <__aeabi_fsub+0xac>
 8000452:	4652      	mov	r2, sl
 8000454:	2a00      	cmp	r2, #0
 8000456:	d023      	beq.n	80004a0 <__aeabi_fsub+0x270>
 8000458:	2201      	movs	r2, #1
 800045a:	4252      	negs	r2, r2
 800045c:	4690      	mov	r8, r2
 800045e:	44c1      	add	r9, r8
 8000460:	464a      	mov	r2, r9
 8000462:	2a00      	cmp	r2, #0
 8000464:	d075      	beq.n	8000552 <__aeabi_fsub+0x322>
 8000466:	2cff      	cmp	r4, #255	; 0xff
 8000468:	d000      	beq.n	800046c <__aeabi_fsub+0x23c>
 800046a:	e75f      	b.n	800032c <__aeabi_fsub+0xfc>
 800046c:	e796      	b.n	800039c <__aeabi_fsub+0x16c>
 800046e:	26fe      	movs	r6, #254	; 0xfe
 8000470:	3401      	adds	r4, #1
 8000472:	4226      	tst	r6, r4
 8000474:	d153      	bne.n	800051e <__aeabi_fsub+0x2ee>
 8000476:	2800      	cmp	r0, #0
 8000478:	d172      	bne.n	8000560 <__aeabi_fsub+0x330>
 800047a:	4663      	mov	r3, ip
 800047c:	2b00      	cmp	r3, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_fsub+0x252>
 8000480:	e093      	b.n	80005aa <__aeabi_fsub+0x37a>
 8000482:	4653      	mov	r3, sl
 8000484:	2b00      	cmp	r3, #0
 8000486:	d100      	bne.n	800048a <__aeabi_fsub+0x25a>
 8000488:	e739      	b.n	80002fe <__aeabi_fsub+0xce>
 800048a:	4463      	add	r3, ip
 800048c:	2400      	movs	r4, #0
 800048e:	015a      	lsls	r2, r3, #5
 8000490:	d502      	bpl.n	8000498 <__aeabi_fsub+0x268>
 8000492:	4a4a      	ldr	r2, [pc, #296]	; (80005bc <__aeabi_fsub+0x38c>)
 8000494:	3401      	adds	r4, #1
 8000496:	4013      	ands	r3, r2
 8000498:	075a      	lsls	r2, r3, #29
 800049a:	d000      	beq.n	800049e <__aeabi_fsub+0x26e>
 800049c:	e720      	b.n	80002e0 <__aeabi_fsub+0xb0>
 800049e:	08db      	lsrs	r3, r3, #3
 80004a0:	2cff      	cmp	r4, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fsub+0x276>
 80004a4:	e77a      	b.n	800039c <__aeabi_fsub+0x16c>
 80004a6:	025b      	lsls	r3, r3, #9
 80004a8:	0a5f      	lsrs	r7, r3, #9
 80004aa:	b2e0      	uxtb	r0, r4
 80004ac:	e727      	b.n	80002fe <__aeabi_fsub+0xce>
 80004ae:	20ff      	movs	r0, #255	; 0xff
 80004b0:	2700      	movs	r7, #0
 80004b2:	e724      	b.n	80002fe <__aeabi_fsub+0xce>
 80004b4:	4b41      	ldr	r3, [pc, #260]	; (80005bc <__aeabi_fsub+0x38c>)
 80004b6:	1a24      	subs	r4, r4, r0
 80004b8:	4033      	ands	r3, r6
 80004ba:	e70f      	b.n	80002dc <__aeabi_fsub+0xac>
 80004bc:	2eff      	cmp	r6, #255	; 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fsub+0x292>
 80004c0:	e76a      	b.n	8000398 <__aeabi_fsub+0x168>
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	4662      	mov	r2, ip
 80004c6:	04db      	lsls	r3, r3, #19
 80004c8:	431a      	orrs	r2, r3
 80004ca:	4694      	mov	ip, r2
 80004cc:	2301      	movs	r3, #1
 80004ce:	281b      	cmp	r0, #27
 80004d0:	dc09      	bgt.n	80004e6 <__aeabi_fsub+0x2b6>
 80004d2:	2420      	movs	r4, #32
 80004d4:	4663      	mov	r3, ip
 80004d6:	4662      	mov	r2, ip
 80004d8:	40c3      	lsrs	r3, r0
 80004da:	1a20      	subs	r0, r4, r0
 80004dc:	4082      	lsls	r2, r0
 80004de:	0010      	movs	r0, r2
 80004e0:	1e44      	subs	r4, r0, #1
 80004e2:	41a0      	sbcs	r0, r4
 80004e4:	4303      	orrs	r3, r0
 80004e6:	4652      	mov	r2, sl
 80004e8:	000d      	movs	r5, r1
 80004ea:	0034      	movs	r4, r6
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	e6dc      	b.n	80002aa <__aeabi_fsub+0x7a>
 80004f0:	4663      	mov	r3, ip
 80004f2:	4652      	mov	r2, sl
 80004f4:	1a9e      	subs	r6, r3, r2
 80004f6:	0173      	lsls	r3, r6, #5
 80004f8:	d417      	bmi.n	800052a <__aeabi_fsub+0x2fa>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d000      	beq.n	8000500 <__aeabi_fsub+0x2d0>
 80004fe:	e6d9      	b.n	80002b4 <__aeabi_fsub+0x84>
 8000500:	2500      	movs	r5, #0
 8000502:	2000      	movs	r0, #0
 8000504:	2700      	movs	r7, #0
 8000506:	e6fa      	b.n	80002fe <__aeabi_fsub+0xce>
 8000508:	4663      	mov	r3, ip
 800050a:	2b00      	cmp	r3, #0
 800050c:	d044      	beq.n	8000598 <__aeabi_fsub+0x368>
 800050e:	3901      	subs	r1, #1
 8000510:	2900      	cmp	r1, #0
 8000512:	d04c      	beq.n	80005ae <__aeabi_fsub+0x37e>
 8000514:	2eff      	cmp	r6, #255	; 0xff
 8000516:	d000      	beq.n	800051a <__aeabi_fsub+0x2ea>
 8000518:	e771      	b.n	80003fe <__aeabi_fsub+0x1ce>
 800051a:	4643      	mov	r3, r8
 800051c:	e73e      	b.n	800039c <__aeabi_fsub+0x16c>
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d0c5      	beq.n	80004ae <__aeabi_fsub+0x27e>
 8000522:	4652      	mov	r2, sl
 8000524:	4462      	add	r2, ip
 8000526:	0853      	lsrs	r3, r2, #1
 8000528:	e7b6      	b.n	8000498 <__aeabi_fsub+0x268>
 800052a:	4663      	mov	r3, ip
 800052c:	000d      	movs	r5, r1
 800052e:	1ad6      	subs	r6, r2, r3
 8000530:	e6c0      	b.n	80002b4 <__aeabi_fsub+0x84>
 8000532:	4662      	mov	r2, ip
 8000534:	2a00      	cmp	r2, #0
 8000536:	d116      	bne.n	8000566 <__aeabi_fsub+0x336>
 8000538:	4653      	mov	r3, sl
 800053a:	2b00      	cmp	r3, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fsub+0x310>
 800053e:	e72b      	b.n	8000398 <__aeabi_fsub+0x168>
 8000540:	2780      	movs	r7, #128	; 0x80
 8000542:	2500      	movs	r5, #0
 8000544:	20ff      	movs	r0, #255	; 0xff
 8000546:	03ff      	lsls	r7, r7, #15
 8000548:	e6d9      	b.n	80002fe <__aeabi_fsub+0xce>
 800054a:	000d      	movs	r5, r1
 800054c:	4643      	mov	r3, r8
 800054e:	0034      	movs	r4, r6
 8000550:	e7a6      	b.n	80004a0 <__aeabi_fsub+0x270>
 8000552:	4653      	mov	r3, sl
 8000554:	4463      	add	r3, ip
 8000556:	e6f7      	b.n	8000348 <__aeabi_fsub+0x118>
 8000558:	4663      	mov	r3, ip
 800055a:	4652      	mov	r2, sl
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	e6a4      	b.n	80002aa <__aeabi_fsub+0x7a>
 8000560:	4662      	mov	r2, ip
 8000562:	2a00      	cmp	r2, #0
 8000564:	d0d9      	beq.n	800051a <__aeabi_fsub+0x2ea>
 8000566:	4652      	mov	r2, sl
 8000568:	2a00      	cmp	r2, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fsub+0x33e>
 800056c:	e716      	b.n	800039c <__aeabi_fsub+0x16c>
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	03d2      	lsls	r2, r2, #15
 8000572:	4213      	tst	r3, r2
 8000574:	d100      	bne.n	8000578 <__aeabi_fsub+0x348>
 8000576:	e711      	b.n	800039c <__aeabi_fsub+0x16c>
 8000578:	4640      	mov	r0, r8
 800057a:	4210      	tst	r0, r2
 800057c:	d000      	beq.n	8000580 <__aeabi_fsub+0x350>
 800057e:	e70d      	b.n	800039c <__aeabi_fsub+0x16c>
 8000580:	e70a      	b.n	8000398 <__aeabi_fsub+0x168>
 8000582:	4652      	mov	r2, sl
 8000584:	000d      	movs	r5, r1
 8000586:	0034      	movs	r4, r6
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	e68e      	b.n	80002aa <__aeabi_fsub+0x7a>
 800058c:	4653      	mov	r3, sl
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <__aeabi_fsub+0x374>
 8000592:	000d      	movs	r5, r1
 8000594:	4647      	mov	r7, r8
 8000596:	e6b2      	b.n	80002fe <__aeabi_fsub+0xce>
 8000598:	4643      	mov	r3, r8
 800059a:	0034      	movs	r4, r6
 800059c:	e780      	b.n	80004a0 <__aeabi_fsub+0x270>
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fsub+0x374>
 80005a2:	e779      	b.n	8000498 <__aeabi_fsub+0x268>
 80005a4:	2500      	movs	r5, #0
 80005a6:	2700      	movs	r7, #0
 80005a8:	e6a9      	b.n	80002fe <__aeabi_fsub+0xce>
 80005aa:	4647      	mov	r7, r8
 80005ac:	e6a7      	b.n	80002fe <__aeabi_fsub+0xce>
 80005ae:	4653      	mov	r3, sl
 80005b0:	0034      	movs	r4, r6
 80005b2:	4463      	add	r3, ip
 80005b4:	e6c8      	b.n	8000348 <__aeabi_fsub+0x118>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	7dffffff 	.word	0x7dffffff
 80005bc:	fbffffff 	.word	0xfbffffff

080005c0 <__aeabi_f2iz>:
 80005c0:	0241      	lsls	r1, r0, #9
 80005c2:	0042      	lsls	r2, r0, #1
 80005c4:	0fc3      	lsrs	r3, r0, #31
 80005c6:	0a49      	lsrs	r1, r1, #9
 80005c8:	2000      	movs	r0, #0
 80005ca:	0e12      	lsrs	r2, r2, #24
 80005cc:	2a7e      	cmp	r2, #126	; 0x7e
 80005ce:	d903      	bls.n	80005d8 <__aeabi_f2iz+0x18>
 80005d0:	2a9d      	cmp	r2, #157	; 0x9d
 80005d2:	d902      	bls.n	80005da <__aeabi_f2iz+0x1a>
 80005d4:	4a09      	ldr	r2, [pc, #36]	; (80005fc <__aeabi_f2iz+0x3c>)
 80005d6:	1898      	adds	r0, r3, r2
 80005d8:	4770      	bx	lr
 80005da:	2080      	movs	r0, #128	; 0x80
 80005dc:	0400      	lsls	r0, r0, #16
 80005de:	4301      	orrs	r1, r0
 80005e0:	2a95      	cmp	r2, #149	; 0x95
 80005e2:	dc07      	bgt.n	80005f4 <__aeabi_f2iz+0x34>
 80005e4:	2096      	movs	r0, #150	; 0x96
 80005e6:	1a82      	subs	r2, r0, r2
 80005e8:	40d1      	lsrs	r1, r2
 80005ea:	4248      	negs	r0, r1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f3      	bne.n	80005d8 <__aeabi_f2iz+0x18>
 80005f0:	0008      	movs	r0, r1
 80005f2:	e7f1      	b.n	80005d8 <__aeabi_f2iz+0x18>
 80005f4:	3a96      	subs	r2, #150	; 0x96
 80005f6:	4091      	lsls	r1, r2
 80005f8:	e7f7      	b.n	80005ea <__aeabi_f2iz+0x2a>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	7fffffff 	.word	0x7fffffff

08000600 <__aeabi_i2f>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2800      	cmp	r0, #0
 8000604:	d013      	beq.n	800062e <__aeabi_i2f+0x2e>
 8000606:	17c3      	asrs	r3, r0, #31
 8000608:	18c5      	adds	r5, r0, r3
 800060a:	405d      	eors	r5, r3
 800060c:	0fc4      	lsrs	r4, r0, #31
 800060e:	0028      	movs	r0, r5
 8000610:	f000 feca 	bl	80013a8 <__clzsi2>
 8000614:	239e      	movs	r3, #158	; 0x9e
 8000616:	0001      	movs	r1, r0
 8000618:	1a1b      	subs	r3, r3, r0
 800061a:	2b96      	cmp	r3, #150	; 0x96
 800061c:	dc0f      	bgt.n	800063e <__aeabi_i2f+0x3e>
 800061e:	2808      	cmp	r0, #8
 8000620:	dd01      	ble.n	8000626 <__aeabi_i2f+0x26>
 8000622:	3908      	subs	r1, #8
 8000624:	408d      	lsls	r5, r1
 8000626:	026d      	lsls	r5, r5, #9
 8000628:	0a6d      	lsrs	r5, r5, #9
 800062a:	b2d8      	uxtb	r0, r3
 800062c:	e002      	b.n	8000634 <__aeabi_i2f+0x34>
 800062e:	2400      	movs	r4, #0
 8000630:	2000      	movs	r0, #0
 8000632:	2500      	movs	r5, #0
 8000634:	05c0      	lsls	r0, r0, #23
 8000636:	4328      	orrs	r0, r5
 8000638:	07e4      	lsls	r4, r4, #31
 800063a:	4320      	orrs	r0, r4
 800063c:	bd70      	pop	{r4, r5, r6, pc}
 800063e:	2b99      	cmp	r3, #153	; 0x99
 8000640:	dd0b      	ble.n	800065a <__aeabi_i2f+0x5a>
 8000642:	2205      	movs	r2, #5
 8000644:	002e      	movs	r6, r5
 8000646:	1a12      	subs	r2, r2, r0
 8000648:	40d6      	lsrs	r6, r2
 800064a:	0002      	movs	r2, r0
 800064c:	321b      	adds	r2, #27
 800064e:	4095      	lsls	r5, r2
 8000650:	0028      	movs	r0, r5
 8000652:	1e45      	subs	r5, r0, #1
 8000654:	41a8      	sbcs	r0, r5
 8000656:	0035      	movs	r5, r6
 8000658:	4305      	orrs	r5, r0
 800065a:	2905      	cmp	r1, #5
 800065c:	dd01      	ble.n	8000662 <__aeabi_i2f+0x62>
 800065e:	1f4a      	subs	r2, r1, #5
 8000660:	4095      	lsls	r5, r2
 8000662:	002a      	movs	r2, r5
 8000664:	4e08      	ldr	r6, [pc, #32]	; (8000688 <__aeabi_i2f+0x88>)
 8000666:	4032      	ands	r2, r6
 8000668:	0768      	lsls	r0, r5, #29
 800066a:	d009      	beq.n	8000680 <__aeabi_i2f+0x80>
 800066c:	200f      	movs	r0, #15
 800066e:	4028      	ands	r0, r5
 8000670:	2804      	cmp	r0, #4
 8000672:	d005      	beq.n	8000680 <__aeabi_i2f+0x80>
 8000674:	3204      	adds	r2, #4
 8000676:	0150      	lsls	r0, r2, #5
 8000678:	d502      	bpl.n	8000680 <__aeabi_i2f+0x80>
 800067a:	239f      	movs	r3, #159	; 0x9f
 800067c:	4032      	ands	r2, r6
 800067e:	1a5b      	subs	r3, r3, r1
 8000680:	0192      	lsls	r2, r2, #6
 8000682:	0a55      	lsrs	r5, r2, #9
 8000684:	b2d8      	uxtb	r0, r3
 8000686:	e7d5      	b.n	8000634 <__aeabi_i2f+0x34>
 8000688:	fbffffff 	.word	0xfbffffff

0800068c <__aeabi_dadd>:
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	464f      	mov	r7, r9
 8000690:	46d6      	mov	lr, sl
 8000692:	4646      	mov	r6, r8
 8000694:	000d      	movs	r5, r1
 8000696:	0001      	movs	r1, r0
 8000698:	0018      	movs	r0, r3
 800069a:	b5c0      	push	{r6, r7, lr}
 800069c:	0017      	movs	r7, r2
 800069e:	032b      	lsls	r3, r5, #12
 80006a0:	0a5a      	lsrs	r2, r3, #9
 80006a2:	0f4b      	lsrs	r3, r1, #29
 80006a4:	4313      	orrs	r3, r2
 80006a6:	00ca      	lsls	r2, r1, #3
 80006a8:	4691      	mov	r9, r2
 80006aa:	0302      	lsls	r2, r0, #12
 80006ac:	006e      	lsls	r6, r5, #1
 80006ae:	0041      	lsls	r1, r0, #1
 80006b0:	0a52      	lsrs	r2, r2, #9
 80006b2:	0fec      	lsrs	r4, r5, #31
 80006b4:	0f7d      	lsrs	r5, r7, #29
 80006b6:	4315      	orrs	r5, r2
 80006b8:	0d76      	lsrs	r6, r6, #21
 80006ba:	0d49      	lsrs	r1, r1, #21
 80006bc:	0fc0      	lsrs	r0, r0, #31
 80006be:	4682      	mov	sl, r0
 80006c0:	46ac      	mov	ip, r5
 80006c2:	00ff      	lsls	r7, r7, #3
 80006c4:	1a72      	subs	r2, r6, r1
 80006c6:	4284      	cmp	r4, r0
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x40>
 80006ca:	e098      	b.n	80007fe <__aeabi_dadd+0x172>
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	dc00      	bgt.n	80006d2 <__aeabi_dadd+0x46>
 80006d0:	e081      	b.n	80007d6 <__aeabi_dadd+0x14a>
 80006d2:	2900      	cmp	r1, #0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x4c>
 80006d6:	e0b6      	b.n	8000846 <__aeabi_dadd+0x1ba>
 80006d8:	49c9      	ldr	r1, [pc, #804]	; (8000a00 <__aeabi_dadd+0x374>)
 80006da:	428e      	cmp	r6, r1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x54>
 80006de:	e172      	b.n	80009c6 <__aeabi_dadd+0x33a>
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0028      	movs	r0, r5
 80006e4:	0409      	lsls	r1, r1, #16
 80006e6:	4308      	orrs	r0, r1
 80006e8:	4684      	mov	ip, r0
 80006ea:	2a38      	cmp	r2, #56	; 0x38
 80006ec:	dd00      	ble.n	80006f0 <__aeabi_dadd+0x64>
 80006ee:	e15e      	b.n	80009ae <__aeabi_dadd+0x322>
 80006f0:	2a1f      	cmp	r2, #31
 80006f2:	dd00      	ble.n	80006f6 <__aeabi_dadd+0x6a>
 80006f4:	e1ee      	b.n	8000ad4 <__aeabi_dadd+0x448>
 80006f6:	2020      	movs	r0, #32
 80006f8:	0039      	movs	r1, r7
 80006fa:	4665      	mov	r5, ip
 80006fc:	1a80      	subs	r0, r0, r2
 80006fe:	4087      	lsls	r7, r0
 8000700:	40d1      	lsrs	r1, r2
 8000702:	4085      	lsls	r5, r0
 8000704:	430d      	orrs	r5, r1
 8000706:	0039      	movs	r1, r7
 8000708:	1e4f      	subs	r7, r1, #1
 800070a:	41b9      	sbcs	r1, r7
 800070c:	4667      	mov	r7, ip
 800070e:	40d7      	lsrs	r7, r2
 8000710:	4329      	orrs	r1, r5
 8000712:	1bdb      	subs	r3, r3, r7
 8000714:	464a      	mov	r2, r9
 8000716:	1a55      	subs	r5, r2, r1
 8000718:	45a9      	cmp	r9, r5
 800071a:	4189      	sbcs	r1, r1
 800071c:	4249      	negs	r1, r1
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	4698      	mov	r8, r3
 8000722:	4643      	mov	r3, r8
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	d400      	bmi.n	800072a <__aeabi_dadd+0x9e>
 8000728:	e0cc      	b.n	80008c4 <__aeabi_dadd+0x238>
 800072a:	4643      	mov	r3, r8
 800072c:	025b      	lsls	r3, r3, #9
 800072e:	0a5b      	lsrs	r3, r3, #9
 8000730:	4698      	mov	r8, r3
 8000732:	4643      	mov	r3, r8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0xae>
 8000738:	e12c      	b.n	8000994 <__aeabi_dadd+0x308>
 800073a:	4640      	mov	r0, r8
 800073c:	f000 fe34 	bl	80013a8 <__clzsi2>
 8000740:	0001      	movs	r1, r0
 8000742:	3908      	subs	r1, #8
 8000744:	2220      	movs	r2, #32
 8000746:	0028      	movs	r0, r5
 8000748:	4643      	mov	r3, r8
 800074a:	1a52      	subs	r2, r2, r1
 800074c:	408b      	lsls	r3, r1
 800074e:	40d0      	lsrs	r0, r2
 8000750:	408d      	lsls	r5, r1
 8000752:	4303      	orrs	r3, r0
 8000754:	428e      	cmp	r6, r1
 8000756:	dd00      	ble.n	800075a <__aeabi_dadd+0xce>
 8000758:	e117      	b.n	800098a <__aeabi_dadd+0x2fe>
 800075a:	1b8e      	subs	r6, r1, r6
 800075c:	1c72      	adds	r2, r6, #1
 800075e:	2a1f      	cmp	r2, #31
 8000760:	dd00      	ble.n	8000764 <__aeabi_dadd+0xd8>
 8000762:	e1a7      	b.n	8000ab4 <__aeabi_dadd+0x428>
 8000764:	2120      	movs	r1, #32
 8000766:	0018      	movs	r0, r3
 8000768:	002e      	movs	r6, r5
 800076a:	1a89      	subs	r1, r1, r2
 800076c:	408d      	lsls	r5, r1
 800076e:	4088      	lsls	r0, r1
 8000770:	40d6      	lsrs	r6, r2
 8000772:	40d3      	lsrs	r3, r2
 8000774:	1e69      	subs	r1, r5, #1
 8000776:	418d      	sbcs	r5, r1
 8000778:	4330      	orrs	r0, r6
 800077a:	4698      	mov	r8, r3
 800077c:	2600      	movs	r6, #0
 800077e:	4305      	orrs	r5, r0
 8000780:	076b      	lsls	r3, r5, #29
 8000782:	d009      	beq.n	8000798 <__aeabi_dadd+0x10c>
 8000784:	230f      	movs	r3, #15
 8000786:	402b      	ands	r3, r5
 8000788:	2b04      	cmp	r3, #4
 800078a:	d005      	beq.n	8000798 <__aeabi_dadd+0x10c>
 800078c:	1d2b      	adds	r3, r5, #4
 800078e:	42ab      	cmp	r3, r5
 8000790:	41ad      	sbcs	r5, r5
 8000792:	426d      	negs	r5, r5
 8000794:	44a8      	add	r8, r5
 8000796:	001d      	movs	r5, r3
 8000798:	4643      	mov	r3, r8
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	d400      	bmi.n	80007a0 <__aeabi_dadd+0x114>
 800079e:	e094      	b.n	80008ca <__aeabi_dadd+0x23e>
 80007a0:	4b97      	ldr	r3, [pc, #604]	; (8000a00 <__aeabi_dadd+0x374>)
 80007a2:	1c72      	adds	r2, r6, #1
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x11e>
 80007a8:	e09d      	b.n	80008e6 <__aeabi_dadd+0x25a>
 80007aa:	4641      	mov	r1, r8
 80007ac:	4b95      	ldr	r3, [pc, #596]	; (8000a04 <__aeabi_dadd+0x378>)
 80007ae:	08ed      	lsrs	r5, r5, #3
 80007b0:	4019      	ands	r1, r3
 80007b2:	000b      	movs	r3, r1
 80007b4:	0552      	lsls	r2, r2, #21
 80007b6:	0749      	lsls	r1, r1, #29
 80007b8:	025b      	lsls	r3, r3, #9
 80007ba:	4329      	orrs	r1, r5
 80007bc:	0b1b      	lsrs	r3, r3, #12
 80007be:	0d52      	lsrs	r2, r2, #21
 80007c0:	0512      	lsls	r2, r2, #20
 80007c2:	4313      	orrs	r3, r2
 80007c4:	07e4      	lsls	r4, r4, #31
 80007c6:	4323      	orrs	r3, r4
 80007c8:	0008      	movs	r0, r1
 80007ca:	0019      	movs	r1, r3
 80007cc:	bce0      	pop	{r5, r6, r7}
 80007ce:	46ba      	mov	sl, r7
 80007d0:	46b1      	mov	r9, r6
 80007d2:	46a8      	mov	r8, r5
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d043      	beq.n	8000862 <__aeabi_dadd+0x1d6>
 80007da:	1b8a      	subs	r2, r1, r6
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x156>
 80007e0:	e12a      	b.n	8000a38 <__aeabi_dadd+0x3ac>
 80007e2:	464c      	mov	r4, r9
 80007e4:	431c      	orrs	r4, r3
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x15e>
 80007e8:	e1d1      	b.n	8000b8e <__aeabi_dadd+0x502>
 80007ea:	1e54      	subs	r4, r2, #1
 80007ec:	2a01      	cmp	r2, #1
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x166>
 80007f0:	e21f      	b.n	8000c32 <__aeabi_dadd+0x5a6>
 80007f2:	4d83      	ldr	r5, [pc, #524]	; (8000a00 <__aeabi_dadd+0x374>)
 80007f4:	42aa      	cmp	r2, r5
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x16e>
 80007f8:	e272      	b.n	8000ce0 <__aeabi_dadd+0x654>
 80007fa:	0022      	movs	r2, r4
 80007fc:	e123      	b.n	8000a46 <__aeabi_dadd+0x3ba>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	dc00      	bgt.n	8000804 <__aeabi_dadd+0x178>
 8000802:	e098      	b.n	8000936 <__aeabi_dadd+0x2aa>
 8000804:	2900      	cmp	r1, #0
 8000806:	d042      	beq.n	800088e <__aeabi_dadd+0x202>
 8000808:	497d      	ldr	r1, [pc, #500]	; (8000a00 <__aeabi_dadd+0x374>)
 800080a:	428e      	cmp	r6, r1
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x184>
 800080e:	e0da      	b.n	80009c6 <__aeabi_dadd+0x33a>
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0028      	movs	r0, r5
 8000814:	0409      	lsls	r1, r1, #16
 8000816:	4308      	orrs	r0, r1
 8000818:	4684      	mov	ip, r0
 800081a:	2a38      	cmp	r2, #56	; 0x38
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x194>
 800081e:	e129      	b.n	8000a74 <__aeabi_dadd+0x3e8>
 8000820:	2a1f      	cmp	r2, #31
 8000822:	dc00      	bgt.n	8000826 <__aeabi_dadd+0x19a>
 8000824:	e187      	b.n	8000b36 <__aeabi_dadd+0x4aa>
 8000826:	0011      	movs	r1, r2
 8000828:	4665      	mov	r5, ip
 800082a:	3920      	subs	r1, #32
 800082c:	40cd      	lsrs	r5, r1
 800082e:	2a20      	cmp	r2, #32
 8000830:	d004      	beq.n	800083c <__aeabi_dadd+0x1b0>
 8000832:	2040      	movs	r0, #64	; 0x40
 8000834:	4661      	mov	r1, ip
 8000836:	1a82      	subs	r2, r0, r2
 8000838:	4091      	lsls	r1, r2
 800083a:	430f      	orrs	r7, r1
 800083c:	0039      	movs	r1, r7
 800083e:	1e4f      	subs	r7, r1, #1
 8000840:	41b9      	sbcs	r1, r7
 8000842:	430d      	orrs	r5, r1
 8000844:	e11b      	b.n	8000a7e <__aeabi_dadd+0x3f2>
 8000846:	0029      	movs	r1, r5
 8000848:	4339      	orrs	r1, r7
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1c2>
 800084c:	e0b5      	b.n	80009ba <__aeabi_dadd+0x32e>
 800084e:	1e51      	subs	r1, r2, #1
 8000850:	2a01      	cmp	r2, #1
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x1ca>
 8000854:	e1ab      	b.n	8000bae <__aeabi_dadd+0x522>
 8000856:	486a      	ldr	r0, [pc, #424]	; (8000a00 <__aeabi_dadd+0x374>)
 8000858:	4282      	cmp	r2, r0
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x1d2>
 800085c:	e1b2      	b.n	8000bc4 <__aeabi_dadd+0x538>
 800085e:	000a      	movs	r2, r1
 8000860:	e743      	b.n	80006ea <__aeabi_dadd+0x5e>
 8000862:	4969      	ldr	r1, [pc, #420]	; (8000a08 <__aeabi_dadd+0x37c>)
 8000864:	1c75      	adds	r5, r6, #1
 8000866:	420d      	tst	r5, r1
 8000868:	d000      	beq.n	800086c <__aeabi_dadd+0x1e0>
 800086a:	e0cf      	b.n	8000a0c <__aeabi_dadd+0x380>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_dadd+0x1e6>
 8000870:	e193      	b.n	8000b9a <__aeabi_dadd+0x50e>
 8000872:	4649      	mov	r1, r9
 8000874:	4319      	orrs	r1, r3
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1ee>
 8000878:	e1d1      	b.n	8000c1e <__aeabi_dadd+0x592>
 800087a:	4661      	mov	r1, ip
 800087c:	4339      	orrs	r1, r7
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x1f6>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5be>
 8000882:	4649      	mov	r1, r9
 8000884:	0758      	lsls	r0, r3, #29
 8000886:	08c9      	lsrs	r1, r1, #3
 8000888:	4301      	orrs	r1, r0
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	e026      	b.n	80008dc <__aeabi_dadd+0x250>
 800088e:	0029      	movs	r1, r5
 8000890:	4339      	orrs	r1, r7
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x20a>
 8000894:	e091      	b.n	80009ba <__aeabi_dadd+0x32e>
 8000896:	1e51      	subs	r1, r2, #1
 8000898:	2a01      	cmp	r2, #1
 800089a:	d005      	beq.n	80008a8 <__aeabi_dadd+0x21c>
 800089c:	4858      	ldr	r0, [pc, #352]	; (8000a00 <__aeabi_dadd+0x374>)
 800089e:	4282      	cmp	r2, r0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x218>
 80008a2:	e18f      	b.n	8000bc4 <__aeabi_dadd+0x538>
 80008a4:	000a      	movs	r2, r1
 80008a6:	e7b8      	b.n	800081a <__aeabi_dadd+0x18e>
 80008a8:	003d      	movs	r5, r7
 80008aa:	444d      	add	r5, r9
 80008ac:	454d      	cmp	r5, r9
 80008ae:	4189      	sbcs	r1, r1
 80008b0:	4463      	add	r3, ip
 80008b2:	4698      	mov	r8, r3
 80008b4:	4249      	negs	r1, r1
 80008b6:	4488      	add	r8, r1
 80008b8:	4643      	mov	r3, r8
 80008ba:	2602      	movs	r6, #2
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	d500      	bpl.n	80008c2 <__aeabi_dadd+0x236>
 80008c0:	e0eb      	b.n	8000a9a <__aeabi_dadd+0x40e>
 80008c2:	3e01      	subs	r6, #1
 80008c4:	076b      	lsls	r3, r5, #29
 80008c6:	d000      	beq.n	80008ca <__aeabi_dadd+0x23e>
 80008c8:	e75c      	b.n	8000784 <__aeabi_dadd+0xf8>
 80008ca:	4643      	mov	r3, r8
 80008cc:	08e9      	lsrs	r1, r5, #3
 80008ce:	075a      	lsls	r2, r3, #29
 80008d0:	4311      	orrs	r1, r2
 80008d2:	0032      	movs	r2, r6
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	484a      	ldr	r0, [pc, #296]	; (8000a00 <__aeabi_dadd+0x374>)
 80008d8:	4282      	cmp	r2, r0
 80008da:	d021      	beq.n	8000920 <__aeabi_dadd+0x294>
 80008dc:	031b      	lsls	r3, r3, #12
 80008de:	0552      	lsls	r2, r2, #21
 80008e0:	0b1b      	lsrs	r3, r3, #12
 80008e2:	0d52      	lsrs	r2, r2, #21
 80008e4:	e76c      	b.n	80007c0 <__aeabi_dadd+0x134>
 80008e6:	2300      	movs	r3, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	e769      	b.n	80007c0 <__aeabi_dadd+0x134>
 80008ec:	002a      	movs	r2, r5
 80008ee:	433a      	orrs	r2, r7
 80008f0:	d069      	beq.n	80009c6 <__aeabi_dadd+0x33a>
 80008f2:	464a      	mov	r2, r9
 80008f4:	0758      	lsls	r0, r3, #29
 80008f6:	08d1      	lsrs	r1, r2, #3
 80008f8:	08da      	lsrs	r2, r3, #3
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	031b      	lsls	r3, r3, #12
 80008fe:	4308      	orrs	r0, r1
 8000900:	421a      	tst	r2, r3
 8000902:	d007      	beq.n	8000914 <__aeabi_dadd+0x288>
 8000904:	0029      	movs	r1, r5
 8000906:	08ed      	lsrs	r5, r5, #3
 8000908:	421d      	tst	r5, r3
 800090a:	d103      	bne.n	8000914 <__aeabi_dadd+0x288>
 800090c:	002a      	movs	r2, r5
 800090e:	08ff      	lsrs	r7, r7, #3
 8000910:	0748      	lsls	r0, r1, #29
 8000912:	4338      	orrs	r0, r7
 8000914:	0f43      	lsrs	r3, r0, #29
 8000916:	00c1      	lsls	r1, r0, #3
 8000918:	075b      	lsls	r3, r3, #29
 800091a:	08c9      	lsrs	r1, r1, #3
 800091c:	4319      	orrs	r1, r3
 800091e:	0013      	movs	r3, r2
 8000920:	000a      	movs	r2, r1
 8000922:	431a      	orrs	r2, r3
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x29c>
 8000926:	e213      	b.n	8000d50 <__aeabi_dadd+0x6c4>
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0312      	lsls	r2, r2, #12
 800092c:	4313      	orrs	r3, r2
 800092e:	031b      	lsls	r3, r3, #12
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <__aeabi_dadd+0x374>)
 8000932:	0b1b      	lsrs	r3, r3, #12
 8000934:	e744      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000936:	2a00      	cmp	r2, #0
 8000938:	d04b      	beq.n	80009d2 <__aeabi_dadd+0x346>
 800093a:	1b8a      	subs	r2, r1, r6
 800093c:	2e00      	cmp	r6, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x2b6>
 8000940:	e0e7      	b.n	8000b12 <__aeabi_dadd+0x486>
 8000942:	482f      	ldr	r0, [pc, #188]	; (8000a00 <__aeabi_dadd+0x374>)
 8000944:	4281      	cmp	r1, r0
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x2be>
 8000948:	e195      	b.n	8000c76 <__aeabi_dadd+0x5ea>
 800094a:	2080      	movs	r0, #128	; 0x80
 800094c:	0400      	lsls	r0, r0, #16
 800094e:	4303      	orrs	r3, r0
 8000950:	2a38      	cmp	r2, #56	; 0x38
 8000952:	dd00      	ble.n	8000956 <__aeabi_dadd+0x2ca>
 8000954:	e143      	b.n	8000bde <__aeabi_dadd+0x552>
 8000956:	2a1f      	cmp	r2, #31
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x2d0>
 800095a:	e1db      	b.n	8000d14 <__aeabi_dadd+0x688>
 800095c:	2020      	movs	r0, #32
 800095e:	001d      	movs	r5, r3
 8000960:	464e      	mov	r6, r9
 8000962:	1a80      	subs	r0, r0, r2
 8000964:	4085      	lsls	r5, r0
 8000966:	40d6      	lsrs	r6, r2
 8000968:	4335      	orrs	r5, r6
 800096a:	464e      	mov	r6, r9
 800096c:	4086      	lsls	r6, r0
 800096e:	0030      	movs	r0, r6
 8000970:	40d3      	lsrs	r3, r2
 8000972:	1e46      	subs	r6, r0, #1
 8000974:	41b0      	sbcs	r0, r6
 8000976:	449c      	add	ip, r3
 8000978:	4305      	orrs	r5, r0
 800097a:	19ed      	adds	r5, r5, r7
 800097c:	42bd      	cmp	r5, r7
 800097e:	419b      	sbcs	r3, r3
 8000980:	425b      	negs	r3, r3
 8000982:	4463      	add	r3, ip
 8000984:	4698      	mov	r8, r3
 8000986:	000e      	movs	r6, r1
 8000988:	e07f      	b.n	8000a8a <__aeabi_dadd+0x3fe>
 800098a:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <__aeabi_dadd+0x378>)
 800098c:	1a76      	subs	r6, r6, r1
 800098e:	4013      	ands	r3, r2
 8000990:	4698      	mov	r8, r3
 8000992:	e6f5      	b.n	8000780 <__aeabi_dadd+0xf4>
 8000994:	0028      	movs	r0, r5
 8000996:	f000 fd07 	bl	80013a8 <__clzsi2>
 800099a:	0001      	movs	r1, r0
 800099c:	3118      	adds	r1, #24
 800099e:	291f      	cmp	r1, #31
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x318>
 80009a2:	e6cf      	b.n	8000744 <__aeabi_dadd+0xb8>
 80009a4:	002b      	movs	r3, r5
 80009a6:	3808      	subs	r0, #8
 80009a8:	4083      	lsls	r3, r0
 80009aa:	2500      	movs	r5, #0
 80009ac:	e6d2      	b.n	8000754 <__aeabi_dadd+0xc8>
 80009ae:	4662      	mov	r2, ip
 80009b0:	433a      	orrs	r2, r7
 80009b2:	0011      	movs	r1, r2
 80009b4:	1e4f      	subs	r7, r1, #1
 80009b6:	41b9      	sbcs	r1, r7
 80009b8:	e6ac      	b.n	8000714 <__aeabi_dadd+0x88>
 80009ba:	4649      	mov	r1, r9
 80009bc:	0758      	lsls	r0, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	4301      	orrs	r1, r0
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	e787      	b.n	80008d6 <__aeabi_dadd+0x24a>
 80009c6:	4649      	mov	r1, r9
 80009c8:	075a      	lsls	r2, r3, #29
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	4311      	orrs	r1, r2
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	e7a6      	b.n	8000920 <__aeabi_dadd+0x294>
 80009d2:	490d      	ldr	r1, [pc, #52]	; (8000a08 <__aeabi_dadd+0x37c>)
 80009d4:	1c70      	adds	r0, r6, #1
 80009d6:	4208      	tst	r0, r1
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x350>
 80009da:	e0bb      	b.n	8000b54 <__aeabi_dadd+0x4c8>
 80009dc:	2e00      	cmp	r6, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x356>
 80009e0:	e114      	b.n	8000c0c <__aeabi_dadd+0x580>
 80009e2:	4649      	mov	r1, r9
 80009e4:	4319      	orrs	r1, r3
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x35e>
 80009e8:	e175      	b.n	8000cd6 <__aeabi_dadd+0x64a>
 80009ea:	0029      	movs	r1, r5
 80009ec:	4339      	orrs	r1, r7
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x366>
 80009f0:	e17e      	b.n	8000cf0 <__aeabi_dadd+0x664>
 80009f2:	4649      	mov	r1, r9
 80009f4:	0758      	lsls	r0, r3, #29
 80009f6:	08c9      	lsrs	r1, r1, #3
 80009f8:	4301      	orrs	r1, r0
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	e76e      	b.n	80008dc <__aeabi_dadd+0x250>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	000007ff 	.word	0x000007ff
 8000a04:	ff7fffff 	.word	0xff7fffff
 8000a08:	000007fe 	.word	0x000007fe
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	1bcd      	subs	r5, r1, r7
 8000a10:	4661      	mov	r1, ip
 8000a12:	1a58      	subs	r0, r3, r1
 8000a14:	45a9      	cmp	r9, r5
 8000a16:	4189      	sbcs	r1, r1
 8000a18:	4249      	negs	r1, r1
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	0001      	movs	r1, r0
 8000a1e:	4640      	mov	r0, r8
 8000a20:	1a09      	subs	r1, r1, r0
 8000a22:	4688      	mov	r8, r1
 8000a24:	0209      	lsls	r1, r1, #8
 8000a26:	d500      	bpl.n	8000a2a <__aeabi_dadd+0x39e>
 8000a28:	e0a6      	b.n	8000b78 <__aeabi_dadd+0x4ec>
 8000a2a:	4641      	mov	r1, r8
 8000a2c:	4329      	orrs	r1, r5
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_dadd+0x3a6>
 8000a30:	e67f      	b.n	8000732 <__aeabi_dadd+0xa6>
 8000a32:	2300      	movs	r3, #0
 8000a34:	2400      	movs	r4, #0
 8000a36:	e751      	b.n	80008dc <__aeabi_dadd+0x250>
 8000a38:	4cc7      	ldr	r4, [pc, #796]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000a3a:	42a1      	cmp	r1, r4
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x3b4>
 8000a3e:	e0c7      	b.n	8000bd0 <__aeabi_dadd+0x544>
 8000a40:	2480      	movs	r4, #128	; 0x80
 8000a42:	0424      	lsls	r4, r4, #16
 8000a44:	4323      	orrs	r3, r4
 8000a46:	2a38      	cmp	r2, #56	; 0x38
 8000a48:	dc54      	bgt.n	8000af4 <__aeabi_dadd+0x468>
 8000a4a:	2a1f      	cmp	r2, #31
 8000a4c:	dd00      	ble.n	8000a50 <__aeabi_dadd+0x3c4>
 8000a4e:	e0cc      	b.n	8000bea <__aeabi_dadd+0x55e>
 8000a50:	2420      	movs	r4, #32
 8000a52:	4648      	mov	r0, r9
 8000a54:	1aa4      	subs	r4, r4, r2
 8000a56:	001d      	movs	r5, r3
 8000a58:	464e      	mov	r6, r9
 8000a5a:	40a0      	lsls	r0, r4
 8000a5c:	40d6      	lsrs	r6, r2
 8000a5e:	40a5      	lsls	r5, r4
 8000a60:	0004      	movs	r4, r0
 8000a62:	40d3      	lsrs	r3, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	4335      	orrs	r5, r6
 8000a68:	1e66      	subs	r6, r4, #1
 8000a6a:	41b4      	sbcs	r4, r6
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	469c      	mov	ip, r3
 8000a70:	4325      	orrs	r5, r4
 8000a72:	e044      	b.n	8000afe <__aeabi_dadd+0x472>
 8000a74:	4662      	mov	r2, ip
 8000a76:	433a      	orrs	r2, r7
 8000a78:	0015      	movs	r5, r2
 8000a7a:	1e6f      	subs	r7, r5, #1
 8000a7c:	41bd      	sbcs	r5, r7
 8000a7e:	444d      	add	r5, r9
 8000a80:	454d      	cmp	r5, r9
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4249      	negs	r1, r1
 8000a86:	4688      	mov	r8, r1
 8000a88:	4498      	add	r8, r3
 8000a8a:	4643      	mov	r3, r8
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	d400      	bmi.n	8000a92 <__aeabi_dadd+0x406>
 8000a90:	e718      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000a92:	4bb1      	ldr	r3, [pc, #708]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000a94:	3601      	adds	r6, #1
 8000a96:	429e      	cmp	r6, r3
 8000a98:	d049      	beq.n	8000b2e <__aeabi_dadd+0x4a2>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	4baf      	ldr	r3, [pc, #700]	; (8000d5c <__aeabi_dadd+0x6d0>)
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	086a      	lsrs	r2, r5, #1
 8000aa6:	400d      	ands	r5, r1
 8000aa8:	4315      	orrs	r5, r2
 8000aaa:	07d9      	lsls	r1, r3, #31
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	4698      	mov	r8, r3
 8000ab0:	430d      	orrs	r5, r1
 8000ab2:	e665      	b.n	8000780 <__aeabi_dadd+0xf4>
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	3e1f      	subs	r6, #31
 8000ab8:	40f0      	lsrs	r0, r6
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x43a>
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	4093      	lsls	r3, r2
 8000ac4:	431d      	orrs	r5, r3
 8000ac6:	1e69      	subs	r1, r5, #1
 8000ac8:	418d      	sbcs	r5, r1
 8000aca:	2300      	movs	r3, #0
 8000acc:	2600      	movs	r6, #0
 8000ace:	4698      	mov	r8, r3
 8000ad0:	4305      	orrs	r5, r0
 8000ad2:	e6f7      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	3920      	subs	r1, #32
 8000ada:	40cd      	lsrs	r5, r1
 8000adc:	2a20      	cmp	r2, #32
 8000ade:	d004      	beq.n	8000aea <__aeabi_dadd+0x45e>
 8000ae0:	2040      	movs	r0, #64	; 0x40
 8000ae2:	4661      	mov	r1, ip
 8000ae4:	1a82      	subs	r2, r0, r2
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	430f      	orrs	r7, r1
 8000aea:	0039      	movs	r1, r7
 8000aec:	1e4f      	subs	r7, r1, #1
 8000aee:	41b9      	sbcs	r1, r7
 8000af0:	4329      	orrs	r1, r5
 8000af2:	e60f      	b.n	8000714 <__aeabi_dadd+0x88>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4313      	orrs	r3, r2
 8000af8:	001d      	movs	r5, r3
 8000afa:	1e6b      	subs	r3, r5, #1
 8000afc:	419d      	sbcs	r5, r3
 8000afe:	1b7d      	subs	r5, r7, r5
 8000b00:	42af      	cmp	r7, r5
 8000b02:	419b      	sbcs	r3, r3
 8000b04:	4662      	mov	r2, ip
 8000b06:	425b      	negs	r3, r3
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	4654      	mov	r4, sl
 8000b0e:	000e      	movs	r6, r1
 8000b10:	e607      	b.n	8000722 <__aeabi_dadd+0x96>
 8000b12:	4648      	mov	r0, r9
 8000b14:	4318      	orrs	r0, r3
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x48e>
 8000b18:	e0b3      	b.n	8000c82 <__aeabi_dadd+0x5f6>
 8000b1a:	1e50      	subs	r0, r2, #1
 8000b1c:	2a01      	cmp	r2, #1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x496>
 8000b20:	e10d      	b.n	8000d3e <__aeabi_dadd+0x6b2>
 8000b22:	4d8d      	ldr	r5, [pc, #564]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000b24:	42aa      	cmp	r2, r5
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x49e>
 8000b28:	e0a5      	b.n	8000c76 <__aeabi_dadd+0x5ea>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	e710      	b.n	8000950 <__aeabi_dadd+0x2c4>
 8000b2e:	0032      	movs	r2, r6
 8000b30:	2300      	movs	r3, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	e644      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000b36:	2120      	movs	r1, #32
 8000b38:	0038      	movs	r0, r7
 8000b3a:	1a89      	subs	r1, r1, r2
 8000b3c:	4665      	mov	r5, ip
 8000b3e:	408f      	lsls	r7, r1
 8000b40:	408d      	lsls	r5, r1
 8000b42:	40d0      	lsrs	r0, r2
 8000b44:	1e79      	subs	r1, r7, #1
 8000b46:	418f      	sbcs	r7, r1
 8000b48:	4305      	orrs	r5, r0
 8000b4a:	433d      	orrs	r5, r7
 8000b4c:	4667      	mov	r7, ip
 8000b4e:	40d7      	lsrs	r7, r2
 8000b50:	19db      	adds	r3, r3, r7
 8000b52:	e794      	b.n	8000a7e <__aeabi_dadd+0x3f2>
 8000b54:	4a80      	ldr	r2, [pc, #512]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000b56:	4290      	cmp	r0, r2
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x4d0>
 8000b5a:	e0ec      	b.n	8000d36 <__aeabi_dadd+0x6aa>
 8000b5c:	0039      	movs	r1, r7
 8000b5e:	4449      	add	r1, r9
 8000b60:	4549      	cmp	r1, r9
 8000b62:	4192      	sbcs	r2, r2
 8000b64:	4463      	add	r3, ip
 8000b66:	4252      	negs	r2, r2
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	07dd      	lsls	r5, r3, #31
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	4698      	mov	r8, r3
 8000b72:	0006      	movs	r6, r0
 8000b74:	430d      	orrs	r5, r1
 8000b76:	e6a5      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000b78:	464a      	mov	r2, r9
 8000b7a:	1abd      	subs	r5, r7, r2
 8000b7c:	42af      	cmp	r7, r5
 8000b7e:	4189      	sbcs	r1, r1
 8000b80:	4662      	mov	r2, ip
 8000b82:	4249      	negs	r1, r1
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	1a5b      	subs	r3, r3, r1
 8000b88:	4698      	mov	r8, r3
 8000b8a:	4654      	mov	r4, sl
 8000b8c:	e5d1      	b.n	8000732 <__aeabi_dadd+0xa6>
 8000b8e:	076c      	lsls	r4, r5, #29
 8000b90:	08f9      	lsrs	r1, r7, #3
 8000b92:	4321      	orrs	r1, r4
 8000b94:	08eb      	lsrs	r3, r5, #3
 8000b96:	0004      	movs	r4, r0
 8000b98:	e69d      	b.n	80008d6 <__aeabi_dadd+0x24a>
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	d175      	bne.n	8000c8c <__aeabi_dadd+0x600>
 8000ba0:	4661      	mov	r1, ip
 8000ba2:	4339      	orrs	r1, r7
 8000ba4:	d114      	bne.n	8000bd0 <__aeabi_dadd+0x544>
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	2400      	movs	r4, #0
 8000baa:	031b      	lsls	r3, r3, #12
 8000bac:	e6bc      	b.n	8000928 <__aeabi_dadd+0x29c>
 8000bae:	464a      	mov	r2, r9
 8000bb0:	1bd5      	subs	r5, r2, r7
 8000bb2:	45a9      	cmp	r9, r5
 8000bb4:	4189      	sbcs	r1, r1
 8000bb6:	4662      	mov	r2, ip
 8000bb8:	4249      	negs	r1, r1
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	4698      	mov	r8, r3
 8000bc0:	2601      	movs	r6, #1
 8000bc2:	e5ae      	b.n	8000722 <__aeabi_dadd+0x96>
 8000bc4:	464a      	mov	r2, r9
 8000bc6:	08d1      	lsrs	r1, r2, #3
 8000bc8:	075a      	lsls	r2, r3, #29
 8000bca:	4311      	orrs	r1, r2
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	e6a7      	b.n	8000920 <__aeabi_dadd+0x294>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	08f9      	lsrs	r1, r7, #3
 8000bd4:	075a      	lsls	r2, r3, #29
 8000bd6:	4654      	mov	r4, sl
 8000bd8:	4311      	orrs	r1, r2
 8000bda:	08db      	lsrs	r3, r3, #3
 8000bdc:	e6a0      	b.n	8000920 <__aeabi_dadd+0x294>
 8000bde:	464a      	mov	r2, r9
 8000be0:	4313      	orrs	r3, r2
 8000be2:	001d      	movs	r5, r3
 8000be4:	1e6b      	subs	r3, r5, #1
 8000be6:	419d      	sbcs	r5, r3
 8000be8:	e6c7      	b.n	800097a <__aeabi_dadd+0x2ee>
 8000bea:	0014      	movs	r4, r2
 8000bec:	001e      	movs	r6, r3
 8000bee:	3c20      	subs	r4, #32
 8000bf0:	40e6      	lsrs	r6, r4
 8000bf2:	2a20      	cmp	r2, #32
 8000bf4:	d005      	beq.n	8000c02 <__aeabi_dadd+0x576>
 8000bf6:	2440      	movs	r4, #64	; 0x40
 8000bf8:	1aa2      	subs	r2, r4, r2
 8000bfa:	4093      	lsls	r3, r2
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	4691      	mov	r9, r2
 8000c02:	464d      	mov	r5, r9
 8000c04:	1e6b      	subs	r3, r5, #1
 8000c06:	419d      	sbcs	r5, r3
 8000c08:	4335      	orrs	r5, r6
 8000c0a:	e778      	b.n	8000afe <__aeabi_dadd+0x472>
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dadd+0x588>
 8000c12:	e66b      	b.n	80008ec <__aeabi_dadd+0x260>
 8000c14:	076b      	lsls	r3, r5, #29
 8000c16:	08f9      	lsrs	r1, r7, #3
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	08eb      	lsrs	r3, r5, #3
 8000c1c:	e680      	b.n	8000920 <__aeabi_dadd+0x294>
 8000c1e:	4661      	mov	r1, ip
 8000c20:	4339      	orrs	r1, r7
 8000c22:	d054      	beq.n	8000cce <__aeabi_dadd+0x642>
 8000c24:	4663      	mov	r3, ip
 8000c26:	08f9      	lsrs	r1, r7, #3
 8000c28:	075c      	lsls	r4, r3, #29
 8000c2a:	4321      	orrs	r1, r4
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	0004      	movs	r4, r0
 8000c30:	e654      	b.n	80008dc <__aeabi_dadd+0x250>
 8000c32:	464a      	mov	r2, r9
 8000c34:	1abd      	subs	r5, r7, r2
 8000c36:	42af      	cmp	r7, r5
 8000c38:	4189      	sbcs	r1, r1
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	4249      	negs	r1, r1
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	4698      	mov	r8, r3
 8000c44:	0004      	movs	r4, r0
 8000c46:	2601      	movs	r6, #1
 8000c48:	e56b      	b.n	8000722 <__aeabi_dadd+0x96>
 8000c4a:	464a      	mov	r2, r9
 8000c4c:	1bd5      	subs	r5, r2, r7
 8000c4e:	45a9      	cmp	r9, r5
 8000c50:	4189      	sbcs	r1, r1
 8000c52:	4662      	mov	r2, ip
 8000c54:	4249      	negs	r1, r1
 8000c56:	1a9a      	subs	r2, r3, r2
 8000c58:	1a52      	subs	r2, r2, r1
 8000c5a:	4690      	mov	r8, r2
 8000c5c:	0212      	lsls	r2, r2, #8
 8000c5e:	d532      	bpl.n	8000cc6 <__aeabi_dadd+0x63a>
 8000c60:	464a      	mov	r2, r9
 8000c62:	1abd      	subs	r5, r7, r2
 8000c64:	42af      	cmp	r7, r5
 8000c66:	4189      	sbcs	r1, r1
 8000c68:	4662      	mov	r2, ip
 8000c6a:	4249      	negs	r1, r1
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	1a5b      	subs	r3, r3, r1
 8000c70:	4698      	mov	r8, r3
 8000c72:	0004      	movs	r4, r0
 8000c74:	e584      	b.n	8000780 <__aeabi_dadd+0xf4>
 8000c76:	4663      	mov	r3, ip
 8000c78:	08f9      	lsrs	r1, r7, #3
 8000c7a:	075a      	lsls	r2, r3, #29
 8000c7c:	4311      	orrs	r1, r2
 8000c7e:	08db      	lsrs	r3, r3, #3
 8000c80:	e64e      	b.n	8000920 <__aeabi_dadd+0x294>
 8000c82:	08f9      	lsrs	r1, r7, #3
 8000c84:	0768      	lsls	r0, r5, #29
 8000c86:	4301      	orrs	r1, r0
 8000c88:	08eb      	lsrs	r3, r5, #3
 8000c8a:	e624      	b.n	80008d6 <__aeabi_dadd+0x24a>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	433a      	orrs	r2, r7
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x608>
 8000c92:	e698      	b.n	80009c6 <__aeabi_dadd+0x33a>
 8000c94:	464a      	mov	r2, r9
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	075a      	lsls	r2, r3, #29
 8000c9a:	4311      	orrs	r1, r2
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	031b      	lsls	r3, r3, #12
 8000ca2:	421a      	tst	r2, r3
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x62c>
 8000ca6:	4660      	mov	r0, ip
 8000ca8:	08c5      	lsrs	r5, r0, #3
 8000caa:	421d      	tst	r5, r3
 8000cac:	d104      	bne.n	8000cb8 <__aeabi_dadd+0x62c>
 8000cae:	4654      	mov	r4, sl
 8000cb0:	002a      	movs	r2, r5
 8000cb2:	08f9      	lsrs	r1, r7, #3
 8000cb4:	0743      	lsls	r3, r0, #29
 8000cb6:	4319      	orrs	r1, r3
 8000cb8:	0f4b      	lsrs	r3, r1, #29
 8000cba:	00c9      	lsls	r1, r1, #3
 8000cbc:	075b      	lsls	r3, r3, #29
 8000cbe:	08c9      	lsrs	r1, r1, #3
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	e62c      	b.n	8000920 <__aeabi_dadd+0x294>
 8000cc6:	4641      	mov	r1, r8
 8000cc8:	4329      	orrs	r1, r5
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x642>
 8000ccc:	e5fa      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	2400      	movs	r4, #0
 8000cd4:	e602      	b.n	80008dc <__aeabi_dadd+0x250>
 8000cd6:	076b      	lsls	r3, r5, #29
 8000cd8:	08f9      	lsrs	r1, r7, #3
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	08eb      	lsrs	r3, r5, #3
 8000cde:	e5fd      	b.n	80008dc <__aeabi_dadd+0x250>
 8000ce0:	4663      	mov	r3, ip
 8000ce2:	08f9      	lsrs	r1, r7, #3
 8000ce4:	075b      	lsls	r3, r3, #29
 8000ce6:	4319      	orrs	r1, r3
 8000ce8:	4663      	mov	r3, ip
 8000cea:	0004      	movs	r4, r0
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	e617      	b.n	8000920 <__aeabi_dadd+0x294>
 8000cf0:	003d      	movs	r5, r7
 8000cf2:	444d      	add	r5, r9
 8000cf4:	4463      	add	r3, ip
 8000cf6:	454d      	cmp	r5, r9
 8000cf8:	4189      	sbcs	r1, r1
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	4249      	negs	r1, r1
 8000cfe:	4488      	add	r8, r1
 8000d00:	4643      	mov	r3, r8
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_dadd+0x67c>
 8000d06:	e5dd      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000d08:	4642      	mov	r2, r8
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <__aeabi_dadd+0x6d0>)
 8000d0c:	2601      	movs	r6, #1
 8000d0e:	401a      	ands	r2, r3
 8000d10:	4690      	mov	r8, r2
 8000d12:	e5d7      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000d14:	0010      	movs	r0, r2
 8000d16:	001e      	movs	r6, r3
 8000d18:	3820      	subs	r0, #32
 8000d1a:	40c6      	lsrs	r6, r0
 8000d1c:	2a20      	cmp	r2, #32
 8000d1e:	d005      	beq.n	8000d2c <__aeabi_dadd+0x6a0>
 8000d20:	2040      	movs	r0, #64	; 0x40
 8000d22:	1a82      	subs	r2, r0, r2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	464a      	mov	r2, r9
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4691      	mov	r9, r2
 8000d2c:	464d      	mov	r5, r9
 8000d2e:	1e6b      	subs	r3, r5, #1
 8000d30:	419d      	sbcs	r5, r3
 8000d32:	4335      	orrs	r5, r6
 8000d34:	e621      	b.n	800097a <__aeabi_dadd+0x2ee>
 8000d36:	0002      	movs	r2, r0
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	e540      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000d3e:	464a      	mov	r2, r9
 8000d40:	19d5      	adds	r5, r2, r7
 8000d42:	42bd      	cmp	r5, r7
 8000d44:	4189      	sbcs	r1, r1
 8000d46:	4463      	add	r3, ip
 8000d48:	4698      	mov	r8, r3
 8000d4a:	4249      	negs	r1, r1
 8000d4c:	4488      	add	r8, r1
 8000d4e:	e5b3      	b.n	80008b8 <__aeabi_dadd+0x22c>
 8000d50:	2100      	movs	r1, #0
 8000d52:	4a01      	ldr	r2, [pc, #4]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000d54:	000b      	movs	r3, r1
 8000d56:	e533      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000d58:	000007ff 	.word	0x000007ff
 8000d5c:	ff7fffff 	.word	0xff7fffff

08000d60 <__aeabi_dmul>:
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	4657      	mov	r7, sl
 8000d64:	464e      	mov	r6, r9
 8000d66:	4645      	mov	r5, r8
 8000d68:	46de      	mov	lr, fp
 8000d6a:	b5e0      	push	{r5, r6, r7, lr}
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	030c      	lsls	r4, r1, #12
 8000d70:	004b      	lsls	r3, r1, #1
 8000d72:	0006      	movs	r6, r0
 8000d74:	4692      	mov	sl, r2
 8000d76:	b087      	sub	sp, #28
 8000d78:	0b24      	lsrs	r4, r4, #12
 8000d7a:	0d5b      	lsrs	r3, r3, #21
 8000d7c:	0fcf      	lsrs	r7, r1, #31
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d06c      	beq.n	8000e5c <__aeabi_dmul+0xfc>
 8000d82:	4add      	ldr	r2, [pc, #884]	; (80010f8 <__aeabi_dmul+0x398>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dmul+0x2a>
 8000d88:	e086      	b.n	8000e98 <__aeabi_dmul+0x138>
 8000d8a:	0f42      	lsrs	r2, r0, #29
 8000d8c:	00e4      	lsls	r4, r4, #3
 8000d8e:	4314      	orrs	r4, r2
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	0412      	lsls	r2, r2, #16
 8000d94:	4314      	orrs	r4, r2
 8000d96:	4ad9      	ldr	r2, [pc, #868]	; (80010fc <__aeabi_dmul+0x39c>)
 8000d98:	00c5      	lsls	r5, r0, #3
 8000d9a:	4694      	mov	ip, r2
 8000d9c:	4463      	add	r3, ip
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	4699      	mov	r9, r3
 8000da4:	469b      	mov	fp, r3
 8000da6:	4643      	mov	r3, r8
 8000da8:	4642      	mov	r2, r8
 8000daa:	031e      	lsls	r6, r3, #12
 8000dac:	0fd2      	lsrs	r2, r2, #31
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4650      	mov	r0, sl
 8000db2:	4690      	mov	r8, r2
 8000db4:	0b36      	lsrs	r6, r6, #12
 8000db6:	0d5b      	lsrs	r3, r3, #21
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dmul+0x5c>
 8000dba:	e078      	b.n	8000eae <__aeabi_dmul+0x14e>
 8000dbc:	4ace      	ldr	r2, [pc, #824]	; (80010f8 <__aeabi_dmul+0x398>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01d      	beq.n	8000dfe <__aeabi_dmul+0x9e>
 8000dc2:	49ce      	ldr	r1, [pc, #824]	; (80010fc <__aeabi_dmul+0x39c>)
 8000dc4:	0f42      	lsrs	r2, r0, #29
 8000dc6:	468c      	mov	ip, r1
 8000dc8:	9900      	ldr	r1, [sp, #0]
 8000dca:	4463      	add	r3, ip
 8000dcc:	00f6      	lsls	r6, r6, #3
 8000dce:	468c      	mov	ip, r1
 8000dd0:	4316      	orrs	r6, r2
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	449c      	add	ip, r3
 8000dd6:	0412      	lsls	r2, r2, #16
 8000dd8:	4663      	mov	r3, ip
 8000dda:	4316      	orrs	r6, r2
 8000ddc:	00c2      	lsls	r2, r0, #3
 8000dde:	2000      	movs	r0, #0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	9900      	ldr	r1, [sp, #0]
 8000de4:	4643      	mov	r3, r8
 8000de6:	3101      	adds	r1, #1
 8000de8:	468c      	mov	ip, r1
 8000dea:	4649      	mov	r1, r9
 8000dec:	407b      	eors	r3, r7
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	290f      	cmp	r1, #15
 8000df2:	d900      	bls.n	8000df6 <__aeabi_dmul+0x96>
 8000df4:	e07e      	b.n	8000ef4 <__aeabi_dmul+0x194>
 8000df6:	4bc2      	ldr	r3, [pc, #776]	; (8001100 <__aeabi_dmul+0x3a0>)
 8000df8:	0089      	lsls	r1, r1, #2
 8000dfa:	5859      	ldr	r1, [r3, r1]
 8000dfc:	468f      	mov	pc, r1
 8000dfe:	4652      	mov	r2, sl
 8000e00:	9b00      	ldr	r3, [sp, #0]
 8000e02:	4332      	orrs	r2, r6
 8000e04:	d000      	beq.n	8000e08 <__aeabi_dmul+0xa8>
 8000e06:	e156      	b.n	80010b6 <__aeabi_dmul+0x356>
 8000e08:	49bb      	ldr	r1, [pc, #748]	; (80010f8 <__aeabi_dmul+0x398>)
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	4463      	add	r3, ip
 8000e10:	4649      	mov	r1, r9
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2302      	movs	r3, #2
 8000e16:	4319      	orrs	r1, r3
 8000e18:	4689      	mov	r9, r1
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	e7e1      	b.n	8000de2 <__aeabi_dmul+0x82>
 8000e1e:	4643      	mov	r3, r8
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	0034      	movs	r4, r6
 8000e24:	0015      	movs	r5, r2
 8000e26:	4683      	mov	fp, r0
 8000e28:	465b      	mov	r3, fp
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d05e      	beq.n	8000eec <__aeabi_dmul+0x18c>
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dmul+0xd4>
 8000e32:	e1f3      	b.n	800121c <__aeabi_dmul+0x4bc>
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d000      	beq.n	8000e3a <__aeabi_dmul+0xda>
 8000e38:	e118      	b.n	800106c <__aeabi_dmul+0x30c>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2400      	movs	r4, #0
 8000e3e:	2500      	movs	r5, #0
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	0512      	lsls	r2, r2, #20
 8000e44:	4322      	orrs	r2, r4
 8000e46:	07db      	lsls	r3, r3, #31
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	0028      	movs	r0, r5
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	b007      	add	sp, #28
 8000e50:	bcf0      	pop	{r4, r5, r6, r7}
 8000e52:	46bb      	mov	fp, r7
 8000e54:	46b2      	mov	sl, r6
 8000e56:	46a9      	mov	r9, r5
 8000e58:	46a0      	mov	r8, r4
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5c:	0025      	movs	r5, r4
 8000e5e:	4305      	orrs	r5, r0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dmul+0x104>
 8000e62:	e141      	b.n	80010e8 <__aeabi_dmul+0x388>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dmul+0x10a>
 8000e68:	e1ad      	b.n	80011c6 <__aeabi_dmul+0x466>
 8000e6a:	0020      	movs	r0, r4
 8000e6c:	f000 fa9c 	bl	80013a8 <__clzsi2>
 8000e70:	0001      	movs	r1, r0
 8000e72:	0002      	movs	r2, r0
 8000e74:	390b      	subs	r1, #11
 8000e76:	231d      	movs	r3, #29
 8000e78:	0010      	movs	r0, r2
 8000e7a:	1a5b      	subs	r3, r3, r1
 8000e7c:	0031      	movs	r1, r6
 8000e7e:	0035      	movs	r5, r6
 8000e80:	3808      	subs	r0, #8
 8000e82:	4084      	lsls	r4, r0
 8000e84:	40d9      	lsrs	r1, r3
 8000e86:	4085      	lsls	r5, r0
 8000e88:	430c      	orrs	r4, r1
 8000e8a:	489e      	ldr	r0, [pc, #632]	; (8001104 <__aeabi_dmul+0x3a4>)
 8000e8c:	1a83      	subs	r3, r0, r2
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	4699      	mov	r9, r3
 8000e94:	469b      	mov	fp, r3
 8000e96:	e786      	b.n	8000da6 <__aeabi_dmul+0x46>
 8000e98:	0005      	movs	r5, r0
 8000e9a:	4325      	orrs	r5, r4
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_dmul+0x140>
 8000e9e:	e11c      	b.n	80010da <__aeabi_dmul+0x37a>
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	4691      	mov	r9, r2
 8000eaa:	469b      	mov	fp, r3
 8000eac:	e77b      	b.n	8000da6 <__aeabi_dmul+0x46>
 8000eae:	4652      	mov	r2, sl
 8000eb0:	4332      	orrs	r2, r6
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dmul+0x156>
 8000eb4:	e10a      	b.n	80010cc <__aeabi_dmul+0x36c>
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dmul+0x15c>
 8000eba:	e176      	b.n	80011aa <__aeabi_dmul+0x44a>
 8000ebc:	0030      	movs	r0, r6
 8000ebe:	f000 fa73 	bl	80013a8 <__clzsi2>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	3a0b      	subs	r2, #11
 8000ec6:	231d      	movs	r3, #29
 8000ec8:	0001      	movs	r1, r0
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	4652      	mov	r2, sl
 8000ece:	3908      	subs	r1, #8
 8000ed0:	40da      	lsrs	r2, r3
 8000ed2:	408e      	lsls	r6, r1
 8000ed4:	4316      	orrs	r6, r2
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	408a      	lsls	r2, r1
 8000eda:	9b00      	ldr	r3, [sp, #0]
 8000edc:	4989      	ldr	r1, [pc, #548]	; (8001104 <__aeabi_dmul+0x3a4>)
 8000ede:	1a18      	subs	r0, r3, r0
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	468c      	mov	ip, r1
 8000ee4:	4463      	add	r3, ip
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	e77a      	b.n	8000de2 <__aeabi_dmul+0x82>
 8000eec:	2400      	movs	r4, #0
 8000eee:	2500      	movs	r5, #0
 8000ef0:	4a81      	ldr	r2, [pc, #516]	; (80010f8 <__aeabi_dmul+0x398>)
 8000ef2:	e7a5      	b.n	8000e40 <__aeabi_dmul+0xe0>
 8000ef4:	0c2f      	lsrs	r7, r5, #16
 8000ef6:	042d      	lsls	r5, r5, #16
 8000ef8:	0c2d      	lsrs	r5, r5, #16
 8000efa:	002b      	movs	r3, r5
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	0412      	lsls	r2, r2, #16
 8000f00:	0c12      	lsrs	r2, r2, #16
 8000f02:	4353      	muls	r3, r2
 8000f04:	4698      	mov	r8, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	0028      	movs	r0, r5
 8000f0a:	437b      	muls	r3, r7
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	4348      	muls	r0, r1
 8000f10:	4448      	add	r0, r9
 8000f12:	4683      	mov	fp, r0
 8000f14:	4640      	mov	r0, r8
 8000f16:	000b      	movs	r3, r1
 8000f18:	0c00      	lsrs	r0, r0, #16
 8000f1a:	4682      	mov	sl, r0
 8000f1c:	4658      	mov	r0, fp
 8000f1e:	437b      	muls	r3, r7
 8000f20:	4450      	add	r0, sl
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	4581      	cmp	r9, r0
 8000f26:	d906      	bls.n	8000f36 <__aeabi_dmul+0x1d6>
 8000f28:	469a      	mov	sl, r3
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	025b      	lsls	r3, r3, #9
 8000f2e:	4699      	mov	r9, r3
 8000f30:	44ca      	add	sl, r9
 8000f32:	4653      	mov	r3, sl
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	0c03      	lsrs	r3, r0, #16
 8000f38:	469b      	mov	fp, r3
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	0c1b      	lsrs	r3, r3, #16
 8000f42:	4698      	mov	r8, r3
 8000f44:	0003      	movs	r3, r0
 8000f46:	4443      	add	r3, r8
 8000f48:	9304      	str	r3, [sp, #16]
 8000f4a:	0c33      	lsrs	r3, r6, #16
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	002b      	movs	r3, r5
 8000f50:	0436      	lsls	r6, r6, #16
 8000f52:	0c36      	lsrs	r6, r6, #16
 8000f54:	4373      	muls	r3, r6
 8000f56:	4698      	mov	r8, r3
 8000f58:	0033      	movs	r3, r6
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469a      	mov	sl, r3
 8000f5e:	464b      	mov	r3, r9
 8000f60:	435d      	muls	r5, r3
 8000f62:	435f      	muls	r7, r3
 8000f64:	4643      	mov	r3, r8
 8000f66:	4455      	add	r5, sl
 8000f68:	0c18      	lsrs	r0, r3, #16
 8000f6a:	1940      	adds	r0, r0, r5
 8000f6c:	4582      	cmp	sl, r0
 8000f6e:	d903      	bls.n	8000f78 <__aeabi_dmul+0x218>
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	469a      	mov	sl, r3
 8000f76:	4457      	add	r7, sl
 8000f78:	0c05      	lsrs	r5, r0, #16
 8000f7a:	19eb      	adds	r3, r5, r7
 8000f7c:	9305      	str	r3, [sp, #20]
 8000f7e:	4643      	mov	r3, r8
 8000f80:	041d      	lsls	r5, r3, #16
 8000f82:	0c2d      	lsrs	r5, r5, #16
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	1940      	adds	r0, r0, r5
 8000f88:	0c25      	lsrs	r5, r4, #16
 8000f8a:	0424      	lsls	r4, r4, #16
 8000f8c:	0c24      	lsrs	r4, r4, #16
 8000f8e:	0027      	movs	r7, r4
 8000f90:	4357      	muls	r7, r2
 8000f92:	436a      	muls	r2, r5
 8000f94:	4690      	mov	r8, r2
 8000f96:	002a      	movs	r2, r5
 8000f98:	0c3b      	lsrs	r3, r7, #16
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	434a      	muls	r2, r1
 8000f9e:	4361      	muls	r1, r4
 8000fa0:	4441      	add	r1, r8
 8000fa2:	4451      	add	r1, sl
 8000fa4:	4483      	add	fp, r0
 8000fa6:	4588      	cmp	r8, r1
 8000fa8:	d903      	bls.n	8000fb2 <__aeabi_dmul+0x252>
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	4698      	mov	r8, r3
 8000fb0:	4442      	add	r2, r8
 8000fb2:	043f      	lsls	r7, r7, #16
 8000fb4:	0c0b      	lsrs	r3, r1, #16
 8000fb6:	0c3f      	lsrs	r7, r7, #16
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	19c9      	adds	r1, r1, r7
 8000fbc:	0027      	movs	r7, r4
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	4377      	muls	r7, r6
 8000fc4:	435c      	muls	r4, r3
 8000fc6:	436e      	muls	r6, r5
 8000fc8:	435d      	muls	r5, r3
 8000fca:	0c3b      	lsrs	r3, r7, #16
 8000fcc:	4699      	mov	r9, r3
 8000fce:	19a4      	adds	r4, r4, r6
 8000fd0:	444c      	add	r4, r9
 8000fd2:	4442      	add	r2, r8
 8000fd4:	9503      	str	r5, [sp, #12]
 8000fd6:	42a6      	cmp	r6, r4
 8000fd8:	d904      	bls.n	8000fe4 <__aeabi_dmul+0x284>
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	4698      	mov	r8, r3
 8000fe0:	4445      	add	r5, r8
 8000fe2:	9503      	str	r5, [sp, #12]
 8000fe4:	9b02      	ldr	r3, [sp, #8]
 8000fe6:	043f      	lsls	r7, r7, #16
 8000fe8:	445b      	add	r3, fp
 8000fea:	001e      	movs	r6, r3
 8000fec:	4283      	cmp	r3, r0
 8000fee:	4180      	sbcs	r0, r0
 8000ff0:	0423      	lsls	r3, r4, #16
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	9b05      	ldr	r3, [sp, #20]
 8000ff6:	0c3f      	lsrs	r7, r7, #16
 8000ff8:	4447      	add	r7, r8
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	1876      	adds	r6, r6, r1
 8000ffe:	428e      	cmp	r6, r1
 8001000:	4189      	sbcs	r1, r1
 8001002:	4447      	add	r7, r8
 8001004:	4240      	negs	r0, r0
 8001006:	183d      	adds	r5, r7, r0
 8001008:	46a8      	mov	r8, r5
 800100a:	4693      	mov	fp, r2
 800100c:	4249      	negs	r1, r1
 800100e:	468a      	mov	sl, r1
 8001010:	44c3      	add	fp, r8
 8001012:	429f      	cmp	r7, r3
 8001014:	41bf      	sbcs	r7, r7
 8001016:	4580      	cmp	r8, r0
 8001018:	4180      	sbcs	r0, r0
 800101a:	9b03      	ldr	r3, [sp, #12]
 800101c:	44da      	add	sl, fp
 800101e:	4698      	mov	r8, r3
 8001020:	4653      	mov	r3, sl
 8001022:	4240      	negs	r0, r0
 8001024:	427f      	negs	r7, r7
 8001026:	4307      	orrs	r7, r0
 8001028:	0c24      	lsrs	r4, r4, #16
 800102a:	4593      	cmp	fp, r2
 800102c:	4192      	sbcs	r2, r2
 800102e:	458a      	cmp	sl, r1
 8001030:	4189      	sbcs	r1, r1
 8001032:	193f      	adds	r7, r7, r4
 8001034:	0ddc      	lsrs	r4, r3, #23
 8001036:	9b04      	ldr	r3, [sp, #16]
 8001038:	0275      	lsls	r5, r6, #9
 800103a:	431d      	orrs	r5, r3
 800103c:	1e68      	subs	r0, r5, #1
 800103e:	4185      	sbcs	r5, r0
 8001040:	4653      	mov	r3, sl
 8001042:	4252      	negs	r2, r2
 8001044:	4249      	negs	r1, r1
 8001046:	430a      	orrs	r2, r1
 8001048:	18bf      	adds	r7, r7, r2
 800104a:	4447      	add	r7, r8
 800104c:	0df6      	lsrs	r6, r6, #23
 800104e:	027f      	lsls	r7, r7, #9
 8001050:	4335      	orrs	r5, r6
 8001052:	025a      	lsls	r2, r3, #9
 8001054:	433c      	orrs	r4, r7
 8001056:	4315      	orrs	r5, r2
 8001058:	01fb      	lsls	r3, r7, #7
 800105a:	d400      	bmi.n	800105e <__aeabi_dmul+0x2fe>
 800105c:	e0c1      	b.n	80011e2 <__aeabi_dmul+0x482>
 800105e:	2101      	movs	r1, #1
 8001060:	086a      	lsrs	r2, r5, #1
 8001062:	400d      	ands	r5, r1
 8001064:	4315      	orrs	r5, r2
 8001066:	07e2      	lsls	r2, r4, #31
 8001068:	4315      	orrs	r5, r2
 800106a:	0864      	lsrs	r4, r4, #1
 800106c:	4926      	ldr	r1, [pc, #152]	; (8001108 <__aeabi_dmul+0x3a8>)
 800106e:	4461      	add	r1, ip
 8001070:	2900      	cmp	r1, #0
 8001072:	dd56      	ble.n	8001122 <__aeabi_dmul+0x3c2>
 8001074:	076b      	lsls	r3, r5, #29
 8001076:	d009      	beq.n	800108c <__aeabi_dmul+0x32c>
 8001078:	220f      	movs	r2, #15
 800107a:	402a      	ands	r2, r5
 800107c:	2a04      	cmp	r2, #4
 800107e:	d005      	beq.n	800108c <__aeabi_dmul+0x32c>
 8001080:	1d2a      	adds	r2, r5, #4
 8001082:	42aa      	cmp	r2, r5
 8001084:	41ad      	sbcs	r5, r5
 8001086:	426d      	negs	r5, r5
 8001088:	1964      	adds	r4, r4, r5
 800108a:	0015      	movs	r5, r2
 800108c:	01e3      	lsls	r3, r4, #7
 800108e:	d504      	bpl.n	800109a <__aeabi_dmul+0x33a>
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <__aeabi_dmul+0x3ac>)
 8001094:	00c9      	lsls	r1, r1, #3
 8001096:	4014      	ands	r4, r2
 8001098:	4461      	add	r1, ip
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <__aeabi_dmul+0x3b0>)
 800109c:	4291      	cmp	r1, r2
 800109e:	dd00      	ble.n	80010a2 <__aeabi_dmul+0x342>
 80010a0:	e724      	b.n	8000eec <__aeabi_dmul+0x18c>
 80010a2:	0762      	lsls	r2, r4, #29
 80010a4:	08ed      	lsrs	r5, r5, #3
 80010a6:	0264      	lsls	r4, r4, #9
 80010a8:	0549      	lsls	r1, r1, #21
 80010aa:	4315      	orrs	r5, r2
 80010ac:	0b24      	lsrs	r4, r4, #12
 80010ae:	0d4a      	lsrs	r2, r1, #21
 80010b0:	e6c6      	b.n	8000e40 <__aeabi_dmul+0xe0>
 80010b2:	9701      	str	r7, [sp, #4]
 80010b4:	e6b8      	b.n	8000e28 <__aeabi_dmul+0xc8>
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <__aeabi_dmul+0x398>)
 80010b8:	2003      	movs	r0, #3
 80010ba:	4694      	mov	ip, r2
 80010bc:	4463      	add	r3, ip
 80010be:	464a      	mov	r2, r9
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2303      	movs	r3, #3
 80010c4:	431a      	orrs	r2, r3
 80010c6:	4691      	mov	r9, r2
 80010c8:	4652      	mov	r2, sl
 80010ca:	e68a      	b.n	8000de2 <__aeabi_dmul+0x82>
 80010cc:	4649      	mov	r1, r9
 80010ce:	2301      	movs	r3, #1
 80010d0:	4319      	orrs	r1, r3
 80010d2:	4689      	mov	r9, r1
 80010d4:	2600      	movs	r6, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	e683      	b.n	8000de2 <__aeabi_dmul+0x82>
 80010da:	220c      	movs	r2, #12
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2303      	movs	r3, #3
 80010e0:	0005      	movs	r5, r0
 80010e2:	4691      	mov	r9, r2
 80010e4:	469b      	mov	fp, r3
 80010e6:	e65e      	b.n	8000da6 <__aeabi_dmul+0x46>
 80010e8:	2304      	movs	r3, #4
 80010ea:	4699      	mov	r9, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	2400      	movs	r4, #0
 80010f4:	469b      	mov	fp, r3
 80010f6:	e656      	b.n	8000da6 <__aeabi_dmul+0x46>
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	fffffc01 	.word	0xfffffc01
 8001100:	08006a1c 	.word	0x08006a1c
 8001104:	fffffc0d 	.word	0xfffffc0d
 8001108:	000003ff 	.word	0x000003ff
 800110c:	feffffff 	.word	0xfeffffff
 8001110:	000007fe 	.word	0x000007fe
 8001114:	2300      	movs	r3, #0
 8001116:	2480      	movs	r4, #128	; 0x80
 8001118:	2500      	movs	r5, #0
 800111a:	4a44      	ldr	r2, [pc, #272]	; (800122c <__aeabi_dmul+0x4cc>)
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	0324      	lsls	r4, r4, #12
 8001120:	e68e      	b.n	8000e40 <__aeabi_dmul+0xe0>
 8001122:	2001      	movs	r0, #1
 8001124:	1a40      	subs	r0, r0, r1
 8001126:	2838      	cmp	r0, #56	; 0x38
 8001128:	dd00      	ble.n	800112c <__aeabi_dmul+0x3cc>
 800112a:	e686      	b.n	8000e3a <__aeabi_dmul+0xda>
 800112c:	281f      	cmp	r0, #31
 800112e:	dd5b      	ble.n	80011e8 <__aeabi_dmul+0x488>
 8001130:	221f      	movs	r2, #31
 8001132:	0023      	movs	r3, r4
 8001134:	4252      	negs	r2, r2
 8001136:	1a51      	subs	r1, r2, r1
 8001138:	40cb      	lsrs	r3, r1
 800113a:	0019      	movs	r1, r3
 800113c:	2820      	cmp	r0, #32
 800113e:	d003      	beq.n	8001148 <__aeabi_dmul+0x3e8>
 8001140:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <__aeabi_dmul+0x4d0>)
 8001142:	4462      	add	r2, ip
 8001144:	4094      	lsls	r4, r2
 8001146:	4325      	orrs	r5, r4
 8001148:	1e6a      	subs	r2, r5, #1
 800114a:	4195      	sbcs	r5, r2
 800114c:	002a      	movs	r2, r5
 800114e:	430a      	orrs	r2, r1
 8001150:	2107      	movs	r1, #7
 8001152:	000d      	movs	r5, r1
 8001154:	2400      	movs	r4, #0
 8001156:	4015      	ands	r5, r2
 8001158:	4211      	tst	r1, r2
 800115a:	d05b      	beq.n	8001214 <__aeabi_dmul+0x4b4>
 800115c:	210f      	movs	r1, #15
 800115e:	2400      	movs	r4, #0
 8001160:	4011      	ands	r1, r2
 8001162:	2904      	cmp	r1, #4
 8001164:	d053      	beq.n	800120e <__aeabi_dmul+0x4ae>
 8001166:	1d11      	adds	r1, r2, #4
 8001168:	4291      	cmp	r1, r2
 800116a:	4192      	sbcs	r2, r2
 800116c:	4252      	negs	r2, r2
 800116e:	18a4      	adds	r4, r4, r2
 8001170:	000a      	movs	r2, r1
 8001172:	0223      	lsls	r3, r4, #8
 8001174:	d54b      	bpl.n	800120e <__aeabi_dmul+0x4ae>
 8001176:	2201      	movs	r2, #1
 8001178:	2400      	movs	r4, #0
 800117a:	2500      	movs	r5, #0
 800117c:	e660      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	031b      	lsls	r3, r3, #12
 8001182:	421c      	tst	r4, r3
 8001184:	d009      	beq.n	800119a <__aeabi_dmul+0x43a>
 8001186:	421e      	tst	r6, r3
 8001188:	d107      	bne.n	800119a <__aeabi_dmul+0x43a>
 800118a:	4333      	orrs	r3, r6
 800118c:	031c      	lsls	r4, r3, #12
 800118e:	4643      	mov	r3, r8
 8001190:	0015      	movs	r5, r2
 8001192:	0b24      	lsrs	r4, r4, #12
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <__aeabi_dmul+0x4cc>)
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	e652      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	0312      	lsls	r2, r2, #12
 800119e:	4314      	orrs	r4, r2
 80011a0:	0324      	lsls	r4, r4, #12
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <__aeabi_dmul+0x4cc>)
 80011a4:	0b24      	lsrs	r4, r4, #12
 80011a6:	9701      	str	r7, [sp, #4]
 80011a8:	e64a      	b.n	8000e40 <__aeabi_dmul+0xe0>
 80011aa:	f000 f8fd 	bl	80013a8 <__clzsi2>
 80011ae:	0003      	movs	r3, r0
 80011b0:	001a      	movs	r2, r3
 80011b2:	3215      	adds	r2, #21
 80011b4:	3020      	adds	r0, #32
 80011b6:	2a1c      	cmp	r2, #28
 80011b8:	dc00      	bgt.n	80011bc <__aeabi_dmul+0x45c>
 80011ba:	e684      	b.n	8000ec6 <__aeabi_dmul+0x166>
 80011bc:	4656      	mov	r6, sl
 80011be:	3b08      	subs	r3, #8
 80011c0:	2200      	movs	r2, #0
 80011c2:	409e      	lsls	r6, r3
 80011c4:	e689      	b.n	8000eda <__aeabi_dmul+0x17a>
 80011c6:	f000 f8ef 	bl	80013a8 <__clzsi2>
 80011ca:	0001      	movs	r1, r0
 80011cc:	0002      	movs	r2, r0
 80011ce:	3115      	adds	r1, #21
 80011d0:	3220      	adds	r2, #32
 80011d2:	291c      	cmp	r1, #28
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dmul+0x478>
 80011d6:	e64e      	b.n	8000e76 <__aeabi_dmul+0x116>
 80011d8:	0034      	movs	r4, r6
 80011da:	3808      	subs	r0, #8
 80011dc:	2500      	movs	r5, #0
 80011de:	4084      	lsls	r4, r0
 80011e0:	e653      	b.n	8000e8a <__aeabi_dmul+0x12a>
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	469c      	mov	ip, r3
 80011e6:	e741      	b.n	800106c <__aeabi_dmul+0x30c>
 80011e8:	4912      	ldr	r1, [pc, #72]	; (8001234 <__aeabi_dmul+0x4d4>)
 80011ea:	0022      	movs	r2, r4
 80011ec:	4461      	add	r1, ip
 80011ee:	002e      	movs	r6, r5
 80011f0:	408d      	lsls	r5, r1
 80011f2:	408a      	lsls	r2, r1
 80011f4:	40c6      	lsrs	r6, r0
 80011f6:	1e69      	subs	r1, r5, #1
 80011f8:	418d      	sbcs	r5, r1
 80011fa:	4332      	orrs	r2, r6
 80011fc:	432a      	orrs	r2, r5
 80011fe:	40c4      	lsrs	r4, r0
 8001200:	0753      	lsls	r3, r2, #29
 8001202:	d0b6      	beq.n	8001172 <__aeabi_dmul+0x412>
 8001204:	210f      	movs	r1, #15
 8001206:	4011      	ands	r1, r2
 8001208:	2904      	cmp	r1, #4
 800120a:	d1ac      	bne.n	8001166 <__aeabi_dmul+0x406>
 800120c:	e7b1      	b.n	8001172 <__aeabi_dmul+0x412>
 800120e:	0765      	lsls	r5, r4, #29
 8001210:	0264      	lsls	r4, r4, #9
 8001212:	0b24      	lsrs	r4, r4, #12
 8001214:	08d2      	lsrs	r2, r2, #3
 8001216:	4315      	orrs	r5, r2
 8001218:	2200      	movs	r2, #0
 800121a:	e611      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0312      	lsls	r2, r2, #12
 8001220:	4314      	orrs	r4, r2
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	4a01      	ldr	r2, [pc, #4]	; (800122c <__aeabi_dmul+0x4cc>)
 8001226:	0b24      	lsrs	r4, r4, #12
 8001228:	e60a      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	000007ff 	.word	0x000007ff
 8001230:	0000043e 	.word	0x0000043e
 8001234:	0000041e 	.word	0x0000041e

08001238 <__aeabi_i2d>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	2800      	cmp	r0, #0
 800123c:	d016      	beq.n	800126c <__aeabi_i2d+0x34>
 800123e:	17c3      	asrs	r3, r0, #31
 8001240:	18c5      	adds	r5, r0, r3
 8001242:	405d      	eors	r5, r3
 8001244:	0fc4      	lsrs	r4, r0, #31
 8001246:	0028      	movs	r0, r5
 8001248:	f000 f8ae 	bl	80013a8 <__clzsi2>
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <__aeabi_i2d+0x5c>)
 800124e:	1a12      	subs	r2, r2, r0
 8001250:	280a      	cmp	r0, #10
 8001252:	dc16      	bgt.n	8001282 <__aeabi_i2d+0x4a>
 8001254:	0003      	movs	r3, r0
 8001256:	002e      	movs	r6, r5
 8001258:	3315      	adds	r3, #21
 800125a:	409e      	lsls	r6, r3
 800125c:	230b      	movs	r3, #11
 800125e:	1a18      	subs	r0, r3, r0
 8001260:	40c5      	lsrs	r5, r0
 8001262:	0553      	lsls	r3, r2, #21
 8001264:	032d      	lsls	r5, r5, #12
 8001266:	0b2d      	lsrs	r5, r5, #12
 8001268:	0d5b      	lsrs	r3, r3, #21
 800126a:	e003      	b.n	8001274 <__aeabi_i2d+0x3c>
 800126c:	2400      	movs	r4, #0
 800126e:	2300      	movs	r3, #0
 8001270:	2500      	movs	r5, #0
 8001272:	2600      	movs	r6, #0
 8001274:	051b      	lsls	r3, r3, #20
 8001276:	432b      	orrs	r3, r5
 8001278:	07e4      	lsls	r4, r4, #31
 800127a:	4323      	orrs	r3, r4
 800127c:	0030      	movs	r0, r6
 800127e:	0019      	movs	r1, r3
 8001280:	bd70      	pop	{r4, r5, r6, pc}
 8001282:	380b      	subs	r0, #11
 8001284:	4085      	lsls	r5, r0
 8001286:	0553      	lsls	r3, r2, #21
 8001288:	032d      	lsls	r5, r5, #12
 800128a:	2600      	movs	r6, #0
 800128c:	0b2d      	lsrs	r5, r5, #12
 800128e:	0d5b      	lsrs	r3, r3, #21
 8001290:	e7f0      	b.n	8001274 <__aeabi_i2d+0x3c>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	0000041e 	.word	0x0000041e

08001298 <__aeabi_d2f>:
 8001298:	0002      	movs	r2, r0
 800129a:	004b      	lsls	r3, r1, #1
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	0308      	lsls	r0, r1, #12
 80012a0:	0d5b      	lsrs	r3, r3, #21
 80012a2:	4e3d      	ldr	r6, [pc, #244]	; (8001398 <__aeabi_d2f+0x100>)
 80012a4:	0fcc      	lsrs	r4, r1, #31
 80012a6:	0a40      	lsrs	r0, r0, #9
 80012a8:	0f51      	lsrs	r1, r2, #29
 80012aa:	1c5f      	adds	r7, r3, #1
 80012ac:	4308      	orrs	r0, r1
 80012ae:	00d5      	lsls	r5, r2, #3
 80012b0:	4237      	tst	r7, r6
 80012b2:	d00a      	beq.n	80012ca <__aeabi_d2f+0x32>
 80012b4:	4939      	ldr	r1, [pc, #228]	; (800139c <__aeabi_d2f+0x104>)
 80012b6:	185e      	adds	r6, r3, r1
 80012b8:	2efe      	cmp	r6, #254	; 0xfe
 80012ba:	dd16      	ble.n	80012ea <__aeabi_d2f+0x52>
 80012bc:	23ff      	movs	r3, #255	; 0xff
 80012be:	2100      	movs	r1, #0
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	430b      	orrs	r3, r1
 80012c4:	07e0      	lsls	r0, r4, #31
 80012c6:	4318      	orrs	r0, r3
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <__aeabi_d2f+0x44>
 80012ce:	4328      	orrs	r0, r5
 80012d0:	d027      	beq.n	8001322 <__aeabi_d2f+0x8a>
 80012d2:	2105      	movs	r1, #5
 80012d4:	0189      	lsls	r1, r1, #6
 80012d6:	0a49      	lsrs	r1, r1, #9
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e7f1      	b.n	80012c0 <__aeabi_d2f+0x28>
 80012dc:	4305      	orrs	r5, r0
 80012de:	d0ed      	beq.n	80012bc <__aeabi_d2f+0x24>
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	03c9      	lsls	r1, r1, #15
 80012e4:	23ff      	movs	r3, #255	; 0xff
 80012e6:	4301      	orrs	r1, r0
 80012e8:	e7ea      	b.n	80012c0 <__aeabi_d2f+0x28>
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	dd1c      	ble.n	8001328 <__aeabi_d2f+0x90>
 80012ee:	0192      	lsls	r2, r2, #6
 80012f0:	0011      	movs	r1, r2
 80012f2:	1e4a      	subs	r2, r1, #1
 80012f4:	4191      	sbcs	r1, r2
 80012f6:	00c0      	lsls	r0, r0, #3
 80012f8:	0f6d      	lsrs	r5, r5, #29
 80012fa:	4301      	orrs	r1, r0
 80012fc:	4329      	orrs	r1, r5
 80012fe:	074b      	lsls	r3, r1, #29
 8001300:	d048      	beq.n	8001394 <__aeabi_d2f+0xfc>
 8001302:	230f      	movs	r3, #15
 8001304:	400b      	ands	r3, r1
 8001306:	2b04      	cmp	r3, #4
 8001308:	d000      	beq.n	800130c <__aeabi_d2f+0x74>
 800130a:	3104      	adds	r1, #4
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	04db      	lsls	r3, r3, #19
 8001310:	400b      	ands	r3, r1
 8001312:	d03f      	beq.n	8001394 <__aeabi_d2f+0xfc>
 8001314:	1c72      	adds	r2, r6, #1
 8001316:	2efe      	cmp	r6, #254	; 0xfe
 8001318:	d0d0      	beq.n	80012bc <__aeabi_d2f+0x24>
 800131a:	0189      	lsls	r1, r1, #6
 800131c:	0a49      	lsrs	r1, r1, #9
 800131e:	b2d3      	uxtb	r3, r2
 8001320:	e7ce      	b.n	80012c0 <__aeabi_d2f+0x28>
 8001322:	2300      	movs	r3, #0
 8001324:	2100      	movs	r1, #0
 8001326:	e7cb      	b.n	80012c0 <__aeabi_d2f+0x28>
 8001328:	0032      	movs	r2, r6
 800132a:	3217      	adds	r2, #23
 800132c:	db22      	blt.n	8001374 <__aeabi_d2f+0xdc>
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	221e      	movs	r2, #30
 8001332:	0409      	lsls	r1, r1, #16
 8001334:	4308      	orrs	r0, r1
 8001336:	1b92      	subs	r2, r2, r6
 8001338:	2a1f      	cmp	r2, #31
 800133a:	dd1d      	ble.n	8001378 <__aeabi_d2f+0xe0>
 800133c:	2102      	movs	r1, #2
 800133e:	4249      	negs	r1, r1
 8001340:	1b8e      	subs	r6, r1, r6
 8001342:	0001      	movs	r1, r0
 8001344:	40f1      	lsrs	r1, r6
 8001346:	000e      	movs	r6, r1
 8001348:	2a20      	cmp	r2, #32
 800134a:	d004      	beq.n	8001356 <__aeabi_d2f+0xbe>
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <__aeabi_d2f+0x108>)
 800134e:	4694      	mov	ip, r2
 8001350:	4463      	add	r3, ip
 8001352:	4098      	lsls	r0, r3
 8001354:	4305      	orrs	r5, r0
 8001356:	0029      	movs	r1, r5
 8001358:	1e4d      	subs	r5, r1, #1
 800135a:	41a9      	sbcs	r1, r5
 800135c:	4331      	orrs	r1, r6
 800135e:	2600      	movs	r6, #0
 8001360:	074b      	lsls	r3, r1, #29
 8001362:	d1ce      	bne.n	8001302 <__aeabi_d2f+0x6a>
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	000b      	movs	r3, r1
 8001368:	04c0      	lsls	r0, r0, #19
 800136a:	2201      	movs	r2, #1
 800136c:	4003      	ands	r3, r0
 800136e:	4201      	tst	r1, r0
 8001370:	d1d3      	bne.n	800131a <__aeabi_d2f+0x82>
 8001372:	e7af      	b.n	80012d4 <__aeabi_d2f+0x3c>
 8001374:	2300      	movs	r3, #0
 8001376:	e7ac      	b.n	80012d2 <__aeabi_d2f+0x3a>
 8001378:	490a      	ldr	r1, [pc, #40]	; (80013a4 <__aeabi_d2f+0x10c>)
 800137a:	468c      	mov	ip, r1
 800137c:	0029      	movs	r1, r5
 800137e:	4463      	add	r3, ip
 8001380:	40d1      	lsrs	r1, r2
 8001382:	409d      	lsls	r5, r3
 8001384:	000a      	movs	r2, r1
 8001386:	0029      	movs	r1, r5
 8001388:	4098      	lsls	r0, r3
 800138a:	1e4d      	subs	r5, r1, #1
 800138c:	41a9      	sbcs	r1, r5
 800138e:	4301      	orrs	r1, r0
 8001390:	4311      	orrs	r1, r2
 8001392:	e7e4      	b.n	800135e <__aeabi_d2f+0xc6>
 8001394:	0033      	movs	r3, r6
 8001396:	e79d      	b.n	80012d4 <__aeabi_d2f+0x3c>
 8001398:	000007fe 	.word	0x000007fe
 800139c:	fffffc80 	.word	0xfffffc80
 80013a0:	fffffca2 	.word	0xfffffca2
 80013a4:	fffffc82 	.word	0xfffffc82

080013a8 <__clzsi2>:
 80013a8:	211c      	movs	r1, #28
 80013aa:	2301      	movs	r3, #1
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	4298      	cmp	r0, r3
 80013b0:	d301      	bcc.n	80013b6 <__clzsi2+0xe>
 80013b2:	0c00      	lsrs	r0, r0, #16
 80013b4:	3910      	subs	r1, #16
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	4298      	cmp	r0, r3
 80013ba:	d301      	bcc.n	80013c0 <__clzsi2+0x18>
 80013bc:	0a00      	lsrs	r0, r0, #8
 80013be:	3908      	subs	r1, #8
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	4298      	cmp	r0, r3
 80013c4:	d301      	bcc.n	80013ca <__clzsi2+0x22>
 80013c6:	0900      	lsrs	r0, r0, #4
 80013c8:	3904      	subs	r1, #4
 80013ca:	a202      	add	r2, pc, #8	; (adr r2, 80013d4 <__clzsi2+0x2c>)
 80013cc:	5c10      	ldrb	r0, [r2, r0]
 80013ce:	1840      	adds	r0, r0, r1
 80013d0:	4770      	bx	lr
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	02020304 	.word	0x02020304
 80013d8:	01010101 	.word	0x01010101
	...

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f001 fdbb 	bl	8002f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f98d 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f000 faf7 	bl	80019e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013f6:	f000 f9ef 	bl	80017d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013fa:	f000 fa2d 	bl	8001858 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013fe:	f000 fa91 	bl	8001924 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001402:	f000 fabf 	bl	8001984 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001406:	f000 fa65 	bl	80018d4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  mpuInit();
 800140a:	f000 ffb3 	bl	8002374 <mpuInit>

  gnssInit();
 800140e:	f001 f8cf 	bl	80025b0 <gnssInit>
  latlongstructinstance = getLatLongInMeters();
 8001412:	4ca1      	ldr	r4, [pc, #644]	; (8001698 <main+0x2b4>)
 8001414:	003b      	movs	r3, r7
 8001416:	0018      	movs	r0, r3
 8001418:	f000 fc06 	bl	8001c28 <getLatLongInMeters>
 800141c:	003a      	movs	r2, r7
 800141e:	0023      	movs	r3, r4
 8001420:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001422:	c313      	stmia	r3!, {r0, r1, r4}
 8001424:	ca03      	ldmia	r2!, {r0, r1}
 8001426:	c303      	stmia	r3!, {r0, r1}
  //offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
  //homeLocked = 1;
  prevlatlongstructinstance = latlongstructinstance;
 8001428:	4b9c      	ldr	r3, [pc, #624]	; (800169c <main+0x2b8>)
 800142a:	4a9b      	ldr	r2, [pc, #620]	; (8001698 <main+0x2b4>)
 800142c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800142e:	c313      	stmia	r3!, {r0, r1, r4}
 8001430:	ca03      	ldmia	r2!, {r0, r1}
 8001432:	c303      	stmia	r3!, {r0, r1}
  //HAL_Delay(1000);


  gsmInit();											// GSM initializer
 8001434:	f001 f966 	bl	8002704 <gsmInit>
  gsmstruct.phoneNumber = "+35844350xxxx";				// Enter number in this format
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <main+0x2bc>)
 800143a:	4a9a      	ldr	r2, [pc, #616]	; (80016a4 <main+0x2c0>)
 800143c:	601a      	str	r2, [r3, #0]
  gsmstruct.message		= "Sent from Otakaari 5tryreyre";	// Enter message to be send in this format
 800143e:	4b98      	ldr	r3, [pc, #608]	; (80016a0 <main+0x2bc>)
 8001440:	4a99      	ldr	r2, [pc, #612]	; (80016a8 <main+0x2c4>)
 8001442:	605a      	str	r2, [r3, #4]
  sendGsmMessage(gsmstruct);
 8001444:	4b96      	ldr	r3, [pc, #600]	; (80016a0 <main+0x2bc>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	6859      	ldr	r1, [r3, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	f001 fa1e 	bl	800288c <sendGsmMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16);
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <main+0x2c8>)
 8001452:	0018      	movs	r0, r3
 8001454:	f003 fd98 	bl	8004f88 <HAL_TIM_Base_Start>
  while (1)
  {

	  //i2cState = HAL_I2C_GetState(&hi2c1);
	  if(lockedDevice == 1 || counter2 != 0){
 8001458:	4b95      	ldr	r3, [pc, #596]	; (80016b0 <main+0x2cc>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d004      	beq.n	800146a <main+0x86>
 8001460:	4b94      	ldr	r3, [pc, #592]	; (80016b4 <main+0x2d0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d100      	bne.n	800146a <main+0x86>
 8001468:	e0ea      	b.n	8001640 <main+0x25c>
		  i2cState = HAL_I2C_GetState(&hi2c1);
 800146a:	4b93      	ldr	r3, [pc, #588]	; (80016b8 <main+0x2d4>)
 800146c:	0018      	movs	r0, r3
 800146e:	f002 fbc1 	bl	8003bf4 <HAL_I2C_GetState>
 8001472:	0003      	movs	r3, r0
 8001474:	001a      	movs	r2, r3
 8001476:	4b91      	ldr	r3, [pc, #580]	; (80016bc <main+0x2d8>)
 8001478:	701a      	strb	r2, [r3, #0]
	  //=========================MPU9250
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_L, sizeof(ACCEL_XOUT_L), 10);
 800147a:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <main+0x2dc>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b299      	uxth	r1, r3
 8001480:	4a90      	ldr	r2, [pc, #576]	; (80016c4 <main+0x2e0>)
 8001482:	488d      	ldr	r0, [pc, #564]	; (80016b8 <main+0x2d4>)
 8001484:	230a      	movs	r3, #10
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	f002 f9a3 	bl	80037d4 <HAL_I2C_Master_Transmit>
 800148e:	0003      	movs	r3, r0
 8001490:	001a      	movs	r2, r3
 8001492:	4b8d      	ldr	r3, [pc, #564]	; (80016c8 <main+0x2e4>)
 8001494:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001496:	4b8a      	ldr	r3, [pc, #552]	; (80016c0 <main+0x2dc>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b299      	uxth	r1, r3
 800149c:	4a8b      	ldr	r2, [pc, #556]	; (80016cc <main+0x2e8>)
 800149e:	4886      	ldr	r0, [pc, #536]	; (80016b8 <main+0x2d4>)
 80014a0:	2364      	movs	r3, #100	; 0x64
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	f002 fa9d 	bl	80039e4 <HAL_I2C_Master_Receive>
 80014aa:	0003      	movs	r3, r0
 80014ac:	001a      	movs	r2, r3
 80014ae:	4b86      	ldr	r3, [pc, #536]	; (80016c8 <main+0x2e4>)
 80014b0:	701a      	strb	r2, [r3, #0]
		  finalXAccValue = dataReceiveI2cBuffer;
 80014b2:	4b86      	ldr	r3, [pc, #536]	; (80016cc <main+0x2e8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <main+0x2ec>)
 80014ba:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_H, sizeof(ACCEL_XOUT_H), 10);
 80014bc:	4b80      	ldr	r3, [pc, #512]	; (80016c0 <main+0x2dc>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b299      	uxth	r1, r3
 80014c2:	4a84      	ldr	r2, [pc, #528]	; (80016d4 <main+0x2f0>)
 80014c4:	487c      	ldr	r0, [pc, #496]	; (80016b8 <main+0x2d4>)
 80014c6:	230a      	movs	r3, #10
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	f002 f982 	bl	80037d4 <HAL_I2C_Master_Transmit>
 80014d0:	0003      	movs	r3, r0
 80014d2:	001a      	movs	r2, r3
 80014d4:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <main+0x2e4>)
 80014d6:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80014d8:	4b79      	ldr	r3, [pc, #484]	; (80016c0 <main+0x2dc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b299      	uxth	r1, r3
 80014de:	4a7b      	ldr	r2, [pc, #492]	; (80016cc <main+0x2e8>)
 80014e0:	4875      	ldr	r0, [pc, #468]	; (80016b8 <main+0x2d4>)
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	f002 fa7c 	bl	80039e4 <HAL_I2C_Master_Receive>
 80014ec:	0003      	movs	r3, r0
 80014ee:	001a      	movs	r2, r3
 80014f0:	4b75      	ldr	r3, [pc, #468]	; (80016c8 <main+0x2e4>)
 80014f2:	701a      	strb	r2, [r3, #0]
		  finalXAccValue = finalXAccValue + (dataReceiveI2cBuffer << 8);
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <main+0x2e8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	001a      	movs	r2, r3
 80014fc:	4b74      	ldr	r3, [pc, #464]	; (80016d0 <main+0x2ec>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	18d2      	adds	r2, r2, r3
 8001502:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <main+0x2ec>)
 8001504:	601a      	str	r2, [r3, #0]
		  finalXAccValueWithOffset = finalXAccValue + 40000;
 8001506:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <main+0x2ec>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4c73      	ldr	r4, [pc, #460]	; (80016d8 <main+0x2f4>)
 800150c:	191a      	adds	r2, r3, r4
 800150e:	4b73      	ldr	r3, [pc, #460]	; (80016dc <main+0x2f8>)
 8001510:	601a      	str	r2, [r3, #0]

		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_L, sizeof(ACCEL_YOUT_L), 10);
 8001512:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <main+0x2dc>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b299      	uxth	r1, r3
 8001518:	4a71      	ldr	r2, [pc, #452]	; (80016e0 <main+0x2fc>)
 800151a:	4867      	ldr	r0, [pc, #412]	; (80016b8 <main+0x2d4>)
 800151c:	230a      	movs	r3, #10
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	f002 f957 	bl	80037d4 <HAL_I2C_Master_Transmit>
 8001526:	0003      	movs	r3, r0
 8001528:	001a      	movs	r2, r3
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <main+0x2e4>)
 800152c:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 800152e:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <main+0x2dc>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b299      	uxth	r1, r3
 8001534:	4a65      	ldr	r2, [pc, #404]	; (80016cc <main+0x2e8>)
 8001536:	4860      	ldr	r0, [pc, #384]	; (80016b8 <main+0x2d4>)
 8001538:	2364      	movs	r3, #100	; 0x64
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	f002 fa51 	bl	80039e4 <HAL_I2C_Master_Receive>
 8001542:	0003      	movs	r3, r0
 8001544:	001a      	movs	r2, r3
 8001546:	4b60      	ldr	r3, [pc, #384]	; (80016c8 <main+0x2e4>)
 8001548:	701a      	strb	r2, [r3, #0]
		  finalYAccValue = dataReceiveI2cBuffer;
 800154a:	4b60      	ldr	r3, [pc, #384]	; (80016cc <main+0x2e8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	001a      	movs	r2, r3
 8001550:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <main+0x300>)
 8001552:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_H, sizeof(ACCEL_YOUT_H), 10);
 8001554:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <main+0x2dc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b299      	uxth	r1, r3
 800155a:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <main+0x304>)
 800155c:	4856      	ldr	r0, [pc, #344]	; (80016b8 <main+0x2d4>)
 800155e:	230a      	movs	r3, #10
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	f002 f936 	bl	80037d4 <HAL_I2C_Master_Transmit>
 8001568:	0003      	movs	r3, r0
 800156a:	001a      	movs	r2, r3
 800156c:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <main+0x2e4>)
 800156e:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <main+0x2dc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b299      	uxth	r1, r3
 8001576:	4a55      	ldr	r2, [pc, #340]	; (80016cc <main+0x2e8>)
 8001578:	484f      	ldr	r0, [pc, #316]	; (80016b8 <main+0x2d4>)
 800157a:	2364      	movs	r3, #100	; 0x64
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	f002 fa30 	bl	80039e4 <HAL_I2C_Master_Receive>
 8001584:	0003      	movs	r3, r0
 8001586:	001a      	movs	r2, r3
 8001588:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <main+0x2e4>)
 800158a:	701a      	strb	r2, [r3, #0]
		  finalYAccValue = finalYAccValue + (dataReceiveI2cBuffer << 8);
 800158c:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <main+0x2e8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	001a      	movs	r2, r3
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <main+0x300>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	18d2      	adds	r2, r2, r3
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <main+0x300>)
 800159c:	601a      	str	r2, [r3, #0]
		  finalYAccValueWithOffset = finalYAccValue + 40000;
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <main+0x300>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	191a      	adds	r2, r3, r4
 80015a4:	4b51      	ldr	r3, [pc, #324]	; (80016ec <main+0x308>)
 80015a6:	601a      	str	r2, [r3, #0]

		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_L, sizeof(ACCEL_ZOUT_L), 10);
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <main+0x2dc>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b299      	uxth	r1, r3
 80015ae:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <main+0x30c>)
 80015b0:	4841      	ldr	r0, [pc, #260]	; (80016b8 <main+0x2d4>)
 80015b2:	230a      	movs	r3, #10
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	f002 f90c 	bl	80037d4 <HAL_I2C_Master_Transmit>
 80015bc:	0003      	movs	r3, r0
 80015be:	001a      	movs	r2, r3
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <main+0x2e4>)
 80015c2:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80015c4:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <main+0x2dc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b299      	uxth	r1, r3
 80015ca:	4a40      	ldr	r2, [pc, #256]	; (80016cc <main+0x2e8>)
 80015cc:	483a      	ldr	r0, [pc, #232]	; (80016b8 <main+0x2d4>)
 80015ce:	2364      	movs	r3, #100	; 0x64
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	f002 fa06 	bl	80039e4 <HAL_I2C_Master_Receive>
 80015d8:	0003      	movs	r3, r0
 80015da:	001a      	movs	r2, r3
 80015dc:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <main+0x2e4>)
 80015de:	701a      	strb	r2, [r3, #0]
		  finalZAccValue = dataReceiveI2cBuffer;
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <main+0x2e8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	001a      	movs	r2, r3
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <main+0x310>)
 80015e8:	601a      	str	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_H, sizeof(ACCEL_ZOUT_H), 10);
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <main+0x2dc>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b299      	uxth	r1, r3
 80015f0:	4a41      	ldr	r2, [pc, #260]	; (80016f8 <main+0x314>)
 80015f2:	4831      	ldr	r0, [pc, #196]	; (80016b8 <main+0x2d4>)
 80015f4:	230a      	movs	r3, #10
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	f002 f8eb 	bl	80037d4 <HAL_I2C_Master_Transmit>
 80015fe:	0003      	movs	r3, r0
 8001600:	001a      	movs	r2, r3
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <main+0x2e4>)
 8001604:	701a      	strb	r2, [r3, #0]
		  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <main+0x2dc>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b299      	uxth	r1, r3
 800160c:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <main+0x2e8>)
 800160e:	482a      	ldr	r0, [pc, #168]	; (80016b8 <main+0x2d4>)
 8001610:	2364      	movs	r3, #100	; 0x64
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2301      	movs	r3, #1
 8001616:	f002 f9e5 	bl	80039e4 <HAL_I2C_Master_Receive>
 800161a:	0003      	movs	r3, r0
 800161c:	001a      	movs	r2, r3
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <main+0x2e4>)
 8001620:	701a      	strb	r2, [r3, #0]
		  finalZAccValue = finalZAccValue + (dataReceiveI2cBuffer << 8);
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <main+0x2e8>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	001a      	movs	r2, r3
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <main+0x310>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	18d2      	adds	r2, r2, r3
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <main+0x310>)
 8001632:	601a      	str	r2, [r3, #0]
		  finalZAccValueWithOffset = finalZAccValue + 88000;
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <main+0x310>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a30      	ldr	r2, [pc, #192]	; (80016fc <main+0x318>)
 800163a:	189a      	adds	r2, r3, r2
 800163c:	4b30      	ldr	r3, [pc, #192]	; (8001700 <main+0x31c>)
 800163e:	601a      	str	r2, [r3, #0]
	  //=========================MPU9250
	  }
	  if(lockedDevice == 1){
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <main+0x2cc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d116      	bne.n	8001676 <main+0x292>
		  //counter = counter +1;
		  if(finalZAccValueWithOffset < 100000){
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <main+0x31c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2d      	ldr	r2, [pc, #180]	; (8001704 <main+0x320>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d808      	bhi.n	8001664 <main+0x280>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	0059      	lsls	r1, r3, #1
 8001656:	2390      	movs	r3, #144	; 0x90
 8001658:	05db      	lsls	r3, r3, #23
 800165a:	2201      	movs	r2, #1
 800165c:	0018      	movs	r0, r3
 800165e:	f001 ffe9 	bl	8003634 <HAL_GPIO_WritePin>
 8001662:	e012      	b.n	800168a <main+0x2a6>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	0059      	lsls	r1, r3, #1
 8001668:	2390      	movs	r3, #144	; 0x90
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	2200      	movs	r2, #0
 800166e:	0018      	movs	r0, r3
 8001670:	f001 ffe0 	bl	8003634 <HAL_GPIO_WritePin>
 8001674:	e009      	b.n	800168a <main+0x2a6>
		  }

	  }*/

	  else{
		HAL_SuspendTick();
 8001676:	f001 fcfd 	bl	8003074 <HAL_SuspendTick>

		  HAL_PWR_EnableSleepOnExit ();
 800167a:	f002 fd73 	bl	8004164 <HAL_PWR_EnableSleepOnExit>
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800167e:	2101      	movs	r1, #1
 8001680:	2000      	movs	r0, #0
 8001682:	f002 fd53 	bl	800412c <HAL_PWR_EnterSLEEPMode>

		  HAL_ResumeTick();
 8001686:	f001 fd03 	bl	8003090 <HAL_ResumeTick>
	  //latlongstructinstance = getLatLongInMeters();
	  //offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
	  //prevlatlongstructinstance = latlongstructinstance;
	  //=========================GNSS

	  counter = counter +1;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <main+0x324>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <main+0x324>)
 8001692:	601a      	str	r2, [r3, #0]
	  if(lockedDevice == 1 || counter2 != 0){
 8001694:	e6e0      	b.n	8001458 <main+0x74>
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	20000198 	.word	0x20000198
 800169c:	200002dc 	.word	0x200002dc
 80016a0:	20000400 	.word	0x20000400
 80016a4:	080068f4 	.word	0x080068f4
 80016a8:	08006904 	.word	0x08006904
 80016ac:	20000410 	.word	0x20000410
 80016b0:	200000d3 	.word	0x200000d3
 80016b4:	200000b0 	.word	0x200000b0
 80016b8:	200001bc 	.word	0x200001bc
 80016bc:	20000458 	.word	0x20000458
 80016c0:	200000cc 	.word	0x200000cc
 80016c4:	200000cd 	.word	0x200000cd
 80016c8:	200001b8 	.word	0x200001b8
 80016cc:	200000d4 	.word	0x200000d4
 80016d0:	200000b4 	.word	0x200000b4
 80016d4:	200000ce 	.word	0x200000ce
 80016d8:	00009c40 	.word	0x00009c40
 80016dc:	200000b8 	.word	0x200000b8
 80016e0:	200000cf 	.word	0x200000cf
 80016e4:	200000bc 	.word	0x200000bc
 80016e8:	200000d0 	.word	0x200000d0
 80016ec:	200000c0 	.word	0x200000c0
 80016f0:	200000d1 	.word	0x200000d1
 80016f4:	200000c4 	.word	0x200000c4
 80016f8:	200000d2 	.word	0x200000d2
 80016fc:	000157c0 	.word	0x000157c0
 8001700:	200000c8 	.word	0x200000c8
 8001704:	0001869f 	.word	0x0001869f
 8001708:	200000ac 	.word	0x200000ac

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b099      	sub	sp, #100	; 0x64
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	242c      	movs	r4, #44	; 0x2c
 8001714:	193b      	adds	r3, r7, r4
 8001716:	0018      	movs	r0, r3
 8001718:	2334      	movs	r3, #52	; 0x34
 800171a:	001a      	movs	r2, r3
 800171c:	2100      	movs	r1, #0
 800171e:	f005 f825 	bl	800676c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001722:	231c      	movs	r3, #28
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	0018      	movs	r0, r3
 8001728:	2310      	movs	r3, #16
 800172a:	001a      	movs	r2, r3
 800172c:	2100      	movs	r1, #0
 800172e:	f005 f81d 	bl	800676c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	0018      	movs	r0, r3
 8001736:	2318      	movs	r3, #24
 8001738:	001a      	movs	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	f005 f816 	bl	800676c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001740:	0021      	movs	r1, r4
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2201      	movs	r2, #1
 800174c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2210      	movs	r2, #16
 8001752:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2202      	movs	r2, #2
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	0212      	lsls	r2, r2, #8
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	0352      	lsls	r2, r2, #13
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	187b      	adds	r3, r7, r1
 8001772:	0018      	movs	r0, r3
 8001774:	f002 fd12 	bl	800419c <HAL_RCC_OscConfig>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800177c:	f001 fa0a 	bl	8002b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	211c      	movs	r1, #28
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2202      	movs	r2, #2
 800178c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2101      	movs	r1, #1
 800179e:	0018      	movs	r0, r3
 80017a0:	f003 f882 	bl	80048a8 <HAL_RCC_ClockConfig>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80017a8:	f001 f9f4 	bl	8002b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2221      	movs	r2, #33	; 0x21
 80017b0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	0018      	movs	r0, r3
 80017c2:	f003 f9eb 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ca:	f001 f9e3 	bl	8002b94 <Error_Handler>
  }
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b019      	add	sp, #100	; 0x64
 80017d4:	bd90      	pop	{r4, r7, pc}
	...

080017d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_I2C1_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <MX_I2C1_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_I2C1_Init+0x74>)
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <MX_I2C1_Init+0x7c>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_I2C1_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_I2C1_Init+0x74>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_I2C1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_I2C1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_I2C1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_I2C1_Init+0x74>)
 8001814:	0018      	movs	r0, r3
 8001816:	f001 ff47 	bl	80036a8 <HAL_I2C_Init>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800181e:	f001 f9b9 	bl	8002b94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_I2C1_Init+0x74>)
 8001824:	2100      	movs	r1, #0
 8001826:	0018      	movs	r0, r3
 8001828:	f002 fbe8 	bl	8003ffc <HAL_I2CEx_ConfigAnalogFilter>
 800182c:	1e03      	subs	r3, r0, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001830:	f001 f9b0 	bl	8002b94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <MX_I2C1_Init+0x74>)
 8001836:	2100      	movs	r1, #0
 8001838:	0018      	movs	r0, r3
 800183a:	f002 fc2b 	bl	8004094 <HAL_I2CEx_ConfigDigitalFilter>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d001      	beq.n	8001846 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001842:	f001 f9a7 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001bc 	.word	0x200001bc
 8001850:	40005400 	.word	0x40005400
 8001854:	2000090e 	.word	0x2000090e

08001858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_SPI1_Init+0x74>)
 800185e:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <MX_SPI1_Init+0x78>)
 8001860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_SPI1_Init+0x74>)
 8001864:	2282      	movs	r2, #130	; 0x82
 8001866:	0052      	lsls	r2, r2, #1
 8001868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_SPI1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_SPI1_Init+0x74>)
 8001872:	22e0      	movs	r2, #224	; 0xe0
 8001874:	00d2      	lsls	r2, r2, #3
 8001876:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_SPI1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_SPI1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_SPI1_Init+0x74>)
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_SPI1_Init+0x74>)
 800188e:	2210      	movs	r2, #16
 8001890:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_SPI1_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_SPI1_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_SPI1_Init+0x74>)
 80018a6:	2207      	movs	r2, #7
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_SPI1_Init+0x74>)
 80018b2:	2208      	movs	r2, #8
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <MX_SPI1_Init+0x74>)
 80018b8:	0018      	movs	r0, r3
 80018ba:	f003 fa5d 	bl	8004d78 <HAL_SPI_Init>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018c2:	f001 f967 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200002fc 	.word	0x200002fc
 80018d0:	40013000 	.word	0x40013000

080018d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_TIM16_Init+0x44>)
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <MX_TIM16_Init+0x48>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_TIM16_Init+0x44>)
 80018e0:	224f      	movs	r2, #79	; 0x4f
 80018e2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_TIM16_Init+0x44>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_TIM16_Init+0x44>)
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <MX_TIM16_Init+0x4c>)
 80018ee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_TIM16_Init+0x44>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_TIM16_Init+0x44>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_TIM16_Init+0x44>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <MX_TIM16_Init+0x44>)
 8001904:	0018      	movs	r0, r3
 8001906:	f003 faef 	bl	8004ee8 <HAL_TIM_Base_Init>
 800190a:	1e03      	subs	r3, r0, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800190e:	f001 f941 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000410 	.word	0x20000410
 800191c:	40014400 	.word	0x40014400
 8001920:	0000ffff 	.word	0x0000ffff

08001924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_USART1_UART_Init+0x58>)
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <MX_USART1_UART_Init+0x5c>)
 800192c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001930:	2296      	movs	r2, #150	; 0x96
 8001932:	0192      	lsls	r2, r2, #6
 8001934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_USART1_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_USART1_UART_Init+0x58>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_USART1_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <MX_USART1_UART_Init+0x58>)
 8001968:	0018      	movs	r0, r3
 800196a:	f003 fbc7 	bl	80050fc <HAL_UART_Init>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d001      	beq.n	8001976 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001972:	f001 f90f 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000230 	.word	0x20000230
 8001980:	40013800 	.word	0x40013800

08001984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_USART2_UART_Init+0x58>)
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <MX_USART2_UART_Init+0x5c>)
 800198c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_USART2_UART_Init+0x58>)
 8001990:	22e1      	movs	r2, #225	; 0xe1
 8001992:	0252      	lsls	r2, r2, #9
 8001994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_USART2_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019c8:	0018      	movs	r0, r3
 80019ca:	f003 fb97 	bl	80050fc <HAL_UART_Init>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019d2:	f001 f8df 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000370 	.word	0x20000370
 80019e0:	40004400 	.word	0x40004400

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	240c      	movs	r4, #12
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	0018      	movs	r0, r3
 80019f0:	2314      	movs	r3, #20
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f004 feb9 	bl	800676c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <MX_GPIO_Init+0xf4>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <MX_GPIO_Init+0xf4>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	0289      	lsls	r1, r1, #10
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <MX_GPIO_Init+0xf4>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <MX_GPIO_Init+0xf4>)
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <MX_GPIO_Init+0xf4>)
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	02c9      	lsls	r1, r1, #11
 8001a20:	430a      	orrs	r2, r1
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <MX_GPIO_Init+0xf4>)
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	02db      	lsls	r3, r3, #11
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a32:	2302      	movs	r3, #2
 8001a34:	33ff      	adds	r3, #255	; 0xff
 8001a36:	0019      	movs	r1, r3
 8001a38:	2390      	movs	r3, #144	; 0x90
 8001a3a:	05db      	lsls	r3, r3, #23
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f001 fdf8 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <MX_GPIO_Init+0xf8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	2108      	movs	r1, #8
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f001 fdf2 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	2202      	movs	r2, #2
 8001a54:	32ff      	adds	r2, #255	; 0xff
 8001a56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	193a      	adds	r2, r7, r4
 8001a6c:	2390      	movs	r3, #144	; 0x90
 8001a6e:	05db      	lsls	r3, r3, #23
 8001a70:	0011      	movs	r1, r2
 8001a72:	0018      	movs	r0, r3
 8001a74:	f001 fc76 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2288      	movs	r2, #136	; 0x88
 8001a82:	0352      	lsls	r2, r2, #13
 8001a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	193a      	adds	r2, r7, r4
 8001a8e:	2390      	movs	r3, #144	; 0x90
 8001a90:	05db      	lsls	r3, r3, #23
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f001 fc65 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <MX_GPIO_Init+0xf8>)
 8001ab8:	0019      	movs	r1, r3
 8001aba:	0010      	movs	r0, r2
 8001abc:	f001 fc52 	bl	8003364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2007      	movs	r0, #7
 8001ac6:	f001 fb9d 	bl	8003204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001aca:	2007      	movs	r0, #7
 8001acc:	f001 fbaf 	bl	800322e <HAL_NVIC_EnableIRQ>

}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b009      	add	sp, #36	; 0x24
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000400 	.word	0x48000400

08001ae0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	1dbb      	adds	r3, r7, #6
 8001aea:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_4 && lockedDevice == 0) // If The INT Source Is EXTI Line4 (A4 Pin)
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d113      	bne.n	8001b1c <HAL_GPIO_EXTI_Callback+0x3c>
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x44>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10f      	bne.n	8001b1c <HAL_GPIO_EXTI_Callback+0x3c>
    	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Toggle The ONBOARD LED
    	//timerVal = __HAL_TIM_GET_COUNTER(&htim16);
    	//counter2++;
    	//HAL_PWR_DisableSleepOnExit ();
    	//uint8_t INT_ENABLE[2] 			= {0x38, 0x00};
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	0059      	lsls	r1, r3, #1
 8001b00:	2390      	movs	r3, #144	; 0x90
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	2201      	movs	r2, #1
 8001b06:	0018      	movs	r0, r3
 8001b08:	f001 fd94 	bl	8003634 <HAL_GPIO_WritePin>
    	offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
    	if(offsetfromhome.offsetLatInMeters > 150 || offsetfromhome.offsetLongInMeters > 150){
    		//sendGsmMessage(gsmstruct);
    		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
    	}*/
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	0059      	lsls	r1, r3, #1
 8001b10:	2390      	movs	r3, #144	; 0x90
 8001b12:	05db      	lsls	r3, r3, #23
 8001b14:	2200      	movs	r2, #0
 8001b16:	0018      	movs	r0, r3
 8001b18:	f001 fd8c 	bl	8003634 <HAL_GPIO_WritePin>
    }

}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200000d3 	.word	0x200000d3

08001b28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	b08d      	sub	sp, #52	; 0x34
 8001b2c:	af08      	add	r7, sp, #32
 8001b2e:	60f8      	str	r0, [r7, #12]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// ONBOARD LED
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
	 /*HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	  HAL_Delay(500);*/
	  uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 8001b30:	4924      	ldr	r1, [pc, #144]	; (8001bc4 <HAL_UART_RxCpltCallback+0x9c>)
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_UART_RxCpltCallback+0xa0>)
 8001b34:	220e      	movs	r2, #14
 8001b36:	0018      	movs	r0, r3
 8001b38:	f003 fcce 	bl	80054d8 <HAL_UART_Receive_IT>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	001a      	movs	r2, r3
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_UART_RxCpltCallback+0xa4>)
 8001b42:	701a      	strb	r2, [r3, #0]
	  if(checkKey(receiveUARTData, UARTDataKey) == 1){
 8001b44:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_UART_RxCpltCallback+0xa8>)
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_UART_RxCpltCallback+0x9c>)
 8001b48:	0011      	movs	r1, r2
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f84c 	bl	8001be8 <checkKey>
 8001b50:	0003      	movs	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d132      	bne.n	8001bbc <HAL_UART_RxCpltCallback+0x94>
		  if(!lockedDevice){
 8001b56:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_UART_RxCpltCallback+0xac>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10b      	bne.n	8001b76 <HAL_UART_RxCpltCallback+0x4e>
			  lockedDevice = 1;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_UART_RxCpltCallback+0xac>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
			  counter2 = 0;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_UART_RxCpltCallback+0xb0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
			  HAL_PWR_DisableSleepOnExit ();
 8001b6a:	f002 fb09 	bl	8004180 <HAL_PWR_DisableSleepOnExit>
			  homeLocked = 0;
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_UART_RxCpltCallback+0xb4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
			  prevlatlongstructinstance = latlongstructinstance;
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		  }

	  }
}
 8001b74:	e022      	b.n	8001bbc <HAL_UART_RxCpltCallback+0x94>
			  lockedDevice = 0;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_UART_RxCpltCallback+0xac>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			  homeLocked = 1;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_UART_RxCpltCallback+0xb4>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
			  getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, homeLocked);
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_UART_RxCpltCallback+0xb4>)
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	0038      	movs	r0, r7
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_UART_RxCpltCallback+0xb8>)
 8001b8a:	9207      	str	r2, [sp, #28]
 8001b8c:	4915      	ldr	r1, [pc, #84]	; (8001be4 <HAL_UART_RxCpltCallback+0xbc>)
 8001b8e:	2208      	movs	r2, #8
 8001b90:	446a      	add	r2, sp
 8001b92:	c970      	ldmia	r1!, {r4, r5, r6}
 8001b94:	c270      	stmia	r2!, {r4, r5, r6}
 8001b96:	c930      	ldmia	r1!, {r4, r5}
 8001b98:	c230      	stmia	r2!, {r4, r5}
 8001b9a:	466a      	mov	r2, sp
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	320c      	adds	r2, #12
 8001ba2:	ca30      	ldmia	r2!, {r4, r5}
 8001ba4:	c130      	stmia	r1!, {r4, r5}
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f000 fb56 	bl	800225c <getOffsetFromHome>
			  prevlatlongstructinstance = latlongstructinstance;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_UART_RxCpltCallback+0xbc>)
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_UART_RxCpltCallback+0xb8>)
 8001bb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bb6:	c313      	stmia	r3!, {r0, r1, r4}
 8001bb8:	ca03      	ldmia	r2!, {r0, r1}
 8001bba:	c303      	stmia	r3!, {r0, r1}
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b005      	add	sp, #20
 8001bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc4:	200000d8 	.word	0x200000d8
 8001bc8:	20000230 	.word	0x20000230
 8001bcc:	20000208 	.word	0x20000208
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	200000d3 	.word	0x200000d3
 8001bd8:	200000b0 	.word	0x200000b0
 8001bdc:	20000194 	.word	0x20000194
 8001be0:	20000198 	.word	0x20000198
 8001be4:	200002dc 	.word	0x200002dc

08001be8 <checkKey>:

int checkKey(uint8_t arr1[],  uint8_t arr2[])
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < 30; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e00e      	b.n	8001c16 <checkKey+0x2e>
	{
		if(arr1[i] != arr2[i])
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	18cb      	adds	r3, r1, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <checkKey+0x28>
		{
			return 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e006      	b.n	8001c1e <checkKey+0x36>
	for(i = 0; i < 30; i++)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b1d      	cmp	r3, #29
 8001c1a:	dded      	ble.n	8001bf8 <checkKey+0x10>
		}
	}
	return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <getLatLongInMeters>:
	}
	else{
		return 0;
	}
}
struct LatLongStruct getLatLongInMeters(void){
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b096      	sub	sp, #88	; 0x58
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	enterToFunction = 1; // TODO delete
 8001c30:	4bd9      	ldr	r3, [pc, #868]	; (8001f98 <getLatLongInMeters+0x370>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
	struct LatLongStruct latlongstruct = {0};	// Stores LatLong metric values
 8001c36:	2314      	movs	r3, #20
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	2314      	movs	r3, #20
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f004 fd93 	bl	800676c <memset>
	HAL_StatusTypeDef uart2Status;				// Status of uart2
	uint8_t AT_CGNSINF[] = "AT+CGNSINF\r";		// Gets data from GNSS
 8001c46:	2108      	movs	r1, #8
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	4ad4      	ldr	r2, [pc, #848]	; (8001f9c <getLatLongInMeters+0x374>)
 8001c4c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001c4e:	c331      	stmia	r3!, {r0, r4, r5}

    uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSINF, sizeof(AT_CGNSINF), 1000);
 8001c50:	252b      	movs	r5, #43	; 0x2b
 8001c52:	197c      	adds	r4, r7, r5
 8001c54:	23fa      	movs	r3, #250	; 0xfa
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	1879      	adds	r1, r7, r1
 8001c5a:	48d1      	ldr	r0, [pc, #836]	; (8001fa0 <getLatLongInMeters+0x378>)
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	f003 faa1 	bl	80051a4 <HAL_UART_Transmit>
 8001c62:	0003      	movs	r3, r0
 8001c64:	7023      	strb	r3, [r4, #0]
    uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8001c66:	197c      	adds	r4, r7, r5
 8001c68:	23fa      	movs	r3, #250	; 0xfa
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	49cd      	ldr	r1, [pc, #820]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001c6e:	48cc      	ldr	r0, [pc, #816]	; (8001fa0 <getLatLongInMeters+0x378>)
 8001c70:	2296      	movs	r2, #150	; 0x96
 8001c72:	f003 fb41 	bl	80052f8 <HAL_UART_Receive>
 8001c76:	0003      	movs	r3, r0
 8001c78:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8001c7a:	2064      	movs	r0, #100	; 0x64
 8001c7c:	f001 f9d6 	bl	800302c <HAL_Delay>

	//dummyBuffer[0]	= "1,1,20150327014838.000,31.221783,60.123456,24.123456,0.28,0.0,1,,1.9,2.2,1.0,,8,4,,,42,,";

	for(int i = 0; i < sizeof(receiveUART2Data); i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	657b      	str	r3, [r7, #84]	; 0x54
 8001c84:	e097      	b.n	8001db6 <getLatLongInMeters+0x18e>
		if(receiveUART2Data[i] == ','){
 8001c86:	4ac7      	ldr	r2, [pc, #796]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c90:	d107      	bne.n	8001ca2 <getLatLongInMeters+0x7a>
			commaElement = i;
 8001c92:	4bc5      	ldr	r3, [pc, #788]	; (8001fa8 <getLatLongInMeters+0x380>)
 8001c94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c96:	601a      	str	r2, [r3, #0]
			counterGNSS++;
 8001c98:	4bc4      	ldr	r3, [pc, #784]	; (8001fac <getLatLongInMeters+0x384>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	4bc3      	ldr	r3, [pc, #780]	; (8001fac <getLatLongInMeters+0x384>)
 8001ca0:	601a      	str	r2, [r3, #0]
		}
		if(counterGNSS == 1){
 8001ca2:	4bc2      	ldr	r3, [pc, #776]	; (8001fac <getLatLongInMeters+0x384>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d114      	bne.n	8001cd4 <getLatLongInMeters+0xac>
			gnssFixElement = i;
 8001caa:	4bc1      	ldr	r3, [pc, #772]	; (8001fb0 <getLatLongInMeters+0x388>)
 8001cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cae:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[i] == '1'){
 8001cb0:	4abc      	ldr	r2, [pc, #752]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	18d3      	adds	r3, r2, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b31      	cmp	r3, #49	; 0x31
 8001cba:	d102      	bne.n	8001cc2 <getLatLongInMeters+0x9a>
				gnssFixStatus = 1;
 8001cbc:	4bbd      	ldr	r3, [pc, #756]	; (8001fb4 <getLatLongInMeters+0x38c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
			}
			if(receiveUART2Data[i] == '0'){
 8001cc2:	4ab8      	ldr	r2, [pc, #736]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	18d3      	adds	r3, r2, r3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b30      	cmp	r3, #48	; 0x30
 8001ccc:	d102      	bne.n	8001cd4 <getLatLongInMeters+0xac>
				gnssFixStatus = 0;
 8001cce:	4bb9      	ldr	r3, [pc, #740]	; (8001fb4 <getLatLongInMeters+0x38c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
			}
		}
		if(counterGNSS == 2){
 8001cd4:	4bb5      	ldr	r3, [pc, #724]	; (8001fac <getLatLongInMeters+0x384>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d12e      	bne.n	8001d3a <getLatLongInMeters+0x112>
			latStart = i+1;
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4bb5      	ldr	r3, [pc, #724]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001ce2:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[latStart+1] == '-'){latNegDeg = 1;}
 8001ce4:	4bb4      	ldr	r3, [pc, #720]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	4aae      	ldr	r2, [pc, #696]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001cec:	5cd3      	ldrb	r3, [r2, r3]
 8001cee:	2b2d      	cmp	r3, #45	; 0x2d
 8001cf0:	d103      	bne.n	8001cfa <getLatLongInMeters+0xd2>
 8001cf2:	4bb2      	ldr	r3, [pc, #712]	; (8001fbc <getLatLongInMeters+0x394>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e002      	b.n	8001d00 <getLatLongInMeters+0xd8>
			else{latNegDeg = 0;}
 8001cfa:	4bb0      	ldr	r3, [pc, #704]	; (8001fbc <getLatLongInMeters+0x394>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
			for(int j = latStart; j < latStart+6; j++){
 8001d00:	4bad      	ldr	r3, [pc, #692]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	653b      	str	r3, [r7, #80]	; 0x50
 8001d06:	e012      	b.n	8001d2e <getLatLongInMeters+0x106>
				if(receiveUART2Data[j] == '.'){latDegSize = j-latStart-1-latNegDeg;}
 8001d08:	4aa6      	ldr	r2, [pc, #664]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0c:	18d3      	adds	r3, r2, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b2e      	cmp	r3, #46	; 0x2e
 8001d12:	d109      	bne.n	8001d28 <getLatLongInMeters+0x100>
 8001d14:	4ba8      	ldr	r3, [pc, #672]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	4ba7      	ldr	r3, [pc, #668]	; (8001fbc <getLatLongInMeters+0x394>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	1ad2      	subs	r2, r2, r3
 8001d24:	4ba6      	ldr	r3, [pc, #664]	; (8001fc0 <getLatLongInMeters+0x398>)
 8001d26:	601a      	str	r2, [r3, #0]
			for(int j = latStart; j < latStart+6; j++){
 8001d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d2e:	4ba2      	ldr	r3, [pc, #648]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3305      	adds	r3, #5
 8001d34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dde6      	ble.n	8001d08 <getLatLongInMeters+0xe0>
			}
		}
		if(counterGNSS == 3){
 8001d3a:	4b9c      	ldr	r3, [pc, #624]	; (8001fac <getLatLongInMeters+0x384>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d12e      	bne.n	8001da0 <getLatLongInMeters+0x178>
			latEndLongStart = i+1;
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	4b9f      	ldr	r3, [pc, #636]	; (8001fc4 <getLatLongInMeters+0x39c>)
 8001d48:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[latEndLongStart+1] == '-'){longNegDeg = 1;}
 8001d4a:	4b9e      	ldr	r3, [pc, #632]	; (8001fc4 <getLatLongInMeters+0x39c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	2b2d      	cmp	r3, #45	; 0x2d
 8001d56:	d103      	bne.n	8001d60 <getLatLongInMeters+0x138>
 8001d58:	4b9b      	ldr	r3, [pc, #620]	; (8001fc8 <getLatLongInMeters+0x3a0>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e002      	b.n	8001d66 <getLatLongInMeters+0x13e>
			else{longNegDeg = 0;}
 8001d60:	4b99      	ldr	r3, [pc, #612]	; (8001fc8 <getLatLongInMeters+0x3a0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
			for(int j = latEndLongStart; j < latEndLongStart+6; j++){
 8001d66:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <getLatLongInMeters+0x39c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d6c:	e012      	b.n	8001d94 <getLatLongInMeters+0x16c>
				if(receiveUART2Data[j] == '.'){longDegSize = j-latEndLongStart-1-longNegDeg;}
 8001d6e:	4a8d      	ldr	r2, [pc, #564]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b2e      	cmp	r3, #46	; 0x2e
 8001d78:	d109      	bne.n	8001d8e <getLatLongInMeters+0x166>
 8001d7a:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <getLatLongInMeters+0x39c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <getLatLongInMeters+0x3a0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1ad2      	subs	r2, r2, r3
 8001d8a:	4b90      	ldr	r3, [pc, #576]	; (8001fcc <getLatLongInMeters+0x3a4>)
 8001d8c:	601a      	str	r2, [r3, #0]
			for(int j = latEndLongStart; j < latEndLongStart+6; j++){
 8001d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d90:	3301      	adds	r3, #1
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d94:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <getLatLongInMeters+0x39c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3305      	adds	r3, #5
 8001d9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dde6      	ble.n	8001d6e <getLatLongInMeters+0x146>
			}
		}
		if(counterGNSS == 6){
 8001da0:	4b82      	ldr	r3, [pc, #520]	; (8001fac <getLatLongInMeters+0x384>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d103      	bne.n	8001db0 <getLatLongInMeters+0x188>
			longEnd = i;
 8001da8:	4b89      	ldr	r3, [pc, #548]	; (8001fd0 <getLatLongInMeters+0x3a8>)
 8001daa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dac:	601a      	str	r2, [r3, #0]
			break;
 8001dae:	e006      	b.n	8001dbe <getLatLongInMeters+0x196>
	for(int i = 0; i < sizeof(receiveUART2Data); i++){
 8001db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db2:	3301      	adds	r3, #1
 8001db4:	657b      	str	r3, [r7, #84]	; 0x54
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	2b95      	cmp	r3, #149	; 0x95
 8001dba:	d800      	bhi.n	8001dbe <getLatLongInMeters+0x196>
 8001dbc:	e763      	b.n	8001c86 <getLatLongInMeters+0x5e>
		}
	}
	counterGNSS = 0;
 8001dbe:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <getLatLongInMeters+0x384>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001dc4:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	2130      	movs	r1, #48	; 0x30
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f004 fcce 	bl	800676c <memset>
	for(int i = 0; i < latDegSize; i++){degMinSecBuffer[i+3-latDegSize] = receiveUART2Data[latStart+i+1+latNegDeg];}
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dd4:	e013      	b.n	8001dfe <getLatLongInMeters+0x1d6>
 8001dd6:	4b78      	ldr	r3, [pc, #480]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <getLatLongInMeters+0x394>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	18d2      	adds	r2, r2, r3
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de8:	1cd9      	adds	r1, r3, #3
 8001dea:	4b75      	ldr	r3, [pc, #468]	; (8001fc0 <getLatLongInMeters+0x398>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1acb      	subs	r3, r1, r3
 8001df0:	496c      	ldr	r1, [pc, #432]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001df2:	5c89      	ldrb	r1, [r1, r2]
 8001df4:	4a77      	ldr	r2, [pc, #476]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001df6:	54d1      	strb	r1, [r2, r3]
 8001df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dfe:	4b70      	ldr	r3, [pc, #448]	; (8001fc0 <getLatLongInMeters+0x398>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbe6      	blt.n	8001dd6 <getLatLongInMeters+0x1ae>
	latDeg = atoi(degMinSecBuffer);
 8001e08:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f004 fc7e 	bl	800670c <atoi>
 8001e10:	0002      	movs	r2, r0
 8001e12:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <getLatLongInMeters+0x3b0>)
 8001e14:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001e16:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001e18:	2203      	movs	r2, #3
 8001e1a:	2130      	movs	r1, #48	; 0x30
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f004 fca5 	bl	800676c <memset>
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+1+latNegDeg];}
 8001e22:	2301      	movs	r3, #1
 8001e24:	647b      	str	r3, [r7, #68]	; 0x44
 8001e26:	e014      	b.n	8001e52 <getLatLongInMeters+0x22a>
 8001e28:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2e:	18d2      	adds	r2, r2, r3
 8001e30:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <getLatLongInMeters+0x398>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	18d3      	adds	r3, r2, r3
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <getLatLongInMeters+0x394>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	18d3      	adds	r3, r2, r3
 8001e3e:	4a59      	ldr	r2, [pc, #356]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001e40:	5cd1      	ldrb	r1, [r2, r3]
 8001e42:	4a64      	ldr	r2, [pc, #400]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e46:	18d3      	adds	r3, r2, r3
 8001e48:	1c0a      	adds	r2, r1, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4e:	3301      	adds	r3, #1
 8001e50:	647b      	str	r3, [r7, #68]	; 0x44
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	dde7      	ble.n	8001e28 <getLatLongInMeters+0x200>
	latMin = atoi(degMinSecBuffer);
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f004 fc56 	bl	800670c <atoi>
 8001e60:	0002      	movs	r2, r0
 8001e62:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <getLatLongInMeters+0x3b4>)
 8001e64:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+3+latNegDeg];}
 8001e66:	2301      	movs	r3, #1
 8001e68:	643b      	str	r3, [r7, #64]	; 0x40
 8001e6a:	e014      	b.n	8001e96 <getLatLongInMeters+0x26e>
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e72:	18d2      	adds	r2, r2, r3
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <getLatLongInMeters+0x398>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	1cda      	adds	r2, r3, #3
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <getLatLongInMeters+0x394>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	18d3      	adds	r3, r2, r3
 8001e82:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001e84:	5cd1      	ldrb	r1, [r2, r3]
 8001e86:	4a53      	ldr	r2, [pc, #332]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8a:	18d3      	adds	r3, r2, r3
 8001e8c:	1c0a      	adds	r2, r1, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e92:	3301      	adds	r3, #1
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
 8001e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	dde7      	ble.n	8001e6c <getLatLongInMeters+0x244>
	latSecFirst = atoi(degMinSecBuffer);
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f004 fc34 	bl	800670c <atoi>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <getLatLongInMeters+0x3b8>)
 8001ea8:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+5+latNegDeg];}
 8001eaa:	2301      	movs	r3, #1
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eae:	e014      	b.n	8001eda <getLatLongInMeters+0x2b2>
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <getLatLongInMeters+0x390>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb6:	18d2      	adds	r2, r2, r3
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <getLatLongInMeters+0x398>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	18d3      	adds	r3, r2, r3
 8001ebe:	1d5a      	adds	r2, r3, #5
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <getLatLongInMeters+0x394>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	18d3      	adds	r3, r2, r3
 8001ec6:	4a37      	ldr	r2, [pc, #220]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001ec8:	5cd1      	ldrb	r1, [r2, r3]
 8001eca:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ece:	18d3      	adds	r3, r2, r3
 8001ed0:	1c0a      	adds	r2, r1, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	dde7      	ble.n	8001eb0 <getLatLongInMeters+0x288>
	latSecSecond = atoi(degMinSecBuffer);
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f004 fc12 	bl	800670c <atoi>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <getLatLongInMeters+0x3bc>)
 8001eec:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001eee:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	2130      	movs	r1, #48	; 0x30
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f004 fc39 	bl	800676c <memset>

	for(int i = 0; i < longDegSize; i++){degMinSecBuffer[i+3-longDegSize] = receiveUART2Data[latEndLongStart+i+1+longNegDeg];}
 8001efa:	2300      	movs	r3, #0
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001efe:	e013      	b.n	8001f28 <getLatLongInMeters+0x300>
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <getLatLongInMeters+0x39c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f06:	18d3      	adds	r3, r2, r3
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <getLatLongInMeters+0x3a0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	18d2      	adds	r2, r2, r3
 8001f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f12:	1cd9      	adds	r1, r3, #3
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <getLatLongInMeters+0x3a4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1acb      	subs	r3, r1, r3
 8001f1a:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001f1c:	5c89      	ldrb	r1, [r1, r2]
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001f20:	54d1      	strb	r1, [r2, r3]
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	3301      	adds	r3, #1
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <getLatLongInMeters+0x3a4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbe6      	blt.n	8001f00 <getLatLongInMeters+0x2d8>
	longDeg = atoi(degMinSecBuffer);
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001f34:	0018      	movs	r0, r3
 8001f36:	f004 fbe9 	bl	800670c <atoi>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <getLatLongInMeters+0x3c0>)
 8001f3e:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001f42:	2203      	movs	r2, #3
 8001f44:	2130      	movs	r1, #48	; 0x30
 8001f46:	0018      	movs	r0, r3
 8001f48:	f004 fc10 	bl	800676c <memset>
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+1+longNegDeg];}
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f50:	e014      	b.n	8001f7c <getLatLongInMeters+0x354>
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <getLatLongInMeters+0x39c>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f58:	18d2      	adds	r2, r2, r3
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <getLatLongInMeters+0x3a4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	18d3      	adds	r3, r2, r3
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <getLatLongInMeters+0x3a0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	18d3      	adds	r3, r2, r3
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <getLatLongInMeters+0x37c>)
 8001f6a:	5cd1      	ldrb	r1, [r2, r3]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	1c0a      	adds	r2, r1, #0
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	3301      	adds	r3, #1
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	dde7      	ble.n	8001f52 <getLatLongInMeters+0x32a>
	longMin = atoi(degMinSecBuffer);
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <getLatLongInMeters+0x3ac>)
 8001f84:	0018      	movs	r0, r3
 8001f86:	f004 fbc1 	bl	800670c <atoi>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <getLatLongInMeters+0x3c4>)
 8001f8e:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+3+longNegDeg];}
 8001f90:	2301      	movs	r3, #1
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
 8001f94:	e041      	b.n	800201a <getLatLongInMeters+0x3f2>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000190 	.word	0x20000190
 8001f9c:	08006924 	.word	0x08006924
 8001fa0:	20000370 	.word	0x20000370
 8001fa4:	200000f8 	.word	0x200000f8
 8001fa8:	2000021c 	.word	0x2000021c
 8001fac:	200003fc 	.word	0x200003fc
 8001fb0:	200002d4 	.word	0x200002d4
 8001fb4:	200002cc 	.word	0x200002cc
 8001fb8:	2000022c 	.word	0x2000022c
 8001fbc:	20000224 	.word	0x20000224
 8001fc0:	2000040c 	.word	0x2000040c
 8001fc4:	20000460 	.word	0x20000460
 8001fc8:	20000220 	.word	0x20000220
 8001fcc:	200002f8 	.word	0x200002f8
 8001fd0:	20000218 	.word	0x20000218
 8001fd4:	20000214 	.word	0x20000214
 8001fd8:	200001b4 	.word	0x200001b4
 8001fdc:	200002b4 	.word	0x200002b4
 8001fe0:	20000210 	.word	0x20000210
 8001fe4:	200002d8 	.word	0x200002d8
 8001fe8:	200001b0 	.word	0x200001b0
 8001fec:	20000228 	.word	0x20000228
 8001ff0:	4b84      	ldr	r3, [pc, #528]	; (8002204 <getLatLongInMeters+0x5dc>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff6:	18d2      	adds	r2, r2, r3
 8001ff8:	4b83      	ldr	r3, [pc, #524]	; (8002208 <getLatLongInMeters+0x5e0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	1cda      	adds	r2, r3, #3
 8002000:	4b82      	ldr	r3, [pc, #520]	; (800220c <getLatLongInMeters+0x5e4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	18d3      	adds	r3, r2, r3
 8002006:	4a82      	ldr	r2, [pc, #520]	; (8002210 <getLatLongInMeters+0x5e8>)
 8002008:	5cd1      	ldrb	r1, [r2, r3]
 800200a:	4a82      	ldr	r2, [pc, #520]	; (8002214 <getLatLongInMeters+0x5ec>)
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	18d3      	adds	r3, r2, r3
 8002010:	1c0a      	adds	r2, r1, #0
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	3301      	adds	r3, #1
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	2b02      	cmp	r3, #2
 800201e:	dde7      	ble.n	8001ff0 <getLatLongInMeters+0x3c8>
	longSecFirst = atoi(degMinSecBuffer);
 8002020:	4b7c      	ldr	r3, [pc, #496]	; (8002214 <getLatLongInMeters+0x5ec>)
 8002022:	0018      	movs	r0, r3
 8002024:	f004 fb72 	bl	800670c <atoi>
 8002028:	0002      	movs	r2, r0
 800202a:	4b7b      	ldr	r3, [pc, #492]	; (8002218 <getLatLongInMeters+0x5f0>)
 800202c:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+5+longNegDeg];}
 800202e:	2301      	movs	r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002032:	e014      	b.n	800205e <getLatLongInMeters+0x436>
 8002034:	4b73      	ldr	r3, [pc, #460]	; (8002204 <getLatLongInMeters+0x5dc>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	18d2      	adds	r2, r2, r3
 800203c:	4b72      	ldr	r3, [pc, #456]	; (8002208 <getLatLongInMeters+0x5e0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	1d5a      	adds	r2, r3, #5
 8002044:	4b71      	ldr	r3, [pc, #452]	; (800220c <getLatLongInMeters+0x5e4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	4a71      	ldr	r2, [pc, #452]	; (8002210 <getLatLongInMeters+0x5e8>)
 800204c:	5cd1      	ldrb	r1, [r2, r3]
 800204e:	4a71      	ldr	r2, [pc, #452]	; (8002214 <getLatLongInMeters+0x5ec>)
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	1c0a      	adds	r2, r1, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	3301      	adds	r3, #1
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	2b02      	cmp	r3, #2
 8002062:	dde7      	ble.n	8002034 <getLatLongInMeters+0x40c>
	longSecSecond = atoi(degMinSecBuffer);
 8002064:	4b6b      	ldr	r3, [pc, #428]	; (8002214 <getLatLongInMeters+0x5ec>)
 8002066:	0018      	movs	r0, r3
 8002068:	f004 fb50 	bl	800670c <atoi>
 800206c:	0002      	movs	r2, r0
 800206e:	4b6b      	ldr	r3, [pc, #428]	; (800221c <getLatLongInMeters+0x5f4>)
 8002070:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8002072:	4b68      	ldr	r3, [pc, #416]	; (8002214 <getLatLongInMeters+0x5ec>)
 8002074:	2203      	movs	r2, #3
 8002076:	2130      	movs	r1, #48	; 0x30
 8002078:	0018      	movs	r0, r3
 800207a:	f004 fb77 	bl	800676c <memset>

	latInMeters = (latDeg*111000.0)+(latMin*1850.0)+(latSecFirst*30.0)+(latSecSecond*0.3);
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <getLatLongInMeters+0x5f8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff f8d8 	bl	8001238 <__aeabi_i2d>
 8002088:	2200      	movs	r2, #0
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <getLatLongInMeters+0x5fc>)
 800208c:	f7fe fe68 	bl	8000d60 <__aeabi_dmul>
 8002090:	0002      	movs	r2, r0
 8002092:	000b      	movs	r3, r1
 8002094:	0014      	movs	r4, r2
 8002096:	001d      	movs	r5, r3
 8002098:	4b63      	ldr	r3, [pc, #396]	; (8002228 <getLatLongInMeters+0x600>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff f8cb 	bl	8001238 <__aeabi_i2d>
 80020a2:	2200      	movs	r2, #0
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <getLatLongInMeters+0x604>)
 80020a6:	f7fe fe5b 	bl	8000d60 <__aeabi_dmul>
 80020aa:	0002      	movs	r2, r0
 80020ac:	000b      	movs	r3, r1
 80020ae:	0020      	movs	r0, r4
 80020b0:	0029      	movs	r1, r5
 80020b2:	f7fe faeb 	bl	800068c <__aeabi_dadd>
 80020b6:	0002      	movs	r2, r0
 80020b8:	000b      	movs	r3, r1
 80020ba:	0014      	movs	r4, r2
 80020bc:	001d      	movs	r5, r3
 80020be:	4b5c      	ldr	r3, [pc, #368]	; (8002230 <getLatLongInMeters+0x608>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff f8b8 	bl	8001238 <__aeabi_i2d>
 80020c8:	2200      	movs	r2, #0
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <getLatLongInMeters+0x60c>)
 80020cc:	f7fe fe48 	bl	8000d60 <__aeabi_dmul>
 80020d0:	0002      	movs	r2, r0
 80020d2:	000b      	movs	r3, r1
 80020d4:	0020      	movs	r0, r4
 80020d6:	0029      	movs	r1, r5
 80020d8:	f7fe fad8 	bl	800068c <__aeabi_dadd>
 80020dc:	0002      	movs	r2, r0
 80020de:	000b      	movs	r3, r1
 80020e0:	0014      	movs	r4, r2
 80020e2:	001d      	movs	r5, r3
 80020e4:	4b54      	ldr	r3, [pc, #336]	; (8002238 <getLatLongInMeters+0x610>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f7ff f8a5 	bl	8001238 <__aeabi_i2d>
 80020ee:	4a53      	ldr	r2, [pc, #332]	; (800223c <getLatLongInMeters+0x614>)
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <getLatLongInMeters+0x618>)
 80020f2:	f7fe fe35 	bl	8000d60 <__aeabi_dmul>
 80020f6:	0002      	movs	r2, r0
 80020f8:	000b      	movs	r3, r1
 80020fa:	0020      	movs	r0, r4
 80020fc:	0029      	movs	r1, r5
 80020fe:	f7fe fac5 	bl	800068c <__aeabi_dadd>
 8002102:	0002      	movs	r2, r0
 8002104:	000b      	movs	r3, r1
 8002106:	0010      	movs	r0, r2
 8002108:	0019      	movs	r1, r3
 800210a:	f7ff f8c5 	bl	8001298 <__aeabi_d2f>
 800210e:	1c02      	adds	r2, r0, #0
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <getLatLongInMeters+0x61c>)
 8002112:	601a      	str	r2, [r3, #0]
	//dlatInMeters = abs(latInMeters - prevlatInMeters);
	//prevlatInMeters = latInMeters;

	longInMeters = (longDeg*111000.0)+(longMin*1850.0)+(longSecFirst*30.0)+(longSecSecond*0.3);
 8002114:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <getLatLongInMeters+0x620>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff f88d 	bl	8001238 <__aeabi_i2d>
 800211e:	2200      	movs	r2, #0
 8002120:	4b40      	ldr	r3, [pc, #256]	; (8002224 <getLatLongInMeters+0x5fc>)
 8002122:	f7fe fe1d 	bl	8000d60 <__aeabi_dmul>
 8002126:	0002      	movs	r2, r0
 8002128:	000b      	movs	r3, r1
 800212a:	0014      	movs	r4, r2
 800212c:	001d      	movs	r5, r3
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <getLatLongInMeters+0x624>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff f880 	bl	8001238 <__aeabi_i2d>
 8002138:	2200      	movs	r2, #0
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <getLatLongInMeters+0x604>)
 800213c:	f7fe fe10 	bl	8000d60 <__aeabi_dmul>
 8002140:	0002      	movs	r2, r0
 8002142:	000b      	movs	r3, r1
 8002144:	0020      	movs	r0, r4
 8002146:	0029      	movs	r1, r5
 8002148:	f7fe faa0 	bl	800068c <__aeabi_dadd>
 800214c:	0002      	movs	r2, r0
 800214e:	000b      	movs	r3, r1
 8002150:	0014      	movs	r4, r2
 8002152:	001d      	movs	r5, r3
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <getLatLongInMeters+0x5f0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff f86d 	bl	8001238 <__aeabi_i2d>
 800215e:	2200      	movs	r2, #0
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <getLatLongInMeters+0x60c>)
 8002162:	f7fe fdfd 	bl	8000d60 <__aeabi_dmul>
 8002166:	0002      	movs	r2, r0
 8002168:	000b      	movs	r3, r1
 800216a:	0020      	movs	r0, r4
 800216c:	0029      	movs	r1, r5
 800216e:	f7fe fa8d 	bl	800068c <__aeabi_dadd>
 8002172:	0002      	movs	r2, r0
 8002174:	000b      	movs	r3, r1
 8002176:	0014      	movs	r4, r2
 8002178:	001d      	movs	r5, r3
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <getLatLongInMeters+0x5f4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0018      	movs	r0, r3
 8002180:	f7ff f85a 	bl	8001238 <__aeabi_i2d>
 8002184:	4a2d      	ldr	r2, [pc, #180]	; (800223c <getLatLongInMeters+0x614>)
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <getLatLongInMeters+0x618>)
 8002188:	f7fe fdea 	bl	8000d60 <__aeabi_dmul>
 800218c:	0002      	movs	r2, r0
 800218e:	000b      	movs	r3, r1
 8002190:	0020      	movs	r0, r4
 8002192:	0029      	movs	r1, r5
 8002194:	f7fe fa7a 	bl	800068c <__aeabi_dadd>
 8002198:	0002      	movs	r2, r0
 800219a:	000b      	movs	r3, r1
 800219c:	0010      	movs	r0, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	f7ff f87a 	bl	8001298 <__aeabi_d2f>
 80021a4:	1c02      	adds	r2, r0, #0
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <getLatLongInMeters+0x628>)
 80021a8:	601a      	str	r2, [r3, #0]
	//dlongInMeters = abs(longInMeters - prevlongInMeters);
	//prevlongInMeters = longInMeters;
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <getLatLongInMeters+0x5e8>)
 80021ac:	2296      	movs	r2, #150	; 0x96
 80021ae:	213f      	movs	r1, #63	; 0x3f
 80021b0:	0018      	movs	r0, r3
 80021b2:	f004 fadb 	bl	800676c <memset>

	latlongstruct.gnssFixOk 	= gnssFixStatus;
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <getLatLongInMeters+0x62c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	2114      	movs	r1, #20
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	749a      	strb	r2, [r3, #18]
	latlongstruct.uartStatusOk	= uart2Status;
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	222b      	movs	r2, #43	; 0x2b
 80021c6:	18ba      	adds	r2, r7, r2
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	74da      	strb	r2, [r3, #19]
	latlongstruct.latNeg		= latNegDeg;
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <getLatLongInMeters+0x630>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	741a      	strb	r2, [r3, #16]
	latlongstruct.longNeg		= longNegDeg;
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <getLatLongInMeters+0x5e4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	745a      	strb	r2, [r3, #17]
	latlongstruct.latInMeters	= latInMeters;
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <getLatLongInMeters+0x61c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	609a      	str	r2, [r3, #8]
	latlongstruct.longInMeters	= longInMeters;
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <getLatLongInMeters+0x628>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	60da      	str	r2, [r3, #12]

	return latlongstruct;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	187a      	adds	r2, r7, r1
 80021f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021f6:	c313      	stmia	r3!, {r0, r1, r4}
 80021f8:	ca03      	ldmia	r2!, {r0, r1}
 80021fa:	c303      	stmia	r3!, {r0, r1}
}
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	46bd      	mov	sp, r7
 8002200:	b016      	add	sp, #88	; 0x58
 8002202:	bdb0      	pop	{r4, r5, r7, pc}
 8002204:	20000460 	.word	0x20000460
 8002208:	200002f8 	.word	0x200002f8
 800220c:	20000220 	.word	0x20000220
 8002210:	200000f8 	.word	0x200000f8
 8002214:	20000214 	.word	0x20000214
 8002218:	200002f4 	.word	0x200002f4
 800221c:	200002f0 	.word	0x200002f0
 8002220:	200001b4 	.word	0x200001b4
 8002224:	40fb1980 	.word	0x40fb1980
 8002228:	200002b4 	.word	0x200002b4
 800222c:	409ce800 	.word	0x409ce800
 8002230:	20000210 	.word	0x20000210
 8002234:	403e0000 	.word	0x403e0000
 8002238:	200002d8 	.word	0x200002d8
 800223c:	33333333 	.word	0x33333333
 8002240:	3fd33333 	.word	0x3fd33333
 8002244:	200003f4 	.word	0x200003f4
 8002248:	200001b0 	.word	0x200001b0
 800224c:	20000228 	.word	0x20000228
 8002250:	200003f8 	.word	0x200003f8
 8002254:	200002cc 	.word	0x200002cc
 8002258:	20000224 	.word	0x20000224

0800225c <getOffsetFromHome>:

struct OffsetFromHome getOffsetFromHome(struct LatLongStruct latlongstruct, struct LatLongStruct prevlatlongstruct, char homeLocked){
 800225c:	b084      	sub	sp, #16
 800225e:	b590      	push	{r4, r7, lr}
 8002260:	46c6      	mov	lr, r8
 8002262:	b500      	push	{lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	2004      	movs	r0, #4
 800226c:	2418      	movs	r4, #24
 800226e:	46a4      	mov	ip, r4
 8002270:	2408      	movs	r4, #8
 8002272:	46a0      	mov	r8, r4
 8002274:	44b8      	add	r8, r7
 8002276:	44c4      	add	ip, r8
 8002278:	4460      	add	r0, ip
 800227a:	6001      	str	r1, [r0, #0]
 800227c:	6042      	str	r2, [r0, #4]
 800227e:	6083      	str	r3, [r0, #8]
	enterToFunction = 2; // TODO delete
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <getOffsetFromHome+0x114>)
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
	struct OffsetFromHome offsetfromhome;
	if(homeLocked == 0){
 8002286:	232c      	movs	r3, #44	; 0x2c
 8002288:	2218      	movs	r2, #24
 800228a:	4694      	mov	ip, r2
 800228c:	2208      	movs	r2, #8
 800228e:	4690      	mov	r8, r2
 8002290:	44b8      	add	r8, r7
 8002292:	44c4      	add	ip, r8
 8002294:	4463      	add	r3, ip
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <getOffsetFromHome+0x4e>
		offsetfromhome.offsetLatInMeters = 0.0;
 800229c:	2108      	movs	r1, #8
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
		offsetfromhome.offsetLongInMeters = 0.0;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
	}
	if(homeLocked == 1){
 80022aa:	232c      	movs	r3, #44	; 0x2c
 80022ac:	2218      	movs	r2, #24
 80022ae:	4694      	mov	ip, r2
 80022b0:	2208      	movs	r2, #8
 80022b2:	4690      	mov	r8, r2
 80022b4:	44b8      	add	r8, r7
 80022b6:	44c4      	add	ip, r8
 80022b8:	4463      	add	r3, ip
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d148      	bne.n	8002352 <getOffsetFromHome+0xf6>
		offsetfromhome.offsetLatInMeters = abs(latlongstruct.latInMeters - prevlatlongstruct.latInMeters);
 80022c0:	2304      	movs	r3, #4
 80022c2:	2218      	movs	r2, #24
 80022c4:	4694      	mov	ip, r2
 80022c6:	2208      	movs	r2, #8
 80022c8:	4690      	mov	r8, r2
 80022ca:	44b8      	add	r8, r7
 80022cc:	44c4      	add	ip, r8
 80022ce:	4463      	add	r3, ip
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	2318      	movs	r3, #24
 80022d4:	2118      	movs	r1, #24
 80022d6:	468c      	mov	ip, r1
 80022d8:	2108      	movs	r1, #8
 80022da:	4688      	mov	r8, r1
 80022dc:	44b8      	add	r8, r7
 80022de:	44c4      	add	ip, r8
 80022e0:	4463      	add	r3, ip
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	1c19      	adds	r1, r3, #0
 80022e6:	1c10      	adds	r0, r2, #0
 80022e8:	f7fd ffa2 	bl	8000230 <__aeabi_fsub>
 80022ec:	1c03      	adds	r3, r0, #0
 80022ee:	1c18      	adds	r0, r3, #0
 80022f0:	f7fe f966 	bl	80005c0 <__aeabi_f2iz>
 80022f4:	0003      	movs	r3, r0
 80022f6:	17da      	asrs	r2, r3, #31
 80022f8:	189b      	adds	r3, r3, r2
 80022fa:	4053      	eors	r3, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7fe f97f 	bl	8000600 <__aeabi_i2f>
 8002302:	1c02      	adds	r2, r0, #0
 8002304:	2408      	movs	r4, #8
 8002306:	193b      	adds	r3, r7, r4
 8002308:	601a      	str	r2, [r3, #0]
		offsetfromhome.offsetLongInMeters = abs(latlongstruct.longInMeters - prevlatlongstruct.longInMeters);
 800230a:	2304      	movs	r3, #4
 800230c:	2218      	movs	r2, #24
 800230e:	4694      	mov	ip, r2
 8002310:	2208      	movs	r2, #8
 8002312:	4690      	mov	r8, r2
 8002314:	44b8      	add	r8, r7
 8002316:	44c4      	add	ip, r8
 8002318:	4463      	add	r3, ip
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	2318      	movs	r3, #24
 800231e:	2118      	movs	r1, #24
 8002320:	468c      	mov	ip, r1
 8002322:	2108      	movs	r1, #8
 8002324:	4688      	mov	r8, r1
 8002326:	44b8      	add	r8, r7
 8002328:	44c4      	add	ip, r8
 800232a:	4463      	add	r3, ip
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	1c19      	adds	r1, r3, #0
 8002330:	1c10      	adds	r0, r2, #0
 8002332:	f7fd ff7d 	bl	8000230 <__aeabi_fsub>
 8002336:	1c03      	adds	r3, r0, #0
 8002338:	1c18      	adds	r0, r3, #0
 800233a:	f7fe f941 	bl	80005c0 <__aeabi_f2iz>
 800233e:	0003      	movs	r3, r0
 8002340:	17da      	asrs	r2, r3, #31
 8002342:	189b      	adds	r3, r3, r2
 8002344:	4053      	eors	r3, r2
 8002346:	0018      	movs	r0, r3
 8002348:	f7fe f95a 	bl	8000600 <__aeabi_i2f>
 800234c:	1c02      	adds	r2, r0, #0
 800234e:	193b      	adds	r3, r7, r4
 8002350:	605a      	str	r2, [r3, #4]
	}
	return offsetfromhome;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2208      	movs	r2, #8
 8002356:	18ba      	adds	r2, r7, r2
 8002358:	ca03      	ldmia	r2!, {r0, r1}
 800235a:	c303      	stmia	r3!, {r0, r1}
}
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	46bd      	mov	sp, r7
 8002360:	b004      	add	sp, #16
 8002362:	bc80      	pop	{r7}
 8002364:	46b8      	mov	r8, r7
 8002366:	bc90      	pop	{r4, r7}
 8002368:	bc08      	pop	{r3}
 800236a:	b004      	add	sp, #16
 800236c:	4718      	bx	r3
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	20000190 	.word	0x20000190

08002374 <mpuInit>:

char mpuInit(void){
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	b08d      	sub	sp, #52	; 0x34
 8002378:	af02      	add	r7, sp, #8
	char initStatus = 0;
 800237a:	2427      	movs	r4, #39	; 0x27
 800237c:	193b      	adds	r3, r7, r4
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	//=========================MPU9250
	// Registers
	IMUDevAddr 						= 0xd0;
 8002382:	4b76      	ldr	r3, [pc, #472]	; (800255c <mpuInit+0x1e8>)
 8002384:	22d0      	movs	r2, #208	; 0xd0
 8002386:	701a      	strb	r2, [r3, #0]
	uint8_t WOM_THR[2]				= {0x1f, 0x7f};			// threshold
	uint8_t maskLP_ACCEL_ODR[2] 	= {0x1e, 0b00000100}; 	// frequency of wake-up
	uint8_t PWR_MGMT_1_new[2] 		= {0x6b, 0b00100000};	// cycle mode
	uint8_t INT_PIN_CFG[2] 			= {0x37, 0b00110000};	//3a*/

	uint8_t ACCEL_CONFIG[2] 		= {0x1c, 0x0}; 			// 0x0 for 2g, 0x8 for 4g, 0x10 for 8g,0x18 for 16g
 8002388:	2524      	movs	r5, #36	; 0x24
 800238a:	197b      	adds	r3, r7, r5
 800238c:	221c      	movs	r2, #28
 800238e:	801a      	strh	r2, [r3, #0]
	uint8_t WHO_AM_I 				= 0x75;
 8002390:	2623      	movs	r6, #35	; 0x23
 8002392:	19bb      	adds	r3, r7, r6
 8002394:	2275      	movs	r2, #117	; 0x75
 8002396:	701a      	strb	r2, [r3, #0]
    uint8_t PWR_MGMT_1[2] = {0x6b, 0b00000001};//6b
 8002398:	2020      	movs	r0, #32
 800239a:	183b      	adds	r3, r7, r0
 800239c:	226c      	movs	r2, #108	; 0x6c
 800239e:	32ff      	adds	r2, #255	; 0xff
 80023a0:	801a      	strh	r2, [r3, #0]
    uint8_t PWR_MGMT_2[2] = {0x6c, 0b00000111};//6c
 80023a2:	231c      	movs	r3, #28
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <mpuInit+0x1ec>)
 80023a8:	801a      	strh	r2, [r3, #0]
    uint8_t ACCEL_CONFIG_2[2] ={0x1d, 0b00000101};//1d
 80023aa:	2218      	movs	r2, #24
 80023ac:	18bb      	adds	r3, r7, r2
 80023ae:	4a6d      	ldr	r2, [pc, #436]	; (8002564 <mpuInit+0x1f0>)
 80023b0:	801a      	strh	r2, [r3, #0]
    uint8_t INT_ENABLE[2] = {0x38, 0x40};//38
 80023b2:	2214      	movs	r2, #20
 80023b4:	18bb      	adds	r3, r7, r2
 80023b6:	4a6c      	ldr	r2, [pc, #432]	; (8002568 <mpuInit+0x1f4>)
 80023b8:	801a      	strh	r2, [r3, #0]
    uint8_t MOT_DETECT_CTRL[2] = {0x69, 0b11000000};//69
 80023ba:	2210      	movs	r2, #16
 80023bc:	18bb      	adds	r3, r7, r2
 80023be:	4a6b      	ldr	r2, [pc, #428]	; (800256c <mpuInit+0x1f8>)
 80023c0:	801a      	strh	r2, [r3, #0]
    uint8_t WOM_THR[2]={0x1f, 0x7f};//1f
 80023c2:	220c      	movs	r2, #12
 80023c4:	18bb      	adds	r3, r7, r2
 80023c6:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <mpuInit+0x1fc>)
 80023c8:	801a      	strh	r2, [r3, #0]
    uint8_t LP_ACCEL_ODR[2] = {0x1e, 0b00000100};//1e
 80023ca:	2208      	movs	r2, #8
 80023cc:	18bb      	adds	r3, r7, r2
 80023ce:	4a69      	ldr	r2, [pc, #420]	; (8002574 <mpuInit+0x200>)
 80023d0:	801a      	strh	r2, [r3, #0]
    uint8_t PWR_MGMT_1_new[2] = {0x6b, 0b00100000};//6b
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	4a68      	ldr	r2, [pc, #416]	; (8002578 <mpuInit+0x204>)
 80023d6:	801a      	strh	r2, [r3, #0]
    uint8_t INT_PIN_CFG[2] = {0x37, 0b00110000};//3a
 80023d8:	003b      	movs	r3, r7
 80023da:	4a68      	ldr	r2, [pc, #416]	; (800257c <mpuInit+0x208>)
 80023dc:	801a      	strh	r2, [r3, #0]

	ACCEL_XOUT_L 			= 0x3c;
 80023de:	4b68      	ldr	r3, [pc, #416]	; (8002580 <mpuInit+0x20c>)
 80023e0:	223c      	movs	r2, #60	; 0x3c
 80023e2:	701a      	strb	r2, [r3, #0]
	ACCEL_XOUT_H 			= 0x3b;
 80023e4:	4b67      	ldr	r3, [pc, #412]	; (8002584 <mpuInit+0x210>)
 80023e6:	223b      	movs	r2, #59	; 0x3b
 80023e8:	701a      	strb	r2, [r3, #0]
	ACCEL_YOUT_L 			= 0x3e;
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <mpuInit+0x214>)
 80023ec:	223e      	movs	r2, #62	; 0x3e
 80023ee:	701a      	strb	r2, [r3, #0]
	ACCEL_YOUT_H 			= 0x3d;
 80023f0:	4b66      	ldr	r3, [pc, #408]	; (800258c <mpuInit+0x218>)
 80023f2:	223d      	movs	r2, #61	; 0x3d
 80023f4:	701a      	strb	r2, [r3, #0]
	ACCEL_ZOUT_L 			= 0x40;
 80023f6:	4b66      	ldr	r3, [pc, #408]	; (8002590 <mpuInit+0x21c>)
 80023f8:	2240      	movs	r2, #64	; 0x40
 80023fa:	701a      	strb	r2, [r3, #0]
	ACCEL_ZOUT_H 			= 0x3f;
 80023fc:	4b65      	ldr	r3, [pc, #404]	; (8002594 <mpuInit+0x220>)
 80023fe:	223f      	movs	r2, #63	; 0x3f
 8002400:	701a      	strb	r2, [r3, #0]

	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_1, sizeof(PWR_MGMT_1), 10);
 8002402:	4b56      	ldr	r3, [pc, #344]	; (800255c <mpuInit+0x1e8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b299      	uxth	r1, r3
 8002408:	183a      	adds	r2, r7, r0
 800240a:	4863      	ldr	r0, [pc, #396]	; (8002598 <mpuInit+0x224>)
 800240c:	230a      	movs	r3, #10
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2302      	movs	r3, #2
 8002412:	f001 f9df 	bl	80037d4 <HAL_I2C_Master_Transmit>
 8002416:	0003      	movs	r3, r0
 8002418:	001a      	movs	r2, r3
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <mpuInit+0x228>)
 800241c:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 800241e:	4b4f      	ldr	r3, [pc, #316]	; (800255c <mpuInit+0x1e8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b299      	uxth	r1, r3
 8002424:	4a5e      	ldr	r2, [pc, #376]	; (80025a0 <mpuInit+0x22c>)
 8002426:	485c      	ldr	r0, [pc, #368]	; (8002598 <mpuInit+0x224>)
 8002428:	230a      	movs	r3, #10
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2301      	movs	r3, #1
 800242e:	f001 fad9 	bl	80039e4 <HAL_I2C_Master_Receive>
 8002432:	0003      	movs	r3, r0
 8002434:	001a      	movs	r2, r3
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <mpuInit+0x228>)
 8002438:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 800243a:	200a      	movs	r0, #10
 800243c:	f000 fdf6 	bl	800302c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_2, sizeof(PWR_MGMT_2), 10);
 8002440:	4b46      	ldr	r3, [pc, #280]	; (800255c <mpuInit+0x1e8>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b299      	uxth	r1, r3
 8002446:	231c      	movs	r3, #28
 8002448:	18fa      	adds	r2, r7, r3
 800244a:	4853      	ldr	r0, [pc, #332]	; (8002598 <mpuInit+0x224>)
 800244c:	230a      	movs	r3, #10
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2302      	movs	r3, #2
 8002452:	f001 f9bf 	bl	80037d4 <HAL_I2C_Master_Transmit>
 8002456:	0003      	movs	r3, r0
 8002458:	001a      	movs	r2, r3
 800245a:	4b50      	ldr	r3, [pc, #320]	; (800259c <mpuInit+0x228>)
 800245c:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <mpuInit+0x1e8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b299      	uxth	r1, r3
 8002464:	4a4e      	ldr	r2, [pc, #312]	; (80025a0 <mpuInit+0x22c>)
 8002466:	484c      	ldr	r0, [pc, #304]	; (8002598 <mpuInit+0x224>)
 8002468:	230a      	movs	r3, #10
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2301      	movs	r3, #1
 800246e:	f001 fab9 	bl	80039e4 <HAL_I2C_Master_Receive>
 8002472:	0003      	movs	r3, r0
 8002474:	001a      	movs	r2, r3
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <mpuInit+0x228>)
 8002478:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 800247a:	200a      	movs	r0, #10
 800247c:	f000 fdd6 	bl	800302c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &WHO_AM_I, sizeof(WHO_AM_I), 10);
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <mpuInit+0x1e8>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b299      	uxth	r1, r3
 8002486:	19ba      	adds	r2, r7, r6
 8002488:	4843      	ldr	r0, [pc, #268]	; (8002598 <mpuInit+0x224>)
 800248a:	230a      	movs	r3, #10
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2301      	movs	r3, #1
 8002490:	f001 f9a0 	bl	80037d4 <HAL_I2C_Master_Transmit>
 8002494:	0003      	movs	r3, r0
 8002496:	001a      	movs	r2, r3
 8002498:	4b40      	ldr	r3, [pc, #256]	; (800259c <mpuInit+0x228>)
 800249a:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <mpuInit+0x1e8>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b299      	uxth	r1, r3
 80024a2:	4a3f      	ldr	r2, [pc, #252]	; (80025a0 <mpuInit+0x22c>)
 80024a4:	483c      	ldr	r0, [pc, #240]	; (8002598 <mpuInit+0x224>)
 80024a6:	230a      	movs	r3, #10
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	f001 fa9a 	bl	80039e4 <HAL_I2C_Master_Receive>
 80024b0:	0003      	movs	r3, r0
 80024b2:	001a      	movs	r2, r3
 80024b4:	4b39      	ldr	r3, [pc, #228]	; (800259c <mpuInit+0x228>)
 80024b6:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 80024b8:	200a      	movs	r0, #10
 80024ba:	f000 fdb7 	bl	800302c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, LP_ACCEL_ODR, sizeof(LP_ACCEL_ODR), 10);
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <mpuInit+0x1e8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b299      	uxth	r1, r3
 80024c4:	2208      	movs	r2, #8
 80024c6:	18ba      	adds	r2, r7, r2
 80024c8:	4833      	ldr	r0, [pc, #204]	; (8002598 <mpuInit+0x224>)
 80024ca:	230a      	movs	r3, #10
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2302      	movs	r3, #2
 80024d0:	f001 f980 	bl	80037d4 <HAL_I2C_Master_Transmit>
 80024d4:	0003      	movs	r3, r0
 80024d6:	001a      	movs	r2, r3
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <mpuInit+0x228>)
 80024da:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <mpuInit+0x1e8>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b299      	uxth	r1, r3
 80024e2:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <mpuInit+0x22c>)
 80024e4:	482c      	ldr	r0, [pc, #176]	; (8002598 <mpuInit+0x224>)
 80024e6:	230a      	movs	r3, #10
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2301      	movs	r3, #1
 80024ec:	f001 fa7a 	bl	80039e4 <HAL_I2C_Master_Receive>
 80024f0:	0003      	movs	r3, r0
 80024f2:	001a      	movs	r2, r3
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <mpuInit+0x228>)
 80024f6:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 80024f8:	200a      	movs	r0, #10
 80024fa:	f000 fd97 	bl	800302c <HAL_Delay>
	i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), 10);
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <mpuInit+0x1e8>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b299      	uxth	r1, r3
 8002504:	197a      	adds	r2, r7, r5
 8002506:	4824      	ldr	r0, [pc, #144]	; (8002598 <mpuInit+0x224>)
 8002508:	230a      	movs	r3, #10
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2302      	movs	r3, #2
 800250e:	f001 f961 	bl	80037d4 <HAL_I2C_Master_Transmit>
 8002512:	0003      	movs	r3, r0
 8002514:	001a      	movs	r2, r3
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <mpuInit+0x228>)
 8002518:	701a      	strb	r2, [r3, #0]
	i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <mpuInit+0x1e8>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b299      	uxth	r1, r3
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <mpuInit+0x22c>)
 8002522:	481d      	ldr	r0, [pc, #116]	; (8002598 <mpuInit+0x224>)
 8002524:	230a      	movs	r3, #10
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2301      	movs	r3, #1
 800252a:	f001 fa5b 	bl	80039e4 <HAL_I2C_Master_Receive>
 800252e:	0003      	movs	r3, r0
 8002530:	001a      	movs	r2, r3
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <mpuInit+0x228>)
 8002534:	701a      	strb	r2, [r3, #0]
//=========================MPU9250
	uartStatus = HAL_UART_Receive_IT(&huart1, receiveUARTData, 14);
 8002536:	491b      	ldr	r1, [pc, #108]	; (80025a4 <mpuInit+0x230>)
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <mpuInit+0x234>)
 800253a:	220e      	movs	r2, #14
 800253c:	0018      	movs	r0, r3
 800253e:	f002 ffcb 	bl	80054d8 <HAL_UART_Receive_IT>
 8002542:	0003      	movs	r3, r0
 8002544:	001a      	movs	r2, r3
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <mpuInit+0x238>)
 8002548:	701a      	strb	r2, [r3, #0]
	initStatus = 1;
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
	return initStatus;
 8002550:	193b      	adds	r3, r7, r4
 8002552:	781b      	ldrb	r3, [r3, #0]
}
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b00b      	add	sp, #44	; 0x2c
 800255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255c:	200000cc 	.word	0x200000cc
 8002560:	0000076c 	.word	0x0000076c
 8002564:	0000051d 	.word	0x0000051d
 8002568:	00004038 	.word	0x00004038
 800256c:	ffffc069 	.word	0xffffc069
 8002570:	00007f1f 	.word	0x00007f1f
 8002574:	0000041e 	.word	0x0000041e
 8002578:	0000206b 	.word	0x0000206b
 800257c:	00003037 	.word	0x00003037
 8002580:	200000cd 	.word	0x200000cd
 8002584:	200000ce 	.word	0x200000ce
 8002588:	200000cf 	.word	0x200000cf
 800258c:	200000d0 	.word	0x200000d0
 8002590:	200000d1 	.word	0x200000d1
 8002594:	200000d2 	.word	0x200000d2
 8002598:	200001bc 	.word	0x200001bc
 800259c:	200001b8 	.word	0x200001b8
 80025a0:	200000d4 	.word	0x200000d4
 80025a4:	200000d8 	.word	0x200000d8
 80025a8:	20000230 	.word	0x20000230
 80025ac:	20000208 	.word	0x20000208

080025b0 <gnssInit>:



char gnssInit(void){
 80025b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b2:	b099      	sub	sp, #100	; 0x64
 80025b4:	af00      	add	r7, sp, #0
	// TODO Add proper status return or error handling
	char initStatus = 0;
 80025b6:	245f      	movs	r4, #95	; 0x5f
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
	//=========================GNSS
	uint8_t AT_CGNSPWR_ON[] 	= "AT+CGNSPWR=1\r";				// GNSS turns Power ON
 80025be:	2050      	movs	r0, #80	; 0x50
 80025c0:	183b      	adds	r3, r7, r0
 80025c2:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <gnssInit+0x130>)
 80025c4:	ca62      	ldmia	r2!, {r1, r5, r6}
 80025c6:	c362      	stmia	r3!, {r1, r5, r6}
 80025c8:	8812      	ldrh	r2, [r2, #0]
 80025ca:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSPWR_OFF[] 	= "AT+CGNSPWR=0\r";				// GNSS turns Power OFF
 80025cc:	2340      	movs	r3, #64	; 0x40
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	4a44      	ldr	r2, [pc, #272]	; (80026e4 <gnssInit+0x134>)
 80025d2:	ca62      	ldmia	r2!, {r1, r5, r6}
 80025d4:	c362      	stmia	r3!, {r1, r5, r6}
 80025d6:	8812      	ldrh	r2, [r2, #0]
 80025d8:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSSEQ[] 		= "AT+CGNSSEQ=\"RMC\"\r";		// RMC for GGA
 80025da:	252c      	movs	r5, #44	; 0x2c
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	4a42      	ldr	r2, [pc, #264]	; (80026e8 <gnssInit+0x138>)
 80025e0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80025e2:	c343      	stmia	r3!, {r0, r1, r6}
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	6019      	str	r1, [r3, #0]
 80025e8:	8892      	ldrh	r2, [r2, #4]
 80025ea:	809a      	strh	r2, [r3, #4]
	uint8_t AT_CGNSINF[] 		= "AT+CGNSINF\r";				// Gets data from GNSS
 80025ec:	2320      	movs	r3, #32
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	4a3e      	ldr	r2, [pc, #248]	; (80026ec <gnssInit+0x13c>)
 80025f2:	ca43      	ldmia	r2!, {r0, r1, r6}
 80025f4:	c343      	stmia	r3!, {r0, r1, r6}
	uint8_t AT_CGNSURC_SET[] 	= "AT+CGNSURC=0\r";
 80025f6:	2610      	movs	r6, #16
 80025f8:	19bb      	adds	r3, r7, r6
 80025fa:	4a3d      	ldr	r2, [pc, #244]	; (80026f0 <gnssInit+0x140>)
 80025fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025fe:	c313      	stmia	r3!, {r0, r1, r4}
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSURC_ASK[] 	= "AT+CGNSURC?\r";
 8002604:	003b      	movs	r3, r7
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <gnssInit+0x144>)
 8002608:	ca13      	ldmia	r2!, {r0, r1, r4}
 800260a:	c313      	stmia	r3!, {r0, r1, r4}
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	701a      	strb	r2, [r3, #0]
	//=========================GNSS

	//=========================GNSS
	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSPWR_ON, sizeof(AT_CGNSPWR_ON), 1000);
 8002610:	23fa      	movs	r3, #250	; 0xfa
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	2050      	movs	r0, #80	; 0x50
 8002616:	1839      	adds	r1, r7, r0
 8002618:	4837      	ldr	r0, [pc, #220]	; (80026f8 <gnssInit+0x148>)
 800261a:	220e      	movs	r2, #14
 800261c:	f002 fdc2 	bl	80051a4 <HAL_UART_Transmit>
 8002620:	0003      	movs	r3, r0
 8002622:	001a      	movs	r2, r3
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <gnssInit+0x14c>)
 8002626:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8002628:	23fa      	movs	r3, #250	; 0xfa
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4934      	ldr	r1, [pc, #208]	; (8002700 <gnssInit+0x150>)
 800262e:	4832      	ldr	r0, [pc, #200]	; (80026f8 <gnssInit+0x148>)
 8002630:	2296      	movs	r2, #150	; 0x96
 8002632:	f002 fe61 	bl	80052f8 <HAL_UART_Receive>
 8002636:	0003      	movs	r3, r0
 8002638:	001a      	movs	r2, r3
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <gnssInit+0x14c>)
 800263c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 800263e:	2014      	movs	r0, #20
 8002640:	f000 fcf4 	bl	800302c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <gnssInit+0x150>)
 8002646:	2296      	movs	r2, #150	; 0x96
 8002648:	213f      	movs	r1, #63	; 0x3f
 800264a:	0018      	movs	r0, r3
 800264c:	f004 f88e 	bl	800676c <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSURC_SET, sizeof(AT_CGNSURC_SET), 1000);
 8002650:	23fa      	movs	r3, #250	; 0xfa
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	19b9      	adds	r1, r7, r6
 8002656:	4828      	ldr	r0, [pc, #160]	; (80026f8 <gnssInit+0x148>)
 8002658:	220e      	movs	r2, #14
 800265a:	f002 fda3 	bl	80051a4 <HAL_UART_Transmit>
 800265e:	0003      	movs	r3, r0
 8002660:	001a      	movs	r2, r3
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <gnssInit+0x14c>)
 8002664:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8002666:	23fa      	movs	r3, #250	; 0xfa
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4925      	ldr	r1, [pc, #148]	; (8002700 <gnssInit+0x150>)
 800266c:	4822      	ldr	r0, [pc, #136]	; (80026f8 <gnssInit+0x148>)
 800266e:	2296      	movs	r2, #150	; 0x96
 8002670:	f002 fe42 	bl	80052f8 <HAL_UART_Receive>
 8002674:	0003      	movs	r3, r0
 8002676:	001a      	movs	r2, r3
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <gnssInit+0x14c>)
 800267a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800267c:	200a      	movs	r0, #10
 800267e:	f000 fcd5 	bl	800302c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <gnssInit+0x150>)
 8002684:	2296      	movs	r2, #150	; 0x96
 8002686:	213f      	movs	r1, #63	; 0x3f
 8002688:	0018      	movs	r0, r3
 800268a:	f004 f86f 	bl	800676c <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSSEQ, sizeof(AT_CGNSSEQ), 1000);
 800268e:	23fa      	movs	r3, #250	; 0xfa
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	1979      	adds	r1, r7, r5
 8002694:	4818      	ldr	r0, [pc, #96]	; (80026f8 <gnssInit+0x148>)
 8002696:	2212      	movs	r2, #18
 8002698:	f002 fd84 	bl	80051a4 <HAL_UART_Transmit>
 800269c:	0003      	movs	r3, r0
 800269e:	001a      	movs	r2, r3
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <gnssInit+0x14c>)
 80026a2:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 80026a4:	23fa      	movs	r3, #250	; 0xfa
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4915      	ldr	r1, [pc, #84]	; (8002700 <gnssInit+0x150>)
 80026aa:	4813      	ldr	r0, [pc, #76]	; (80026f8 <gnssInit+0x148>)
 80026ac:	2296      	movs	r2, #150	; 0x96
 80026ae:	f002 fe23 	bl	80052f8 <HAL_UART_Receive>
 80026b2:	0003      	movs	r3, r0
 80026b4:	001a      	movs	r2, r3
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <gnssInit+0x14c>)
 80026b8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80026ba:	200a      	movs	r0, #10
 80026bc:	f000 fcb6 	bl	800302c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <gnssInit+0x150>)
 80026c2:	2296      	movs	r2, #150	; 0x96
 80026c4:	213f      	movs	r1, #63	; 0x3f
 80026c6:	0018      	movs	r0, r3
 80026c8:	f004 f850 	bl	800676c <memset>
	//=========================GNSS
	initStatus = 1;
 80026cc:	245f      	movs	r4, #95	; 0x5f
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
	return initStatus;
 80026d4:	193b      	adds	r3, r7, r4
 80026d6:	781b      	ldrb	r3, [r3, #0]
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b019      	add	sp, #100	; 0x64
 80026de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e0:	08006930 	.word	0x08006930
 80026e4:	08006940 	.word	0x08006940
 80026e8:	08006950 	.word	0x08006950
 80026ec:	08006924 	.word	0x08006924
 80026f0:	08006964 	.word	0x08006964
 80026f4:	08006974 	.word	0x08006974
 80026f8:	20000370 	.word	0x20000370
 80026fc:	20000360 	.word	0x20000360
 8002700:	200000f8 	.word	0x200000f8

08002704 <gsmInit>:


char gsmInit(void){
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b09f      	sub	sp, #124	; 0x7c
 8002708:	af00      	add	r7, sp, #0
	// TODO Add proper status return or error handling
	char initStatus = 0;
 800270a:	2477      	movs	r4, #119	; 0x77
 800270c:	193b      	adds	r3, r7, r4
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 8002712:	2370      	movs	r3, #112	; 0x70
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	4a50      	ldr	r2, [pc, #320]	; (8002858 <gsmInit+0x154>)
 8002718:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 800271a:	2368      	movs	r3, #104	; 0x68
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	4a4f      	ldr	r2, [pc, #316]	; (800285c <gsmInit+0x158>)
 8002720:	6811      	ldr	r1, [r2, #0]
 8002722:	6019      	str	r1, [r3, #0]
 8002724:	7912      	ldrb	r2, [r2, #4]
 8002726:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 8002728:	235c      	movs	r3, #92	; 0x5c
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <gsmInit+0x15c>)
 800272e:	ca03      	ldmia	r2!, {r0, r1}
 8002730:	c303      	stmia	r3!, {r0, r1}
 8002732:	8811      	ldrh	r1, [r2, #0]
 8002734:	8019      	strh	r1, [r3, #0]
 8002736:	7892      	ldrb	r2, [r2, #2]
 8002738:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 800273a:	2350      	movs	r3, #80	; 0x50
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	4a49      	ldr	r2, [pc, #292]	; (8002864 <gsmInit+0x160>)
 8002740:	ca03      	ldmia	r2!, {r0, r1}
 8002742:	c303      	stmia	r3!, {r0, r1}
 8002744:	8811      	ldrh	r1, [r2, #0]
 8002746:	8019      	strh	r1, [r3, #0]
 8002748:	7892      	ldrb	r2, [r2, #2]
 800274a:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 800274c:	2544      	movs	r5, #68	; 0x44
 800274e:	197b      	adds	r3, r7, r5
 8002750:	4a45      	ldr	r2, [pc, #276]	; (8002868 <gsmInit+0x164>)
 8002752:	ca03      	ldmia	r2!, {r0, r1}
 8002754:	c303      	stmia	r3!, {r0, r1}
 8002756:	8812      	ldrh	r2, [r2, #0]
 8002758:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 800275a:	2038      	movs	r0, #56	; 0x38
 800275c:	183b      	adds	r3, r7, r0
 800275e:	4a43      	ldr	r2, [pc, #268]	; (800286c <gsmInit+0x168>)
 8002760:	ca42      	ldmia	r2!, {r1, r6}
 8002762:	c342      	stmia	r3!, {r1, r6}
 8002764:	8811      	ldrh	r1, [r2, #0]
 8002766:	8019      	strh	r1, [r3, #0]
 8002768:	7892      	ldrb	r2, [r2, #2]
 800276a:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 800276c:	262c      	movs	r6, #44	; 0x2c
 800276e:	19bb      	adds	r3, r7, r6
 8002770:	4a3f      	ldr	r2, [pc, #252]	; (8002870 <gsmInit+0x16c>)
 8002772:	ca03      	ldmia	r2!, {r0, r1}
 8002774:	c303      	stmia	r3!, {r0, r1}
 8002776:	8811      	ldrh	r1, [r2, #0]
 8002778:	8019      	strh	r1, [r3, #0]
 800277a:	7892      	ldrb	r2, [r2, #2]
 800277c:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 800277e:	231c      	movs	r3, #28
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <gsmInit+0x170>)
 8002784:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002786:	c313      	stmia	r3!, {r0, r1, r4}
 8002788:	8811      	ldrh	r1, [r2, #0]
 800278a:	8019      	strh	r1, [r3, #0]
 800278c:	7892      	ldrb	r2, [r2, #2]
 800278e:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8002790:	2314      	movs	r3, #20
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	4a38      	ldr	r2, [pc, #224]	; (8002878 <gsmInit+0x174>)
 8002796:	ca03      	ldmia	r2!, {r0, r1}
 8002798:	c303      	stmia	r3!, {r0, r1}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 800279a:	2308      	movs	r3, #8
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	4a37      	ldr	r2, [pc, #220]	; (800287c <gsmInit+0x178>)
 80027a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027a2:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	221a      	movs	r2, #26
 80027a8:	801a      	strh	r2, [r3, #0]
	//=========================GSM

	//=========================GSM
	uart2Status = HAL_UART_Transmit(&huart2, AT_COPS_RGSTR, sizeof(AT_COPS_RGSTR), 10);
 80027aa:	2038      	movs	r0, #56	; 0x38
 80027ac:	1839      	adds	r1, r7, r0
 80027ae:	4834      	ldr	r0, [pc, #208]	; (8002880 <gsmInit+0x17c>)
 80027b0:	230a      	movs	r3, #10
 80027b2:	220b      	movs	r2, #11
 80027b4:	f002 fcf6 	bl	80051a4 <HAL_UART_Transmit>
 80027b8:	0003      	movs	r3, r0
 80027ba:	001a      	movs	r2, r3
 80027bc:	4b31      	ldr	r3, [pc, #196]	; (8002884 <gsmInit+0x180>)
 80027be:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 80027c0:	4931      	ldr	r1, [pc, #196]	; (8002888 <gsmInit+0x184>)
 80027c2:	482f      	ldr	r0, [pc, #188]	; (8002880 <gsmInit+0x17c>)
 80027c4:	230a      	movs	r3, #10
 80027c6:	2296      	movs	r2, #150	; 0x96
 80027c8:	f002 fd96 	bl	80052f8 <HAL_UART_Receive>
 80027cc:	0003      	movs	r3, r0
 80027ce:	001a      	movs	r2, r3
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <gsmInit+0x180>)
 80027d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80027d4:	200a      	movs	r0, #10
 80027d6:	f000 fc29 	bl	800302c <HAL_Delay>

	uart2Status = HAL_UART_Transmit(&huart2, AT_COPS_CRNT, sizeof(AT_COPS_CRNT), 10);
 80027da:	1979      	adds	r1, r7, r5
 80027dc:	4828      	ldr	r0, [pc, #160]	; (8002880 <gsmInit+0x17c>)
 80027de:	230a      	movs	r3, #10
 80027e0:	220a      	movs	r2, #10
 80027e2:	f002 fcdf 	bl	80051a4 <HAL_UART_Transmit>
 80027e6:	0003      	movs	r3, r0
 80027e8:	001a      	movs	r2, r3
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <gsmInit+0x180>)
 80027ec:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 80027ee:	4926      	ldr	r1, [pc, #152]	; (8002888 <gsmInit+0x184>)
 80027f0:	4823      	ldr	r0, [pc, #140]	; (8002880 <gsmInit+0x17c>)
 80027f2:	230a      	movs	r3, #10
 80027f4:	2296      	movs	r2, #150	; 0x96
 80027f6:	f002 fd7f 	bl	80052f8 <HAL_UART_Receive>
 80027fa:	0003      	movs	r3, r0
 80027fc:	001a      	movs	r2, r3
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <gsmInit+0x180>)
 8002800:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8002802:	2032      	movs	r0, #50	; 0x32
 8002804:	f000 fc12 	bl	800302c <HAL_Delay>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGF, sizeof(AT_CMGF), 10);
 8002808:	19b9      	adds	r1, r7, r6
 800280a:	481d      	ldr	r0, [pc, #116]	; (8002880 <gsmInit+0x17c>)
 800280c:	230a      	movs	r3, #10
 800280e:	220b      	movs	r2, #11
 8002810:	f002 fcc8 	bl	80051a4 <HAL_UART_Transmit>
 8002814:	0003      	movs	r3, r0
 8002816:	001a      	movs	r2, r3
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <gsmInit+0x180>)
 800281a:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 800281c:	491a      	ldr	r1, [pc, #104]	; (8002888 <gsmInit+0x184>)
 800281e:	4818      	ldr	r0, [pc, #96]	; (8002880 <gsmInit+0x17c>)
 8002820:	230a      	movs	r3, #10
 8002822:	2296      	movs	r2, #150	; 0x96
 8002824:	f002 fd68 	bl	80052f8 <HAL_UART_Receive>
 8002828:	0003      	movs	r3, r0
 800282a:	001a      	movs	r2, r3
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <gsmInit+0x180>)
 800282e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002830:	200a      	movs	r0, #10
 8002832:	f000 fbfb 	bl	800302c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <gsmInit+0x184>)
 8002838:	2296      	movs	r2, #150	; 0x96
 800283a:	213f      	movs	r1, #63	; 0x3f
 800283c:	0018      	movs	r0, r3
 800283e:	f003 ff95 	bl	800676c <memset>
	initStatus = 1;
 8002842:	2477      	movs	r4, #119	; 0x77
 8002844:	193b      	adds	r3, r7, r4
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
	return initStatus;
 800284a:	193b      	adds	r3, r7, r4
 800284c:	781b      	ldrb	r3, [r3, #0]
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b01f      	add	sp, #124	; 0x7c
 8002854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	000d5441 	.word	0x000d5441
 800285c:	08006984 	.word	0x08006984
 8002860:	0800698c 	.word	0x0800698c
 8002864:	08006998 	.word	0x08006998
 8002868:	080069a4 	.word	0x080069a4
 800286c:	080069b0 	.word	0x080069b0
 8002870:	080069bc 	.word	0x080069bc
 8002874:	080069c8 	.word	0x080069c8
 8002878:	080069d8 	.word	0x080069d8
 800287c:	080069e0 	.word	0x080069e0
 8002880:	20000370 	.word	0x20000370
 8002884:	20000360 	.word	0x20000360
 8002888:	200000f8 	.word	0x200000f8

0800288c <sendGsmMessage>:

char sendGsmMessage(struct GsmStruct gsmstruct){
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288e:	46c6      	mov	lr, r8
 8002890:	b500      	push	{lr}
 8002892:	b0ac      	sub	sp, #176	; 0xb0
 8002894:	af00      	add	r7, sp, #0
 8002896:	261c      	movs	r6, #28
 8002898:	19bb      	adds	r3, r7, r6
 800289a:	6018      	str	r0, [r3, #0]
 800289c:	6059      	str	r1, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	466b      	mov	r3, sp
 80028a2:	4698      	mov	r8, r3
	// TODO Add proper status return or error handling
	gsmstruct.numberOk = 0;
 80028a4:	19bb      	adds	r3, r7, r6
 80028a6:	2200      	movs	r2, #0
 80028a8:	721a      	strb	r2, [r3, #8]
	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 80028aa:	238c      	movs	r3, #140	; 0x8c
 80028ac:	2218      	movs	r2, #24
 80028ae:	4694      	mov	ip, r2
 80028b0:	44bc      	add	ip, r7
 80028b2:	4463      	add	r3, ip
 80028b4:	4aa8      	ldr	r2, [pc, #672]	; (8002b58 <sendGsmMessage+0x2cc>)
 80028b6:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 80028b8:	2384      	movs	r3, #132	; 0x84
 80028ba:	2218      	movs	r2, #24
 80028bc:	4694      	mov	ip, r2
 80028be:	44bc      	add	ip, r7
 80028c0:	4463      	add	r3, ip
 80028c2:	4aa6      	ldr	r2, [pc, #664]	; (8002b5c <sendGsmMessage+0x2d0>)
 80028c4:	6811      	ldr	r1, [r2, #0]
 80028c6:	6019      	str	r1, [r3, #0]
 80028c8:	7912      	ldrb	r2, [r2, #4]
 80028ca:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 80028cc:	2378      	movs	r3, #120	; 0x78
 80028ce:	2218      	movs	r2, #24
 80028d0:	4694      	mov	ip, r2
 80028d2:	44bc      	add	ip, r7
 80028d4:	4463      	add	r3, ip
 80028d6:	4aa2      	ldr	r2, [pc, #648]	; (8002b60 <sendGsmMessage+0x2d4>)
 80028d8:	ca03      	ldmia	r2!, {r0, r1}
 80028da:	c303      	stmia	r3!, {r0, r1}
 80028dc:	8811      	ldrh	r1, [r2, #0]
 80028de:	8019      	strh	r1, [r3, #0]
 80028e0:	7892      	ldrb	r2, [r2, #2]
 80028e2:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 80028e4:	236c      	movs	r3, #108	; 0x6c
 80028e6:	2218      	movs	r2, #24
 80028e8:	4694      	mov	ip, r2
 80028ea:	44bc      	add	ip, r7
 80028ec:	4463      	add	r3, ip
 80028ee:	4a9d      	ldr	r2, [pc, #628]	; (8002b64 <sendGsmMessage+0x2d8>)
 80028f0:	ca03      	ldmia	r2!, {r0, r1}
 80028f2:	c303      	stmia	r3!, {r0, r1}
 80028f4:	8811      	ldrh	r1, [r2, #0]
 80028f6:	8019      	strh	r1, [r3, #0]
 80028f8:	7892      	ldrb	r2, [r2, #2]
 80028fa:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 80028fc:	2360      	movs	r3, #96	; 0x60
 80028fe:	2218      	movs	r2, #24
 8002900:	4694      	mov	ip, r2
 8002902:	44bc      	add	ip, r7
 8002904:	4463      	add	r3, ip
 8002906:	4a98      	ldr	r2, [pc, #608]	; (8002b68 <sendGsmMessage+0x2dc>)
 8002908:	ca03      	ldmia	r2!, {r0, r1}
 800290a:	c303      	stmia	r3!, {r0, r1}
 800290c:	8812      	ldrh	r2, [r2, #0]
 800290e:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 8002910:	2354      	movs	r3, #84	; 0x54
 8002912:	2218      	movs	r2, #24
 8002914:	4694      	mov	ip, r2
 8002916:	44bc      	add	ip, r7
 8002918:	4463      	add	r3, ip
 800291a:	4a94      	ldr	r2, [pc, #592]	; (8002b6c <sendGsmMessage+0x2e0>)
 800291c:	ca03      	ldmia	r2!, {r0, r1}
 800291e:	c303      	stmia	r3!, {r0, r1}
 8002920:	8811      	ldrh	r1, [r2, #0]
 8002922:	8019      	strh	r1, [r3, #0]
 8002924:	7892      	ldrb	r2, [r2, #2]
 8002926:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 8002928:	2348      	movs	r3, #72	; 0x48
 800292a:	2218      	movs	r2, #24
 800292c:	4694      	mov	ip, r2
 800292e:	44bc      	add	ip, r7
 8002930:	4463      	add	r3, ip
 8002932:	4a8f      	ldr	r2, [pc, #572]	; (8002b70 <sendGsmMessage+0x2e4>)
 8002934:	ca03      	ldmia	r2!, {r0, r1}
 8002936:	c303      	stmia	r3!, {r0, r1}
 8002938:	8811      	ldrh	r1, [r2, #0]
 800293a:	8019      	strh	r1, [r3, #0]
 800293c:	7892      	ldrb	r2, [r2, #2]
 800293e:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 8002940:	2338      	movs	r3, #56	; 0x38
 8002942:	2218      	movs	r2, #24
 8002944:	4694      	mov	ip, r2
 8002946:	44bc      	add	ip, r7
 8002948:	4463      	add	r3, ip
 800294a:	4a8a      	ldr	r2, [pc, #552]	; (8002b74 <sendGsmMessage+0x2e8>)
 800294c:	ca43      	ldmia	r2!, {r0, r1, r6}
 800294e:	c343      	stmia	r3!, {r0, r1, r6}
 8002950:	8811      	ldrh	r1, [r2, #0]
 8002952:	8019      	strh	r1, [r3, #0]
 8002954:	7892      	ldrb	r2, [r2, #2]
 8002956:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8002958:	2230      	movs	r2, #48	; 0x30
 800295a:	2618      	movs	r6, #24
 800295c:	19bb      	adds	r3, r7, r6
 800295e:	189b      	adds	r3, r3, r2
 8002960:	4a85      	ldr	r2, [pc, #532]	; (8002b78 <sendGsmMessage+0x2ec>)
 8002962:	ca03      	ldmia	r2!, {r0, r1}
 8002964:	c303      	stmia	r3!, {r0, r1}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	19bb      	adds	r3, r7, r6
 800296a:	189b      	adds	r3, r3, r2
 800296c:	4a83      	ldr	r2, [pc, #524]	; (8002b7c <sendGsmMessage+0x2f0>)
 800296e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002970:	c343      	stmia	r3!, {r0, r1, r6}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8002972:	2220      	movs	r2, #32
 8002974:	2618      	movs	r6, #24
 8002976:	19bb      	adds	r3, r7, r6
 8002978:	189b      	adds	r3, r3, r2
 800297a:	221a      	movs	r2, #26
 800297c:	801a      	strh	r2, [r3, #0]
	//uint8_t AT_CMGS_SEND_MSG_BUF[] 	= "AT+CMGS=\"+35844350xxxx\"\rMESSAGE";
	//=========================GSM
	char AT_CMGS_SEND_MSG_BUF_STRT[] = "AT+CMGS=\"";
 800297e:	2114      	movs	r1, #20
 8002980:	19bb      	adds	r3, r7, r6
 8002982:	185b      	adds	r3, r3, r1
 8002984:	4a7e      	ldr	r2, [pc, #504]	; (8002b80 <sendGsmMessage+0x2f4>)
 8002986:	ca41      	ldmia	r2!, {r0, r6}
 8002988:	c341      	stmia	r3!, {r0, r6}
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	801a      	strh	r2, [r3, #0]
	char AT_CMGS_SEND_MSG_BUF_MIDL[] = "\"\r";
 800298e:	2010      	movs	r0, #16
 8002990:	2218      	movs	r2, #24
 8002992:	18bb      	adds	r3, r7, r2
 8002994:	181b      	adds	r3, r3, r0
 8002996:	4a7b      	ldr	r2, [pc, #492]	; (8002b84 <sendGsmMessage+0x2f8>)
 8002998:	8811      	ldrh	r1, [r2, #0]
 800299a:	8019      	strh	r1, [r3, #0]
 800299c:	7892      	ldrb	r2, [r2, #2]
 800299e:	709a      	strb	r2, [r3, #2]

	char AT_CMGS_SEND_MSG_BUF_TOT[sizeof(AT_CMGS_SEND_MSG_BUF_STRT)+sizeof(AT_CMGS_SEND_MSG_BUF_MIDL)+strlen(gsmstruct.phoneNumber)+strlen(gsmstruct.message)-1];
 80029a0:	211c      	movs	r1, #28
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7fd fbae 	bl	8000108 <strlen>
 80029ac:	0006      	movs	r6, r0
 80029ae:	211c      	movs	r1, #28
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fd fba7 	bl	8000108 <strlen>
 80029ba:	0003      	movs	r3, r0
 80029bc:	18f3      	adds	r3, r6, r3
 80029be:	001e      	movs	r6, r3
 80029c0:	360c      	adds	r6, #12
 80029c2:	0033      	movs	r3, r6
 80029c4:	3b01      	subs	r3, #1
 80029c6:	2294      	movs	r2, #148	; 0x94
 80029c8:	2018      	movs	r0, #24
 80029ca:	4684      	mov	ip, r0
 80029cc:	44bc      	add	ip, r7
 80029ce:	4462      	add	r2, ip
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	60be      	str	r6, [r7, #8]
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	000b      	movs	r3, r1
 80029de:	0f5b      	lsrs	r3, r3, #29
 80029e0:	0010      	movs	r0, r2
 80029e2:	00c0      	lsls	r0, r0, #3
 80029e4:	6178      	str	r0, [r7, #20]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	4318      	orrs	r0, r3
 80029ea:	6178      	str	r0, [r7, #20]
 80029ec:	000b      	movs	r3, r1
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	603e      	str	r6, [r7, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	000b      	movs	r3, r1
 80029fe:	0f5b      	lsrs	r3, r3, #29
 8002a00:	0010      	movs	r0, r2
 8002a02:	00c5      	lsls	r5, r0, #3
 8002a04:	431d      	orrs	r5, r3
 8002a06:	000b      	movs	r3, r1
 8002a08:	00dc      	lsls	r4, r3, #3
 8002a0a:	1df3      	adds	r3, r6, #7
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	466c      	mov	r4, sp
 8002a12:	1ae4      	subs	r4, r4, r3
 8002a14:	46a5      	mov	sp, r4
 8002a16:	466b      	mov	r3, sp
 8002a18:	3300      	adds	r3, #0
 8002a1a:	2490      	movs	r4, #144	; 0x90
 8002a1c:	2218      	movs	r2, #24
 8002a1e:	18b8      	adds	r0, r7, r2
 8002a20:	1905      	adds	r5, r0, r4
 8002a22:	602b      	str	r3, [r5, #0]
	strcpy(AT_CMGS_SEND_MSG_BUF_TOT, AT_CMGS_SEND_MSG_BUF_STRT);
 8002a24:	18bb      	adds	r3, r7, r2
 8002a26:	191d      	adds	r5, r3, r4
 8002a28:	682b      	ldr	r3, [r5, #0]
 8002a2a:	2114      	movs	r1, #20
 8002a2c:	0015      	movs	r5, r2
 8002a2e:	197a      	adds	r2, r7, r5
 8002a30:	1852      	adds	r2, r2, r1
 8002a32:	0011      	movs	r1, r2
 8002a34:	0018      	movs	r0, r3
 8002a36:	f003 feae 	bl	8006796 <strcpy>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, gsmstruct.phoneNumber);
 8002a3a:	197b      	adds	r3, r7, r5
 8002a3c:	1919      	adds	r1, r3, r4
 8002a3e:	680a      	ldr	r2, [r1, #0]
 8002a40:	211c      	movs	r1, #28
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0019      	movs	r1, r3
 8002a48:	0010      	movs	r0, r2
 8002a4a:	f003 fe97 	bl	800677c <strcat>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, AT_CMGS_SEND_MSG_BUF_MIDL);
 8002a4e:	197b      	adds	r3, r7, r5
 8002a50:	1919      	adds	r1, r3, r4
 8002a52:	680b      	ldr	r3, [r1, #0]
 8002a54:	2010      	movs	r0, #16
 8002a56:	197a      	adds	r2, r7, r5
 8002a58:	1812      	adds	r2, r2, r0
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f003 fe8d 	bl	800677c <strcat>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, gsmstruct.message);
 8002a62:	197b      	adds	r3, r7, r5
 8002a64:	1919      	adds	r1, r3, r4
 8002a66:	680a      	ldr	r2, [r1, #0]
 8002a68:	211c      	movs	r1, #28
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0019      	movs	r1, r3
 8002a70:	0010      	movs	r0, r2
 8002a72:	f003 fe83 	bl	800677c <strcat>
	//=========================GSM
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002a76:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <sendGsmMessage+0x2fc>)
 8002a78:	2296      	movs	r2, #150	; 0x96
 8002a7a:	213f      	movs	r1, #63	; 0x3f
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f003 fe75 	bl	800676c <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CSCS, sizeof(AT_CSCS), 10);
 8002a82:	2338      	movs	r3, #56	; 0x38
 8002a84:	197a      	adds	r2, r7, r5
 8002a86:	18d1      	adds	r1, r2, r3
 8002a88:	4840      	ldr	r0, [pc, #256]	; (8002b8c <sendGsmMessage+0x300>)
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	f002 fb89 	bl	80051a4 <HAL_UART_Transmit>
 8002a92:	0003      	movs	r3, r0
 8002a94:	001a      	movs	r2, r3
 8002a96:	4b3e      	ldr	r3, [pc, #248]	; (8002b90 <sendGsmMessage+0x304>)
 8002a98:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002a9a:	493b      	ldr	r1, [pc, #236]	; (8002b88 <sendGsmMessage+0x2fc>)
 8002a9c:	483b      	ldr	r0, [pc, #236]	; (8002b8c <sendGsmMessage+0x300>)
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	2296      	movs	r2, #150	; 0x96
 8002aa2:	f002 fc29 	bl	80052f8 <HAL_UART_Receive>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <sendGsmMessage+0x304>)
 8002aac:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002aae:	200a      	movs	r0, #10
 8002ab0:	f000 fabc 	bl	800302c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <sendGsmMessage+0x2fc>)
 8002ab6:	2296      	movs	r2, #150	; 0x96
 8002ab8:	213f      	movs	r1, #63	; 0x3f
 8002aba:	0018      	movs	r0, r3
 8002abc:	f003 fe56 	bl	800676c <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGS_SEND_MSG_BUF_TOT, sizeof(AT_CMGS_SEND_MSG_BUF_TOT), 10);
 8002ac0:	197b      	adds	r3, r7, r5
 8002ac2:	191b      	adds	r3, r3, r4
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	b2b2      	uxth	r2, r6
 8002ac8:	4830      	ldr	r0, [pc, #192]	; (8002b8c <sendGsmMessage+0x300>)
 8002aca:	230a      	movs	r3, #10
 8002acc:	f002 fb6a 	bl	80051a4 <HAL_UART_Transmit>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <sendGsmMessage+0x304>)
 8002ad6:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002ad8:	492b      	ldr	r1, [pc, #172]	; (8002b88 <sendGsmMessage+0x2fc>)
 8002ada:	482c      	ldr	r0, [pc, #176]	; (8002b8c <sendGsmMessage+0x300>)
 8002adc:	230a      	movs	r3, #10
 8002ade:	2296      	movs	r2, #150	; 0x96
 8002ae0:	f002 fc0a 	bl	80052f8 <HAL_UART_Receive>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <sendGsmMessage+0x304>)
 8002aea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002aec:	200a      	movs	r0, #10
 8002aee:	f000 fa9d 	bl	800302c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <sendGsmMessage+0x2fc>)
 8002af4:	2296      	movs	r2, #150	; 0x96
 8002af6:	213f      	movs	r1, #63	; 0x3f
 8002af8:	0018      	movs	r0, r3
 8002afa:	f003 fe37 	bl	800676c <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGS_SEND_CTRLZ, sizeof(AT_CMGS_SEND_CTRLZ), 1000);
 8002afe:	23fa      	movs	r3, #250	; 0xfa
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	2220      	movs	r2, #32
 8002b04:	1978      	adds	r0, r7, r5
 8002b06:	1881      	adds	r1, r0, r2
 8002b08:	4820      	ldr	r0, [pc, #128]	; (8002b8c <sendGsmMessage+0x300>)
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f002 fb4a 	bl	80051a4 <HAL_UART_Transmit>
 8002b10:	0003      	movs	r3, r0
 8002b12:	001a      	movs	r2, r3
 8002b14:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <sendGsmMessage+0x304>)
 8002b16:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002b18:	491b      	ldr	r1, [pc, #108]	; (8002b88 <sendGsmMessage+0x2fc>)
 8002b1a:	481c      	ldr	r0, [pc, #112]	; (8002b8c <sendGsmMessage+0x300>)
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	2296      	movs	r2, #150	; 0x96
 8002b20:	f002 fbea 	bl	80052f8 <HAL_UART_Receive>
 8002b24:	0003      	movs	r3, r0
 8002b26:	001a      	movs	r2, r3
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <sendGsmMessage+0x304>)
 8002b2a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f000 fa7d 	bl	800302c <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <sendGsmMessage+0x2fc>)
 8002b34:	2296      	movs	r2, #150	; 0x96
 8002b36:	213f      	movs	r1, #63	; 0x3f
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f003 fe17 	bl	800676c <memset>
	//=========================GSM
	gsmstruct.numberOk = 1;
 8002b3e:	211c      	movs	r1, #28
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	2201      	movs	r2, #1
 8002b44:	721a      	strb	r2, [r3, #8]
	return gsmstruct.numberOk;
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	7a1b      	ldrb	r3, [r3, #8]
 8002b4a:	46c5      	mov	sp, r8
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b02c      	add	sp, #176	; 0xb0
 8002b52:	bc80      	pop	{r7}
 8002b54:	46b8      	mov	r8, r7
 8002b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b58:	000d5441 	.word	0x000d5441
 8002b5c:	08006984 	.word	0x08006984
 8002b60:	0800698c 	.word	0x0800698c
 8002b64:	08006998 	.word	0x08006998
 8002b68:	080069a4 	.word	0x080069a4
 8002b6c:	080069b0 	.word	0x080069b0
 8002b70:	080069bc 	.word	0x080069bc
 8002b74:	080069c8 	.word	0x080069c8
 8002b78:	080069d8 	.word	0x080069d8
 8002b7c:	080069e0 	.word	0x080069e0
 8002b80:	080069ec 	.word	0x080069ec
 8002b84:	080069f8 	.word	0x080069f8
 8002b88:	200000f8 	.word	0x200000f8
 8002b8c:	20000370 	.word	0x20000370
 8002b90:	20000360 	.word	0x20000360

08002b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b98:	b672      	cpsid	i
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <Error_Handler+0x8>
	...

08002ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_MspInit+0x44>)
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_MspInit+0x44>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	619a      	str	r2, [r3, #24]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_MspInit+0x44>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_MspInit+0x44>)
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_MspInit+0x44>)
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0549      	lsls	r1, r1, #21
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	61da      	str	r2, [r3, #28]
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_MspInit+0x44>)
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	055b      	lsls	r3, r3, #21
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b08b      	sub	sp, #44	; 0x2c
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	2414      	movs	r4, #20
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	2314      	movs	r3, #20
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	f003 fdb6 	bl	800676c <memset>
  if(hi2c->Instance==I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_I2C_MspInit+0x94>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d133      	bne.n	8002c72 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_I2C_MspInit+0x98>)
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_I2C_MspInit+0x98>)
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0289      	lsls	r1, r1, #10
 8002c14:	430a      	orrs	r2, r1
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_I2C_MspInit+0x98>)
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	029b      	lsls	r3, r3, #10
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA11     ------> I2C1_SCL
    PA12     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	22c0      	movs	r2, #192	; 0xc0
 8002c2a:	0152      	lsls	r2, r2, #5
 8002c2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c2e:	0021      	movs	r1, r4
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	2212      	movs	r2, #18
 8002c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	2201      	movs	r2, #1
 8002c3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C1;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2205      	movs	r2, #5
 8002c46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	187a      	adds	r2, r7, r1
 8002c4a:	2390      	movs	r3, #144	; 0x90
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	0011      	movs	r1, r2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 fb87 	bl	8003364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_I2C_MspInit+0x98>)
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_I2C_MspInit+0x98>)
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	0389      	lsls	r1, r1, #14
 8002c60:	430a      	orrs	r2, r1
 8002c62:	61da      	str	r2, [r3, #28]
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_I2C_MspInit+0x98>)
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	039b      	lsls	r3, r3, #14
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b00b      	add	sp, #44	; 0x2c
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	40005400 	.word	0x40005400
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	2414      	movs	r4, #20
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	0018      	movs	r0, r3
 8002c92:	2314      	movs	r3, #20
 8002c94:	001a      	movs	r2, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	f003 fd68 	bl	800676c <memset>
  if(hspi->Instance==SPI1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_SPI_MspInit+0x90>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d132      	bne.n	8002d0c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <HAL_SPI_MspInit+0x94>)
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_SPI_MspInit+0x94>)
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	0149      	lsls	r1, r1, #5
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	619a      	str	r2, [r3, #24]
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_SPI_MspInit+0x94>)
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	015b      	lsls	r3, r3, #5
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_SPI_MspInit+0x94>)
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_SPI_MspInit+0x94>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0289      	lsls	r1, r1, #10
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	615a      	str	r2, [r3, #20]
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_SPI_MspInit+0x94>)
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cde:	0021      	movs	r1, r4
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	22e0      	movs	r2, #224	; 0xe0
 8002ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2202      	movs	r2, #2
 8002cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	187a      	adds	r2, r7, r1
 8002d00:	2390      	movs	r3, #144	; 0x90
 8002d02:	05db      	lsls	r3, r3, #23
 8002d04:	0011      	movs	r1, r2
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fb2c 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b00b      	add	sp, #44	; 0x2c
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	40013000 	.word	0x40013000
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_TIM_Base_MspInit+0x38>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10d      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_TIM_Base_MspInit+0x3c>)
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_TIM_Base_MspInit+0x3c>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0289      	lsls	r1, r1, #10
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	619a      	str	r2, [r3, #24]
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_TIM_Base_MspInit+0x3c>)
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	029b      	lsls	r3, r3, #10
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40014400 	.word	0x40014400
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b08d      	sub	sp, #52	; 0x34
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	241c      	movs	r4, #28
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	0018      	movs	r0, r3
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f003 fcfc 	bl	800676c <memset>
  if(huart->Instance==USART1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a3d      	ldr	r2, [pc, #244]	; (8002e70 <HAL_UART_MspInit+0x114>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d13c      	bne.n	8002df8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	01c9      	lsls	r1, r1, #7
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	619a      	str	r2, [r3, #24]
 8002d8c:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	4b35      	ldr	r3, [pc, #212]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	0289      	lsls	r1, r1, #10
 8002da4:	430a      	orrs	r2, r1
 8002da6:	615a      	str	r2, [r3, #20]
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	22c0      	movs	r2, #192	; 0xc0
 8002dba:	00d2      	lsls	r2, r2, #3
 8002dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	0021      	movs	r1, r4
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	187a      	adds	r2, r7, r1
 8002dda:	2390      	movs	r3, #144	; 0x90
 8002ddc:	05db      	lsls	r3, r3, #23
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f000 fabf 	bl	8003364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	201b      	movs	r0, #27
 8002dec:	f000 fa0a 	bl	8003204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002df0:	201b      	movs	r0, #27
 8002df2:	f000 fa1c 	bl	800322e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002df6:	e037      	b.n	8002e68 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_UART_MspInit+0x11c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d132      	bne.n	8002e68 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	0289      	lsls	r1, r1, #10
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	029b      	lsls	r3, r3, #10
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	0289      	lsls	r1, r1, #10
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	615a      	str	r2, [r3, #20]
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_UART_MspInit+0x118>)
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	029b      	lsls	r3, r3, #10
 8002e34:	4013      	ands	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e3a:	211c      	movs	r1, #28
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2202      	movs	r2, #2
 8002e46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	2203      	movs	r2, #3
 8002e52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2201      	movs	r2, #1
 8002e58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5a:	187a      	adds	r2, r7, r1
 8002e5c:	2390      	movs	r3, #144	; 0x90
 8002e5e:	05db      	lsls	r3, r3, #23
 8002e60:	0011      	movs	r1, r2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 fa7e 	bl	8003364 <HAL_GPIO_Init>
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b00d      	add	sp, #52	; 0x34
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40004400 	.word	0x40004400

08002e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <NMI_Handler+0x4>

08002e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <HardFault_Handler+0x4>

08002e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea0:	f000 f8a8 	bl	8002ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002eae:	2010      	movs	r0, #16
 8002eb0:	f000 fbde 	bl	8003670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <USART1_IRQHandler+0x14>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f002 fb6a 	bl	800559c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000230 	.word	0x20000230

08002ed4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ee0:	4813      	ldr	r0, [pc, #76]	; (8002f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ee2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002ee4:	4813      	ldr	r0, [pc, #76]	; (8002f34 <LoopForever+0x6>)
    LDR R1, [R0]
 8002ee6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002ee8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002eea:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <LoopForever+0xa>)
    CMP R1, R2
 8002eec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002eee:	d105      	bne.n	8002efc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002ef0:	4812      	ldr	r0, [pc, #72]	; (8002f3c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002ef2:	4913      	ldr	r1, [pc, #76]	; (8002f40 <LoopForever+0x12>)
    STR R1, [R0]
 8002ef4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002ef6:	4813      	ldr	r0, [pc, #76]	; (8002f44 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002ef8:	4913      	ldr	r1, [pc, #76]	; (8002f48 <LoopForever+0x1a>)
    STR R1, [R0]
 8002efa:	6001      	str	r1, [r0, #0]

08002efc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002efc:	4813      	ldr	r0, [pc, #76]	; (8002f4c <LoopForever+0x1e>)
  ldr r1, =_edata
 8002efe:	4914      	ldr	r1, [pc, #80]	; (8002f50 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <LoopForever+0x26>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f04:	e002      	b.n	8002f0c <LoopCopyDataInit>

08002f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0a:	3304      	adds	r3, #4

08002f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f10:	d3f9      	bcc.n	8002f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f12:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002f14:	4c11      	ldr	r4, [pc, #68]	; (8002f5c <LoopForever+0x2e>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f18:	e001      	b.n	8002f1e <LoopFillZerobss>

08002f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f1c:	3204      	adds	r2, #4

08002f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f20:	d3fb      	bcc.n	8002f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f22:	f7ff ffd7 	bl	8002ed4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f26:	f003 fbfd 	bl	8006724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f2a:	f7fe fa5b 	bl	80013e4 <main>

08002f2e <LoopForever>:

LoopForever:
    b LoopForever
 8002f2e:	e7fe      	b.n	8002f2e <LoopForever>
  ldr   r0, =_estack
 8002f30:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002f34:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002f38:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002f3c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002f40:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002f44:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002f48:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f50:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002f54:	08006b80 	.word	0x08006b80
  ldr r2, =_sbss
 8002f58:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002f5c:	20000468 	.word	0x20000468

08002f60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f60:	e7fe      	b.n	8002f60 <ADC1_IRQHandler>
	...

08002f64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_Init+0x24>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_Init+0x24>)
 8002f6e:	2110      	movs	r1, #16
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f000 f809 	bl	8002f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7a:	f7ff fe11 	bl	8002ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40022000 	.word	0x40022000

08002f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_InitTick+0x5c>)
 8002f96:	681c      	ldr	r4, [r3, #0]
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_InitTick+0x60>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	23fa      	movs	r3, #250	; 0xfa
 8002fa0:	0098      	lsls	r0, r3, #2
 8002fa2:	f7fd f8b9 	bl	8000118 <__udivsi3>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	0019      	movs	r1, r3
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7fd f8b4 	bl	8000118 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 f94b 	bl	800324e <HAL_SYSTICK_Config>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e00f      	b.n	8002fe0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d80b      	bhi.n	8002fde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	425b      	negs	r3, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 f918 	bl	8003204 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_InitTick+0x64>)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b003      	add	sp, #12
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	20000020 	.word	0x20000020
 8002fec:	20000028 	.word	0x20000028
 8002ff0:	20000024 	.word	0x20000024

08002ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_IncTick+0x1c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_IncTick+0x20>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	18d2      	adds	r2, r2, r3
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_IncTick+0x20>)
 8003006:	601a      	str	r2, [r3, #0]
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	20000028 	.word	0x20000028
 8003014:	20000464 	.word	0x20000464

08003018 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  return uwTick;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <HAL_GetTick+0x10>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	20000464 	.word	0x20000464

0800302c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff fff0 	bl	8003018 <HAL_GetTick>
 8003038:	0003      	movs	r3, r0
 800303a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	d005      	beq.n	8003052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_Delay+0x44>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	001a      	movs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	189b      	adds	r3, r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	f7ff ffe0 	bl	8003018 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d8f7      	bhi.n	8003054 <HAL_Delay+0x28>
  {
  }
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b004      	add	sp, #16
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	20000028 	.word	0x20000028

08003074 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_SuspendTick+0x18>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_SuspendTick+0x18>)
 800307e:	2102      	movs	r1, #2
 8003080:	438a      	bics	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	e000e010 	.word	0xe000e010

08003090 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <HAL_ResumeTick+0x18>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_ResumeTick+0x18>)
 800309a:	2102      	movs	r1, #2
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	e000e010 	.word	0xe000e010

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	0002      	movs	r2, r0
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b7f      	cmp	r3, #127	; 0x7f
 80030be:	d809      	bhi.n	80030d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	001a      	movs	r2, r3
 80030c6:	231f      	movs	r3, #31
 80030c8:	401a      	ands	r2, r3
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_EnableIRQ+0x30>)
 80030cc:	2101      	movs	r1, #1
 80030ce:	4091      	lsls	r1, r2
 80030d0:	000a      	movs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
  }
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	e000e100 	.word	0xe000e100

080030e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	0002      	movs	r2, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b7f      	cmp	r3, #127	; 0x7f
 80030f4:	d828      	bhi.n	8003148 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030f6:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <__NVIC_SetPriority+0xd4>)
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	33c0      	adds	r3, #192	; 0xc0
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	589b      	ldr	r3, [r3, r2]
 8003106:	1dfa      	adds	r2, r7, #7
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	0011      	movs	r1, r2
 800310c:	2203      	movs	r2, #3
 800310e:	400a      	ands	r2, r1
 8003110:	00d2      	lsls	r2, r2, #3
 8003112:	21ff      	movs	r1, #255	; 0xff
 8003114:	4091      	lsls	r1, r2
 8003116:	000a      	movs	r2, r1
 8003118:	43d2      	mvns	r2, r2
 800311a:	401a      	ands	r2, r3
 800311c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	019b      	lsls	r3, r3, #6
 8003122:	22ff      	movs	r2, #255	; 0xff
 8003124:	401a      	ands	r2, r3
 8003126:	1dfb      	adds	r3, r7, #7
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	0018      	movs	r0, r3
 800312c:	2303      	movs	r3, #3
 800312e:	4003      	ands	r3, r0
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003134:	481f      	ldr	r0, [pc, #124]	; (80031b4 <__NVIC_SetPriority+0xd4>)
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	b25b      	sxtb	r3, r3
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	430a      	orrs	r2, r1
 8003140:	33c0      	adds	r3, #192	; 0xc0
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003146:	e031      	b.n	80031ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <__NVIC_SetPriority+0xd8>)
 800314a:	1dfb      	adds	r3, r7, #7
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	0019      	movs	r1, r3
 8003150:	230f      	movs	r3, #15
 8003152:	400b      	ands	r3, r1
 8003154:	3b08      	subs	r3, #8
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3306      	adds	r3, #6
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	18d3      	adds	r3, r2, r3
 800315e:	3304      	adds	r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1dfa      	adds	r2, r7, #7
 8003164:	7812      	ldrb	r2, [r2, #0]
 8003166:	0011      	movs	r1, r2
 8003168:	2203      	movs	r2, #3
 800316a:	400a      	ands	r2, r1
 800316c:	00d2      	lsls	r2, r2, #3
 800316e:	21ff      	movs	r1, #255	; 0xff
 8003170:	4091      	lsls	r1, r2
 8003172:	000a      	movs	r2, r1
 8003174:	43d2      	mvns	r2, r2
 8003176:	401a      	ands	r2, r3
 8003178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	401a      	ands	r2, r3
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	0018      	movs	r0, r3
 8003188:	2303      	movs	r3, #3
 800318a:	4003      	ands	r3, r0
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003190:	4809      	ldr	r0, [pc, #36]	; (80031b8 <__NVIC_SetPriority+0xd8>)
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	001c      	movs	r4, r3
 8003198:	230f      	movs	r3, #15
 800319a:	4023      	ands	r3, r4
 800319c:	3b08      	subs	r3, #8
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	430a      	orrs	r2, r1
 80031a2:	3306      	adds	r3, #6
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	18c3      	adds	r3, r0, r3
 80031a8:	3304      	adds	r3, #4
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b003      	add	sp, #12
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1e5a      	subs	r2, r3, #1
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	045b      	lsls	r3, r3, #17
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d301      	bcc.n	80031d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d0:	2301      	movs	r3, #1
 80031d2:	e010      	b.n	80031f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <SysTick_Config+0x44>)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	3a01      	subs	r2, #1
 80031da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031dc:	2301      	movs	r3, #1
 80031de:	425b      	negs	r3, r3
 80031e0:	2103      	movs	r1, #3
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7ff ff7c 	bl	80030e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <SysTick_Config+0x44>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <SysTick_Config+0x44>)
 80031f0:	2207      	movs	r2, #7
 80031f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b002      	add	sp, #8
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	e000e010 	.word	0xe000e010

08003204 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	210f      	movs	r1, #15
 8003210:	187b      	adds	r3, r7, r1
 8003212:	1c02      	adds	r2, r0, #0
 8003214:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	187b      	adds	r3, r7, r1
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b25b      	sxtb	r3, r3
 800321e:	0011      	movs	r1, r2
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff ff5d 	bl	80030e0 <__NVIC_SetPriority>
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b004      	add	sp, #16
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	0002      	movs	r2, r0
 8003236:	1dfb      	adds	r3, r7, #7
 8003238:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b25b      	sxtb	r3, r3
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff ff33 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff ffaf 	bl	80031bc <SysTick_Config>
 800325e:	0003      	movs	r3, r0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2221      	movs	r2, #33	; 0x21
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d008      	beq.n	800328e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e020      	b.n	80032d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	210e      	movs	r1, #14
 800329a:	438a      	bics	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	438a      	bics	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	2101      	movs	r1, #1
 80032b8:	4091      	lsls	r1, r2
 80032ba:	000a      	movs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e0:	210f      	movs	r1, #15
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2221      	movs	r2, #33	; 0x21
 80032ec:	5c9b      	ldrb	r3, [r3, r2]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d006      	beq.n	8003302 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e028      	b.n	8003354 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	210e      	movs	r1, #14
 800330e:	438a      	bics	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	438a      	bics	r2, r1
 8003320:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	2101      	movs	r1, #1
 800332c:	4091      	lsls	r1, r2
 800332e:	000a      	movs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2221      	movs	r2, #33	; 0x21
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	0010      	movs	r0, r2
 8003352:	4798      	blx	r3
    } 
  }
  return status;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003372:	e149      	b.n	8003608 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2101      	movs	r1, #1
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4091      	lsls	r1, r2
 800337e:	000a      	movs	r2, r1
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d100      	bne.n	800338c <HAL_GPIO_Init+0x28>
 800338a:	e13a      	b.n	8003602 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2203      	movs	r2, #3
 8003392:	4013      	ands	r3, r2
 8003394:	2b01      	cmp	r3, #1
 8003396:	d005      	beq.n	80033a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2203      	movs	r2, #3
 800339e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d130      	bne.n	8003406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	409a      	lsls	r2, r3
 80033b2:	0013      	movs	r3, r2
 80033b4:	43da      	mvns	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	0013      	movs	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033da:	2201      	movs	r2, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	409a      	lsls	r2, r3
 80033e0:	0013      	movs	r3, r2
 80033e2:	43da      	mvns	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	2201      	movs	r2, #1
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2203      	movs	r2, #3
 800340c:	4013      	ands	r3, r2
 800340e:	2b03      	cmp	r3, #3
 8003410:	d017      	beq.n	8003442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	409a      	lsls	r2, r3
 8003420:	0013      	movs	r3, r2
 8003422:	43da      	mvns	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	0013      	movs	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	4013      	ands	r3, r2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d123      	bne.n	8003496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	0092      	lsls	r2, r2, #2
 8003458:	58d3      	ldr	r3, [r2, r3]
 800345a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2207      	movs	r2, #7
 8003460:	4013      	ands	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	409a      	lsls	r2, r3
 8003468:	0013      	movs	r3, r2
 800346a:	43da      	mvns	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2107      	movs	r1, #7
 800347a:	400b      	ands	r3, r1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	409a      	lsls	r2, r3
 8003480:	0013      	movs	r3, r2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	6939      	ldr	r1, [r7, #16]
 8003494:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	409a      	lsls	r2, r3
 80034a4:	0013      	movs	r3, r2
 80034a6:	43da      	mvns	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2203      	movs	r2, #3
 80034b4:	401a      	ands	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	0013      	movs	r3, r2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	23c0      	movs	r3, #192	; 0xc0
 80034d0:	029b      	lsls	r3, r3, #10
 80034d2:	4013      	ands	r3, r2
 80034d4:	d100      	bne.n	80034d8 <HAL_GPIO_Init+0x174>
 80034d6:	e094      	b.n	8003602 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d8:	4b51      	ldr	r3, [pc, #324]	; (8003620 <HAL_GPIO_Init+0x2bc>)
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_GPIO_Init+0x2bc>)
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
 80034e4:	4b4e      	ldr	r3, [pc, #312]	; (8003620 <HAL_GPIO_Init+0x2bc>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034f0:	4a4c      	ldr	r2, [pc, #304]	; (8003624 <HAL_GPIO_Init+0x2c0>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	589b      	ldr	r3, [r3, r2]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2203      	movs	r2, #3
 8003502:	4013      	ands	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	409a      	lsls	r2, r3
 800350a:	0013      	movs	r3, r2
 800350c:	43da      	mvns	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	2390      	movs	r3, #144	; 0x90
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	429a      	cmp	r2, r3
 800351c:	d00d      	beq.n	800353a <HAL_GPIO_Init+0x1d6>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a41      	ldr	r2, [pc, #260]	; (8003628 <HAL_GPIO_Init+0x2c4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d007      	beq.n	8003536 <HAL_GPIO_Init+0x1d2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a40      	ldr	r2, [pc, #256]	; (800362c <HAL_GPIO_Init+0x2c8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_GPIO_Init+0x1ce>
 800352e:	2302      	movs	r3, #2
 8003530:	e004      	b.n	800353c <HAL_GPIO_Init+0x1d8>
 8003532:	2305      	movs	r3, #5
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x1d8>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_GPIO_Init+0x1d8>
 800353a:	2300      	movs	r3, #0
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	2103      	movs	r1, #3
 8003540:	400a      	ands	r2, r1
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	4093      	lsls	r3, r2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800354c:	4935      	ldr	r1, [pc, #212]	; (8003624 <HAL_GPIO_Init+0x2c0>)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	43da      	mvns	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	025b      	lsls	r3, r3, #9
 8003572:	4013      	ands	r3, r2
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003584:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	43da      	mvns	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	4013      	ands	r3, r2
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035a8:	4b21      	ldr	r3, [pc, #132]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	43da      	mvns	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	035b      	lsls	r3, r3, #13
 80035c6:	4013      	ands	r3, r2
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	039b      	lsls	r3, r3, #14
 80035f0:	4013      	ands	r3, r2
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <HAL_GPIO_Init+0x2cc>)
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3301      	adds	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	40da      	lsrs	r2, r3
 8003610:	1e13      	subs	r3, r2, #0
 8003612:	d000      	beq.n	8003616 <HAL_GPIO_Init+0x2b2>
 8003614:	e6ae      	b.n	8003374 <HAL_GPIO_Init+0x10>
  } 
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b006      	add	sp, #24
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	0008      	movs	r0, r1
 800363e:	0011      	movs	r1, r2
 8003640:	1cbb      	adds	r3, r7, #2
 8003642:	1c02      	adds	r2, r0, #0
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	1c7b      	adds	r3, r7, #1
 8003648:	1c0a      	adds	r2, r1, #0
 800364a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800364c:	1c7b      	adds	r3, r7, #1
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003654:	1cbb      	adds	r3, r7, #2
 8003656:	881a      	ldrh	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800365c:	e003      	b.n	8003666 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800365e:	1cbb      	adds	r3, r7, #2
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	0002      	movs	r2, r0
 8003678:	1dbb      	adds	r3, r7, #6
 800367a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	1dba      	adds	r2, r7, #6
 8003682:	8812      	ldrh	r2, [r2, #0]
 8003684:	4013      	ands	r3, r2
 8003686:	d008      	beq.n	800369a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800368a:	1dba      	adds	r2, r7, #6
 800368c:	8812      	ldrh	r2, [r2, #0]
 800368e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	0018      	movs	r0, r3
 8003696:	f7fe fa23 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e082      	b.n	80037c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2241      	movs	r2, #65	; 0x41
 80036be:	5c9b      	ldrb	r3, [r3, r2]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d107      	bne.n	80036d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2240      	movs	r2, #64	; 0x40
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7ff fa89 	bl	8002be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2241      	movs	r2, #65	; 0x41
 80036da:	2124      	movs	r1, #36	; 0x24
 80036dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	438a      	bics	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4934      	ldr	r1, [pc, #208]	; (80037c8 <HAL_I2C_Init+0x120>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4931      	ldr	r1, [pc, #196]	; (80037cc <HAL_I2C_Init+0x124>)
 8003708:	400a      	ands	r2, r1
 800370a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d108      	bne.n	8003726 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	0209      	lsls	r1, r1, #8
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e007      	b.n	8003736 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2184      	movs	r1, #132	; 0x84
 8003730:	0209      	lsls	r1, r1, #8
 8003732:	430a      	orrs	r2, r1
 8003734:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d104      	bne.n	8003748 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	491f      	ldr	r1, [pc, #124]	; (80037d0 <HAL_I2C_Init+0x128>)
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	491a      	ldr	r1, [pc, #104]	; (80037cc <HAL_I2C_Init+0x124>)
 8003764:	400a      	ands	r2, r1
 8003766:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	431a      	orrs	r2, r3
 8003772:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69d9      	ldr	r1, [r3, #28]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2101      	movs	r1, #1
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2241      	movs	r2, #65	; 0x41
 80037ac:	2120      	movs	r1, #32
 80037ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2242      	movs	r2, #66	; 0x42
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	f0ffffff 	.word	0xf0ffffff
 80037cc:	ffff7fff 	.word	0xffff7fff
 80037d0:	02008000 	.word	0x02008000

080037d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	0008      	movs	r0, r1
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	0019      	movs	r1, r3
 80037e2:	230a      	movs	r3, #10
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	801a      	strh	r2, [r3, #0]
 80037ea:	2308      	movs	r3, #8
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	1c0a      	adds	r2, r1, #0
 80037f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2241      	movs	r2, #65	; 0x41
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d000      	beq.n	8003800 <HAL_I2C_Master_Transmit+0x2c>
 80037fe:	e0e7      	b.n	80039d0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2240      	movs	r2, #64	; 0x40
 8003804:	5c9b      	ldrb	r3, [r3, r2]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_I2C_Master_Transmit+0x3a>
 800380a:	2302      	movs	r3, #2
 800380c:	e0e1      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1fe>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003816:	f7ff fbff 	bl	8003018 <HAL_GetTick>
 800381a:	0003      	movs	r3, r0
 800381c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	0219      	lsls	r1, r3, #8
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2319      	movs	r3, #25
 800382a:	2201      	movs	r2, #1
 800382c:	f000 fa10 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0cc      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2241      	movs	r2, #65	; 0x41
 800383c:	2121      	movs	r1, #33	; 0x21
 800383e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2242      	movs	r2, #66	; 0x42
 8003844:	2110      	movs	r1, #16
 8003846:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2208      	movs	r2, #8
 8003858:	18ba      	adds	r2, r7, r2
 800385a:	8812      	ldrh	r2, [r2, #0]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2bff      	cmp	r3, #255	; 0xff
 800386c:	d911      	bls.n	8003892 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	b2da      	uxtb	r2, r3
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	045c      	lsls	r4, r3, #17
 800387e:	230a      	movs	r3, #10
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	8819      	ldrh	r1, [r3, #0]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	4b55      	ldr	r3, [pc, #340]	; (80039dc <HAL_I2C_Master_Transmit+0x208>)
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	0023      	movs	r3, r4
 800388c:	f000 fb80 	bl	8003f90 <I2C_TransferConfig>
 8003890:	e075      	b.n	800397e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	049c      	lsls	r4, r3, #18
 80038a6:	230a      	movs	r3, #10
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	8819      	ldrh	r1, [r3, #0]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <HAL_I2C_Master_Transmit+0x208>)
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	0023      	movs	r3, r4
 80038b4:	f000 fb6c 	bl	8003f90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038b8:	e061      	b.n	800397e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 fa04 	bl	8003cce <I2C_WaitOnTXISFlagUntilTimeout>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e081      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03a      	beq.n	800397e <HAL_I2C_Master_Transmit+0x1aa>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d136      	bne.n	800397e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	0013      	movs	r3, r2
 800391a:	2200      	movs	r2, #0
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	f000 f997 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e053      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2bff      	cmp	r3, #255	; 0xff
 8003932:	d911      	bls.n	8003958 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	b2da      	uxtb	r2, r3
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	045c      	lsls	r4, r3, #17
 8003944:	230a      	movs	r3, #10
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	8819      	ldrh	r1, [r3, #0]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	2300      	movs	r3, #0
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	0023      	movs	r3, r4
 8003952:	f000 fb1d 	bl	8003f90 <I2C_TransferConfig>
 8003956:	e012      	b.n	800397e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	b2da      	uxtb	r2, r3
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	049c      	lsls	r4, r3, #18
 800396c:	230a      	movs	r3, #10
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	8819      	ldrh	r1, [r3, #0]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	0023      	movs	r3, r4
 800397a:	f000 fb09 	bl	8003f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d198      	bne.n	80038ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 f9dc 	bl	8003d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01a      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2220      	movs	r2, #32
 80039a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	490c      	ldr	r1, [pc, #48]	; (80039e0 <HAL_I2C_Master_Transmit+0x20c>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2241      	movs	r2, #65	; 0x41
 80039b8:	2120      	movs	r1, #32
 80039ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2242      	movs	r2, #66	; 0x42
 80039c0:	2100      	movs	r1, #0
 80039c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2240      	movs	r2, #64	; 0x40
 80039c8:	2100      	movs	r1, #0
 80039ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b007      	add	sp, #28
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	80002000 	.word	0x80002000
 80039e0:	fe00e800 	.word	0xfe00e800

080039e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	0008      	movs	r0, r1
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	0019      	movs	r1, r3
 80039f2:	230a      	movs	r3, #10
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	1c02      	adds	r2, r0, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	2308      	movs	r3, #8
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	1c0a      	adds	r2, r1, #0
 8003a00:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2241      	movs	r2, #65	; 0x41
 8003a06:	5c9b      	ldrb	r3, [r3, r2]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d000      	beq.n	8003a10 <HAL_I2C_Master_Receive+0x2c>
 8003a0e:	e0e8      	b.n	8003be2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	5c9b      	ldrb	r3, [r3, r2]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Master_Receive+0x3a>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e0e2      	b.n	8003be4 <HAL_I2C_Master_Receive+0x200>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2240      	movs	r2, #64	; 0x40
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a26:	f7ff faf7 	bl	8003018 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	0219      	lsls	r1, r3, #8
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	2319      	movs	r3, #25
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f000 f908 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 8003a40:	1e03      	subs	r3, r0, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0cd      	b.n	8003be4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2241      	movs	r2, #65	; 0x41
 8003a4c:	2122      	movs	r1, #34	; 0x22
 8003a4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2242      	movs	r2, #66	; 0x42
 8003a54:	2110      	movs	r1, #16
 8003a56:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2208      	movs	r2, #8
 8003a68:	18ba      	adds	r2, r7, r2
 8003a6a:	8812      	ldrh	r2, [r2, #0]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2bff      	cmp	r3, #255	; 0xff
 8003a7c:	d911      	bls.n	8003aa2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	22ff      	movs	r2, #255	; 0xff
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	045c      	lsls	r4, r3, #17
 8003a8e:	230a      	movs	r3, #10
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	8819      	ldrh	r1, [r3, #0]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	4b55      	ldr	r3, [pc, #340]	; (8003bec <HAL_I2C_Master_Receive+0x208>)
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	0023      	movs	r3, r4
 8003a9c:	f000 fa78 	bl	8003f90 <I2C_TransferConfig>
 8003aa0:	e076      	b.n	8003b90 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	049c      	lsls	r4, r3, #18
 8003ab6:	230a      	movs	r3, #10
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_I2C_Master_Receive+0x208>)
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	0023      	movs	r3, r4
 8003ac4:	f000 fa64 	bl	8003f90 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ac8:	e062      	b.n	8003b90 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 f977 	bl	8003dc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad6:	1e03      	subs	r3, r0, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e082      	b.n	8003be4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03a      	beq.n	8003b90 <HAL_I2C_Master_Receive+0x1ac>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d136      	bne.n	8003b90 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	f000 f88e 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e053      	b.n	8003be4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	d911      	bls.n	8003b6a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	22ff      	movs	r2, #255	; 0xff
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	045c      	lsls	r4, r3, #17
 8003b56:	230a      	movs	r3, #10
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	8819      	ldrh	r1, [r3, #0]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0023      	movs	r3, r4
 8003b64:	f000 fa14 	bl	8003f90 <I2C_TransferConfig>
 8003b68:	e012      	b.n	8003b90 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	049c      	lsls	r4, r3, #18
 8003b7e:	230a      	movs	r3, #10
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	8819      	ldrh	r1, [r3, #0]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	2300      	movs	r3, #0
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	0023      	movs	r3, r4
 8003b8c:	f000 fa00 	bl	8003f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d197      	bne.n	8003aca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 f8d3 	bl	8003d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e01a      	b.n	8003be4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	490b      	ldr	r1, [pc, #44]	; (8003bf0 <HAL_I2C_Master_Receive+0x20c>)
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2241      	movs	r2, #65	; 0x41
 8003bca:	2120      	movs	r1, #32
 8003bcc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2242      	movs	r2, #66	; 0x42
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2240      	movs	r2, #64	; 0x40
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b007      	add	sp, #28
 8003bea:	bd90      	pop	{r4, r7, pc}
 8003bec:	80002400 	.word	0x80002400
 8003bf0:	fe00e800 	.word	0xfe00e800

08003bf4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2241      	movs	r2, #65	; 0x41
 8003c00:	5c9b      	ldrb	r3, [r3, r2]
 8003c02:	b2db      	uxtb	r3, r3
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d103      	bne.n	8003c2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2201      	movs	r2, #1
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d007      	beq.n	8003c48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2101      	movs	r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	619a      	str	r2, [r3, #24]
  }
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c60:	e021      	b.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	d01e      	beq.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7ff f9d6 	bl	8003018 <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	2220      	movs	r2, #32
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2241      	movs	r2, #65	; 0x41
 8003c8e:	2120      	movs	r1, #32
 8003c90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2242      	movs	r2, #66	; 0x42
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2240      	movs	r2, #64	; 0x40
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00f      	b.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	425a      	negs	r2, r3
 8003cb6:	4153      	adcs	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	001a      	movs	r2, r3
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d0ce      	beq.n	8003c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b004      	add	sp, #16
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cda:	e02b      	b.n	8003d34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 f8da 	bl	8003e9c <I2C_IsAcknowledgeFailed>
 8003ce8:	1e03      	subs	r3, r0, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e029      	b.n	8003d44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	d01e      	beq.n	8003d34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7ff f98f 	bl	8003018 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d113      	bne.n	8003d34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	2220      	movs	r2, #32
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2241      	movs	r2, #65	; 0x41
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2242      	movs	r2, #66	; 0x42
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e007      	b.n	8003d44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d1cc      	bne.n	8003cdc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b004      	add	sp, #16
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d58:	e028      	b.n	8003dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f89b 	bl	8003e9c <I2C_IsAcknowledgeFailed>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e026      	b.n	8003dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6e:	f7ff f953 	bl	8003018 <HAL_GetTick>
 8003d72:	0002      	movs	r2, r0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d113      	bne.n	8003dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	2220      	movs	r2, #32
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2241      	movs	r2, #65	; 0x41
 8003d94:	2120      	movs	r1, #32
 8003d96:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2242      	movs	r2, #66	; 0x42
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2240      	movs	r2, #64	; 0x40
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e007      	b.n	8003dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2220      	movs	r2, #32
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d1cf      	bne.n	8003d5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dd0:	e055      	b.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 f85f 	bl	8003e9c <I2C_IsAcknowledgeFailed>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e053      	b.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2220      	movs	r2, #32
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d129      	bne.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d105      	bne.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e03f      	b.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2220      	movs	r2, #32
 8003e14:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	491d      	ldr	r1, [pc, #116]	; (8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003e22:	400a      	ands	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2241      	movs	r2, #65	; 0x41
 8003e30:	2120      	movs	r1, #32
 8003e32:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2242      	movs	r2, #66	; 0x42
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	2100      	movs	r1, #0
 8003e42:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e022      	b.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e48:	f7ff f8e6 	bl	8003018 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	2220      	movs	r2, #32
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2241      	movs	r2, #65	; 0x41
 8003e6e:	2120      	movs	r1, #32
 8003e70:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2240      	movs	r2, #64	; 0x40
 8003e76:	2100      	movs	r1, #0
 8003e78:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e007      	b.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2204      	movs	r2, #4
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d1a2      	bne.n	8003dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	fe00e800 	.word	0xfe00e800

08003e9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2210      	movs	r2, #16
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d164      	bne.n	8003f80 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	049b      	lsls	r3, r3, #18
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	049b      	lsls	r3, r3, #18
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d02b      	beq.n	8003f22 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	01c9      	lsls	r1, r1, #7
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003edc:	e021      	b.n	8003f22 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	d01e      	beq.n	8003f22 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7ff f898 	bl	8003018 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <I2C_IsAcknowledgeFailed+0x5e>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	2220      	movs	r2, #32
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2241      	movs	r2, #65	; 0x41
 8003f0a:	2120      	movs	r1, #32
 8003f0c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2242      	movs	r2, #66	; 0x42
 8003f12:	2100      	movs	r1, #0
 8003f14:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2240      	movs	r2, #64	; 0x40
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e02f      	b.n	8003f82 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d1d6      	bne.n	8003ede <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2210      	movs	r2, #16
 8003f36:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7ff fe62 	bl	8003c0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	490e      	ldr	r1, [pc, #56]	; (8003f8c <I2C_IsAcknowledgeFailed+0xf0>)
 8003f54:	400a      	ands	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2241      	movs	r2, #65	; 0x41
 8003f68:	2120      	movs	r1, #32
 8003f6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2242      	movs	r2, #66	; 0x42
 8003f70:	2100      	movs	r1, #0
 8003f72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	2100      	movs	r1, #0
 8003f7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b004      	add	sp, #16
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	fe00e800 	.word	0xfe00e800

08003f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	0008      	movs	r0, r1
 8003f9a:	0011      	movs	r1, r2
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	240a      	movs	r4, #10
 8003fa0:	193b      	adds	r3, r7, r4
 8003fa2:	1c02      	adds	r2, r0, #0
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	2009      	movs	r0, #9
 8003fa8:	183b      	adds	r3, r7, r0
 8003faa:	1c0a      	adds	r2, r1, #0
 8003fac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	0d51      	lsrs	r1, r2, #21
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	00d2      	lsls	r2, r2, #3
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <I2C_TransferConfig+0x68>)
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	43d2      	mvns	r2, r2
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	193b      	adds	r3, r7, r4
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	059b      	lsls	r3, r3, #22
 8003fce:	0d9a      	lsrs	r2, r3, #22
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	0418      	lsls	r0, r3, #16
 8003fd6:	23ff      	movs	r3, #255	; 0xff
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	4003      	ands	r3, r0
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b005      	add	sp, #20
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	03ff63ff 	.word	0x03ff63ff

08003ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2241      	movs	r2, #65	; 0x41
 800400a:	5c9b      	ldrb	r3, [r3, r2]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b20      	cmp	r3, #32
 8004010:	d138      	bne.n	8004084 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	5c9b      	ldrb	r3, [r3, r2]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800401c:	2302      	movs	r3, #2
 800401e:	e032      	b.n	8004086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	2101      	movs	r1, #1
 8004026:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2241      	movs	r2, #65	; 0x41
 800402c:	2124      	movs	r1, #36	; 0x24
 800402e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	438a      	bics	r2, r1
 800403e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4911      	ldr	r1, [pc, #68]	; (8004090 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800404c:	400a      	ands	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6819      	ldr	r1, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2101      	movs	r1, #1
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2241      	movs	r2, #65	; 0x41
 8004074:	2120      	movs	r1, #32
 8004076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	ffffefff 	.word	0xffffefff

08004094 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2241      	movs	r2, #65	; 0x41
 80040a2:	5c9b      	ldrb	r3, [r3, r2]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d139      	bne.n	800411e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	5c9b      	ldrb	r3, [r3, r2]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e033      	b.n	8004120 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	2101      	movs	r1, #1
 80040be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2241      	movs	r2, #65	; 0x41
 80040c4:	2124      	movs	r1, #36	; 0x24
 80040c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2101      	movs	r1, #1
 80040d4:	438a      	bics	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2101      	movs	r1, #1
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2241      	movs	r2, #65	; 0x41
 800410e:	2120      	movs	r1, #32
 8004110:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2240      	movs	r2, #64	; 0x40
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
  }
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}
 8004128:	fffff0ff 	.word	0xfffff0ff

0800412c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	000a      	movs	r2, r1
 8004136:	1cfb      	adds	r3, r7, #3
 8004138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_PWR_EnterSLEEPMode+0x34>)
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004140:	2104      	movs	r1, #4
 8004142:	438a      	bics	r2, r1
 8004144:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004146:	1cfb      	adds	r3, r7, #3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800414e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004150:	e002      	b.n	8004158 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8004152:	bf40      	sev
    __WFE();
 8004154:	bf20      	wfe
    __WFE();
 8004156:	bf20      	wfe
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <HAL_PWR_EnableSleepOnExit+0x18>)
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <HAL_PWR_EnableSleepOnExit+0x18>)
 800416e:	2102      	movs	r1, #2
 8004170:	430a      	orrs	r2, r1
 8004172:	611a      	str	r2, [r3, #16]
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <HAL_PWR_DisableSleepOnExit+0x18>)
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_PWR_DisableSleepOnExit+0x18>)
 800418a:	2102      	movs	r1, #2
 800418c:	438a      	bics	r2, r1
 800418e:	611a      	str	r2, [r3, #16]
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f000 fb76 	bl	800489c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d100      	bne.n	80041bc <HAL_RCC_OscConfig+0x20>
 80041ba:	e08e      	b.n	80042da <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80041bc:	4bc5      	ldr	r3, [pc, #788]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	220c      	movs	r2, #12
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00e      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c8:	4bc2      	ldr	r3, [pc, #776]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	220c      	movs	r2, #12
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d117      	bne.n	8004204 <HAL_RCC_OscConfig+0x68>
 80041d4:	4bbf      	ldr	r3, [pc, #764]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	23c0      	movs	r3, #192	; 0xc0
 80041da:	025b      	lsls	r3, r3, #9
 80041dc:	401a      	ands	r2, r3
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	025b      	lsls	r3, r3, #9
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d10e      	bne.n	8004204 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e6:	4bbb      	ldr	r3, [pc, #748]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	4013      	ands	r3, r2
 80041f0:	d100      	bne.n	80041f4 <HAL_RCC_OscConfig+0x58>
 80041f2:	e071      	b.n	80042d8 <HAL_RCC_OscConfig+0x13c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d000      	beq.n	80041fe <HAL_RCC_OscConfig+0x62>
 80041fc:	e06c      	b.n	80042d8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f000 fb4c 	bl	800489c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x80>
 800420c:	4bb1      	ldr	r3, [pc, #708]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4bb0      	ldr	r3, [pc, #704]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004212:	2180      	movs	r1, #128	; 0x80
 8004214:	0249      	lsls	r1, r1, #9
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e02f      	b.n	800427c <HAL_RCC_OscConfig+0xe0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10c      	bne.n	800423e <HAL_RCC_OscConfig+0xa2>
 8004224:	4bab      	ldr	r3, [pc, #684]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4baa      	ldr	r3, [pc, #680]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800422a:	49ab      	ldr	r1, [pc, #684]	; (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800422c:	400a      	ands	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	4ba8      	ldr	r3, [pc, #672]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4ba7      	ldr	r3, [pc, #668]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004236:	49a9      	ldr	r1, [pc, #676]	; (80044dc <HAL_RCC_OscConfig+0x340>)
 8004238:	400a      	ands	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e01e      	b.n	800427c <HAL_RCC_OscConfig+0xe0>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b05      	cmp	r3, #5
 8004244:	d10e      	bne.n	8004264 <HAL_RCC_OscConfig+0xc8>
 8004246:	4ba3      	ldr	r3, [pc, #652]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4ba2      	ldr	r3, [pc, #648]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	02c9      	lsls	r1, r1, #11
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	4b9f      	ldr	r3, [pc, #636]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b9e      	ldr	r3, [pc, #632]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	0249      	lsls	r1, r1, #9
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xe0>
 8004264:	4b9b      	ldr	r3, [pc, #620]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b9a      	ldr	r3, [pc, #616]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800426a:	499b      	ldr	r1, [pc, #620]	; (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800426c:	400a      	ands	r2, r1
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	4b98      	ldr	r3, [pc, #608]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b97      	ldr	r3, [pc, #604]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004276:	4999      	ldr	r1, [pc, #612]	; (80044dc <HAL_RCC_OscConfig+0x340>)
 8004278:	400a      	ands	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d014      	beq.n	80042ae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fe fec8 	bl	8003018 <HAL_GetTick>
 8004288:	0003      	movs	r3, r0
 800428a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428e:	f7fe fec3 	bl	8003018 <HAL_GetTick>
 8004292:	0002      	movs	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b64      	cmp	r3, #100	; 0x64
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e2fd      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a0:	4b8c      	ldr	r3, [pc, #560]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	2380      	movs	r3, #128	; 0x80
 80042a6:	029b      	lsls	r3, r3, #10
 80042a8:	4013      	ands	r3, r2
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0xf2>
 80042ac:	e015      	b.n	80042da <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fe feb3 	bl	8003018 <HAL_GetTick>
 80042b2:	0003      	movs	r3, r0
 80042b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b8:	f7fe feae 	bl	8003018 <HAL_GetTick>
 80042bc:	0002      	movs	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e2e8      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ca:	4b82      	ldr	r3, [pc, #520]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	029b      	lsls	r3, r3, #10
 80042d2:	4013      	ands	r3, r2
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x11c>
 80042d6:	e000      	b.n	80042da <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2202      	movs	r2, #2
 80042e0:	4013      	ands	r3, r2
 80042e2:	d100      	bne.n	80042e6 <HAL_RCC_OscConfig+0x14a>
 80042e4:	e06c      	b.n	80043c0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042e6:	4b7b      	ldr	r3, [pc, #492]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	220c      	movs	r2, #12
 80042ec:	4013      	ands	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042f0:	4b78      	ldr	r3, [pc, #480]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	220c      	movs	r2, #12
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d11f      	bne.n	800433c <HAL_RCC_OscConfig+0x1a0>
 80042fc:	4b75      	ldr	r3, [pc, #468]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	23c0      	movs	r3, #192	; 0xc0
 8004302:	025b      	lsls	r3, r3, #9
 8004304:	401a      	ands	r2, r3
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	429a      	cmp	r2, r3
 800430c:	d116      	bne.n	800433c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	4b71      	ldr	r3, [pc, #452]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2202      	movs	r2, #2
 8004314:	4013      	ands	r3, r2
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x188>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e2bb      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b6b      	ldr	r3, [pc, #428]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	22f8      	movs	r2, #248	; 0xf8
 800432a:	4393      	bics	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00da      	lsls	r2, r3, #3
 8004334:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	e041      	b.n	80043c0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d024      	beq.n	800438e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	4b63      	ldr	r3, [pc, #396]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b62      	ldr	r3, [pc, #392]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800434a:	2101      	movs	r1, #1
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fe fe62 	bl	8003018 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435a:	f7fe fe5d 	bl	8003018 <HAL_GetTick>
 800435e:	0002      	movs	r2, r0
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e297      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2202      	movs	r2, #2
 8004372:	4013      	ands	r3, r2
 8004374:	d0f1      	beq.n	800435a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b57      	ldr	r3, [pc, #348]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	22f8      	movs	r2, #248	; 0xf8
 800437c:	4393      	bics	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	00da      	lsls	r2, r3, #3
 8004386:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e018      	b.n	80043c0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438e:	4b51      	ldr	r3, [pc, #324]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004394:	2101      	movs	r1, #1
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7fe fe3d 	bl	8003018 <HAL_GetTick>
 800439e:	0003      	movs	r3, r0
 80043a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fe fe38 	bl	8003018 <HAL_GetTick>
 80043a8:	0002      	movs	r2, r0
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e272      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b6:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2202      	movs	r2, #2
 80043bc:	4013      	ands	r3, r2
 80043be:	d1f1      	bne.n	80043a4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2208      	movs	r2, #8
 80043c6:	4013      	ands	r3, r2
 80043c8:	d036      	beq.n	8004438 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d019      	beq.n	8004406 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80043d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d6:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fe fe1b 	bl	8003018 <HAL_GetTick>
 80043e2:	0003      	movs	r3, r0
 80043e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fe fe16 	bl	8003018 <HAL_GetTick>
 80043ec:	0002      	movs	r2, r0
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e250      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2202      	movs	r2, #2
 8004400:	4013      	ands	r3, r2
 8004402:	d0f1      	beq.n	80043e8 <HAL_RCC_OscConfig+0x24c>
 8004404:	e018      	b.n	8004438 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004406:	4b33      	ldr	r3, [pc, #204]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800440a:	4b32      	ldr	r3, [pc, #200]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800440c:	2101      	movs	r1, #1
 800440e:	438a      	bics	r2, r1
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fe fe01 	bl	8003018 <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441c:	f7fe fdfc 	bl	8003018 <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e236      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2202      	movs	r2, #2
 8004434:	4013      	ands	r3, r2
 8004436:	d1f1      	bne.n	800441c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	d100      	bne.n	8004444 <HAL_RCC_OscConfig+0x2a8>
 8004442:	e0b5      	b.n	80045b0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004444:	201f      	movs	r0, #31
 8004446:	183b      	adds	r3, r7, r0
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444c:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	055b      	lsls	r3, r3, #21
 8004454:	4013      	ands	r3, r2
 8004456:	d110      	bne.n	800447a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004458:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	0549      	lsls	r1, r1, #21
 8004462:	430a      	orrs	r2, r1
 8004464:	61da      	str	r2, [r3, #28]
 8004466:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	055b      	lsls	r3, r3, #21
 800446e:	4013      	ands	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004474:	183b      	adds	r3, r7, r0
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <HAL_RCC_OscConfig+0x344>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4013      	ands	r3, r2
 8004484:	d11a      	bne.n	80044bc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <HAL_RCC_OscConfig+0x344>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <HAL_RCC_OscConfig+0x344>)
 800448c:	2180      	movs	r1, #128	; 0x80
 800448e:	0049      	lsls	r1, r1, #1
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004494:	f7fe fdc0 	bl	8003018 <HAL_GetTick>
 8004498:	0003      	movs	r3, r0
 800449a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fe fdbb 	bl	8003018 <HAL_GetTick>
 80044a2:	0002      	movs	r2, r0
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b64      	cmp	r3, #100	; 0x64
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1f5      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_OscConfig+0x344>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4013      	ands	r3, r2
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10f      	bne.n	80044e4 <HAL_RCC_OscConfig+0x348>
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	430a      	orrs	r2, r1
 80044ce:	621a      	str	r2, [r3, #32]
 80044d0:	e036      	b.n	8004540 <HAL_RCC_OscConfig+0x3a4>
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	40021000 	.word	0x40021000
 80044d8:	fffeffff 	.word	0xfffeffff
 80044dc:	fffbffff 	.word	0xfffbffff
 80044e0:	40007000 	.word	0x40007000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10c      	bne.n	8004506 <HAL_RCC_OscConfig+0x36a>
 80044ec:	4bca      	ldr	r3, [pc, #808]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	4bc9      	ldr	r3, [pc, #804]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	438a      	bics	r2, r1
 80044f6:	621a      	str	r2, [r3, #32]
 80044f8:	4bc7      	ldr	r3, [pc, #796]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	4bc6      	ldr	r3, [pc, #792]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80044fe:	2104      	movs	r1, #4
 8004500:	438a      	bics	r2, r1
 8004502:	621a      	str	r2, [r3, #32]
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x3a4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x38c>
 800450e:	4bc2      	ldr	r3, [pc, #776]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	4bc1      	ldr	r3, [pc, #772]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004514:	2104      	movs	r1, #4
 8004516:	430a      	orrs	r2, r1
 8004518:	621a      	str	r2, [r3, #32]
 800451a:	4bbf      	ldr	r3, [pc, #764]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800451c:	6a1a      	ldr	r2, [r3, #32]
 800451e:	4bbe      	ldr	r3, [pc, #760]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004520:	2101      	movs	r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	621a      	str	r2, [r3, #32]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0x3a4>
 8004528:	4bbb      	ldr	r3, [pc, #748]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800452a:	6a1a      	ldr	r2, [r3, #32]
 800452c:	4bba      	ldr	r3, [pc, #744]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800452e:	2101      	movs	r1, #1
 8004530:	438a      	bics	r2, r1
 8004532:	621a      	str	r2, [r3, #32]
 8004534:	4bb8      	ldr	r3, [pc, #736]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	4bb7      	ldr	r3, [pc, #732]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800453a:	2104      	movs	r1, #4
 800453c:	438a      	bics	r2, r1
 800453e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d014      	beq.n	8004572 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004548:	f7fe fd66 	bl	8003018 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	e009      	b.n	8004566 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fe fd61 	bl	8003018 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4aaf      	ldr	r2, [pc, #700]	; (800481c <HAL_RCC_OscConfig+0x680>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e19a      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	4bac      	ldr	r3, [pc, #688]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	2202      	movs	r2, #2
 800456c:	4013      	ands	r3, r2
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x3b6>
 8004570:	e013      	b.n	800459a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fe fd51 	bl	8003018 <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457a:	e009      	b.n	8004590 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fe fd4c 	bl	8003018 <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	4aa5      	ldr	r2, [pc, #660]	; (800481c <HAL_RCC_OscConfig+0x680>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e185      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004590:	4ba1      	ldr	r3, [pc, #644]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	2202      	movs	r2, #2
 8004596:	4013      	ands	r3, r2
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800459a:	231f      	movs	r3, #31
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b9c      	ldr	r3, [pc, #624]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	4b9b      	ldr	r3, [pc, #620]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80045aa:	499d      	ldr	r1, [pc, #628]	; (8004820 <HAL_RCC_OscConfig+0x684>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2210      	movs	r2, #16
 80045b6:	4013      	ands	r3, r2
 80045b8:	d063      	beq.n	8004682 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d12a      	bne.n	8004618 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80045c2:	4b95      	ldr	r3, [pc, #596]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	4b94      	ldr	r3, [pc, #592]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80045c8:	2104      	movs	r1, #4
 80045ca:	430a      	orrs	r2, r1
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80045ce:	4b92      	ldr	r3, [pc, #584]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80045d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d2:	4b91      	ldr	r3, [pc, #580]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80045d4:	2101      	movs	r1, #1
 80045d6:	430a      	orrs	r2, r1
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045da:	f7fe fd1d 	bl	8003018 <HAL_GetTick>
 80045de:	0003      	movs	r3, r0
 80045e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045e4:	f7fe fd18 	bl	8003018 <HAL_GetTick>
 80045e8:	0002      	movs	r2, r0
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e152      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045f6:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	2202      	movs	r2, #2
 80045fc:	4013      	ands	r3, r2
 80045fe:	d0f1      	beq.n	80045e4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004600:	4b85      	ldr	r3, [pc, #532]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	22f8      	movs	r2, #248	; 0xf8
 8004606:	4393      	bics	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	00da      	lsls	r2, r3, #3
 8004610:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004612:	430a      	orrs	r2, r1
 8004614:	635a      	str	r2, [r3, #52]	; 0x34
 8004616:	e034      	b.n	8004682 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	3305      	adds	r3, #5
 800461e:	d111      	bne.n	8004644 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004620:	4b7d      	ldr	r3, [pc, #500]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004624:	4b7c      	ldr	r3, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004626:	2104      	movs	r1, #4
 8004628:	438a      	bics	r2, r1
 800462a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800462c:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	22f8      	movs	r2, #248	; 0xf8
 8004632:	4393      	bics	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	00da      	lsls	r2, r3, #3
 800463c:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800463e:	430a      	orrs	r2, r1
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
 8004642:	e01e      	b.n	8004682 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004644:	4b74      	ldr	r3, [pc, #464]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004648:	4b73      	ldr	r3, [pc, #460]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800464a:	2104      	movs	r1, #4
 800464c:	430a      	orrs	r2, r1
 800464e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004650:	4b71      	ldr	r3, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004654:	4b70      	ldr	r3, [pc, #448]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004656:	2101      	movs	r1, #1
 8004658:	438a      	bics	r2, r1
 800465a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465c:	f7fe fcdc 	bl	8003018 <HAL_GetTick>
 8004660:	0003      	movs	r3, r0
 8004662:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004666:	f7fe fcd7 	bl	8003018 <HAL_GetTick>
 800466a:	0002      	movs	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e111      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004678:	4b67      	ldr	r3, [pc, #412]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	2202      	movs	r2, #2
 800467e:	4013      	ands	r3, r2
 8004680:	d1f1      	bne.n	8004666 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2220      	movs	r2, #32
 8004688:	4013      	ands	r3, r2
 800468a:	d05c      	beq.n	8004746 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800468c:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	220c      	movs	r2, #12
 8004692:	4013      	ands	r3, r2
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d00e      	beq.n	80046b6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004698:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	220c      	movs	r2, #12
 800469e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d114      	bne.n	80046ce <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80046a4:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	23c0      	movs	r3, #192	; 0xc0
 80046aa:	025b      	lsls	r3, r3, #9
 80046ac:	401a      	ands	r2, r3
 80046ae:	23c0      	movs	r3, #192	; 0xc0
 80046b0:	025b      	lsls	r3, r3, #9
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d10b      	bne.n	80046ce <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80046b6:	4b58      	ldr	r3, [pc, #352]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80046b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	025b      	lsls	r3, r3, #9
 80046be:	4013      	ands	r3, r2
 80046c0:	d040      	beq.n	8004744 <HAL_RCC_OscConfig+0x5a8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d03c      	beq.n	8004744 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0e6      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01b      	beq.n	800470e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80046d6:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80046d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046da:	4b4f      	ldr	r3, [pc, #316]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	0249      	lsls	r1, r1, #9
 80046e0:	430a      	orrs	r2, r1
 80046e2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fe fc98 	bl	8003018 <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ee:	f7fe fc93 	bl	8003018 <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0cd      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004700:	4b45      	ldr	r3, [pc, #276]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	025b      	lsls	r3, r3, #9
 8004708:	4013      	ands	r3, r2
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x552>
 800470c:	e01b      	b.n	8004746 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800470e:	4b42      	ldr	r3, [pc, #264]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004712:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004714:	4943      	ldr	r1, [pc, #268]	; (8004824 <HAL_RCC_OscConfig+0x688>)
 8004716:	400a      	ands	r2, r1
 8004718:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fe fc7d 	bl	8003018 <HAL_GetTick>
 800471e:	0003      	movs	r3, r0
 8004720:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004724:	f7fe fc78 	bl	8003018 <HAL_GetTick>
 8004728:	0002      	movs	r2, r0
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0b2      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	025b      	lsls	r3, r3, #9
 800473e:	4013      	ands	r3, r2
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x588>
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004744:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d100      	bne.n	8004750 <HAL_RCC_OscConfig+0x5b4>
 800474e:	e0a4      	b.n	800489a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	220c      	movs	r2, #12
 8004756:	4013      	ands	r3, r2
 8004758:	2b08      	cmp	r3, #8
 800475a:	d100      	bne.n	800475e <HAL_RCC_OscConfig+0x5c2>
 800475c:	e078      	b.n	8004850 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b02      	cmp	r3, #2
 8004764:	d14c      	bne.n	8004800 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004766:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800476c:	492e      	ldr	r1, [pc, #184]	; (8004828 <HAL_RCC_OscConfig+0x68c>)
 800476e:	400a      	ands	r2, r1
 8004770:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004772:	f7fe fc51 	bl	8003018 <HAL_GetTick>
 8004776:	0003      	movs	r3, r0
 8004778:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477c:	f7fe fc4c 	bl	8003018 <HAL_GetTick>
 8004780:	0002      	movs	r2, r0
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e086      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	049b      	lsls	r3, r3, #18
 8004796:	4013      	ands	r3, r2
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479a:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	220f      	movs	r2, #15
 80047a0:	4393      	bics	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80047aa:	430a      	orrs	r2, r1
 80047ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <HAL_RCC_OscConfig+0x690>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	431a      	orrs	r2, r3
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	0449      	lsls	r1, r1, #17
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d6:	f7fe fc1f 	bl	8003018 <HAL_GetTick>
 80047da:	0003      	movs	r3, r0
 80047dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fe fc1a 	bl	8003018 <HAL_GetTick>
 80047e4:	0002      	movs	r2, r0
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e054      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	049b      	lsls	r3, r3, #18
 80047fa:	4013      	ands	r3, r2
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x644>
 80047fe:	e04c      	b.n	800489a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <HAL_RCC_OscConfig+0x67c>)
 8004806:	4908      	ldr	r1, [pc, #32]	; (8004828 <HAL_RCC_OscConfig+0x68c>)
 8004808:	400a      	ands	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe fc04 	bl	8003018 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x6a6>
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	40021000 	.word	0x40021000
 800481c:	00001388 	.word	0x00001388
 8004820:	efffffff 	.word	0xefffffff
 8004824:	fffeffff 	.word	0xfffeffff
 8004828:	feffffff 	.word	0xfeffffff
 800482c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fe fbf2 	bl	8003018 <HAL_GetTick>
 8004834:	0002      	movs	r2, r0
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e02c      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <HAL_RCC_OscConfig+0x708>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	049b      	lsls	r3, r3, #18
 800484a:	4013      	ands	r3, r2
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x694>
 800484e:	e024      	b.n	800489a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e01f      	b.n	800489c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_RCC_OscConfig+0x708>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <HAL_RCC_OscConfig+0x708>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	23c0      	movs	r3, #192	; 0xc0
 800486c:	025b      	lsls	r3, r3, #9
 800486e:	401a      	ands	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	429a      	cmp	r2, r3
 8004876:	d10e      	bne.n	8004896 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	220f      	movs	r2, #15
 800487c:	401a      	ands	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d107      	bne.n	8004896 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	23f0      	movs	r3, #240	; 0xf0
 800488a:	039b      	lsls	r3, r3, #14
 800488c:	401a      	ands	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b008      	add	sp, #32
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000

080048a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0bf      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048bc:	4b61      	ldr	r3, [pc, #388]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2201      	movs	r2, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d911      	bls.n	80048ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2201      	movs	r2, #1
 80048d0:	4393      	bics	r3, r2
 80048d2:	0019      	movs	r1, r3
 80048d4:	4b5b      	ldr	r3, [pc, #364]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048dc:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e0a6      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2202      	movs	r2, #2
 80048f4:	4013      	ands	r3, r2
 80048f6:	d015      	beq.n	8004924 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2204      	movs	r2, #4
 80048fe:	4013      	ands	r3, r2
 8004900:	d006      	beq.n	8004910 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004908:	21e0      	movs	r1, #224	; 0xe0
 800490a:	00c9      	lsls	r1, r1, #3
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	22f0      	movs	r2, #240	; 0xf0
 8004916:	4393      	bics	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2201      	movs	r2, #1
 800492a:	4013      	ands	r3, r2
 800492c:	d04c      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	4013      	ands	r3, r2
 8004940:	d120      	bne.n	8004984 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07a      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b3e      	ldr	r3, [pc, #248]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	049b      	lsls	r3, r3, #18
 8004956:	4013      	ands	r3, r2
 8004958:	d114      	bne.n	8004984 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e06e      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	025b      	lsls	r3, r3, #9
 800496e:	4013      	ands	r3, r2
 8004970:	d108      	bne.n	8004984 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e062      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004976:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2202      	movs	r2, #2
 800497c:	4013      	ands	r3, r2
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e05b      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004984:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2203      	movs	r2, #3
 800498a:	4393      	bics	r3, r2
 800498c:	0019      	movs	r1, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004998:	f7fe fb3e 	bl	8003018 <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a0:	e009      	b.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a2:	f7fe fb39 	bl	8003018 <HAL_GetTick>
 80049a6:	0002      	movs	r2, r0
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <HAL_RCC_ClockConfig+0x1a4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e042      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	220c      	movs	r2, #12
 80049bc:	401a      	ands	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1ec      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c8:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	4013      	ands	r3, r2
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d211      	bcs.n	80049fa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2201      	movs	r2, #1
 80049dc:	4393      	bics	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e8:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <HAL_RCC_ClockConfig+0x19c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e020      	b.n	8004a3c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2204      	movs	r2, #4
 8004a00:	4013      	ands	r3, r2
 8004a02:	d009      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <HAL_RCC_ClockConfig+0x1a8>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a18:	f000 f820 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a1c:	0001      	movs	r1, r0
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <HAL_RCC_ClockConfig+0x1a0>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	220f      	movs	r2, #15
 8004a26:	4013      	ands	r3, r2
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1ac>)
 8004a2a:	5cd3      	ldrb	r3, [r2, r3]
 8004a2c:	000a      	movs	r2, r1
 8004a2e:	40da      	lsrs	r2, r3
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1b0>)
 8004a32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a34:	2000      	movs	r0, #0
 8004a36:	f7fe faa9 	bl	8002f8c <HAL_InitTick>
  
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b004      	add	sp, #16
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40022000 	.word	0x40022000
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	00001388 	.word	0x00001388
 8004a50:	fffff8ff 	.word	0xfffff8ff
 8004a54:	08006a5c 	.word	0x08006a5c
 8004a58:	20000020 	.word	0x20000020

08004a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b08f      	sub	sp, #60	; 0x3c
 8004a60:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004a62:	2314      	movs	r3, #20
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	4a38      	ldr	r2, [pc, #224]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xec>)
 8004a68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a6a:	c313      	stmia	r3!, {r0, r1, r4}
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	4a36      	ldr	r2, [pc, #216]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004a74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a76:	c313      	stmia	r3!, {r0, r1, r4}
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a80:	2300      	movs	r3, #0
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a84:	2300      	movs	r3, #0
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
 8004a88:	2300      	movs	r3, #0
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004a90:	4b2f      	ldr	r3, [pc, #188]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	220c      	movs	r2, #12
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d047      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0xd4>
 8004aa0:	d849      	bhi.n	8004b36 <HAL_RCC_GetSysClockFreq+0xda>
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d002      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x50>
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x56>
 8004aaa:	e044      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ab0:	e044      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	0c9b      	lsrs	r3, r3, #18
 8004ab6:	220f      	movs	r2, #15
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2214      	movs	r2, #20
 8004abc:	18ba      	adds	r2, r7, r2
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	4013      	ands	r3, r2
 8004aca:	1d3a      	adds	r2, r7, #4
 8004acc:	5cd3      	ldrb	r3, [r2, r3]
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad2:	23c0      	movs	r3, #192	; 0xc0
 8004ad4:	025b      	lsls	r3, r3, #9
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d109      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae2:	481c      	ldr	r0, [pc, #112]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae4:	f7fb fb18 	bl	8000118 <__udivsi3>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	001a      	movs	r2, r3
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	4353      	muls	r3, r2
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	e01a      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af6:	23c0      	movs	r3, #192	; 0xc0
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	401a      	ands	r2, r3
 8004afc:	23c0      	movs	r3, #192	; 0xc0
 8004afe:	025b      	lsls	r3, r3, #9
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d109      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	4814      	ldr	r0, [pc, #80]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b08:	f7fb fb06 	bl	8000118 <__udivsi3>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	001a      	movs	r2, r3
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	4353      	muls	r3, r2
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1a:	480e      	ldr	r0, [pc, #56]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b1c:	f7fb fafc 	bl	8000118 <__udivsi3>
 8004b20:	0003      	movs	r3, r0
 8004b22:	001a      	movs	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	4353      	muls	r3, r2
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b2e:	e005      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b34:	e002      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b00f      	add	sp, #60	; 0x3c
 8004b44:	bd90      	pop	{r4, r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	080069fc 	.word	0x080069fc
 8004b4c:	08006a0c 	.word	0x08006a0c
 8004b50:	40021000 	.word	0x40021000
 8004b54:	007a1200 	.word	0x007a1200
 8004b58:	02dc6c00 	.word	0x02dc6c00

08004b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b60:	4b02      	ldr	r3, [pc, #8]	; (8004b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	20000020 	.word	0x20000020

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004b74:	f7ff fff2 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004b78:	0001      	movs	r1, r0
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	2207      	movs	r2, #7
 8004b82:	4013      	ands	r3, r2
 8004b84:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b86:	5cd3      	ldrb	r3, [r2, r3]
 8004b88:	40d9      	lsrs	r1, r3
 8004b8a:	000b      	movs	r3, r1
}    
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	40021000 	.word	0x40021000
 8004b98:	08006a6c 	.word	0x08006a6c

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	025b      	lsls	r3, r3, #9
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d100      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004bb8:	e08e      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004bba:	2017      	movs	r0, #23
 8004bbc:	183b      	adds	r3, r7, r0
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc2:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	055b      	lsls	r3, r3, #21
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d110      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	4b63      	ldr	r3, [pc, #396]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bd4:	2180      	movs	r1, #128	; 0x80
 8004bd6:	0549      	lsls	r1, r1, #21
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
 8004bdc:	4b60      	ldr	r3, [pc, #384]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	055b      	lsls	r3, r3, #21
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bea:	183b      	adds	r3, r7, r0
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf0:	4b5c      	ldr	r3, [pc, #368]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d11a      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b58      	ldr	r3, [pc, #352]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	0049      	lsls	r1, r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0a:	f7fe fa05 	bl	8003018 <HAL_GetTick>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c12:	e008      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fe fa00 	bl	8003018 <HAL_GetTick>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e097      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b4f      	ldr	r3, [pc, #316]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c32:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c34:	6a1a      	ldr	r2, [r3, #32]
 8004c36:	23c0      	movs	r3, #192	; 0xc0
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d034      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	23c0      	movs	r3, #192	; 0xc0
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d02c      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c54:	4b42      	ldr	r3, [pc, #264]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	4a43      	ldr	r2, [pc, #268]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c5e:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c60:	6a1a      	ldr	r2, [r3, #32]
 8004c62:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	0249      	lsls	r1, r1, #9
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6c:	4b3c      	ldr	r3, [pc, #240]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c72:	493e      	ldr	r1, [pc, #248]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c78:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	4013      	ands	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fe f9c7 	bl	8003018 <HAL_GetTick>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8e:	e009      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fe f9c2 	bl	8003018 <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	4a35      	ldr	r2, [pc, #212]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e058      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cc2:	2317      	movs	r3, #23
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ccc:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cd2:	4928      	ldr	r1, [pc, #160]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce2:	4b1f      	ldr	r3, [pc, #124]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	4393      	bics	r3, r2
 8004cea:	0019      	movs	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	2210      	movs	r2, #16
 8004d06:	4393      	bics	r3, r2
 8004d08:	0019      	movs	r1, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d10:	430a      	orrs	r2, r1
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	029b      	lsls	r3, r3, #10
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	2280      	movs	r2, #128	; 0x80
 8004d26:	4393      	bics	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d30:	430a      	orrs	r2, r1
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2240      	movs	r2, #64	; 0x40
 8004d46:	4393      	bics	r3, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d50:	430a      	orrs	r2, r1
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b006      	add	sp, #24
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40007000 	.word	0x40007000
 8004d68:	fffffcff 	.word	0xfffffcff
 8004d6c:	fffeffff 	.word	0xfffeffff
 8004d70:	00001388 	.word	0x00001388
 8004d74:	efffffff 	.word	0xefffffff

08004d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e0a8      	b.n	8004edc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	2382      	movs	r3, #130	; 0x82
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d009      	beq.n	8004db2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	61da      	str	r2, [r3, #28]
 8004da4:	e005      	b.n	8004db2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	225d      	movs	r2, #93	; 0x5d
 8004dbc:	5c9b      	ldrb	r3, [r3, r2]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d107      	bne.n	8004dd4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	225c      	movs	r2, #92	; 0x5c
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7fd ff58 	bl	8002c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	225d      	movs	r2, #93	; 0x5d
 8004dd8:	2102      	movs	r1, #2
 8004dda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2140      	movs	r1, #64	; 0x40
 8004de8:	438a      	bics	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	23e0      	movs	r3, #224	; 0xe0
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d902      	bls.n	8004dfe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e002      	b.n	8004e04 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	015b      	lsls	r3, r3, #5
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	23f0      	movs	r3, #240	; 0xf0
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d008      	beq.n	8004e22 <HAL_SPI_Init+0xaa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	23e0      	movs	r3, #224	; 0xe0
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	2382      	movs	r3, #130	; 0x82
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6899      	ldr	r1, [r3, #8]
 8004e30:	2384      	movs	r3, #132	; 0x84
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	400b      	ands	r3, r1
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	400b      	ands	r3, r1
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	2101      	movs	r1, #1
 8004e48:	400b      	ands	r3, r1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6999      	ldr	r1, [r3, #24]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	400b      	ands	r3, r1
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2138      	movs	r1, #56	; 0x38
 8004e5e:	400b      	ands	r3, r1
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	400b      	ands	r3, r1
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	0011      	movs	r1, r2
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	401a      	ands	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	2204      	movs	r2, #4
 8004e88:	401a      	ands	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2110      	movs	r1, #16
 8004e90:	400b      	ands	r3, r1
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	2108      	movs	r1, #8
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68d9      	ldr	r1, [r3, #12]
 8004ea2:	23f0      	movs	r3, #240	; 0xf0
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	0011      	movs	r1, r2
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	015b      	lsls	r3, r3, #5
 8004eb2:	401a      	ands	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4907      	ldr	r1, [pc, #28]	; (8004ee4 <HAL_SPI_Init+0x16c>)
 8004ec8:	400a      	ands	r2, r1
 8004eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	225d      	movs	r2, #93	; 0x5d
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b004      	add	sp, #16
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	fffff7ff 	.word	0xfffff7ff

08004ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e042      	b.n	8004f80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	223d      	movs	r2, #61	; 0x3d
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223c      	movs	r2, #60	; 0x3c
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7fd ff03 	bl	8002d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	223d      	movs	r2, #61	; 0x3d
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	0019      	movs	r1, r3
 8004f28:	0010      	movs	r0, r2
 8004f2a:	f000 f871 	bl	8005010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2246      	movs	r2, #70	; 0x46
 8004f32:	2101      	movs	r1, #1
 8004f34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	223e      	movs	r2, #62	; 0x3e
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	5499      	strb	r1, [r3, r2]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	223f      	movs	r2, #63	; 0x3f
 8004f42:	2101      	movs	r1, #1
 8004f44:	5499      	strb	r1, [r3, r2]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2240      	movs	r2, #64	; 0x40
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	5499      	strb	r1, [r3, r2]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2241      	movs	r2, #65	; 0x41
 8004f52:	2101      	movs	r1, #1
 8004f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2242      	movs	r2, #66	; 0x42
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	5499      	strb	r1, [r3, r2]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2243      	movs	r2, #67	; 0x43
 8004f62:	2101      	movs	r1, #1
 8004f64:	5499      	strb	r1, [r3, r2]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2244      	movs	r2, #68	; 0x44
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2245      	movs	r2, #69	; 0x45
 8004f72:	2101      	movs	r1, #1
 8004f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	223d      	movs	r2, #61	; 0x3d
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	223d      	movs	r2, #61	; 0x3d
 8004f94:	5c9b      	ldrb	r3, [r3, r2]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e02e      	b.n	8004ffe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	223d      	movs	r2, #61	; 0x3d
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <HAL_TIM_Base_Start+0x80>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x40>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	05db      	lsls	r3, r3, #23
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d004      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x40>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <HAL_TIM_Base_Start+0x84>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d111      	bne.n	8004fec <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2207      	movs	r2, #7
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d010      	beq.n	8004ffc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	e007      	b.n	8004ffc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b004      	add	sp, #16
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40000400 	.word	0x40000400

08005010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a30      	ldr	r2, [pc, #192]	; (80050e4 <TIM_Base_SetConfig+0xd4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d008      	beq.n	800503a <TIM_Base_SetConfig+0x2a>
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	05db      	lsls	r3, r3, #23
 800502e:	429a      	cmp	r2, r3
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x2a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <TIM_Base_SetConfig+0xd8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2270      	movs	r2, #112	; 0x70
 800503e:	4393      	bics	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <TIM_Base_SetConfig+0xd4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d014      	beq.n	800507e <TIM_Base_SetConfig+0x6e>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	05db      	lsls	r3, r3, #23
 800505a:	429a      	cmp	r2, r3
 800505c:	d00f      	beq.n	800507e <TIM_Base_SetConfig+0x6e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <TIM_Base_SetConfig+0xd8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_Base_SetConfig+0x6e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a20      	ldr	r2, [pc, #128]	; (80050ec <TIM_Base_SetConfig+0xdc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <TIM_Base_SetConfig+0x6e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <TIM_Base_SetConfig+0xe0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_Base_SetConfig+0x6e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <TIM_Base_SetConfig+0xe4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d108      	bne.n	8005090 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <TIM_Base_SetConfig+0xe8>)
 8005082:	4013      	ands	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2280      	movs	r2, #128	; 0x80
 8005094:	4393      	bics	r3, r2
 8005096:	001a      	movs	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <TIM_Base_SetConfig+0xd4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d007      	beq.n	80050ce <TIM_Base_SetConfig+0xbe>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <TIM_Base_SetConfig+0xe0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d003      	beq.n	80050ce <TIM_Base_SetConfig+0xbe>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <TIM_Base_SetConfig+0xe4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d103      	bne.n	80050d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	615a      	str	r2, [r3, #20]
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b004      	add	sp, #16
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40002000 	.word	0x40002000
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800
 80050f8:	fffffcff 	.word	0xfffffcff

080050fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e044      	b.n	8005198 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2274      	movs	r2, #116	; 0x74
 800511a:	2100      	movs	r1, #0
 800511c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0018      	movs	r0, r3
 8005122:	f7fd fe1b 	bl	8002d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2224      	movs	r2, #36	; 0x24
 800512a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2101      	movs	r1, #1
 8005138:	438a      	bics	r2, r1
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 fd20 	bl	8005b84 <UART_SetConfig>
 8005144:	0003      	movs	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e024      	b.n	8005198 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f000 fe53 	bl	8005e04 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	490d      	ldr	r1, [pc, #52]	; (80051a0 <HAL_UART_Init+0xa4>)
 800516a:	400a      	ands	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	212a      	movs	r1, #42	; 0x2a
 800517a:	438a      	bics	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2101      	movs	r1, #1
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	0018      	movs	r0, r3
 8005192:	f000 feeb 	bl	8005f6c <UART_CheckIdleState>
 8005196:	0003      	movs	r3, r0
}
 8005198:	0018      	movs	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	b002      	add	sp, #8
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	ffffb7ff 	.word	0xffffb7ff

080051a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	1dbb      	adds	r3, r7, #6
 80051b2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d000      	beq.n	80051be <HAL_UART_Transmit+0x1a>
 80051bc:	e096      	b.n	80052ec <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_UART_Transmit+0x28>
 80051c4:	1dbb      	adds	r3, r7, #6
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e08e      	b.n	80052ee <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	015b      	lsls	r3, r3, #5
 80051d8:	429a      	cmp	r2, r3
 80051da:	d109      	bne.n	80051f0 <HAL_UART_Transmit+0x4c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	d001      	beq.n	80051f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e07e      	b.n	80052ee <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2274      	movs	r2, #116	; 0x74
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Transmit+0x5a>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e077      	b.n	80052ee <HAL_UART_Transmit+0x14a>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2274      	movs	r2, #116	; 0x74
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	2100      	movs	r1, #0
 800520c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2221      	movs	r2, #33	; 0x21
 8005212:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005214:	f7fd ff00 	bl	8003018 <HAL_GetTick>
 8005218:	0003      	movs	r3, r0
 800521a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	1dba      	adds	r2, r7, #6
 8005220:	2150      	movs	r1, #80	; 0x50
 8005222:	8812      	ldrh	r2, [r2, #0]
 8005224:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1dba      	adds	r2, r7, #6
 800522a:	2152      	movs	r1, #82	; 0x52
 800522c:	8812      	ldrh	r2, [r2, #0]
 800522e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	015b      	lsls	r3, r3, #5
 8005238:	429a      	cmp	r2, r3
 800523a:	d108      	bne.n	800524e <HAL_UART_Transmit+0xaa>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e003      	b.n	8005256 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2274      	movs	r2, #116	; 0x74
 800525a:	2100      	movs	r1, #0
 800525c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800525e:	e02d      	b.n	80052bc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	0013      	movs	r3, r2
 800526a:	2200      	movs	r2, #0
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	f000 fec5 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005272:	1e03      	subs	r3, r0, #0
 8005274:	d001      	beq.n	800527a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e039      	b.n	80052ee <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	05d2      	lsls	r2, r2, #23
 800528a:	0dd2      	lsrs	r2, r2, #23
 800528c:	b292      	uxth	r2, r2
 800528e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	3302      	adds	r3, #2
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e008      	b.n	80052aa <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	b292      	uxth	r2, r2
 80052a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	3301      	adds	r3, #1
 80052a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2252      	movs	r2, #82	; 0x52
 80052ae:	5a9b      	ldrh	r3, [r3, r2]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b299      	uxth	r1, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2252      	movs	r2, #82	; 0x52
 80052ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2252      	movs	r2, #82	; 0x52
 80052c0:	5a9b      	ldrh	r3, [r3, r2]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1cb      	bne.n	8005260 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	0013      	movs	r3, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	2140      	movs	r1, #64	; 0x40
 80052d6:	f000 fe91 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e005      	b.n	80052ee <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b008      	add	sp, #32
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	1dbb      	adds	r3, r7, #6
 8005306:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530c:	2b20      	cmp	r3, #32
 800530e:	d000      	beq.n	8005312 <HAL_UART_Receive+0x1a>
 8005310:	e0da      	b.n	80054c8 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_UART_Receive+0x28>
 8005318:	1dbb      	adds	r3, r7, #6
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0d2      	b.n	80054ca <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	015b      	lsls	r3, r3, #5
 800532c:	429a      	cmp	r2, r3
 800532e:	d109      	bne.n	8005344 <HAL_UART_Receive+0x4c>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2201      	movs	r2, #1
 800533c:	4013      	ands	r3, r2
 800533e:	d001      	beq.n	8005344 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0c2      	b.n	80054ca <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2274      	movs	r2, #116	; 0x74
 8005348:	5c9b      	ldrb	r3, [r3, r2]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_UART_Receive+0x5a>
 800534e:	2302      	movs	r3, #2
 8005350:	e0bb      	b.n	80054ca <HAL_UART_Receive+0x1d2>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2274      	movs	r2, #116	; 0x74
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2280      	movs	r2, #128	; 0x80
 800535e:	2100      	movs	r1, #0
 8005360:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2222      	movs	r2, #34	; 0x22
 8005366:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800536e:	f7fd fe53 	bl	8003018 <HAL_GetTick>
 8005372:	0003      	movs	r3, r0
 8005374:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1dba      	adds	r2, r7, #6
 800537a:	2158      	movs	r1, #88	; 0x58
 800537c:	8812      	ldrh	r2, [r2, #0]
 800537e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1dba      	adds	r2, r7, #6
 8005384:	215a      	movs	r1, #90	; 0x5a
 8005386:	8812      	ldrh	r2, [r2, #0]
 8005388:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	015b      	lsls	r3, r3, #5
 8005392:	429a      	cmp	r2, r3
 8005394:	d10d      	bne.n	80053b2 <HAL_UART_Receive+0xba>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_UART_Receive+0xb0>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	225c      	movs	r2, #92	; 0x5c
 80053a2:	494c      	ldr	r1, [pc, #304]	; (80054d4 <HAL_UART_Receive+0x1dc>)
 80053a4:	5299      	strh	r1, [r3, r2]
 80053a6:	e02e      	b.n	8005406 <HAL_UART_Receive+0x10e>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	225c      	movs	r2, #92	; 0x5c
 80053ac:	21ff      	movs	r1, #255	; 0xff
 80053ae:	5299      	strh	r1, [r3, r2]
 80053b0:	e029      	b.n	8005406 <HAL_UART_Receive+0x10e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <HAL_UART_Receive+0xde>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <HAL_UART_Receive+0xd4>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	225c      	movs	r2, #92	; 0x5c
 80053c6:	21ff      	movs	r1, #255	; 0xff
 80053c8:	5299      	strh	r1, [r3, r2]
 80053ca:	e01c      	b.n	8005406 <HAL_UART_Receive+0x10e>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	225c      	movs	r2, #92	; 0x5c
 80053d0:	217f      	movs	r1, #127	; 0x7f
 80053d2:	5299      	strh	r1, [r3, r2]
 80053d4:	e017      	b.n	8005406 <HAL_UART_Receive+0x10e>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	055b      	lsls	r3, r3, #21
 80053de:	429a      	cmp	r2, r3
 80053e0:	d10d      	bne.n	80053fe <HAL_UART_Receive+0x106>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <HAL_UART_Receive+0xfc>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	225c      	movs	r2, #92	; 0x5c
 80053ee:	217f      	movs	r1, #127	; 0x7f
 80053f0:	5299      	strh	r1, [r3, r2]
 80053f2:	e008      	b.n	8005406 <HAL_UART_Receive+0x10e>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	225c      	movs	r2, #92	; 0x5c
 80053f8:	213f      	movs	r1, #63	; 0x3f
 80053fa:	5299      	strh	r1, [r3, r2]
 80053fc:	e003      	b.n	8005406 <HAL_UART_Receive+0x10e>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	225c      	movs	r2, #92	; 0x5c
 8005402:	2100      	movs	r1, #0
 8005404:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005406:	2312      	movs	r3, #18
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	215c      	movs	r1, #92	; 0x5c
 800540e:	5a52      	ldrh	r2, [r2, r1]
 8005410:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	015b      	lsls	r3, r3, #5
 800541a:	429a      	cmp	r2, r3
 800541c:	d108      	bne.n	8005430 <HAL_UART_Receive+0x138>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	e003      	b.n	8005438 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2274      	movs	r2, #116	; 0x74
 800543c:	2100      	movs	r1, #0
 800543e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005440:	e037      	b.n	80054b2 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	0013      	movs	r3, r2
 800544c:	2200      	movs	r2, #0
 800544e:	2120      	movs	r1, #32
 8005450:	f000 fdd4 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005454:	1e03      	subs	r3, r0, #0
 8005456:	d001      	beq.n	800545c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e036      	b.n	80054ca <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10e      	bne.n	8005480 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005468:	b29b      	uxth	r3, r3
 800546a:	2212      	movs	r2, #18
 800546c:	18ba      	adds	r2, r7, r2
 800546e:	8812      	ldrh	r2, [r2, #0]
 8005470:	4013      	ands	r3, r2
 8005472:	b29a      	uxth	r2, r3
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	3302      	adds	r3, #2
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e00f      	b.n	80054a0 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005486:	b29b      	uxth	r3, r3
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2212      	movs	r2, #18
 800548c:	18ba      	adds	r2, r7, r2
 800548e:	8812      	ldrh	r2, [r2, #0]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	4013      	ands	r3, r2
 8005494:	b2da      	uxtb	r2, r3
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3301      	adds	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	225a      	movs	r2, #90	; 0x5a
 80054a4:	5a9b      	ldrh	r3, [r3, r2]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b299      	uxth	r1, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	225a      	movs	r2, #90	; 0x5a
 80054b0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	225a      	movs	r2, #90	; 0x5a
 80054b6:	5a9b      	ldrh	r3, [r3, r2]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1c1      	bne.n	8005442 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b008      	add	sp, #32
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	000001ff 	.word	0x000001ff

080054d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	1dbb      	adds	r3, r7, #6
 80054e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d150      	bne.n	8005590 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_UART_Receive_IT+0x24>
 80054f4:	1dbb      	adds	r3, r7, #6
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e048      	b.n	8005592 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	015b      	lsls	r3, r3, #5
 8005508:	429a      	cmp	r2, r3
 800550a:	d109      	bne.n	8005520 <HAL_UART_Receive_IT+0x48>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2201      	movs	r2, #1
 8005518:	4013      	ands	r3, r2
 800551a:	d001      	beq.n	8005520 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e038      	b.n	8005592 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2274      	movs	r2, #116	; 0x74
 8005524:	5c9b      	ldrb	r3, [r3, r2]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_UART_Receive_IT+0x56>
 800552a:	2302      	movs	r3, #2
 800552c:	e031      	b.n	8005592 <HAL_UART_Receive_IT+0xba>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2274      	movs	r2, #116	; 0x74
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	4013      	ands	r3, r2
 8005548:	d019      	beq.n	800557e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554a:	f3ef 8310 	mrs	r3, PRIMASK
 800554e:	613b      	str	r3, [r7, #16]
  return(result);
 8005550:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f383 8810 	msr	PRIMASK, r3
}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2180      	movs	r1, #128	; 0x80
 800556c:	04c9      	lsls	r1, r1, #19
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f383 8810 	msr	PRIMASK, r3
}
 800557c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800557e:	1dbb      	adds	r3, r7, #6
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	0018      	movs	r0, r3
 8005588:	f000 fdfc 	bl	8006184 <UART_Start_Receive_IT>
 800558c:	0003      	movs	r3, r0
 800558e:	e000      	b.n	8005592 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005590:	2302      	movs	r3, #2
  }
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b008      	add	sp, #32
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800559c:	b590      	push	{r4, r7, lr}
 800559e:	b0ab      	sub	sp, #172	; 0xac
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	22a4      	movs	r2, #164	; 0xa4
 80055ac:	18b9      	adds	r1, r7, r2
 80055ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	20a0      	movs	r0, #160	; 0xa0
 80055b8:	1839      	adds	r1, r7, r0
 80055ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	219c      	movs	r1, #156	; 0x9c
 80055c4:	1879      	adds	r1, r7, r1
 80055c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055c8:	0011      	movs	r1, r2
 80055ca:	18bb      	adds	r3, r7, r2
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a99      	ldr	r2, [pc, #612]	; (8005834 <HAL_UART_IRQHandler+0x298>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	2298      	movs	r2, #152	; 0x98
 80055d4:	18bc      	adds	r4, r7, r2
 80055d6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80055d8:	18bb      	adds	r3, r7, r2
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d114      	bne.n	800560a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055e0:	187b      	adds	r3, r7, r1
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2220      	movs	r2, #32
 80055e6:	4013      	ands	r3, r2
 80055e8:	d00f      	beq.n	800560a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ea:	183b      	adds	r3, r7, r0
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2220      	movs	r2, #32
 80055f0:	4013      	ands	r3, r2
 80055f2:	d00a      	beq.n	800560a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d100      	bne.n	80055fe <HAL_UART_IRQHandler+0x62>
 80055fc:	e296      	b.n	8005b2c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	0010      	movs	r0, r2
 8005606:	4798      	blx	r3
      }
      return;
 8005608:	e290      	b.n	8005b2c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800560a:	2398      	movs	r3, #152	; 0x98
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d100      	bne.n	8005616 <HAL_UART_IRQHandler+0x7a>
 8005614:	e114      	b.n	8005840 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005616:	239c      	movs	r3, #156	; 0x9c
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	4013      	ands	r3, r2
 8005620:	d106      	bne.n	8005630 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005622:	23a0      	movs	r3, #160	; 0xa0
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a83      	ldr	r2, [pc, #524]	; (8005838 <HAL_UART_IRQHandler+0x29c>)
 800562a:	4013      	ands	r3, r2
 800562c:	d100      	bne.n	8005630 <HAL_UART_IRQHandler+0x94>
 800562e:	e107      	b.n	8005840 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005630:	23a4      	movs	r3, #164	; 0xa4
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2201      	movs	r2, #1
 8005638:	4013      	ands	r3, r2
 800563a:	d012      	beq.n	8005662 <HAL_UART_IRQHandler+0xc6>
 800563c:	23a0      	movs	r3, #160	; 0xa0
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	4013      	ands	r3, r2
 8005648:	d00b      	beq.n	8005662 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2201      	movs	r2, #1
 8005650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	589b      	ldr	r3, [r3, r2]
 8005658:	2201      	movs	r2, #1
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2180      	movs	r1, #128	; 0x80
 8005660:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005662:	23a4      	movs	r3, #164	; 0xa4
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2202      	movs	r2, #2
 800566a:	4013      	ands	r3, r2
 800566c:	d011      	beq.n	8005692 <HAL_UART_IRQHandler+0xf6>
 800566e:	239c      	movs	r3, #156	; 0x9c
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2201      	movs	r2, #1
 8005676:	4013      	ands	r3, r2
 8005678:	d00b      	beq.n	8005692 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2202      	movs	r2, #2
 8005680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	589b      	ldr	r3, [r3, r2]
 8005688:	2204      	movs	r2, #4
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005692:	23a4      	movs	r3, #164	; 0xa4
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2204      	movs	r2, #4
 800569a:	4013      	ands	r3, r2
 800569c:	d011      	beq.n	80056c2 <HAL_UART_IRQHandler+0x126>
 800569e:	239c      	movs	r3, #156	; 0x9c
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2201      	movs	r2, #1
 80056a6:	4013      	ands	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2204      	movs	r2, #4
 80056b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	589b      	ldr	r3, [r3, r2]
 80056b8:	2202      	movs	r2, #2
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2180      	movs	r1, #128	; 0x80
 80056c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056c2:	23a4      	movs	r3, #164	; 0xa4
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2208      	movs	r2, #8
 80056ca:	4013      	ands	r3, r2
 80056cc:	d017      	beq.n	80056fe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056ce:	23a0      	movs	r3, #160	; 0xa0
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2220      	movs	r2, #32
 80056d6:	4013      	ands	r3, r2
 80056d8:	d105      	bne.n	80056e6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056da:	239c      	movs	r3, #156	; 0x9c
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2201      	movs	r2, #1
 80056e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056e4:	d00b      	beq.n	80056fe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2208      	movs	r2, #8
 80056ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2280      	movs	r2, #128	; 0x80
 80056f2:	589b      	ldr	r3, [r3, r2]
 80056f4:	2208      	movs	r2, #8
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2180      	movs	r1, #128	; 0x80
 80056fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056fe:	23a4      	movs	r3, #164	; 0xa4
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	4013      	ands	r3, r2
 800570a:	d013      	beq.n	8005734 <HAL_UART_IRQHandler+0x198>
 800570c:	23a0      	movs	r3, #160	; 0xa0
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	2380      	movs	r3, #128	; 0x80
 8005714:	04db      	lsls	r3, r3, #19
 8005716:	4013      	ands	r3, r2
 8005718:	d00c      	beq.n	8005734 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	0112      	lsls	r2, r2, #4
 8005722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	589b      	ldr	r3, [r3, r2]
 800572a:	2220      	movs	r2, #32
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	589b      	ldr	r3, [r3, r2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d100      	bne.n	8005740 <HAL_UART_IRQHandler+0x1a4>
 800573e:	e1f7      	b.n	8005b30 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005740:	23a4      	movs	r3, #164	; 0xa4
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2220      	movs	r2, #32
 8005748:	4013      	ands	r3, r2
 800574a:	d00e      	beq.n	800576a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800574c:	23a0      	movs	r3, #160	; 0xa0
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2220      	movs	r2, #32
 8005754:	4013      	ands	r3, r2
 8005756:	d008      	beq.n	800576a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	0010      	movs	r0, r2
 8005768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2280      	movs	r2, #128	; 0x80
 800576e:	589b      	ldr	r3, [r3, r2]
 8005770:	2194      	movs	r1, #148	; 0x94
 8005772:	187a      	adds	r2, r7, r1
 8005774:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2240      	movs	r2, #64	; 0x40
 800577e:	4013      	ands	r3, r2
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d004      	beq.n	800578e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005784:	187b      	adds	r3, r7, r1
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2228      	movs	r2, #40	; 0x28
 800578a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800578c:	d047      	beq.n	800581e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 fda7 	bl	80062e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2240      	movs	r2, #64	; 0x40
 800579e:	4013      	ands	r3, r2
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	d137      	bne.n	8005814 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a4:	f3ef 8310 	mrs	r3, PRIMASK
 80057a8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80057aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ac:	2090      	movs	r0, #144	; 0x90
 80057ae:	183a      	adds	r2, r7, r0
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	2301      	movs	r3, #1
 80057b4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	438a      	bics	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
 80057ce:	183b      	adds	r3, r7, r0
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057d6:	f383 8810 	msr	PRIMASK, r3
}
 80057da:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	4a14      	ldr	r2, [pc, #80]	; (800583c <HAL_UART_IRQHandler+0x2a0>)
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7fd fd71 	bl	80032d8 <HAL_DMA_Abort_IT>
 80057f6:	1e03      	subs	r3, r0, #0
 80057f8:	d01a      	beq.n	8005830 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	0018      	movs	r0, r3
 8005806:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	e012      	b.n	8005830 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 f9a5 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005812:	e00d      	b.n	8005830 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 f9a0 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	e008      	b.n	8005830 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f000 f99b 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2280      	movs	r2, #128	; 0x80
 800582a:	2100      	movs	r1, #0
 800582c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800582e:	e17f      	b.n	8005b30 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	46c0      	nop			; (mov r8, r8)
    return;
 8005832:	e17d      	b.n	8005b30 <HAL_UART_IRQHandler+0x594>
 8005834:	0000080f 	.word	0x0000080f
 8005838:	04000120 	.word	0x04000120
 800583c:	080063a9 	.word	0x080063a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005844:	2b01      	cmp	r3, #1
 8005846:	d000      	beq.n	800584a <HAL_UART_IRQHandler+0x2ae>
 8005848:	e131      	b.n	8005aae <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800584a:	23a4      	movs	r3, #164	; 0xa4
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2210      	movs	r2, #16
 8005852:	4013      	ands	r3, r2
 8005854:	d100      	bne.n	8005858 <HAL_UART_IRQHandler+0x2bc>
 8005856:	e12a      	b.n	8005aae <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005858:	23a0      	movs	r3, #160	; 0xa0
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2210      	movs	r2, #16
 8005860:	4013      	ands	r3, r2
 8005862:	d100      	bne.n	8005866 <HAL_UART_IRQHandler+0x2ca>
 8005864:	e123      	b.n	8005aae <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2210      	movs	r2, #16
 800586c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2240      	movs	r2, #64	; 0x40
 8005876:	4013      	ands	r3, r2
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d000      	beq.n	800587e <HAL_UART_IRQHandler+0x2e2>
 800587c:	e09b      	b.n	80059b6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	217e      	movs	r1, #126	; 0x7e
 8005888:	187b      	adds	r3, r7, r1
 800588a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800588c:	187b      	adds	r3, r7, r1
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d100      	bne.n	8005896 <HAL_UART_IRQHandler+0x2fa>
 8005894:	e14e      	b.n	8005b34 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2258      	movs	r2, #88	; 0x58
 800589a:	5a9b      	ldrh	r3, [r3, r2]
 800589c:	187a      	adds	r2, r7, r1
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d300      	bcc.n	80058a6 <HAL_UART_IRQHandler+0x30a>
 80058a4:	e146      	b.n	8005b34 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	187a      	adds	r2, r7, r1
 80058aa:	215a      	movs	r1, #90	; 0x5a
 80058ac:	8812      	ldrh	r2, [r2, #0]
 80058ae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d06e      	beq.n	8005998 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ba:	f3ef 8310 	mrs	r3, PRIMASK
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80058c4:	2301      	movs	r3, #1
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	f383 8810 	msr	PRIMASK, r3
}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	499a      	ldr	r1, [pc, #616]	; (8005b44 <HAL_UART_IRQHandler+0x5a8>)
 80058dc:	400a      	ands	r2, r1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	f383 8810 	msr	PRIMASK, r3
}
 80058ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ec:	f3ef 8310 	mrs	r3, PRIMASK
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f4:	677b      	str	r3, [r7, #116]	; 0x74
 80058f6:	2301      	movs	r3, #1
 80058f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fc:	f383 8810 	msr	PRIMASK, r3
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2101      	movs	r1, #1
 800590e:	438a      	bics	r2, r1
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005914:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005918:	f383 8810 	msr	PRIMASK, r3
}
 800591c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591e:	f3ef 8310 	mrs	r3, PRIMASK
 8005922:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005924:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005926:	673b      	str	r3, [r7, #112]	; 0x70
 8005928:	2301      	movs	r3, #1
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592e:	f383 8810 	msr	PRIMASK, r3
}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2140      	movs	r1, #64	; 0x40
 8005940:	438a      	bics	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005946:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594a:	f383 8810 	msr	PRIMASK, r3
}
 800594e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595c:	f3ef 8310 	mrs	r3, PRIMASK
 8005960:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005962:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005966:	2301      	movs	r3, #1
 8005968:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800596c:	f383 8810 	msr	PRIMASK, r3
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2110      	movs	r1, #16
 800597e:	438a      	bics	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	0018      	movs	r0, r3
 8005994:	f7fd fc68 	bl	8003268 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2258      	movs	r2, #88	; 0x58
 800599c:	5a9a      	ldrh	r2, [r3, r2]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	215a      	movs	r1, #90	; 0x5a
 80059a2:	5a5b      	ldrh	r3, [r3, r1]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	0011      	movs	r1, r2
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 f8dc 	bl	8005b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059b4:	e0be      	b.n	8005b34 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2258      	movs	r2, #88	; 0x58
 80059ba:	5a99      	ldrh	r1, [r3, r2]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	225a      	movs	r2, #90	; 0x5a
 80059c0:	5a9b      	ldrh	r3, [r3, r2]
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	208e      	movs	r0, #142	; 0x8e
 80059c6:	183b      	adds	r3, r7, r0
 80059c8:	1a8a      	subs	r2, r1, r2
 80059ca:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	225a      	movs	r2, #90	; 0x5a
 80059d0:	5a9b      	ldrh	r3, [r3, r2]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d100      	bne.n	80059da <HAL_UART_IRQHandler+0x43e>
 80059d8:	e0ae      	b.n	8005b38 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80059da:	183b      	adds	r3, r7, r0
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d100      	bne.n	80059e4 <HAL_UART_IRQHandler+0x448>
 80059e2:	e0a9      	b.n	8005b38 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e4:	f3ef 8310 	mrs	r3, PRIMASK
 80059e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ea:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ec:	2488      	movs	r4, #136	; 0x88
 80059ee:	193a      	adds	r2, r7, r4
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	494f      	ldr	r1, [pc, #316]	; (8005b48 <HAL_UART_IRQHandler+0x5ac>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	193b      	adds	r3, r7, r4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f383 8810 	msr	PRIMASK, r3
}
 8005a1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a20:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a22:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	2484      	movs	r4, #132	; 0x84
 8005a26:	193a      	adds	r2, r7, r4
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f383 8810 	msr	PRIMASK, r3
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2101      	movs	r1, #1
 8005a42:	438a      	bics	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	193b      	adds	r3, r7, r4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	f383 8810 	msr	PRIMASK, r3
}
 8005a52:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a66:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6e:	2480      	movs	r4, #128	; 0x80
 8005a70:	193a      	adds	r2, r7, r4
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	2301      	movs	r3, #1
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	f383 8810 	msr	PRIMASK, r3
}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	438a      	bics	r2, r1
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	193b      	adds	r3, r7, r4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a9e:	183b      	adds	r3, r7, r0
 8005aa0:	881a      	ldrh	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0011      	movs	r1, r2
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 f860 	bl	8005b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aac:	e044      	b.n	8005b38 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aae:	23a4      	movs	r3, #164	; 0xa4
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	035b      	lsls	r3, r3, #13
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d010      	beq.n	8005ade <HAL_UART_IRQHandler+0x542>
 8005abc:	239c      	movs	r3, #156	; 0x9c
 8005abe:	18fb      	adds	r3, r7, r3
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	03db      	lsls	r3, r3, #15
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	0352      	lsls	r2, r2, #13
 8005ad2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f000 fe10 	bl	80066fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005adc:	e02f      	b.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ade:	23a4      	movs	r3, #164	; 0xa4
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2280      	movs	r2, #128	; 0x80
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005aea:	23a0      	movs	r3, #160	; 0xa0
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	4013      	ands	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01e      	beq.n	8005b3c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	0010      	movs	r0, r2
 8005b06:	4798      	blx	r3
    }
    return;
 8005b08:	e018      	b.n	8005b3c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b0a:	23a4      	movs	r3, #164	; 0xa4
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2240      	movs	r2, #64	; 0x40
 8005b12:	4013      	ands	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
 8005b16:	23a0      	movs	r3, #160	; 0xa0
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2240      	movs	r2, #64	; 0x40
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d00d      	beq.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 fc56 	bl	80063d6 <UART_EndTransmit_IT>
    return;
 8005b2a:	e008      	b.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
      return;
 8005b2c:	46c0      	nop			; (mov r8, r8)
 8005b2e:	e006      	b.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
    return;
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	e004      	b.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
      return;
 8005b34:	46c0      	nop			; (mov r8, r8)
 8005b36:	e002      	b.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
      return;
 8005b38:	46c0      	nop			; (mov r8, r8)
 8005b3a:	e000      	b.n	8005b3e <HAL_UART_IRQHandler+0x5a2>
    return;
 8005b3c:	46c0      	nop			; (mov r8, r8)
  }

}
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b02b      	add	sp, #172	; 0xac
 8005b42:	bd90      	pop	{r4, r7, pc}
 8005b44:	fffffeff 	.word	0xfffffeff
 8005b48:	fffffedf 	.word	0xfffffedf

08005b4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b54:	46c0      	nop			; (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b002      	add	sp, #8
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b002      	add	sp, #8
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	000a      	movs	r2, r1
 8005b76:	1cbb      	adds	r3, r7, #2
 8005b78:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b8c:	231e      	movs	r3, #30
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a8d      	ldr	r2, [pc, #564]	; (8005de8 <UART_SetConfig+0x264>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a88      	ldr	r2, [pc, #544]	; (8005dec <UART_SetConfig+0x268>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4a7f      	ldr	r2, [pc, #508]	; (8005df0 <UART_SetConfig+0x26c>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a7b      	ldr	r2, [pc, #492]	; (8005df4 <UART_SetConfig+0x270>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d127      	bne.n	8005c5a <UART_SetConfig+0xd6>
 8005c0a:	4b7b      	ldr	r3, [pc, #492]	; (8005df8 <UART_SetConfig+0x274>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	2203      	movs	r2, #3
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d00d      	beq.n	8005c32 <UART_SetConfig+0xae>
 8005c16:	d81b      	bhi.n	8005c50 <UART_SetConfig+0xcc>
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d014      	beq.n	8005c46 <UART_SetConfig+0xc2>
 8005c1c:	d818      	bhi.n	8005c50 <UART_SetConfig+0xcc>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <UART_SetConfig+0xa4>
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d00a      	beq.n	8005c3c <UART_SetConfig+0xb8>
 8005c26:	e013      	b.n	8005c50 <UART_SetConfig+0xcc>
 8005c28:	231f      	movs	r3, #31
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e021      	b.n	8005c76 <UART_SetConfig+0xf2>
 8005c32:	231f      	movs	r3, #31
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	2202      	movs	r2, #2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	e01c      	b.n	8005c76 <UART_SetConfig+0xf2>
 8005c3c:	231f      	movs	r3, #31
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	2204      	movs	r2, #4
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e017      	b.n	8005c76 <UART_SetConfig+0xf2>
 8005c46:	231f      	movs	r3, #31
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e012      	b.n	8005c76 <UART_SetConfig+0xf2>
 8005c50:	231f      	movs	r3, #31
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	2210      	movs	r2, #16
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e00d      	b.n	8005c76 <UART_SetConfig+0xf2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a67      	ldr	r2, [pc, #412]	; (8005dfc <UART_SetConfig+0x278>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d104      	bne.n	8005c6e <UART_SetConfig+0xea>
 8005c64:	231f      	movs	r3, #31
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e003      	b.n	8005c76 <UART_SetConfig+0xf2>
 8005c6e:	231f      	movs	r3, #31
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2210      	movs	r2, #16
 8005c74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69da      	ldr	r2, [r3, #28]
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d15d      	bne.n	8005d3e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005c82:	231f      	movs	r3, #31
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d015      	beq.n	8005cb8 <UART_SetConfig+0x134>
 8005c8c:	dc18      	bgt.n	8005cc0 <UART_SetConfig+0x13c>
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d00d      	beq.n	8005cae <UART_SetConfig+0x12a>
 8005c92:	dc15      	bgt.n	8005cc0 <UART_SetConfig+0x13c>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <UART_SetConfig+0x11a>
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d005      	beq.n	8005ca8 <UART_SetConfig+0x124>
 8005c9c:	e010      	b.n	8005cc0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c9e:	f7fe ff67 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	61bb      	str	r3, [r7, #24]
        break;
 8005ca6:	e012      	b.n	8005cce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4b55      	ldr	r3, [pc, #340]	; (8005e00 <UART_SetConfig+0x27c>)
 8005caa:	61bb      	str	r3, [r7, #24]
        break;
 8005cac:	e00f      	b.n	8005cce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cae:	f7fe fed5 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	61bb      	str	r3, [r7, #24]
        break;
 8005cb6:	e00a      	b.n	8005cce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	61bb      	str	r3, [r7, #24]
        break;
 8005cbe:	e006      	b.n	8005cce <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cc4:	231e      	movs	r3, #30
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]
        break;
 8005ccc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d100      	bne.n	8005cd6 <UART_SetConfig+0x152>
 8005cd4:	e07b      	b.n	8005dce <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	005a      	lsls	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	18d2      	adds	r2, r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	0010      	movs	r0, r2
 8005cea:	f7fa fa15 	bl	8000118 <__udivsi3>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	d91c      	bls.n	8005d34 <UART_SetConfig+0x1b0>
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	025b      	lsls	r3, r3, #9
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d217      	bcs.n	8005d34 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	200e      	movs	r0, #14
 8005d0a:	183b      	adds	r3, r7, r0
 8005d0c:	210f      	movs	r1, #15
 8005d0e:	438a      	bics	r2, r1
 8005d10:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2207      	movs	r2, #7
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	b299      	uxth	r1, r3
 8005d1e:	183b      	adds	r3, r7, r0
 8005d20:	183a      	adds	r2, r7, r0
 8005d22:	8812      	ldrh	r2, [r2, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	183a      	adds	r2, r7, r0
 8005d2e:	8812      	ldrh	r2, [r2, #0]
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	e04c      	b.n	8005dce <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005d34:	231e      	movs	r3, #30
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e047      	b.n	8005dce <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d3e:	231f      	movs	r3, #31
 8005d40:	18fb      	adds	r3, r7, r3
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d015      	beq.n	8005d74 <UART_SetConfig+0x1f0>
 8005d48:	dc18      	bgt.n	8005d7c <UART_SetConfig+0x1f8>
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d00d      	beq.n	8005d6a <UART_SetConfig+0x1e6>
 8005d4e:	dc15      	bgt.n	8005d7c <UART_SetConfig+0x1f8>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <UART_SetConfig+0x1d6>
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d005      	beq.n	8005d64 <UART_SetConfig+0x1e0>
 8005d58:	e010      	b.n	8005d7c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d5a:	f7fe ff09 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	61bb      	str	r3, [r7, #24]
        break;
 8005d62:	e012      	b.n	8005d8a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d64:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <UART_SetConfig+0x27c>)
 8005d66:	61bb      	str	r3, [r7, #24]
        break;
 8005d68:	e00f      	b.n	8005d8a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6a:	f7fe fe77 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	61bb      	str	r3, [r7, #24]
        break;
 8005d72:	e00a      	b.n	8005d8a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	61bb      	str	r3, [r7, #24]
        break;
 8005d7a:	e006      	b.n	8005d8a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d80:	231e      	movs	r3, #30
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2201      	movs	r2, #1
 8005d86:	701a      	strb	r2, [r3, #0]
        break;
 8005d88:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	085a      	lsrs	r2, r3, #1
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	18d2      	adds	r2, r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	0019      	movs	r1, r3
 8005da0:	0010      	movs	r0, r2
 8005da2:	f7fa f9b9 	bl	8000118 <__udivsi3>
 8005da6:	0003      	movs	r3, r0
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	d909      	bls.n	8005dc6 <UART_SetConfig+0x242>
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	025b      	lsls	r3, r3, #9
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d204      	bcs.n	8005dc6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e003      	b.n	8005dce <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc6:	231e      	movs	r3, #30
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	2201      	movs	r2, #1
 8005dcc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dda:	231e      	movs	r3, #30
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	781b      	ldrb	r3, [r3, #0]
}
 8005de0:	0018      	movs	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b008      	add	sp, #32
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	efff69f3 	.word	0xefff69f3
 8005dec:	ffffcfff 	.word	0xffffcfff
 8005df0:	fffff4ff 	.word	0xfffff4ff
 8005df4:	40013800 	.word	0x40013800
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	40004400 	.word	0x40004400
 8005e00:	007a1200 	.word	0x007a1200

08005e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2201      	movs	r2, #1
 8005e12:	4013      	ands	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4a4a      	ldr	r2, [pc, #296]	; (8005f48 <UART_AdvFeatureConfig+0x144>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	0019      	movs	r1, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2202      	movs	r2, #2
 8005e34:	4013      	ands	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4a43      	ldr	r2, [pc, #268]	; (8005f4c <UART_AdvFeatureConfig+0x148>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	0019      	movs	r1, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2204      	movs	r2, #4
 8005e56:	4013      	ands	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a3b      	ldr	r2, [pc, #236]	; (8005f50 <UART_AdvFeatureConfig+0x14c>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	2208      	movs	r2, #8
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4a34      	ldr	r2, [pc, #208]	; (8005f54 <UART_AdvFeatureConfig+0x150>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2210      	movs	r2, #16
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	4a2c      	ldr	r2, [pc, #176]	; (8005f58 <UART_AdvFeatureConfig+0x154>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	0019      	movs	r1, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	2220      	movs	r2, #32
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d00b      	beq.n	8005ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <UART_AdvFeatureConfig+0x158>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	0019      	movs	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2240      	movs	r2, #64	; 0x40
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d01d      	beq.n	8005f1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <UART_AdvFeatureConfig+0x15c>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	0019      	movs	r1, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	035b      	lsls	r3, r3, #13
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d10b      	bne.n	8005f1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <UART_AdvFeatureConfig+0x160>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2280      	movs	r2, #128	; 0x80
 8005f24:	4013      	ands	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4a0e      	ldr	r2, [pc, #56]	; (8005f68 <UART_AdvFeatureConfig+0x164>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	0019      	movs	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }
}
 8005f40:	46c0      	nop			; (mov r8, r8)
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b002      	add	sp, #8
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	fffdffff 	.word	0xfffdffff
 8005f4c:	fffeffff 	.word	0xfffeffff
 8005f50:	fffbffff 	.word	0xfffbffff
 8005f54:	ffff7fff 	.word	0xffff7fff
 8005f58:	ffffefff 	.word	0xffffefff
 8005f5c:	ffffdfff 	.word	0xffffdfff
 8005f60:	ffefffff 	.word	0xffefffff
 8005f64:	ff9fffff 	.word	0xff9fffff
 8005f68:	fff7ffff 	.word	0xfff7ffff

08005f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2280      	movs	r2, #128	; 0x80
 8005f78:	2100      	movs	r1, #0
 8005f7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f7c:	f7fd f84c 	bl	8003018 <HAL_GetTick>
 8005f80:	0003      	movs	r3, r0
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d10c      	bne.n	8005fac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	0391      	lsls	r1, r2, #14
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <UART_CheckIdleState+0x8c>)
 8005f9c:	9200      	str	r2, [sp, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f000 f82c 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005fa4:	1e03      	subs	r3, r0, #0
 8005fa6:	d001      	beq.n	8005fac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e021      	b.n	8005ff0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d10c      	bne.n	8005fd4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2280      	movs	r2, #128	; 0x80
 8005fbe:	03d1      	lsls	r1, r2, #15
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4a0d      	ldr	r2, [pc, #52]	; (8005ff8 <UART_CheckIdleState+0x8c>)
 8005fc4:	9200      	str	r2, [sp, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f000 f818 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005fcc:	1e03      	subs	r3, r0, #0
 8005fce:	d001      	beq.n	8005fd4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e00d      	b.n	8005ff0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2274      	movs	r2, #116	; 0x74
 8005fea:	2100      	movs	r1, #0
 8005fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b004      	add	sp, #16
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	01ffffff 	.word	0x01ffffff

08005ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b094      	sub	sp, #80	; 0x50
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	1dfb      	adds	r3, r7, #7
 800600a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600c:	e0a3      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006010:	3301      	adds	r3, #1
 8006012:	d100      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006014:	e09f      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006016:	f7fc ffff 	bl	8003018 <HAL_GetTick>
 800601a:	0002      	movs	r2, r0
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <UART_WaitOnFlagUntilTimeout+0x30>
 8006026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006028:	2b00      	cmp	r3, #0
 800602a:	d13d      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800602c:	f3ef 8310 	mrs	r3, PRIMASK
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
 8006036:	2301      	movs	r3, #1
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	f383 8810 	msr	PRIMASK, r3
}
 8006040:	46c0      	nop			; (mov r8, r8)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	494c      	ldr	r1, [pc, #304]	; (8006180 <UART_WaitOnFlagUntilTimeout+0x184>)
 800604e:	400a      	ands	r2, r1
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f383 8810 	msr	PRIMASK, r3
}
 800605c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800605e:	f3ef 8310 	mrs	r3, PRIMASK
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006066:	643b      	str	r3, [r7, #64]	; 0x40
 8006068:	2301      	movs	r3, #1
 800606a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	f383 8810 	msr	PRIMASK, r3
}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2101      	movs	r1, #1
 8006080:	438a      	bics	r2, r1
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608a:	f383 8810 	msr	PRIMASK, r3
}
 800608e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2274      	movs	r2, #116	; 0x74
 80060a0:	2100      	movs	r1, #0
 80060a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e067      	b.n	8006178 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2204      	movs	r2, #4
 80060b0:	4013      	ands	r3, r2
 80060b2:	d050      	beq.n	8006156 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	401a      	ands	r2, r3
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d146      	bne.n	8006156 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2280      	movs	r2, #128	; 0x80
 80060ce:	0112      	lsls	r2, r2, #4
 80060d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d2:	f3ef 8310 	mrs	r3, PRIMASK
 80060d6:	613b      	str	r3, [r7, #16]
  return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f383 8810 	msr	PRIMASK, r3
}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4923      	ldr	r1, [pc, #140]	; (8006180 <UART_WaitOnFlagUntilTimeout+0x184>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f383 8810 	msr	PRIMASK, r3
}
 8006102:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006104:	f3ef 8310 	mrs	r3, PRIMASK
 8006108:	61fb      	str	r3, [r7, #28]
  return(result);
 800610a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	64bb      	str	r3, [r7, #72]	; 0x48
 800610e:	2301      	movs	r3, #1
 8006110:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	f383 8810 	msr	PRIMASK, r3
}
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2101      	movs	r1, #1
 8006126:	438a      	bics	r2, r1
 8006128:	609a      	str	r2, [r3, #8]
 800612a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	f383 8810 	msr	PRIMASK, r3
}
 8006134:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	2120      	movs	r1, #32
 8006148:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2274      	movs	r2, #116	; 0x74
 800614e:	2100      	movs	r1, #0
 8006150:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e010      	b.n	8006178 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4013      	ands	r3, r2
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	425a      	negs	r2, r3
 8006166:	4153      	adcs	r3, r2
 8006168:	b2db      	uxtb	r3, r3
 800616a:	001a      	movs	r2, r3
 800616c:	1dfb      	adds	r3, r7, #7
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d100      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006174:	e74b      	b.n	800600e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b014      	add	sp, #80	; 0x50
 800617e:	bd80      	pop	{r7, pc}
 8006180:	fffffe5f 	.word	0xfffffe5f

08006184 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08c      	sub	sp, #48	; 0x30
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	1dbb      	adds	r3, r7, #6
 8006190:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1dba      	adds	r2, r7, #6
 800619c:	2158      	movs	r1, #88	; 0x58
 800619e:	8812      	ldrh	r2, [r2, #0]
 80061a0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1dba      	adds	r2, r7, #6
 80061a6:	215a      	movs	r1, #90	; 0x5a
 80061a8:	8812      	ldrh	r2, [r2, #0]
 80061aa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	015b      	lsls	r3, r3, #5
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d10d      	bne.n	80061da <UART_Start_Receive_IT+0x56>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <UART_Start_Receive_IT+0x4c>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	225c      	movs	r2, #92	; 0x5c
 80061ca:	4943      	ldr	r1, [pc, #268]	; (80062d8 <UART_Start_Receive_IT+0x154>)
 80061cc:	5299      	strh	r1, [r3, r2]
 80061ce:	e02e      	b.n	800622e <UART_Start_Receive_IT+0xaa>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	225c      	movs	r2, #92	; 0x5c
 80061d4:	21ff      	movs	r1, #255	; 0xff
 80061d6:	5299      	strh	r1, [r3, r2]
 80061d8:	e029      	b.n	800622e <UART_Start_Receive_IT+0xaa>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10d      	bne.n	80061fe <UART_Start_Receive_IT+0x7a>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <UART_Start_Receive_IT+0x70>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	225c      	movs	r2, #92	; 0x5c
 80061ee:	21ff      	movs	r1, #255	; 0xff
 80061f0:	5299      	strh	r1, [r3, r2]
 80061f2:	e01c      	b.n	800622e <UART_Start_Receive_IT+0xaa>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	225c      	movs	r2, #92	; 0x5c
 80061f8:	217f      	movs	r1, #127	; 0x7f
 80061fa:	5299      	strh	r1, [r3, r2]
 80061fc:	e017      	b.n	800622e <UART_Start_Receive_IT+0xaa>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	055b      	lsls	r3, r3, #21
 8006206:	429a      	cmp	r2, r3
 8006208:	d10d      	bne.n	8006226 <UART_Start_Receive_IT+0xa2>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <UART_Start_Receive_IT+0x98>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	225c      	movs	r2, #92	; 0x5c
 8006216:	217f      	movs	r1, #127	; 0x7f
 8006218:	5299      	strh	r1, [r3, r2]
 800621a:	e008      	b.n	800622e <UART_Start_Receive_IT+0xaa>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	225c      	movs	r2, #92	; 0x5c
 8006220:	213f      	movs	r1, #63	; 0x3f
 8006222:	5299      	strh	r1, [r3, r2]
 8006224:	e003      	b.n	800622e <UART_Start_Receive_IT+0xaa>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	225c      	movs	r2, #92	; 0x5c
 800622a:	2100      	movs	r1, #0
 800622c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2280      	movs	r2, #128	; 0x80
 8006232:	2100      	movs	r1, #0
 8006234:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2222      	movs	r2, #34	; 0x22
 800623a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800623c:	f3ef 8310 	mrs	r3, PRIMASK
 8006240:	61fb      	str	r3, [r7, #28]
  return(result);
 8006242:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	2301      	movs	r3, #1
 8006248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	f383 8810 	msr	PRIMASK, r3
}
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2101      	movs	r1, #1
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	f383 8810 	msr	PRIMASK, r3
}
 800626c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	015b      	lsls	r3, r3, #5
 8006276:	429a      	cmp	r2, r3
 8006278:	d107      	bne.n	800628a <UART_Start_Receive_IT+0x106>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <UART_Start_Receive_IT+0x158>)
 8006286:	665a      	str	r2, [r3, #100]	; 0x64
 8006288:	e002      	b.n	8006290 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a14      	ldr	r2, [pc, #80]	; (80062e0 <UART_Start_Receive_IT+0x15c>)
 800628e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2274      	movs	r2, #116	; 0x74
 8006294:	2100      	movs	r1, #0
 8006296:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006298:	f3ef 8310 	mrs	r3, PRIMASK
 800629c:	613b      	str	r3, [r7, #16]
  return(result);
 800629e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a2:	2301      	movs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f383 8810 	msr	PRIMASK, r3
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2190      	movs	r1, #144	; 0x90
 80062ba:	0049      	lsls	r1, r1, #1
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f383 8810 	msr	PRIMASK, r3
}
 80062ca:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	0018      	movs	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b00c      	add	sp, #48	; 0x30
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	000001ff 	.word	0x000001ff
 80062dc:	08006595 	.word	0x08006595
 80062e0:	0800642d 	.word	0x0800642d

080062e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ec:	f3ef 8310 	mrs	r3, PRIMASK
 80062f0:	617b      	str	r3, [r7, #20]
  return(result);
 80062f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
 80062f6:	2301      	movs	r3, #1
 80062f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f383 8810 	msr	PRIMASK, r3
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4925      	ldr	r1, [pc, #148]	; (80063a4 <UART_EndRxTransfer+0xc0>)
 800630e:	400a      	ands	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631e:	f3ef 8310 	mrs	r3, PRIMASK
 8006322:	623b      	str	r3, [r7, #32]
  return(result);
 8006324:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
 8006328:	2301      	movs	r3, #1
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	f383 8810 	msr	PRIMASK, r3
}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	438a      	bics	r2, r1
 8006342:	609a      	str	r2, [r3, #8]
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	f383 8810 	msr	PRIMASK, r3
}
 800634e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006354:	2b01      	cmp	r3, #1
 8006356:	d118      	bne.n	800638a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006358:	f3ef 8310 	mrs	r3, PRIMASK
 800635c:	60bb      	str	r3, [r7, #8]
  return(result);
 800635e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006362:	2301      	movs	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f383 8810 	msr	PRIMASK, r3
}
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2110      	movs	r1, #16
 800637a:	438a      	bics	r2, r1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f383 8810 	msr	PRIMASK, r3
}
 8006388:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b00e      	add	sp, #56	; 0x38
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	fffffedf 	.word	0xfffffedf

080063a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	225a      	movs	r2, #90	; 0x5a
 80063ba:	2100      	movs	r1, #0
 80063bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2252      	movs	r2, #82	; 0x52
 80063c2:	2100      	movs	r1, #0
 80063c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	0018      	movs	r0, r3
 80063ca:	f7ff fbc7 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	46bd      	mov	sp, r7
 80063d2:	b004      	add	sp, #16
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063de:	f3ef 8310 	mrs	r3, PRIMASK
 80063e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	2301      	movs	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f383 8810 	msr	PRIMASK, r3
}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2140      	movs	r1, #64	; 0x40
 8006400:	438a      	bics	r2, r1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f383 8810 	msr	PRIMASK, r3
}
 800640e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	0018      	movs	r0, r3
 8006420:	f7ff fb94 	bl	8005b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006424:	46c0      	nop			; (mov r8, r8)
 8006426:	46bd      	mov	sp, r7
 8006428:	b006      	add	sp, #24
 800642a:	bd80      	pop	{r7, pc}

0800642c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b090      	sub	sp, #64	; 0x40
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006434:	203e      	movs	r0, #62	; 0x3e
 8006436:	183b      	adds	r3, r7, r0
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	215c      	movs	r1, #92	; 0x5c
 800643c:	5a52      	ldrh	r2, [r2, r1]
 800643e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006444:	2b22      	cmp	r3, #34	; 0x22
 8006446:	d000      	beq.n	800644a <UART_RxISR_8BIT+0x1e>
 8006448:	e095      	b.n	8006576 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	213c      	movs	r1, #60	; 0x3c
 8006450:	187b      	adds	r3, r7, r1
 8006452:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006454:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006456:	187b      	adds	r3, r7, r1
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	183b      	adds	r3, r7, r0
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b2d9      	uxtb	r1, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	400a      	ands	r2, r1
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	225a      	movs	r2, #90	; 0x5a
 800647a:	5a9b      	ldrh	r3, [r3, r2]
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b299      	uxth	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	225a      	movs	r2, #90	; 0x5a
 8006486:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	225a      	movs	r2, #90	; 0x5a
 800648c:	5a9b      	ldrh	r3, [r3, r2]
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d178      	bne.n	8006586 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006494:	f3ef 8310 	mrs	r3, PRIMASK
 8006498:	61bb      	str	r3, [r7, #24]
  return(result);
 800649a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
 800649e:	2301      	movs	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f383 8810 	msr	PRIMASK, r3
}
 80064a8:	46c0      	nop			; (mov r8, r8)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4936      	ldr	r1, [pc, #216]	; (8006590 <UART_RxISR_8BIT+0x164>)
 80064b6:	400a      	ands	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
 80064d0:	2301      	movs	r3, #1
 80064d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	f383 8810 	msr	PRIMASK, r3
}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2101      	movs	r1, #1
 80064e8:	438a      	bics	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]
 80064ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	f383 8810 	msr	PRIMASK, r3
}
 80064f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006508:	2b01      	cmp	r3, #1
 800650a:	d12f      	bne.n	800656c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006512:	f3ef 8310 	mrs	r3, PRIMASK
 8006516:	60fb      	str	r3, [r7, #12]
  return(result);
 8006518:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
 800651c:	2301      	movs	r3, #1
 800651e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f383 8810 	msr	PRIMASK, r3
}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2110      	movs	r1, #16
 8006534:	438a      	bics	r2, r1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f383 8810 	msr	PRIMASK, r3
}
 8006542:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	2210      	movs	r2, #16
 800654c:	4013      	ands	r3, r2
 800654e:	2b10      	cmp	r3, #16
 8006550:	d103      	bne.n	800655a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2210      	movs	r2, #16
 8006558:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2258      	movs	r2, #88	; 0x58
 800655e:	5a9a      	ldrh	r2, [r3, r2]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	0011      	movs	r1, r2
 8006564:	0018      	movs	r0, r3
 8006566:	f7ff fb01 	bl	8005b6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800656a:	e00c      	b.n	8006586 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	0018      	movs	r0, r3
 8006570:	f7fb fada 	bl	8001b28 <HAL_UART_RxCpltCallback>
}
 8006574:	e007      	b.n	8006586 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2108      	movs	r1, #8
 8006582:	430a      	orrs	r2, r1
 8006584:	619a      	str	r2, [r3, #24]
}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	46bd      	mov	sp, r7
 800658a:	b010      	add	sp, #64	; 0x40
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	fffffedf 	.word	0xfffffedf

08006594 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b090      	sub	sp, #64	; 0x40
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800659c:	203e      	movs	r0, #62	; 0x3e
 800659e:	183b      	adds	r3, r7, r0
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	215c      	movs	r1, #92	; 0x5c
 80065a4:	5a52      	ldrh	r2, [r2, r1]
 80065a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ac:	2b22      	cmp	r3, #34	; 0x22
 80065ae:	d000      	beq.n	80065b2 <UART_RxISR_16BIT+0x1e>
 80065b0:	e095      	b.n	80066de <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	213c      	movs	r1, #60	; 0x3c
 80065b8:	187b      	adds	r3, r7, r1
 80065ba:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80065bc:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80065c4:	187b      	adds	r3, r7, r1
 80065c6:	183a      	adds	r2, r7, r0
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	8812      	ldrh	r2, [r2, #0]
 80065cc:	4013      	ands	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	225a      	movs	r2, #90	; 0x5a
 80065e2:	5a9b      	ldrh	r3, [r3, r2]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b299      	uxth	r1, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	225a      	movs	r2, #90	; 0x5a
 80065ee:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	225a      	movs	r2, #90	; 0x5a
 80065f4:	5a9b      	ldrh	r3, [r3, r2]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d178      	bne.n	80066ee <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006600:	617b      	str	r3, [r7, #20]
  return(result);
 8006602:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	2301      	movs	r3, #1
 8006608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f383 8810 	msr	PRIMASK, r3
}
 8006610:	46c0      	nop			; (mov r8, r8)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4936      	ldr	r1, [pc, #216]	; (80066f8 <UART_RxISR_16BIT+0x164>)
 800661e:	400a      	ands	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f383 8810 	msr	PRIMASK, r3
}
 800662c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662e:	f3ef 8310 	mrs	r3, PRIMASK
 8006632:	623b      	str	r3, [r7, #32]
  return(result);
 8006634:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
 8006638:	2301      	movs	r3, #1
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	f383 8810 	msr	PRIMASK, r3
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2101      	movs	r1, #1
 8006650:	438a      	bics	r2, r1
 8006652:	609a      	str	r2, [r3, #8]
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	f383 8810 	msr	PRIMASK, r3
}
 800665e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	2b01      	cmp	r3, #1
 8006672:	d12f      	bne.n	80066d4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667a:	f3ef 8310 	mrs	r3, PRIMASK
 800667e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006680:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006684:	2301      	movs	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f383 8810 	msr	PRIMASK, r3
}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2110      	movs	r1, #16
 800669c:	438a      	bics	r2, r1
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f383 8810 	msr	PRIMASK, r3
}
 80066aa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	2210      	movs	r2, #16
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d103      	bne.n	80066c2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2258      	movs	r2, #88	; 0x58
 80066c6:	5a9a      	ldrh	r2, [r3, r2]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	0011      	movs	r1, r2
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7ff fa4d 	bl	8005b6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066d2:	e00c      	b.n	80066ee <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	0018      	movs	r0, r3
 80066d8:	f7fb fa26 	bl	8001b28 <HAL_UART_RxCpltCallback>
}
 80066dc:	e007      	b.n	80066ee <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2108      	movs	r1, #8
 80066ea:	430a      	orrs	r2, r1
 80066ec:	619a      	str	r2, [r3, #24]
}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b010      	add	sp, #64	; 0x40
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	fffffedf 	.word	0xfffffedf

080066fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b002      	add	sp, #8
 800670a:	bd80      	pop	{r7, pc}

0800670c <atoi>:
 800670c:	b510      	push	{r4, lr}
 800670e:	220a      	movs	r2, #10
 8006710:	2100      	movs	r1, #0
 8006712:	f000 f8d7 	bl	80068c4 <strtol>
 8006716:	bd10      	pop	{r4, pc}

08006718 <__errno>:
 8006718:	4b01      	ldr	r3, [pc, #4]	; (8006720 <__errno+0x8>)
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	4770      	bx	lr
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	2000002c 	.word	0x2000002c

08006724 <__libc_init_array>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	2600      	movs	r6, #0
 8006728:	4d0c      	ldr	r5, [pc, #48]	; (800675c <__libc_init_array+0x38>)
 800672a:	4c0d      	ldr	r4, [pc, #52]	; (8006760 <__libc_init_array+0x3c>)
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	42a6      	cmp	r6, r4
 8006732:	d109      	bne.n	8006748 <__libc_init_array+0x24>
 8006734:	2600      	movs	r6, #0
 8006736:	f000 f8d1 	bl	80068dc <_init>
 800673a:	4d0a      	ldr	r5, [pc, #40]	; (8006764 <__libc_init_array+0x40>)
 800673c:	4c0a      	ldr	r4, [pc, #40]	; (8006768 <__libc_init_array+0x44>)
 800673e:	1b64      	subs	r4, r4, r5
 8006740:	10a4      	asrs	r4, r4, #2
 8006742:	42a6      	cmp	r6, r4
 8006744:	d105      	bne.n	8006752 <__libc_init_array+0x2e>
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	00b3      	lsls	r3, r6, #2
 800674a:	58eb      	ldr	r3, [r5, r3]
 800674c:	4798      	blx	r3
 800674e:	3601      	adds	r6, #1
 8006750:	e7ee      	b.n	8006730 <__libc_init_array+0xc>
 8006752:	00b3      	lsls	r3, r6, #2
 8006754:	58eb      	ldr	r3, [r5, r3]
 8006756:	4798      	blx	r3
 8006758:	3601      	adds	r6, #1
 800675a:	e7f2      	b.n	8006742 <__libc_init_array+0x1e>
 800675c:	08006b78 	.word	0x08006b78
 8006760:	08006b78 	.word	0x08006b78
 8006764:	08006b78 	.word	0x08006b78
 8006768:	08006b7c 	.word	0x08006b7c

0800676c <memset>:
 800676c:	0003      	movs	r3, r0
 800676e:	1882      	adds	r2, r0, r2
 8006770:	4293      	cmp	r3, r2
 8006772:	d100      	bne.n	8006776 <memset+0xa>
 8006774:	4770      	bx	lr
 8006776:	7019      	strb	r1, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	e7f9      	b.n	8006770 <memset+0x4>

0800677c <strcat>:
 800677c:	0002      	movs	r2, r0
 800677e:	b510      	push	{r4, lr}
 8006780:	7813      	ldrb	r3, [r2, #0]
 8006782:	0014      	movs	r4, r2
 8006784:	3201      	adds	r2, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1fa      	bne.n	8006780 <strcat+0x4>
 800678a:	5cca      	ldrb	r2, [r1, r3]
 800678c:	54e2      	strb	r2, [r4, r3]
 800678e:	3301      	adds	r3, #1
 8006790:	2a00      	cmp	r2, #0
 8006792:	d1fa      	bne.n	800678a <strcat+0xe>
 8006794:	bd10      	pop	{r4, pc}

08006796 <strcpy>:
 8006796:	0003      	movs	r3, r0
 8006798:	780a      	ldrb	r2, [r1, #0]
 800679a:	3101      	adds	r1, #1
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d1f9      	bne.n	8006798 <strcpy+0x2>
 80067a4:	4770      	bx	lr
	...

080067a8 <_strtol_l.isra.0>:
 80067a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067aa:	b087      	sub	sp, #28
 80067ac:	001e      	movs	r6, r3
 80067ae:	9005      	str	r0, [sp, #20]
 80067b0:	9101      	str	r1, [sp, #4]
 80067b2:	9202      	str	r2, [sp, #8]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d045      	beq.n	8006844 <_strtol_l.isra.0+0x9c>
 80067b8:	0008      	movs	r0, r1
 80067ba:	2b24      	cmp	r3, #36	; 0x24
 80067bc:	d842      	bhi.n	8006844 <_strtol_l.isra.0+0x9c>
 80067be:	4b3f      	ldr	r3, [pc, #252]	; (80068bc <_strtol_l.isra.0+0x114>)
 80067c0:	2208      	movs	r2, #8
 80067c2:	469c      	mov	ip, r3
 80067c4:	0003      	movs	r3, r0
 80067c6:	4661      	mov	r1, ip
 80067c8:	781c      	ldrb	r4, [r3, #0]
 80067ca:	1c45      	adds	r5, r0, #1
 80067cc:	5d09      	ldrb	r1, [r1, r4]
 80067ce:	0028      	movs	r0, r5
 80067d0:	000f      	movs	r7, r1
 80067d2:	4017      	ands	r7, r2
 80067d4:	4211      	tst	r1, r2
 80067d6:	d1f5      	bne.n	80067c4 <_strtol_l.isra.0+0x1c>
 80067d8:	2c2d      	cmp	r4, #45	; 0x2d
 80067da:	d13a      	bne.n	8006852 <_strtol_l.isra.0+0xaa>
 80067dc:	2701      	movs	r7, #1
 80067de:	782c      	ldrb	r4, [r5, #0]
 80067e0:	1c9d      	adds	r5, r3, #2
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	d065      	beq.n	80068b2 <_strtol_l.isra.0+0x10a>
 80067e6:	2e10      	cmp	r6, #16
 80067e8:	d109      	bne.n	80067fe <_strtol_l.isra.0+0x56>
 80067ea:	2c30      	cmp	r4, #48	; 0x30
 80067ec:	d107      	bne.n	80067fe <_strtol_l.isra.0+0x56>
 80067ee:	2220      	movs	r2, #32
 80067f0:	782b      	ldrb	r3, [r5, #0]
 80067f2:	4393      	bics	r3, r2
 80067f4:	2b58      	cmp	r3, #88	; 0x58
 80067f6:	d157      	bne.n	80068a8 <_strtol_l.isra.0+0x100>
 80067f8:	2610      	movs	r6, #16
 80067fa:	786c      	ldrb	r4, [r5, #1]
 80067fc:	3502      	adds	r5, #2
 80067fe:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <_strtol_l.isra.0+0x118>)
 8006800:	0031      	movs	r1, r6
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	0018      	movs	r0, r3
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	f7f9 fd0c 	bl	8000224 <__aeabi_uidivmod>
 800680c:	2300      	movs	r3, #0
 800680e:	2201      	movs	r2, #1
 8006810:	4684      	mov	ip, r0
 8006812:	0018      	movs	r0, r3
 8006814:	9104      	str	r1, [sp, #16]
 8006816:	4252      	negs	r2, r2
 8006818:	0021      	movs	r1, r4
 800681a:	3930      	subs	r1, #48	; 0x30
 800681c:	2909      	cmp	r1, #9
 800681e:	d81d      	bhi.n	800685c <_strtol_l.isra.0+0xb4>
 8006820:	000c      	movs	r4, r1
 8006822:	42a6      	cmp	r6, r4
 8006824:	dd28      	ble.n	8006878 <_strtol_l.isra.0+0xd0>
 8006826:	2b00      	cmp	r3, #0
 8006828:	db24      	blt.n	8006874 <_strtol_l.isra.0+0xcc>
 800682a:	0013      	movs	r3, r2
 800682c:	4584      	cmp	ip, r0
 800682e:	d306      	bcc.n	800683e <_strtol_l.isra.0+0x96>
 8006830:	d102      	bne.n	8006838 <_strtol_l.isra.0+0x90>
 8006832:	9904      	ldr	r1, [sp, #16]
 8006834:	42a1      	cmp	r1, r4
 8006836:	db02      	blt.n	800683e <_strtol_l.isra.0+0x96>
 8006838:	2301      	movs	r3, #1
 800683a:	4370      	muls	r0, r6
 800683c:	1820      	adds	r0, r4, r0
 800683e:	782c      	ldrb	r4, [r5, #0]
 8006840:	3501      	adds	r5, #1
 8006842:	e7e9      	b.n	8006818 <_strtol_l.isra.0+0x70>
 8006844:	f7ff ff68 	bl	8006718 <__errno>
 8006848:	2316      	movs	r3, #22
 800684a:	6003      	str	r3, [r0, #0]
 800684c:	2000      	movs	r0, #0
 800684e:	b007      	add	sp, #28
 8006850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006852:	2c2b      	cmp	r4, #43	; 0x2b
 8006854:	d1c5      	bne.n	80067e2 <_strtol_l.isra.0+0x3a>
 8006856:	782c      	ldrb	r4, [r5, #0]
 8006858:	1c9d      	adds	r5, r3, #2
 800685a:	e7c2      	b.n	80067e2 <_strtol_l.isra.0+0x3a>
 800685c:	0021      	movs	r1, r4
 800685e:	3941      	subs	r1, #65	; 0x41
 8006860:	2919      	cmp	r1, #25
 8006862:	d801      	bhi.n	8006868 <_strtol_l.isra.0+0xc0>
 8006864:	3c37      	subs	r4, #55	; 0x37
 8006866:	e7dc      	b.n	8006822 <_strtol_l.isra.0+0x7a>
 8006868:	0021      	movs	r1, r4
 800686a:	3961      	subs	r1, #97	; 0x61
 800686c:	2919      	cmp	r1, #25
 800686e:	d803      	bhi.n	8006878 <_strtol_l.isra.0+0xd0>
 8006870:	3c57      	subs	r4, #87	; 0x57
 8006872:	e7d6      	b.n	8006822 <_strtol_l.isra.0+0x7a>
 8006874:	0013      	movs	r3, r2
 8006876:	e7e2      	b.n	800683e <_strtol_l.isra.0+0x96>
 8006878:	2b00      	cmp	r3, #0
 800687a:	da09      	bge.n	8006890 <_strtol_l.isra.0+0xe8>
 800687c:	2322      	movs	r3, #34	; 0x22
 800687e:	9a05      	ldr	r2, [sp, #20]
 8006880:	9803      	ldr	r0, [sp, #12]
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0e1      	beq.n	800684e <_strtol_l.isra.0+0xa6>
 800688a:	1e6b      	subs	r3, r5, #1
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	e007      	b.n	80068a0 <_strtol_l.isra.0+0xf8>
 8006890:	2f00      	cmp	r7, #0
 8006892:	d000      	beq.n	8006896 <_strtol_l.isra.0+0xee>
 8006894:	4240      	negs	r0, r0
 8006896:	9a02      	ldr	r2, [sp, #8]
 8006898:	2a00      	cmp	r2, #0
 800689a:	d0d8      	beq.n	800684e <_strtol_l.isra.0+0xa6>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f4      	bne.n	800688a <_strtol_l.isra.0+0xe2>
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	9a01      	ldr	r2, [sp, #4]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e7d2      	b.n	800684e <_strtol_l.isra.0+0xa6>
 80068a8:	2430      	movs	r4, #48	; 0x30
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	d1a7      	bne.n	80067fe <_strtol_l.isra.0+0x56>
 80068ae:	3608      	adds	r6, #8
 80068b0:	e7a5      	b.n	80067fe <_strtol_l.isra.0+0x56>
 80068b2:	2c30      	cmp	r4, #48	; 0x30
 80068b4:	d09b      	beq.n	80067ee <_strtol_l.isra.0+0x46>
 80068b6:	260a      	movs	r6, #10
 80068b8:	e7a1      	b.n	80067fe <_strtol_l.isra.0+0x56>
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	08006a75 	.word	0x08006a75
 80068c0:	7fffffff 	.word	0x7fffffff

080068c4 <strtol>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	0013      	movs	r3, r2
 80068c8:	000a      	movs	r2, r1
 80068ca:	0001      	movs	r1, r0
 80068cc:	4802      	ldr	r0, [pc, #8]	; (80068d8 <strtol+0x14>)
 80068ce:	6800      	ldr	r0, [r0, #0]
 80068d0:	f7ff ff6a 	bl	80067a8 <_strtol_l.isra.0>
 80068d4:	bd10      	pop	{r4, pc}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	2000002c 	.word	0x2000002c

080068dc <_init>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr

080068e8 <_fini>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr
