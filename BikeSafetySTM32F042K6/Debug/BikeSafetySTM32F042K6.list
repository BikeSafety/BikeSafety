
BikeSafetySTM32F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005420  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800575c  0800575c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800575c  0800575c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000070  080057d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080057d4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f015  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c71  00000000  00000000  0002f0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00031838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c4f  00000000  00000000  000322a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec15  00000000  00000000  0004aef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd78  00000000  00000000  00059b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a38  00000000  00000000  000e68d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054c8 	.word	0x080054c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080054c8 	.word	0x080054c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_fsub>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	4646      	mov	r6, r8
 8000234:	46d6      	mov	lr, sl
 8000236:	464f      	mov	r7, r9
 8000238:	0243      	lsls	r3, r0, #9
 800023a:	0a5b      	lsrs	r3, r3, #9
 800023c:	00da      	lsls	r2, r3, #3
 800023e:	4694      	mov	ip, r2
 8000240:	024a      	lsls	r2, r1, #9
 8000242:	b5c0      	push	{r6, r7, lr}
 8000244:	0044      	lsls	r4, r0, #1
 8000246:	0a56      	lsrs	r6, r2, #9
 8000248:	1c05      	adds	r5, r0, #0
 800024a:	46b0      	mov	r8, r6
 800024c:	0e24      	lsrs	r4, r4, #24
 800024e:	004e      	lsls	r6, r1, #1
 8000250:	0992      	lsrs	r2, r2, #6
 8000252:	001f      	movs	r7, r3
 8000254:	0020      	movs	r0, r4
 8000256:	4692      	mov	sl, r2
 8000258:	0fed      	lsrs	r5, r5, #31
 800025a:	0e36      	lsrs	r6, r6, #24
 800025c:	0fc9      	lsrs	r1, r1, #31
 800025e:	2eff      	cmp	r6, #255	; 0xff
 8000260:	d100      	bne.n	8000264 <__aeabi_fsub+0x34>
 8000262:	e07f      	b.n	8000364 <__aeabi_fsub+0x134>
 8000264:	2201      	movs	r2, #1
 8000266:	4051      	eors	r1, r2
 8000268:	428d      	cmp	r5, r1
 800026a:	d051      	beq.n	8000310 <__aeabi_fsub+0xe0>
 800026c:	1ba2      	subs	r2, r4, r6
 800026e:	4691      	mov	r9, r2
 8000270:	2a00      	cmp	r2, #0
 8000272:	dc00      	bgt.n	8000276 <__aeabi_fsub+0x46>
 8000274:	e07e      	b.n	8000374 <__aeabi_fsub+0x144>
 8000276:	2e00      	cmp	r6, #0
 8000278:	d100      	bne.n	800027c <__aeabi_fsub+0x4c>
 800027a:	e099      	b.n	80003b0 <__aeabi_fsub+0x180>
 800027c:	2cff      	cmp	r4, #255	; 0xff
 800027e:	d100      	bne.n	8000282 <__aeabi_fsub+0x52>
 8000280:	e08c      	b.n	800039c <__aeabi_fsub+0x16c>
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	4652      	mov	r2, sl
 8000286:	04db      	lsls	r3, r3, #19
 8000288:	431a      	orrs	r2, r3
 800028a:	4692      	mov	sl, r2
 800028c:	464a      	mov	r2, r9
 800028e:	2301      	movs	r3, #1
 8000290:	2a1b      	cmp	r2, #27
 8000292:	dc08      	bgt.n	80002a6 <__aeabi_fsub+0x76>
 8000294:	4653      	mov	r3, sl
 8000296:	2120      	movs	r1, #32
 8000298:	40d3      	lsrs	r3, r2
 800029a:	1a89      	subs	r1, r1, r2
 800029c:	4652      	mov	r2, sl
 800029e:	408a      	lsls	r2, r1
 80002a0:	1e51      	subs	r1, r2, #1
 80002a2:	418a      	sbcs	r2, r1
 80002a4:	4313      	orrs	r3, r2
 80002a6:	4662      	mov	r2, ip
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	015a      	lsls	r2, r3, #5
 80002ac:	d400      	bmi.n	80002b0 <__aeabi_fsub+0x80>
 80002ae:	e0f3      	b.n	8000498 <__aeabi_fsub+0x268>
 80002b0:	019b      	lsls	r3, r3, #6
 80002b2:	099e      	lsrs	r6, r3, #6
 80002b4:	0030      	movs	r0, r6
 80002b6:	f001 f877 	bl	80013a8 <__clzsi2>
 80002ba:	3805      	subs	r0, #5
 80002bc:	4086      	lsls	r6, r0
 80002be:	4284      	cmp	r4, r0
 80002c0:	dd00      	ble.n	80002c4 <__aeabi_fsub+0x94>
 80002c2:	e0f7      	b.n	80004b4 <__aeabi_fsub+0x284>
 80002c4:	0032      	movs	r2, r6
 80002c6:	1b04      	subs	r4, r0, r4
 80002c8:	2020      	movs	r0, #32
 80002ca:	3401      	adds	r4, #1
 80002cc:	40e2      	lsrs	r2, r4
 80002ce:	1b04      	subs	r4, r0, r4
 80002d0:	40a6      	lsls	r6, r4
 80002d2:	0033      	movs	r3, r6
 80002d4:	1e5e      	subs	r6, r3, #1
 80002d6:	41b3      	sbcs	r3, r6
 80002d8:	2400      	movs	r4, #0
 80002da:	4313      	orrs	r3, r2
 80002dc:	075a      	lsls	r2, r3, #29
 80002de:	d004      	beq.n	80002ea <__aeabi_fsub+0xba>
 80002e0:	220f      	movs	r2, #15
 80002e2:	401a      	ands	r2, r3
 80002e4:	2a04      	cmp	r2, #4
 80002e6:	d000      	beq.n	80002ea <__aeabi_fsub+0xba>
 80002e8:	3304      	adds	r3, #4
 80002ea:	015a      	lsls	r2, r3, #5
 80002ec:	d400      	bmi.n	80002f0 <__aeabi_fsub+0xc0>
 80002ee:	e0d6      	b.n	800049e <__aeabi_fsub+0x26e>
 80002f0:	1c62      	adds	r2, r4, #1
 80002f2:	2cfe      	cmp	r4, #254	; 0xfe
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fsub+0xc8>
 80002f6:	e0da      	b.n	80004ae <__aeabi_fsub+0x27e>
 80002f8:	019b      	lsls	r3, r3, #6
 80002fa:	0a5f      	lsrs	r7, r3, #9
 80002fc:	b2d0      	uxtb	r0, r2
 80002fe:	05c0      	lsls	r0, r0, #23
 8000300:	4338      	orrs	r0, r7
 8000302:	07ed      	lsls	r5, r5, #31
 8000304:	4328      	orrs	r0, r5
 8000306:	bce0      	pop	{r5, r6, r7}
 8000308:	46ba      	mov	sl, r7
 800030a:	46b1      	mov	r9, r6
 800030c:	46a8      	mov	r8, r5
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	1ba2      	subs	r2, r4, r6
 8000312:	4691      	mov	r9, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	dd63      	ble.n	80003e0 <__aeabi_fsub+0x1b0>
 8000318:	2e00      	cmp	r6, #0
 800031a:	d100      	bne.n	800031e <__aeabi_fsub+0xee>
 800031c:	e099      	b.n	8000452 <__aeabi_fsub+0x222>
 800031e:	2cff      	cmp	r4, #255	; 0xff
 8000320:	d03c      	beq.n	800039c <__aeabi_fsub+0x16c>
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	4652      	mov	r2, sl
 8000326:	04db      	lsls	r3, r3, #19
 8000328:	431a      	orrs	r2, r3
 800032a:	4692      	mov	sl, r2
 800032c:	464a      	mov	r2, r9
 800032e:	2301      	movs	r3, #1
 8000330:	2a1b      	cmp	r2, #27
 8000332:	dc08      	bgt.n	8000346 <__aeabi_fsub+0x116>
 8000334:	4653      	mov	r3, sl
 8000336:	2120      	movs	r1, #32
 8000338:	40d3      	lsrs	r3, r2
 800033a:	1a89      	subs	r1, r1, r2
 800033c:	4652      	mov	r2, sl
 800033e:	408a      	lsls	r2, r1
 8000340:	1e51      	subs	r1, r2, #1
 8000342:	418a      	sbcs	r2, r1
 8000344:	4313      	orrs	r3, r2
 8000346:	4463      	add	r3, ip
 8000348:	015a      	lsls	r2, r3, #5
 800034a:	d400      	bmi.n	800034e <__aeabi_fsub+0x11e>
 800034c:	e0a4      	b.n	8000498 <__aeabi_fsub+0x268>
 800034e:	3401      	adds	r4, #1
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d100      	bne.n	8000356 <__aeabi_fsub+0x126>
 8000354:	e0ab      	b.n	80004ae <__aeabi_fsub+0x27e>
 8000356:	2201      	movs	r2, #1
 8000358:	4997      	ldr	r1, [pc, #604]	; (80005b8 <__aeabi_fsub+0x388>)
 800035a:	401a      	ands	r2, r3
 800035c:	085b      	lsrs	r3, r3, #1
 800035e:	400b      	ands	r3, r1
 8000360:	4313      	orrs	r3, r2
 8000362:	e7bb      	b.n	80002dc <__aeabi_fsub+0xac>
 8000364:	2a00      	cmp	r2, #0
 8000366:	d032      	beq.n	80003ce <__aeabi_fsub+0x19e>
 8000368:	428d      	cmp	r5, r1
 800036a:	d035      	beq.n	80003d8 <__aeabi_fsub+0x1a8>
 800036c:	22ff      	movs	r2, #255	; 0xff
 800036e:	4252      	negs	r2, r2
 8000370:	4691      	mov	r9, r2
 8000372:	44a1      	add	r9, r4
 8000374:	464a      	mov	r2, r9
 8000376:	2a00      	cmp	r2, #0
 8000378:	d051      	beq.n	800041e <__aeabi_fsub+0x1ee>
 800037a:	1b30      	subs	r0, r6, r4
 800037c:	2c00      	cmp	r4, #0
 800037e:	d000      	beq.n	8000382 <__aeabi_fsub+0x152>
 8000380:	e09c      	b.n	80004bc <__aeabi_fsub+0x28c>
 8000382:	4663      	mov	r3, ip
 8000384:	2b00      	cmp	r3, #0
 8000386:	d100      	bne.n	800038a <__aeabi_fsub+0x15a>
 8000388:	e0df      	b.n	800054a <__aeabi_fsub+0x31a>
 800038a:	3801      	subs	r0, #1
 800038c:	2800      	cmp	r0, #0
 800038e:	d100      	bne.n	8000392 <__aeabi_fsub+0x162>
 8000390:	e0f7      	b.n	8000582 <__aeabi_fsub+0x352>
 8000392:	2eff      	cmp	r6, #255	; 0xff
 8000394:	d000      	beq.n	8000398 <__aeabi_fsub+0x168>
 8000396:	e099      	b.n	80004cc <__aeabi_fsub+0x29c>
 8000398:	000d      	movs	r5, r1
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d100      	bne.n	80003a2 <__aeabi_fsub+0x172>
 80003a0:	e085      	b.n	80004ae <__aeabi_fsub+0x27e>
 80003a2:	2780      	movs	r7, #128	; 0x80
 80003a4:	03ff      	lsls	r7, r7, #15
 80003a6:	431f      	orrs	r7, r3
 80003a8:	027f      	lsls	r7, r7, #9
 80003aa:	20ff      	movs	r0, #255	; 0xff
 80003ac:	0a7f      	lsrs	r7, r7, #9
 80003ae:	e7a6      	b.n	80002fe <__aeabi_fsub+0xce>
 80003b0:	4652      	mov	r2, sl
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d074      	beq.n	80004a0 <__aeabi_fsub+0x270>
 80003b6:	2201      	movs	r2, #1
 80003b8:	4252      	negs	r2, r2
 80003ba:	4690      	mov	r8, r2
 80003bc:	44c1      	add	r9, r8
 80003be:	464a      	mov	r2, r9
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	d100      	bne.n	80003c6 <__aeabi_fsub+0x196>
 80003c4:	e0c8      	b.n	8000558 <__aeabi_fsub+0x328>
 80003c6:	2cff      	cmp	r4, #255	; 0xff
 80003c8:	d000      	beq.n	80003cc <__aeabi_fsub+0x19c>
 80003ca:	e75f      	b.n	800028c <__aeabi_fsub+0x5c>
 80003cc:	e7e6      	b.n	800039c <__aeabi_fsub+0x16c>
 80003ce:	2201      	movs	r2, #1
 80003d0:	4051      	eors	r1, r2
 80003d2:	42a9      	cmp	r1, r5
 80003d4:	d000      	beq.n	80003d8 <__aeabi_fsub+0x1a8>
 80003d6:	e749      	b.n	800026c <__aeabi_fsub+0x3c>
 80003d8:	22ff      	movs	r2, #255	; 0xff
 80003da:	4252      	negs	r2, r2
 80003dc:	4691      	mov	r9, r2
 80003de:	44a1      	add	r9, r4
 80003e0:	464a      	mov	r2, r9
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	d043      	beq.n	800046e <__aeabi_fsub+0x23e>
 80003e6:	1b31      	subs	r1, r6, r4
 80003e8:	2c00      	cmp	r4, #0
 80003ea:	d100      	bne.n	80003ee <__aeabi_fsub+0x1be>
 80003ec:	e08c      	b.n	8000508 <__aeabi_fsub+0x2d8>
 80003ee:	2eff      	cmp	r6, #255	; 0xff
 80003f0:	d100      	bne.n	80003f4 <__aeabi_fsub+0x1c4>
 80003f2:	e092      	b.n	800051a <__aeabi_fsub+0x2ea>
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	4662      	mov	r2, ip
 80003f8:	04db      	lsls	r3, r3, #19
 80003fa:	431a      	orrs	r2, r3
 80003fc:	4694      	mov	ip, r2
 80003fe:	2301      	movs	r3, #1
 8000400:	291b      	cmp	r1, #27
 8000402:	dc09      	bgt.n	8000418 <__aeabi_fsub+0x1e8>
 8000404:	2020      	movs	r0, #32
 8000406:	4663      	mov	r3, ip
 8000408:	4662      	mov	r2, ip
 800040a:	40cb      	lsrs	r3, r1
 800040c:	1a41      	subs	r1, r0, r1
 800040e:	408a      	lsls	r2, r1
 8000410:	0011      	movs	r1, r2
 8000412:	1e48      	subs	r0, r1, #1
 8000414:	4181      	sbcs	r1, r0
 8000416:	430b      	orrs	r3, r1
 8000418:	0034      	movs	r4, r6
 800041a:	4453      	add	r3, sl
 800041c:	e794      	b.n	8000348 <__aeabi_fsub+0x118>
 800041e:	22fe      	movs	r2, #254	; 0xfe
 8000420:	1c66      	adds	r6, r4, #1
 8000422:	4232      	tst	r2, r6
 8000424:	d164      	bne.n	80004f0 <__aeabi_fsub+0x2c0>
 8000426:	2c00      	cmp	r4, #0
 8000428:	d000      	beq.n	800042c <__aeabi_fsub+0x1fc>
 800042a:	e082      	b.n	8000532 <__aeabi_fsub+0x302>
 800042c:	4663      	mov	r3, ip
 800042e:	2b00      	cmp	r3, #0
 8000430:	d100      	bne.n	8000434 <__aeabi_fsub+0x204>
 8000432:	e0ab      	b.n	800058c <__aeabi_fsub+0x35c>
 8000434:	4653      	mov	r3, sl
 8000436:	2b00      	cmp	r3, #0
 8000438:	d100      	bne.n	800043c <__aeabi_fsub+0x20c>
 800043a:	e760      	b.n	80002fe <__aeabi_fsub+0xce>
 800043c:	4663      	mov	r3, ip
 800043e:	4652      	mov	r2, sl
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	015a      	lsls	r2, r3, #5
 8000444:	d400      	bmi.n	8000448 <__aeabi_fsub+0x218>
 8000446:	e0aa      	b.n	800059e <__aeabi_fsub+0x36e>
 8000448:	4663      	mov	r3, ip
 800044a:	4652      	mov	r2, sl
 800044c:	000d      	movs	r5, r1
 800044e:	1ad3      	subs	r3, r2, r3
 8000450:	e744      	b.n	80002dc <__aeabi_fsub+0xac>
 8000452:	4652      	mov	r2, sl
 8000454:	2a00      	cmp	r2, #0
 8000456:	d023      	beq.n	80004a0 <__aeabi_fsub+0x270>
 8000458:	2201      	movs	r2, #1
 800045a:	4252      	negs	r2, r2
 800045c:	4690      	mov	r8, r2
 800045e:	44c1      	add	r9, r8
 8000460:	464a      	mov	r2, r9
 8000462:	2a00      	cmp	r2, #0
 8000464:	d075      	beq.n	8000552 <__aeabi_fsub+0x322>
 8000466:	2cff      	cmp	r4, #255	; 0xff
 8000468:	d000      	beq.n	800046c <__aeabi_fsub+0x23c>
 800046a:	e75f      	b.n	800032c <__aeabi_fsub+0xfc>
 800046c:	e796      	b.n	800039c <__aeabi_fsub+0x16c>
 800046e:	26fe      	movs	r6, #254	; 0xfe
 8000470:	3401      	adds	r4, #1
 8000472:	4226      	tst	r6, r4
 8000474:	d153      	bne.n	800051e <__aeabi_fsub+0x2ee>
 8000476:	2800      	cmp	r0, #0
 8000478:	d172      	bne.n	8000560 <__aeabi_fsub+0x330>
 800047a:	4663      	mov	r3, ip
 800047c:	2b00      	cmp	r3, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_fsub+0x252>
 8000480:	e093      	b.n	80005aa <__aeabi_fsub+0x37a>
 8000482:	4653      	mov	r3, sl
 8000484:	2b00      	cmp	r3, #0
 8000486:	d100      	bne.n	800048a <__aeabi_fsub+0x25a>
 8000488:	e739      	b.n	80002fe <__aeabi_fsub+0xce>
 800048a:	4463      	add	r3, ip
 800048c:	2400      	movs	r4, #0
 800048e:	015a      	lsls	r2, r3, #5
 8000490:	d502      	bpl.n	8000498 <__aeabi_fsub+0x268>
 8000492:	4a4a      	ldr	r2, [pc, #296]	; (80005bc <__aeabi_fsub+0x38c>)
 8000494:	3401      	adds	r4, #1
 8000496:	4013      	ands	r3, r2
 8000498:	075a      	lsls	r2, r3, #29
 800049a:	d000      	beq.n	800049e <__aeabi_fsub+0x26e>
 800049c:	e720      	b.n	80002e0 <__aeabi_fsub+0xb0>
 800049e:	08db      	lsrs	r3, r3, #3
 80004a0:	2cff      	cmp	r4, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fsub+0x276>
 80004a4:	e77a      	b.n	800039c <__aeabi_fsub+0x16c>
 80004a6:	025b      	lsls	r3, r3, #9
 80004a8:	0a5f      	lsrs	r7, r3, #9
 80004aa:	b2e0      	uxtb	r0, r4
 80004ac:	e727      	b.n	80002fe <__aeabi_fsub+0xce>
 80004ae:	20ff      	movs	r0, #255	; 0xff
 80004b0:	2700      	movs	r7, #0
 80004b2:	e724      	b.n	80002fe <__aeabi_fsub+0xce>
 80004b4:	4b41      	ldr	r3, [pc, #260]	; (80005bc <__aeabi_fsub+0x38c>)
 80004b6:	1a24      	subs	r4, r4, r0
 80004b8:	4033      	ands	r3, r6
 80004ba:	e70f      	b.n	80002dc <__aeabi_fsub+0xac>
 80004bc:	2eff      	cmp	r6, #255	; 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fsub+0x292>
 80004c0:	e76a      	b.n	8000398 <__aeabi_fsub+0x168>
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	4662      	mov	r2, ip
 80004c6:	04db      	lsls	r3, r3, #19
 80004c8:	431a      	orrs	r2, r3
 80004ca:	4694      	mov	ip, r2
 80004cc:	2301      	movs	r3, #1
 80004ce:	281b      	cmp	r0, #27
 80004d0:	dc09      	bgt.n	80004e6 <__aeabi_fsub+0x2b6>
 80004d2:	2420      	movs	r4, #32
 80004d4:	4663      	mov	r3, ip
 80004d6:	4662      	mov	r2, ip
 80004d8:	40c3      	lsrs	r3, r0
 80004da:	1a20      	subs	r0, r4, r0
 80004dc:	4082      	lsls	r2, r0
 80004de:	0010      	movs	r0, r2
 80004e0:	1e44      	subs	r4, r0, #1
 80004e2:	41a0      	sbcs	r0, r4
 80004e4:	4303      	orrs	r3, r0
 80004e6:	4652      	mov	r2, sl
 80004e8:	000d      	movs	r5, r1
 80004ea:	0034      	movs	r4, r6
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	e6dc      	b.n	80002aa <__aeabi_fsub+0x7a>
 80004f0:	4663      	mov	r3, ip
 80004f2:	4652      	mov	r2, sl
 80004f4:	1a9e      	subs	r6, r3, r2
 80004f6:	0173      	lsls	r3, r6, #5
 80004f8:	d417      	bmi.n	800052a <__aeabi_fsub+0x2fa>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d000      	beq.n	8000500 <__aeabi_fsub+0x2d0>
 80004fe:	e6d9      	b.n	80002b4 <__aeabi_fsub+0x84>
 8000500:	2500      	movs	r5, #0
 8000502:	2000      	movs	r0, #0
 8000504:	2700      	movs	r7, #0
 8000506:	e6fa      	b.n	80002fe <__aeabi_fsub+0xce>
 8000508:	4663      	mov	r3, ip
 800050a:	2b00      	cmp	r3, #0
 800050c:	d044      	beq.n	8000598 <__aeabi_fsub+0x368>
 800050e:	3901      	subs	r1, #1
 8000510:	2900      	cmp	r1, #0
 8000512:	d04c      	beq.n	80005ae <__aeabi_fsub+0x37e>
 8000514:	2eff      	cmp	r6, #255	; 0xff
 8000516:	d000      	beq.n	800051a <__aeabi_fsub+0x2ea>
 8000518:	e771      	b.n	80003fe <__aeabi_fsub+0x1ce>
 800051a:	4643      	mov	r3, r8
 800051c:	e73e      	b.n	800039c <__aeabi_fsub+0x16c>
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d0c5      	beq.n	80004ae <__aeabi_fsub+0x27e>
 8000522:	4652      	mov	r2, sl
 8000524:	4462      	add	r2, ip
 8000526:	0853      	lsrs	r3, r2, #1
 8000528:	e7b6      	b.n	8000498 <__aeabi_fsub+0x268>
 800052a:	4663      	mov	r3, ip
 800052c:	000d      	movs	r5, r1
 800052e:	1ad6      	subs	r6, r2, r3
 8000530:	e6c0      	b.n	80002b4 <__aeabi_fsub+0x84>
 8000532:	4662      	mov	r2, ip
 8000534:	2a00      	cmp	r2, #0
 8000536:	d116      	bne.n	8000566 <__aeabi_fsub+0x336>
 8000538:	4653      	mov	r3, sl
 800053a:	2b00      	cmp	r3, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fsub+0x310>
 800053e:	e72b      	b.n	8000398 <__aeabi_fsub+0x168>
 8000540:	2780      	movs	r7, #128	; 0x80
 8000542:	2500      	movs	r5, #0
 8000544:	20ff      	movs	r0, #255	; 0xff
 8000546:	03ff      	lsls	r7, r7, #15
 8000548:	e6d9      	b.n	80002fe <__aeabi_fsub+0xce>
 800054a:	000d      	movs	r5, r1
 800054c:	4643      	mov	r3, r8
 800054e:	0034      	movs	r4, r6
 8000550:	e7a6      	b.n	80004a0 <__aeabi_fsub+0x270>
 8000552:	4653      	mov	r3, sl
 8000554:	4463      	add	r3, ip
 8000556:	e6f7      	b.n	8000348 <__aeabi_fsub+0x118>
 8000558:	4663      	mov	r3, ip
 800055a:	4652      	mov	r2, sl
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	e6a4      	b.n	80002aa <__aeabi_fsub+0x7a>
 8000560:	4662      	mov	r2, ip
 8000562:	2a00      	cmp	r2, #0
 8000564:	d0d9      	beq.n	800051a <__aeabi_fsub+0x2ea>
 8000566:	4652      	mov	r2, sl
 8000568:	2a00      	cmp	r2, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fsub+0x33e>
 800056c:	e716      	b.n	800039c <__aeabi_fsub+0x16c>
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	03d2      	lsls	r2, r2, #15
 8000572:	4213      	tst	r3, r2
 8000574:	d100      	bne.n	8000578 <__aeabi_fsub+0x348>
 8000576:	e711      	b.n	800039c <__aeabi_fsub+0x16c>
 8000578:	4640      	mov	r0, r8
 800057a:	4210      	tst	r0, r2
 800057c:	d000      	beq.n	8000580 <__aeabi_fsub+0x350>
 800057e:	e70d      	b.n	800039c <__aeabi_fsub+0x16c>
 8000580:	e70a      	b.n	8000398 <__aeabi_fsub+0x168>
 8000582:	4652      	mov	r2, sl
 8000584:	000d      	movs	r5, r1
 8000586:	0034      	movs	r4, r6
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	e68e      	b.n	80002aa <__aeabi_fsub+0x7a>
 800058c:	4653      	mov	r3, sl
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <__aeabi_fsub+0x374>
 8000592:	000d      	movs	r5, r1
 8000594:	4647      	mov	r7, r8
 8000596:	e6b2      	b.n	80002fe <__aeabi_fsub+0xce>
 8000598:	4643      	mov	r3, r8
 800059a:	0034      	movs	r4, r6
 800059c:	e780      	b.n	80004a0 <__aeabi_fsub+0x270>
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fsub+0x374>
 80005a2:	e779      	b.n	8000498 <__aeabi_fsub+0x268>
 80005a4:	2500      	movs	r5, #0
 80005a6:	2700      	movs	r7, #0
 80005a8:	e6a9      	b.n	80002fe <__aeabi_fsub+0xce>
 80005aa:	4647      	mov	r7, r8
 80005ac:	e6a7      	b.n	80002fe <__aeabi_fsub+0xce>
 80005ae:	4653      	mov	r3, sl
 80005b0:	0034      	movs	r4, r6
 80005b2:	4463      	add	r3, ip
 80005b4:	e6c8      	b.n	8000348 <__aeabi_fsub+0x118>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	7dffffff 	.word	0x7dffffff
 80005bc:	fbffffff 	.word	0xfbffffff

080005c0 <__aeabi_f2iz>:
 80005c0:	0241      	lsls	r1, r0, #9
 80005c2:	0042      	lsls	r2, r0, #1
 80005c4:	0fc3      	lsrs	r3, r0, #31
 80005c6:	0a49      	lsrs	r1, r1, #9
 80005c8:	2000      	movs	r0, #0
 80005ca:	0e12      	lsrs	r2, r2, #24
 80005cc:	2a7e      	cmp	r2, #126	; 0x7e
 80005ce:	d903      	bls.n	80005d8 <__aeabi_f2iz+0x18>
 80005d0:	2a9d      	cmp	r2, #157	; 0x9d
 80005d2:	d902      	bls.n	80005da <__aeabi_f2iz+0x1a>
 80005d4:	4a09      	ldr	r2, [pc, #36]	; (80005fc <__aeabi_f2iz+0x3c>)
 80005d6:	1898      	adds	r0, r3, r2
 80005d8:	4770      	bx	lr
 80005da:	2080      	movs	r0, #128	; 0x80
 80005dc:	0400      	lsls	r0, r0, #16
 80005de:	4301      	orrs	r1, r0
 80005e0:	2a95      	cmp	r2, #149	; 0x95
 80005e2:	dc07      	bgt.n	80005f4 <__aeabi_f2iz+0x34>
 80005e4:	2096      	movs	r0, #150	; 0x96
 80005e6:	1a82      	subs	r2, r0, r2
 80005e8:	40d1      	lsrs	r1, r2
 80005ea:	4248      	negs	r0, r1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f3      	bne.n	80005d8 <__aeabi_f2iz+0x18>
 80005f0:	0008      	movs	r0, r1
 80005f2:	e7f1      	b.n	80005d8 <__aeabi_f2iz+0x18>
 80005f4:	3a96      	subs	r2, #150	; 0x96
 80005f6:	4091      	lsls	r1, r2
 80005f8:	e7f7      	b.n	80005ea <__aeabi_f2iz+0x2a>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	7fffffff 	.word	0x7fffffff

08000600 <__aeabi_i2f>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2800      	cmp	r0, #0
 8000604:	d013      	beq.n	800062e <__aeabi_i2f+0x2e>
 8000606:	17c3      	asrs	r3, r0, #31
 8000608:	18c5      	adds	r5, r0, r3
 800060a:	405d      	eors	r5, r3
 800060c:	0fc4      	lsrs	r4, r0, #31
 800060e:	0028      	movs	r0, r5
 8000610:	f000 feca 	bl	80013a8 <__clzsi2>
 8000614:	239e      	movs	r3, #158	; 0x9e
 8000616:	0001      	movs	r1, r0
 8000618:	1a1b      	subs	r3, r3, r0
 800061a:	2b96      	cmp	r3, #150	; 0x96
 800061c:	dc0f      	bgt.n	800063e <__aeabi_i2f+0x3e>
 800061e:	2808      	cmp	r0, #8
 8000620:	dd01      	ble.n	8000626 <__aeabi_i2f+0x26>
 8000622:	3908      	subs	r1, #8
 8000624:	408d      	lsls	r5, r1
 8000626:	026d      	lsls	r5, r5, #9
 8000628:	0a6d      	lsrs	r5, r5, #9
 800062a:	b2d8      	uxtb	r0, r3
 800062c:	e002      	b.n	8000634 <__aeabi_i2f+0x34>
 800062e:	2400      	movs	r4, #0
 8000630:	2000      	movs	r0, #0
 8000632:	2500      	movs	r5, #0
 8000634:	05c0      	lsls	r0, r0, #23
 8000636:	4328      	orrs	r0, r5
 8000638:	07e4      	lsls	r4, r4, #31
 800063a:	4320      	orrs	r0, r4
 800063c:	bd70      	pop	{r4, r5, r6, pc}
 800063e:	2b99      	cmp	r3, #153	; 0x99
 8000640:	dd0b      	ble.n	800065a <__aeabi_i2f+0x5a>
 8000642:	2205      	movs	r2, #5
 8000644:	002e      	movs	r6, r5
 8000646:	1a12      	subs	r2, r2, r0
 8000648:	40d6      	lsrs	r6, r2
 800064a:	0002      	movs	r2, r0
 800064c:	321b      	adds	r2, #27
 800064e:	4095      	lsls	r5, r2
 8000650:	0028      	movs	r0, r5
 8000652:	1e45      	subs	r5, r0, #1
 8000654:	41a8      	sbcs	r0, r5
 8000656:	0035      	movs	r5, r6
 8000658:	4305      	orrs	r5, r0
 800065a:	2905      	cmp	r1, #5
 800065c:	dd01      	ble.n	8000662 <__aeabi_i2f+0x62>
 800065e:	1f4a      	subs	r2, r1, #5
 8000660:	4095      	lsls	r5, r2
 8000662:	002a      	movs	r2, r5
 8000664:	4e08      	ldr	r6, [pc, #32]	; (8000688 <__aeabi_i2f+0x88>)
 8000666:	4032      	ands	r2, r6
 8000668:	0768      	lsls	r0, r5, #29
 800066a:	d009      	beq.n	8000680 <__aeabi_i2f+0x80>
 800066c:	200f      	movs	r0, #15
 800066e:	4028      	ands	r0, r5
 8000670:	2804      	cmp	r0, #4
 8000672:	d005      	beq.n	8000680 <__aeabi_i2f+0x80>
 8000674:	3204      	adds	r2, #4
 8000676:	0150      	lsls	r0, r2, #5
 8000678:	d502      	bpl.n	8000680 <__aeabi_i2f+0x80>
 800067a:	239f      	movs	r3, #159	; 0x9f
 800067c:	4032      	ands	r2, r6
 800067e:	1a5b      	subs	r3, r3, r1
 8000680:	0192      	lsls	r2, r2, #6
 8000682:	0a55      	lsrs	r5, r2, #9
 8000684:	b2d8      	uxtb	r0, r3
 8000686:	e7d5      	b.n	8000634 <__aeabi_i2f+0x34>
 8000688:	fbffffff 	.word	0xfbffffff

0800068c <__aeabi_dadd>:
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	464f      	mov	r7, r9
 8000690:	46d6      	mov	lr, sl
 8000692:	4646      	mov	r6, r8
 8000694:	000d      	movs	r5, r1
 8000696:	0001      	movs	r1, r0
 8000698:	0018      	movs	r0, r3
 800069a:	b5c0      	push	{r6, r7, lr}
 800069c:	0017      	movs	r7, r2
 800069e:	032b      	lsls	r3, r5, #12
 80006a0:	0a5a      	lsrs	r2, r3, #9
 80006a2:	0f4b      	lsrs	r3, r1, #29
 80006a4:	4313      	orrs	r3, r2
 80006a6:	00ca      	lsls	r2, r1, #3
 80006a8:	4691      	mov	r9, r2
 80006aa:	0302      	lsls	r2, r0, #12
 80006ac:	006e      	lsls	r6, r5, #1
 80006ae:	0041      	lsls	r1, r0, #1
 80006b0:	0a52      	lsrs	r2, r2, #9
 80006b2:	0fec      	lsrs	r4, r5, #31
 80006b4:	0f7d      	lsrs	r5, r7, #29
 80006b6:	4315      	orrs	r5, r2
 80006b8:	0d76      	lsrs	r6, r6, #21
 80006ba:	0d49      	lsrs	r1, r1, #21
 80006bc:	0fc0      	lsrs	r0, r0, #31
 80006be:	4682      	mov	sl, r0
 80006c0:	46ac      	mov	ip, r5
 80006c2:	00ff      	lsls	r7, r7, #3
 80006c4:	1a72      	subs	r2, r6, r1
 80006c6:	4284      	cmp	r4, r0
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x40>
 80006ca:	e098      	b.n	80007fe <__aeabi_dadd+0x172>
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	dc00      	bgt.n	80006d2 <__aeabi_dadd+0x46>
 80006d0:	e081      	b.n	80007d6 <__aeabi_dadd+0x14a>
 80006d2:	2900      	cmp	r1, #0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x4c>
 80006d6:	e0b6      	b.n	8000846 <__aeabi_dadd+0x1ba>
 80006d8:	49c9      	ldr	r1, [pc, #804]	; (8000a00 <__aeabi_dadd+0x374>)
 80006da:	428e      	cmp	r6, r1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x54>
 80006de:	e172      	b.n	80009c6 <__aeabi_dadd+0x33a>
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0028      	movs	r0, r5
 80006e4:	0409      	lsls	r1, r1, #16
 80006e6:	4308      	orrs	r0, r1
 80006e8:	4684      	mov	ip, r0
 80006ea:	2a38      	cmp	r2, #56	; 0x38
 80006ec:	dd00      	ble.n	80006f0 <__aeabi_dadd+0x64>
 80006ee:	e15e      	b.n	80009ae <__aeabi_dadd+0x322>
 80006f0:	2a1f      	cmp	r2, #31
 80006f2:	dd00      	ble.n	80006f6 <__aeabi_dadd+0x6a>
 80006f4:	e1ee      	b.n	8000ad4 <__aeabi_dadd+0x448>
 80006f6:	2020      	movs	r0, #32
 80006f8:	0039      	movs	r1, r7
 80006fa:	4665      	mov	r5, ip
 80006fc:	1a80      	subs	r0, r0, r2
 80006fe:	4087      	lsls	r7, r0
 8000700:	40d1      	lsrs	r1, r2
 8000702:	4085      	lsls	r5, r0
 8000704:	430d      	orrs	r5, r1
 8000706:	0039      	movs	r1, r7
 8000708:	1e4f      	subs	r7, r1, #1
 800070a:	41b9      	sbcs	r1, r7
 800070c:	4667      	mov	r7, ip
 800070e:	40d7      	lsrs	r7, r2
 8000710:	4329      	orrs	r1, r5
 8000712:	1bdb      	subs	r3, r3, r7
 8000714:	464a      	mov	r2, r9
 8000716:	1a55      	subs	r5, r2, r1
 8000718:	45a9      	cmp	r9, r5
 800071a:	4189      	sbcs	r1, r1
 800071c:	4249      	negs	r1, r1
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	4698      	mov	r8, r3
 8000722:	4643      	mov	r3, r8
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	d400      	bmi.n	800072a <__aeabi_dadd+0x9e>
 8000728:	e0cc      	b.n	80008c4 <__aeabi_dadd+0x238>
 800072a:	4643      	mov	r3, r8
 800072c:	025b      	lsls	r3, r3, #9
 800072e:	0a5b      	lsrs	r3, r3, #9
 8000730:	4698      	mov	r8, r3
 8000732:	4643      	mov	r3, r8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0xae>
 8000738:	e12c      	b.n	8000994 <__aeabi_dadd+0x308>
 800073a:	4640      	mov	r0, r8
 800073c:	f000 fe34 	bl	80013a8 <__clzsi2>
 8000740:	0001      	movs	r1, r0
 8000742:	3908      	subs	r1, #8
 8000744:	2220      	movs	r2, #32
 8000746:	0028      	movs	r0, r5
 8000748:	4643      	mov	r3, r8
 800074a:	1a52      	subs	r2, r2, r1
 800074c:	408b      	lsls	r3, r1
 800074e:	40d0      	lsrs	r0, r2
 8000750:	408d      	lsls	r5, r1
 8000752:	4303      	orrs	r3, r0
 8000754:	428e      	cmp	r6, r1
 8000756:	dd00      	ble.n	800075a <__aeabi_dadd+0xce>
 8000758:	e117      	b.n	800098a <__aeabi_dadd+0x2fe>
 800075a:	1b8e      	subs	r6, r1, r6
 800075c:	1c72      	adds	r2, r6, #1
 800075e:	2a1f      	cmp	r2, #31
 8000760:	dd00      	ble.n	8000764 <__aeabi_dadd+0xd8>
 8000762:	e1a7      	b.n	8000ab4 <__aeabi_dadd+0x428>
 8000764:	2120      	movs	r1, #32
 8000766:	0018      	movs	r0, r3
 8000768:	002e      	movs	r6, r5
 800076a:	1a89      	subs	r1, r1, r2
 800076c:	408d      	lsls	r5, r1
 800076e:	4088      	lsls	r0, r1
 8000770:	40d6      	lsrs	r6, r2
 8000772:	40d3      	lsrs	r3, r2
 8000774:	1e69      	subs	r1, r5, #1
 8000776:	418d      	sbcs	r5, r1
 8000778:	4330      	orrs	r0, r6
 800077a:	4698      	mov	r8, r3
 800077c:	2600      	movs	r6, #0
 800077e:	4305      	orrs	r5, r0
 8000780:	076b      	lsls	r3, r5, #29
 8000782:	d009      	beq.n	8000798 <__aeabi_dadd+0x10c>
 8000784:	230f      	movs	r3, #15
 8000786:	402b      	ands	r3, r5
 8000788:	2b04      	cmp	r3, #4
 800078a:	d005      	beq.n	8000798 <__aeabi_dadd+0x10c>
 800078c:	1d2b      	adds	r3, r5, #4
 800078e:	42ab      	cmp	r3, r5
 8000790:	41ad      	sbcs	r5, r5
 8000792:	426d      	negs	r5, r5
 8000794:	44a8      	add	r8, r5
 8000796:	001d      	movs	r5, r3
 8000798:	4643      	mov	r3, r8
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	d400      	bmi.n	80007a0 <__aeabi_dadd+0x114>
 800079e:	e094      	b.n	80008ca <__aeabi_dadd+0x23e>
 80007a0:	4b97      	ldr	r3, [pc, #604]	; (8000a00 <__aeabi_dadd+0x374>)
 80007a2:	1c72      	adds	r2, r6, #1
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x11e>
 80007a8:	e09d      	b.n	80008e6 <__aeabi_dadd+0x25a>
 80007aa:	4641      	mov	r1, r8
 80007ac:	4b95      	ldr	r3, [pc, #596]	; (8000a04 <__aeabi_dadd+0x378>)
 80007ae:	08ed      	lsrs	r5, r5, #3
 80007b0:	4019      	ands	r1, r3
 80007b2:	000b      	movs	r3, r1
 80007b4:	0552      	lsls	r2, r2, #21
 80007b6:	0749      	lsls	r1, r1, #29
 80007b8:	025b      	lsls	r3, r3, #9
 80007ba:	4329      	orrs	r1, r5
 80007bc:	0b1b      	lsrs	r3, r3, #12
 80007be:	0d52      	lsrs	r2, r2, #21
 80007c0:	0512      	lsls	r2, r2, #20
 80007c2:	4313      	orrs	r3, r2
 80007c4:	07e4      	lsls	r4, r4, #31
 80007c6:	4323      	orrs	r3, r4
 80007c8:	0008      	movs	r0, r1
 80007ca:	0019      	movs	r1, r3
 80007cc:	bce0      	pop	{r5, r6, r7}
 80007ce:	46ba      	mov	sl, r7
 80007d0:	46b1      	mov	r9, r6
 80007d2:	46a8      	mov	r8, r5
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d043      	beq.n	8000862 <__aeabi_dadd+0x1d6>
 80007da:	1b8a      	subs	r2, r1, r6
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x156>
 80007e0:	e12a      	b.n	8000a38 <__aeabi_dadd+0x3ac>
 80007e2:	464c      	mov	r4, r9
 80007e4:	431c      	orrs	r4, r3
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x15e>
 80007e8:	e1d1      	b.n	8000b8e <__aeabi_dadd+0x502>
 80007ea:	1e54      	subs	r4, r2, #1
 80007ec:	2a01      	cmp	r2, #1
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x166>
 80007f0:	e21f      	b.n	8000c32 <__aeabi_dadd+0x5a6>
 80007f2:	4d83      	ldr	r5, [pc, #524]	; (8000a00 <__aeabi_dadd+0x374>)
 80007f4:	42aa      	cmp	r2, r5
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x16e>
 80007f8:	e272      	b.n	8000ce0 <__aeabi_dadd+0x654>
 80007fa:	0022      	movs	r2, r4
 80007fc:	e123      	b.n	8000a46 <__aeabi_dadd+0x3ba>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	dc00      	bgt.n	8000804 <__aeabi_dadd+0x178>
 8000802:	e098      	b.n	8000936 <__aeabi_dadd+0x2aa>
 8000804:	2900      	cmp	r1, #0
 8000806:	d042      	beq.n	800088e <__aeabi_dadd+0x202>
 8000808:	497d      	ldr	r1, [pc, #500]	; (8000a00 <__aeabi_dadd+0x374>)
 800080a:	428e      	cmp	r6, r1
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x184>
 800080e:	e0da      	b.n	80009c6 <__aeabi_dadd+0x33a>
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0028      	movs	r0, r5
 8000814:	0409      	lsls	r1, r1, #16
 8000816:	4308      	orrs	r0, r1
 8000818:	4684      	mov	ip, r0
 800081a:	2a38      	cmp	r2, #56	; 0x38
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x194>
 800081e:	e129      	b.n	8000a74 <__aeabi_dadd+0x3e8>
 8000820:	2a1f      	cmp	r2, #31
 8000822:	dc00      	bgt.n	8000826 <__aeabi_dadd+0x19a>
 8000824:	e187      	b.n	8000b36 <__aeabi_dadd+0x4aa>
 8000826:	0011      	movs	r1, r2
 8000828:	4665      	mov	r5, ip
 800082a:	3920      	subs	r1, #32
 800082c:	40cd      	lsrs	r5, r1
 800082e:	2a20      	cmp	r2, #32
 8000830:	d004      	beq.n	800083c <__aeabi_dadd+0x1b0>
 8000832:	2040      	movs	r0, #64	; 0x40
 8000834:	4661      	mov	r1, ip
 8000836:	1a82      	subs	r2, r0, r2
 8000838:	4091      	lsls	r1, r2
 800083a:	430f      	orrs	r7, r1
 800083c:	0039      	movs	r1, r7
 800083e:	1e4f      	subs	r7, r1, #1
 8000840:	41b9      	sbcs	r1, r7
 8000842:	430d      	orrs	r5, r1
 8000844:	e11b      	b.n	8000a7e <__aeabi_dadd+0x3f2>
 8000846:	0029      	movs	r1, r5
 8000848:	4339      	orrs	r1, r7
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1c2>
 800084c:	e0b5      	b.n	80009ba <__aeabi_dadd+0x32e>
 800084e:	1e51      	subs	r1, r2, #1
 8000850:	2a01      	cmp	r2, #1
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x1ca>
 8000854:	e1ab      	b.n	8000bae <__aeabi_dadd+0x522>
 8000856:	486a      	ldr	r0, [pc, #424]	; (8000a00 <__aeabi_dadd+0x374>)
 8000858:	4282      	cmp	r2, r0
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x1d2>
 800085c:	e1b2      	b.n	8000bc4 <__aeabi_dadd+0x538>
 800085e:	000a      	movs	r2, r1
 8000860:	e743      	b.n	80006ea <__aeabi_dadd+0x5e>
 8000862:	4969      	ldr	r1, [pc, #420]	; (8000a08 <__aeabi_dadd+0x37c>)
 8000864:	1c75      	adds	r5, r6, #1
 8000866:	420d      	tst	r5, r1
 8000868:	d000      	beq.n	800086c <__aeabi_dadd+0x1e0>
 800086a:	e0cf      	b.n	8000a0c <__aeabi_dadd+0x380>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_dadd+0x1e6>
 8000870:	e193      	b.n	8000b9a <__aeabi_dadd+0x50e>
 8000872:	4649      	mov	r1, r9
 8000874:	4319      	orrs	r1, r3
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1ee>
 8000878:	e1d1      	b.n	8000c1e <__aeabi_dadd+0x592>
 800087a:	4661      	mov	r1, ip
 800087c:	4339      	orrs	r1, r7
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x1f6>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5be>
 8000882:	4649      	mov	r1, r9
 8000884:	0758      	lsls	r0, r3, #29
 8000886:	08c9      	lsrs	r1, r1, #3
 8000888:	4301      	orrs	r1, r0
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	e026      	b.n	80008dc <__aeabi_dadd+0x250>
 800088e:	0029      	movs	r1, r5
 8000890:	4339      	orrs	r1, r7
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x20a>
 8000894:	e091      	b.n	80009ba <__aeabi_dadd+0x32e>
 8000896:	1e51      	subs	r1, r2, #1
 8000898:	2a01      	cmp	r2, #1
 800089a:	d005      	beq.n	80008a8 <__aeabi_dadd+0x21c>
 800089c:	4858      	ldr	r0, [pc, #352]	; (8000a00 <__aeabi_dadd+0x374>)
 800089e:	4282      	cmp	r2, r0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x218>
 80008a2:	e18f      	b.n	8000bc4 <__aeabi_dadd+0x538>
 80008a4:	000a      	movs	r2, r1
 80008a6:	e7b8      	b.n	800081a <__aeabi_dadd+0x18e>
 80008a8:	003d      	movs	r5, r7
 80008aa:	444d      	add	r5, r9
 80008ac:	454d      	cmp	r5, r9
 80008ae:	4189      	sbcs	r1, r1
 80008b0:	4463      	add	r3, ip
 80008b2:	4698      	mov	r8, r3
 80008b4:	4249      	negs	r1, r1
 80008b6:	4488      	add	r8, r1
 80008b8:	4643      	mov	r3, r8
 80008ba:	2602      	movs	r6, #2
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	d500      	bpl.n	80008c2 <__aeabi_dadd+0x236>
 80008c0:	e0eb      	b.n	8000a9a <__aeabi_dadd+0x40e>
 80008c2:	3e01      	subs	r6, #1
 80008c4:	076b      	lsls	r3, r5, #29
 80008c6:	d000      	beq.n	80008ca <__aeabi_dadd+0x23e>
 80008c8:	e75c      	b.n	8000784 <__aeabi_dadd+0xf8>
 80008ca:	4643      	mov	r3, r8
 80008cc:	08e9      	lsrs	r1, r5, #3
 80008ce:	075a      	lsls	r2, r3, #29
 80008d0:	4311      	orrs	r1, r2
 80008d2:	0032      	movs	r2, r6
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	484a      	ldr	r0, [pc, #296]	; (8000a00 <__aeabi_dadd+0x374>)
 80008d8:	4282      	cmp	r2, r0
 80008da:	d021      	beq.n	8000920 <__aeabi_dadd+0x294>
 80008dc:	031b      	lsls	r3, r3, #12
 80008de:	0552      	lsls	r2, r2, #21
 80008e0:	0b1b      	lsrs	r3, r3, #12
 80008e2:	0d52      	lsrs	r2, r2, #21
 80008e4:	e76c      	b.n	80007c0 <__aeabi_dadd+0x134>
 80008e6:	2300      	movs	r3, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	e769      	b.n	80007c0 <__aeabi_dadd+0x134>
 80008ec:	002a      	movs	r2, r5
 80008ee:	433a      	orrs	r2, r7
 80008f0:	d069      	beq.n	80009c6 <__aeabi_dadd+0x33a>
 80008f2:	464a      	mov	r2, r9
 80008f4:	0758      	lsls	r0, r3, #29
 80008f6:	08d1      	lsrs	r1, r2, #3
 80008f8:	08da      	lsrs	r2, r3, #3
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	031b      	lsls	r3, r3, #12
 80008fe:	4308      	orrs	r0, r1
 8000900:	421a      	tst	r2, r3
 8000902:	d007      	beq.n	8000914 <__aeabi_dadd+0x288>
 8000904:	0029      	movs	r1, r5
 8000906:	08ed      	lsrs	r5, r5, #3
 8000908:	421d      	tst	r5, r3
 800090a:	d103      	bne.n	8000914 <__aeabi_dadd+0x288>
 800090c:	002a      	movs	r2, r5
 800090e:	08ff      	lsrs	r7, r7, #3
 8000910:	0748      	lsls	r0, r1, #29
 8000912:	4338      	orrs	r0, r7
 8000914:	0f43      	lsrs	r3, r0, #29
 8000916:	00c1      	lsls	r1, r0, #3
 8000918:	075b      	lsls	r3, r3, #29
 800091a:	08c9      	lsrs	r1, r1, #3
 800091c:	4319      	orrs	r1, r3
 800091e:	0013      	movs	r3, r2
 8000920:	000a      	movs	r2, r1
 8000922:	431a      	orrs	r2, r3
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x29c>
 8000926:	e213      	b.n	8000d50 <__aeabi_dadd+0x6c4>
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0312      	lsls	r2, r2, #12
 800092c:	4313      	orrs	r3, r2
 800092e:	031b      	lsls	r3, r3, #12
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <__aeabi_dadd+0x374>)
 8000932:	0b1b      	lsrs	r3, r3, #12
 8000934:	e744      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000936:	2a00      	cmp	r2, #0
 8000938:	d04b      	beq.n	80009d2 <__aeabi_dadd+0x346>
 800093a:	1b8a      	subs	r2, r1, r6
 800093c:	2e00      	cmp	r6, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x2b6>
 8000940:	e0e7      	b.n	8000b12 <__aeabi_dadd+0x486>
 8000942:	482f      	ldr	r0, [pc, #188]	; (8000a00 <__aeabi_dadd+0x374>)
 8000944:	4281      	cmp	r1, r0
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x2be>
 8000948:	e195      	b.n	8000c76 <__aeabi_dadd+0x5ea>
 800094a:	2080      	movs	r0, #128	; 0x80
 800094c:	0400      	lsls	r0, r0, #16
 800094e:	4303      	orrs	r3, r0
 8000950:	2a38      	cmp	r2, #56	; 0x38
 8000952:	dd00      	ble.n	8000956 <__aeabi_dadd+0x2ca>
 8000954:	e143      	b.n	8000bde <__aeabi_dadd+0x552>
 8000956:	2a1f      	cmp	r2, #31
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x2d0>
 800095a:	e1db      	b.n	8000d14 <__aeabi_dadd+0x688>
 800095c:	2020      	movs	r0, #32
 800095e:	001d      	movs	r5, r3
 8000960:	464e      	mov	r6, r9
 8000962:	1a80      	subs	r0, r0, r2
 8000964:	4085      	lsls	r5, r0
 8000966:	40d6      	lsrs	r6, r2
 8000968:	4335      	orrs	r5, r6
 800096a:	464e      	mov	r6, r9
 800096c:	4086      	lsls	r6, r0
 800096e:	0030      	movs	r0, r6
 8000970:	40d3      	lsrs	r3, r2
 8000972:	1e46      	subs	r6, r0, #1
 8000974:	41b0      	sbcs	r0, r6
 8000976:	449c      	add	ip, r3
 8000978:	4305      	orrs	r5, r0
 800097a:	19ed      	adds	r5, r5, r7
 800097c:	42bd      	cmp	r5, r7
 800097e:	419b      	sbcs	r3, r3
 8000980:	425b      	negs	r3, r3
 8000982:	4463      	add	r3, ip
 8000984:	4698      	mov	r8, r3
 8000986:	000e      	movs	r6, r1
 8000988:	e07f      	b.n	8000a8a <__aeabi_dadd+0x3fe>
 800098a:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <__aeabi_dadd+0x378>)
 800098c:	1a76      	subs	r6, r6, r1
 800098e:	4013      	ands	r3, r2
 8000990:	4698      	mov	r8, r3
 8000992:	e6f5      	b.n	8000780 <__aeabi_dadd+0xf4>
 8000994:	0028      	movs	r0, r5
 8000996:	f000 fd07 	bl	80013a8 <__clzsi2>
 800099a:	0001      	movs	r1, r0
 800099c:	3118      	adds	r1, #24
 800099e:	291f      	cmp	r1, #31
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x318>
 80009a2:	e6cf      	b.n	8000744 <__aeabi_dadd+0xb8>
 80009a4:	002b      	movs	r3, r5
 80009a6:	3808      	subs	r0, #8
 80009a8:	4083      	lsls	r3, r0
 80009aa:	2500      	movs	r5, #0
 80009ac:	e6d2      	b.n	8000754 <__aeabi_dadd+0xc8>
 80009ae:	4662      	mov	r2, ip
 80009b0:	433a      	orrs	r2, r7
 80009b2:	0011      	movs	r1, r2
 80009b4:	1e4f      	subs	r7, r1, #1
 80009b6:	41b9      	sbcs	r1, r7
 80009b8:	e6ac      	b.n	8000714 <__aeabi_dadd+0x88>
 80009ba:	4649      	mov	r1, r9
 80009bc:	0758      	lsls	r0, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	4301      	orrs	r1, r0
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	e787      	b.n	80008d6 <__aeabi_dadd+0x24a>
 80009c6:	4649      	mov	r1, r9
 80009c8:	075a      	lsls	r2, r3, #29
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	4311      	orrs	r1, r2
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	e7a6      	b.n	8000920 <__aeabi_dadd+0x294>
 80009d2:	490d      	ldr	r1, [pc, #52]	; (8000a08 <__aeabi_dadd+0x37c>)
 80009d4:	1c70      	adds	r0, r6, #1
 80009d6:	4208      	tst	r0, r1
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x350>
 80009da:	e0bb      	b.n	8000b54 <__aeabi_dadd+0x4c8>
 80009dc:	2e00      	cmp	r6, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x356>
 80009e0:	e114      	b.n	8000c0c <__aeabi_dadd+0x580>
 80009e2:	4649      	mov	r1, r9
 80009e4:	4319      	orrs	r1, r3
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x35e>
 80009e8:	e175      	b.n	8000cd6 <__aeabi_dadd+0x64a>
 80009ea:	0029      	movs	r1, r5
 80009ec:	4339      	orrs	r1, r7
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x366>
 80009f0:	e17e      	b.n	8000cf0 <__aeabi_dadd+0x664>
 80009f2:	4649      	mov	r1, r9
 80009f4:	0758      	lsls	r0, r3, #29
 80009f6:	08c9      	lsrs	r1, r1, #3
 80009f8:	4301      	orrs	r1, r0
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	e76e      	b.n	80008dc <__aeabi_dadd+0x250>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	000007ff 	.word	0x000007ff
 8000a04:	ff7fffff 	.word	0xff7fffff
 8000a08:	000007fe 	.word	0x000007fe
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	1bcd      	subs	r5, r1, r7
 8000a10:	4661      	mov	r1, ip
 8000a12:	1a58      	subs	r0, r3, r1
 8000a14:	45a9      	cmp	r9, r5
 8000a16:	4189      	sbcs	r1, r1
 8000a18:	4249      	negs	r1, r1
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	0001      	movs	r1, r0
 8000a1e:	4640      	mov	r0, r8
 8000a20:	1a09      	subs	r1, r1, r0
 8000a22:	4688      	mov	r8, r1
 8000a24:	0209      	lsls	r1, r1, #8
 8000a26:	d500      	bpl.n	8000a2a <__aeabi_dadd+0x39e>
 8000a28:	e0a6      	b.n	8000b78 <__aeabi_dadd+0x4ec>
 8000a2a:	4641      	mov	r1, r8
 8000a2c:	4329      	orrs	r1, r5
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_dadd+0x3a6>
 8000a30:	e67f      	b.n	8000732 <__aeabi_dadd+0xa6>
 8000a32:	2300      	movs	r3, #0
 8000a34:	2400      	movs	r4, #0
 8000a36:	e751      	b.n	80008dc <__aeabi_dadd+0x250>
 8000a38:	4cc7      	ldr	r4, [pc, #796]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000a3a:	42a1      	cmp	r1, r4
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x3b4>
 8000a3e:	e0c7      	b.n	8000bd0 <__aeabi_dadd+0x544>
 8000a40:	2480      	movs	r4, #128	; 0x80
 8000a42:	0424      	lsls	r4, r4, #16
 8000a44:	4323      	orrs	r3, r4
 8000a46:	2a38      	cmp	r2, #56	; 0x38
 8000a48:	dc54      	bgt.n	8000af4 <__aeabi_dadd+0x468>
 8000a4a:	2a1f      	cmp	r2, #31
 8000a4c:	dd00      	ble.n	8000a50 <__aeabi_dadd+0x3c4>
 8000a4e:	e0cc      	b.n	8000bea <__aeabi_dadd+0x55e>
 8000a50:	2420      	movs	r4, #32
 8000a52:	4648      	mov	r0, r9
 8000a54:	1aa4      	subs	r4, r4, r2
 8000a56:	001d      	movs	r5, r3
 8000a58:	464e      	mov	r6, r9
 8000a5a:	40a0      	lsls	r0, r4
 8000a5c:	40d6      	lsrs	r6, r2
 8000a5e:	40a5      	lsls	r5, r4
 8000a60:	0004      	movs	r4, r0
 8000a62:	40d3      	lsrs	r3, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	4335      	orrs	r5, r6
 8000a68:	1e66      	subs	r6, r4, #1
 8000a6a:	41b4      	sbcs	r4, r6
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	469c      	mov	ip, r3
 8000a70:	4325      	orrs	r5, r4
 8000a72:	e044      	b.n	8000afe <__aeabi_dadd+0x472>
 8000a74:	4662      	mov	r2, ip
 8000a76:	433a      	orrs	r2, r7
 8000a78:	0015      	movs	r5, r2
 8000a7a:	1e6f      	subs	r7, r5, #1
 8000a7c:	41bd      	sbcs	r5, r7
 8000a7e:	444d      	add	r5, r9
 8000a80:	454d      	cmp	r5, r9
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4249      	negs	r1, r1
 8000a86:	4688      	mov	r8, r1
 8000a88:	4498      	add	r8, r3
 8000a8a:	4643      	mov	r3, r8
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	d400      	bmi.n	8000a92 <__aeabi_dadd+0x406>
 8000a90:	e718      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000a92:	4bb1      	ldr	r3, [pc, #708]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000a94:	3601      	adds	r6, #1
 8000a96:	429e      	cmp	r6, r3
 8000a98:	d049      	beq.n	8000b2e <__aeabi_dadd+0x4a2>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	4baf      	ldr	r3, [pc, #700]	; (8000d5c <__aeabi_dadd+0x6d0>)
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	086a      	lsrs	r2, r5, #1
 8000aa6:	400d      	ands	r5, r1
 8000aa8:	4315      	orrs	r5, r2
 8000aaa:	07d9      	lsls	r1, r3, #31
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	4698      	mov	r8, r3
 8000ab0:	430d      	orrs	r5, r1
 8000ab2:	e665      	b.n	8000780 <__aeabi_dadd+0xf4>
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	3e1f      	subs	r6, #31
 8000ab8:	40f0      	lsrs	r0, r6
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x43a>
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	4093      	lsls	r3, r2
 8000ac4:	431d      	orrs	r5, r3
 8000ac6:	1e69      	subs	r1, r5, #1
 8000ac8:	418d      	sbcs	r5, r1
 8000aca:	2300      	movs	r3, #0
 8000acc:	2600      	movs	r6, #0
 8000ace:	4698      	mov	r8, r3
 8000ad0:	4305      	orrs	r5, r0
 8000ad2:	e6f7      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	3920      	subs	r1, #32
 8000ada:	40cd      	lsrs	r5, r1
 8000adc:	2a20      	cmp	r2, #32
 8000ade:	d004      	beq.n	8000aea <__aeabi_dadd+0x45e>
 8000ae0:	2040      	movs	r0, #64	; 0x40
 8000ae2:	4661      	mov	r1, ip
 8000ae4:	1a82      	subs	r2, r0, r2
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	430f      	orrs	r7, r1
 8000aea:	0039      	movs	r1, r7
 8000aec:	1e4f      	subs	r7, r1, #1
 8000aee:	41b9      	sbcs	r1, r7
 8000af0:	4329      	orrs	r1, r5
 8000af2:	e60f      	b.n	8000714 <__aeabi_dadd+0x88>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4313      	orrs	r3, r2
 8000af8:	001d      	movs	r5, r3
 8000afa:	1e6b      	subs	r3, r5, #1
 8000afc:	419d      	sbcs	r5, r3
 8000afe:	1b7d      	subs	r5, r7, r5
 8000b00:	42af      	cmp	r7, r5
 8000b02:	419b      	sbcs	r3, r3
 8000b04:	4662      	mov	r2, ip
 8000b06:	425b      	negs	r3, r3
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	4654      	mov	r4, sl
 8000b0e:	000e      	movs	r6, r1
 8000b10:	e607      	b.n	8000722 <__aeabi_dadd+0x96>
 8000b12:	4648      	mov	r0, r9
 8000b14:	4318      	orrs	r0, r3
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x48e>
 8000b18:	e0b3      	b.n	8000c82 <__aeabi_dadd+0x5f6>
 8000b1a:	1e50      	subs	r0, r2, #1
 8000b1c:	2a01      	cmp	r2, #1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x496>
 8000b20:	e10d      	b.n	8000d3e <__aeabi_dadd+0x6b2>
 8000b22:	4d8d      	ldr	r5, [pc, #564]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000b24:	42aa      	cmp	r2, r5
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x49e>
 8000b28:	e0a5      	b.n	8000c76 <__aeabi_dadd+0x5ea>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	e710      	b.n	8000950 <__aeabi_dadd+0x2c4>
 8000b2e:	0032      	movs	r2, r6
 8000b30:	2300      	movs	r3, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	e644      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000b36:	2120      	movs	r1, #32
 8000b38:	0038      	movs	r0, r7
 8000b3a:	1a89      	subs	r1, r1, r2
 8000b3c:	4665      	mov	r5, ip
 8000b3e:	408f      	lsls	r7, r1
 8000b40:	408d      	lsls	r5, r1
 8000b42:	40d0      	lsrs	r0, r2
 8000b44:	1e79      	subs	r1, r7, #1
 8000b46:	418f      	sbcs	r7, r1
 8000b48:	4305      	orrs	r5, r0
 8000b4a:	433d      	orrs	r5, r7
 8000b4c:	4667      	mov	r7, ip
 8000b4e:	40d7      	lsrs	r7, r2
 8000b50:	19db      	adds	r3, r3, r7
 8000b52:	e794      	b.n	8000a7e <__aeabi_dadd+0x3f2>
 8000b54:	4a80      	ldr	r2, [pc, #512]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000b56:	4290      	cmp	r0, r2
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x4d0>
 8000b5a:	e0ec      	b.n	8000d36 <__aeabi_dadd+0x6aa>
 8000b5c:	0039      	movs	r1, r7
 8000b5e:	4449      	add	r1, r9
 8000b60:	4549      	cmp	r1, r9
 8000b62:	4192      	sbcs	r2, r2
 8000b64:	4463      	add	r3, ip
 8000b66:	4252      	negs	r2, r2
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	07dd      	lsls	r5, r3, #31
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	4698      	mov	r8, r3
 8000b72:	0006      	movs	r6, r0
 8000b74:	430d      	orrs	r5, r1
 8000b76:	e6a5      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000b78:	464a      	mov	r2, r9
 8000b7a:	1abd      	subs	r5, r7, r2
 8000b7c:	42af      	cmp	r7, r5
 8000b7e:	4189      	sbcs	r1, r1
 8000b80:	4662      	mov	r2, ip
 8000b82:	4249      	negs	r1, r1
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	1a5b      	subs	r3, r3, r1
 8000b88:	4698      	mov	r8, r3
 8000b8a:	4654      	mov	r4, sl
 8000b8c:	e5d1      	b.n	8000732 <__aeabi_dadd+0xa6>
 8000b8e:	076c      	lsls	r4, r5, #29
 8000b90:	08f9      	lsrs	r1, r7, #3
 8000b92:	4321      	orrs	r1, r4
 8000b94:	08eb      	lsrs	r3, r5, #3
 8000b96:	0004      	movs	r4, r0
 8000b98:	e69d      	b.n	80008d6 <__aeabi_dadd+0x24a>
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	d175      	bne.n	8000c8c <__aeabi_dadd+0x600>
 8000ba0:	4661      	mov	r1, ip
 8000ba2:	4339      	orrs	r1, r7
 8000ba4:	d114      	bne.n	8000bd0 <__aeabi_dadd+0x544>
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	2400      	movs	r4, #0
 8000baa:	031b      	lsls	r3, r3, #12
 8000bac:	e6bc      	b.n	8000928 <__aeabi_dadd+0x29c>
 8000bae:	464a      	mov	r2, r9
 8000bb0:	1bd5      	subs	r5, r2, r7
 8000bb2:	45a9      	cmp	r9, r5
 8000bb4:	4189      	sbcs	r1, r1
 8000bb6:	4662      	mov	r2, ip
 8000bb8:	4249      	negs	r1, r1
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	4698      	mov	r8, r3
 8000bc0:	2601      	movs	r6, #1
 8000bc2:	e5ae      	b.n	8000722 <__aeabi_dadd+0x96>
 8000bc4:	464a      	mov	r2, r9
 8000bc6:	08d1      	lsrs	r1, r2, #3
 8000bc8:	075a      	lsls	r2, r3, #29
 8000bca:	4311      	orrs	r1, r2
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	e6a7      	b.n	8000920 <__aeabi_dadd+0x294>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	08f9      	lsrs	r1, r7, #3
 8000bd4:	075a      	lsls	r2, r3, #29
 8000bd6:	4654      	mov	r4, sl
 8000bd8:	4311      	orrs	r1, r2
 8000bda:	08db      	lsrs	r3, r3, #3
 8000bdc:	e6a0      	b.n	8000920 <__aeabi_dadd+0x294>
 8000bde:	464a      	mov	r2, r9
 8000be0:	4313      	orrs	r3, r2
 8000be2:	001d      	movs	r5, r3
 8000be4:	1e6b      	subs	r3, r5, #1
 8000be6:	419d      	sbcs	r5, r3
 8000be8:	e6c7      	b.n	800097a <__aeabi_dadd+0x2ee>
 8000bea:	0014      	movs	r4, r2
 8000bec:	001e      	movs	r6, r3
 8000bee:	3c20      	subs	r4, #32
 8000bf0:	40e6      	lsrs	r6, r4
 8000bf2:	2a20      	cmp	r2, #32
 8000bf4:	d005      	beq.n	8000c02 <__aeabi_dadd+0x576>
 8000bf6:	2440      	movs	r4, #64	; 0x40
 8000bf8:	1aa2      	subs	r2, r4, r2
 8000bfa:	4093      	lsls	r3, r2
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	4691      	mov	r9, r2
 8000c02:	464d      	mov	r5, r9
 8000c04:	1e6b      	subs	r3, r5, #1
 8000c06:	419d      	sbcs	r5, r3
 8000c08:	4335      	orrs	r5, r6
 8000c0a:	e778      	b.n	8000afe <__aeabi_dadd+0x472>
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dadd+0x588>
 8000c12:	e66b      	b.n	80008ec <__aeabi_dadd+0x260>
 8000c14:	076b      	lsls	r3, r5, #29
 8000c16:	08f9      	lsrs	r1, r7, #3
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	08eb      	lsrs	r3, r5, #3
 8000c1c:	e680      	b.n	8000920 <__aeabi_dadd+0x294>
 8000c1e:	4661      	mov	r1, ip
 8000c20:	4339      	orrs	r1, r7
 8000c22:	d054      	beq.n	8000cce <__aeabi_dadd+0x642>
 8000c24:	4663      	mov	r3, ip
 8000c26:	08f9      	lsrs	r1, r7, #3
 8000c28:	075c      	lsls	r4, r3, #29
 8000c2a:	4321      	orrs	r1, r4
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	0004      	movs	r4, r0
 8000c30:	e654      	b.n	80008dc <__aeabi_dadd+0x250>
 8000c32:	464a      	mov	r2, r9
 8000c34:	1abd      	subs	r5, r7, r2
 8000c36:	42af      	cmp	r7, r5
 8000c38:	4189      	sbcs	r1, r1
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	4249      	negs	r1, r1
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	4698      	mov	r8, r3
 8000c44:	0004      	movs	r4, r0
 8000c46:	2601      	movs	r6, #1
 8000c48:	e56b      	b.n	8000722 <__aeabi_dadd+0x96>
 8000c4a:	464a      	mov	r2, r9
 8000c4c:	1bd5      	subs	r5, r2, r7
 8000c4e:	45a9      	cmp	r9, r5
 8000c50:	4189      	sbcs	r1, r1
 8000c52:	4662      	mov	r2, ip
 8000c54:	4249      	negs	r1, r1
 8000c56:	1a9a      	subs	r2, r3, r2
 8000c58:	1a52      	subs	r2, r2, r1
 8000c5a:	4690      	mov	r8, r2
 8000c5c:	0212      	lsls	r2, r2, #8
 8000c5e:	d532      	bpl.n	8000cc6 <__aeabi_dadd+0x63a>
 8000c60:	464a      	mov	r2, r9
 8000c62:	1abd      	subs	r5, r7, r2
 8000c64:	42af      	cmp	r7, r5
 8000c66:	4189      	sbcs	r1, r1
 8000c68:	4662      	mov	r2, ip
 8000c6a:	4249      	negs	r1, r1
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	1a5b      	subs	r3, r3, r1
 8000c70:	4698      	mov	r8, r3
 8000c72:	0004      	movs	r4, r0
 8000c74:	e584      	b.n	8000780 <__aeabi_dadd+0xf4>
 8000c76:	4663      	mov	r3, ip
 8000c78:	08f9      	lsrs	r1, r7, #3
 8000c7a:	075a      	lsls	r2, r3, #29
 8000c7c:	4311      	orrs	r1, r2
 8000c7e:	08db      	lsrs	r3, r3, #3
 8000c80:	e64e      	b.n	8000920 <__aeabi_dadd+0x294>
 8000c82:	08f9      	lsrs	r1, r7, #3
 8000c84:	0768      	lsls	r0, r5, #29
 8000c86:	4301      	orrs	r1, r0
 8000c88:	08eb      	lsrs	r3, r5, #3
 8000c8a:	e624      	b.n	80008d6 <__aeabi_dadd+0x24a>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	433a      	orrs	r2, r7
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x608>
 8000c92:	e698      	b.n	80009c6 <__aeabi_dadd+0x33a>
 8000c94:	464a      	mov	r2, r9
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	075a      	lsls	r2, r3, #29
 8000c9a:	4311      	orrs	r1, r2
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	031b      	lsls	r3, r3, #12
 8000ca2:	421a      	tst	r2, r3
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x62c>
 8000ca6:	4660      	mov	r0, ip
 8000ca8:	08c5      	lsrs	r5, r0, #3
 8000caa:	421d      	tst	r5, r3
 8000cac:	d104      	bne.n	8000cb8 <__aeabi_dadd+0x62c>
 8000cae:	4654      	mov	r4, sl
 8000cb0:	002a      	movs	r2, r5
 8000cb2:	08f9      	lsrs	r1, r7, #3
 8000cb4:	0743      	lsls	r3, r0, #29
 8000cb6:	4319      	orrs	r1, r3
 8000cb8:	0f4b      	lsrs	r3, r1, #29
 8000cba:	00c9      	lsls	r1, r1, #3
 8000cbc:	075b      	lsls	r3, r3, #29
 8000cbe:	08c9      	lsrs	r1, r1, #3
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	e62c      	b.n	8000920 <__aeabi_dadd+0x294>
 8000cc6:	4641      	mov	r1, r8
 8000cc8:	4329      	orrs	r1, r5
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x642>
 8000ccc:	e5fa      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	2400      	movs	r4, #0
 8000cd4:	e602      	b.n	80008dc <__aeabi_dadd+0x250>
 8000cd6:	076b      	lsls	r3, r5, #29
 8000cd8:	08f9      	lsrs	r1, r7, #3
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	08eb      	lsrs	r3, r5, #3
 8000cde:	e5fd      	b.n	80008dc <__aeabi_dadd+0x250>
 8000ce0:	4663      	mov	r3, ip
 8000ce2:	08f9      	lsrs	r1, r7, #3
 8000ce4:	075b      	lsls	r3, r3, #29
 8000ce6:	4319      	orrs	r1, r3
 8000ce8:	4663      	mov	r3, ip
 8000cea:	0004      	movs	r4, r0
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	e617      	b.n	8000920 <__aeabi_dadd+0x294>
 8000cf0:	003d      	movs	r5, r7
 8000cf2:	444d      	add	r5, r9
 8000cf4:	4463      	add	r3, ip
 8000cf6:	454d      	cmp	r5, r9
 8000cf8:	4189      	sbcs	r1, r1
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	4249      	negs	r1, r1
 8000cfe:	4488      	add	r8, r1
 8000d00:	4643      	mov	r3, r8
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_dadd+0x67c>
 8000d06:	e5dd      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000d08:	4642      	mov	r2, r8
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <__aeabi_dadd+0x6d0>)
 8000d0c:	2601      	movs	r6, #1
 8000d0e:	401a      	ands	r2, r3
 8000d10:	4690      	mov	r8, r2
 8000d12:	e5d7      	b.n	80008c4 <__aeabi_dadd+0x238>
 8000d14:	0010      	movs	r0, r2
 8000d16:	001e      	movs	r6, r3
 8000d18:	3820      	subs	r0, #32
 8000d1a:	40c6      	lsrs	r6, r0
 8000d1c:	2a20      	cmp	r2, #32
 8000d1e:	d005      	beq.n	8000d2c <__aeabi_dadd+0x6a0>
 8000d20:	2040      	movs	r0, #64	; 0x40
 8000d22:	1a82      	subs	r2, r0, r2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	464a      	mov	r2, r9
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4691      	mov	r9, r2
 8000d2c:	464d      	mov	r5, r9
 8000d2e:	1e6b      	subs	r3, r5, #1
 8000d30:	419d      	sbcs	r5, r3
 8000d32:	4335      	orrs	r5, r6
 8000d34:	e621      	b.n	800097a <__aeabi_dadd+0x2ee>
 8000d36:	0002      	movs	r2, r0
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	e540      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000d3e:	464a      	mov	r2, r9
 8000d40:	19d5      	adds	r5, r2, r7
 8000d42:	42bd      	cmp	r5, r7
 8000d44:	4189      	sbcs	r1, r1
 8000d46:	4463      	add	r3, ip
 8000d48:	4698      	mov	r8, r3
 8000d4a:	4249      	negs	r1, r1
 8000d4c:	4488      	add	r8, r1
 8000d4e:	e5b3      	b.n	80008b8 <__aeabi_dadd+0x22c>
 8000d50:	2100      	movs	r1, #0
 8000d52:	4a01      	ldr	r2, [pc, #4]	; (8000d58 <__aeabi_dadd+0x6cc>)
 8000d54:	000b      	movs	r3, r1
 8000d56:	e533      	b.n	80007c0 <__aeabi_dadd+0x134>
 8000d58:	000007ff 	.word	0x000007ff
 8000d5c:	ff7fffff 	.word	0xff7fffff

08000d60 <__aeabi_dmul>:
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	4657      	mov	r7, sl
 8000d64:	464e      	mov	r6, r9
 8000d66:	4645      	mov	r5, r8
 8000d68:	46de      	mov	lr, fp
 8000d6a:	b5e0      	push	{r5, r6, r7, lr}
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	030c      	lsls	r4, r1, #12
 8000d70:	004b      	lsls	r3, r1, #1
 8000d72:	0006      	movs	r6, r0
 8000d74:	4692      	mov	sl, r2
 8000d76:	b087      	sub	sp, #28
 8000d78:	0b24      	lsrs	r4, r4, #12
 8000d7a:	0d5b      	lsrs	r3, r3, #21
 8000d7c:	0fcf      	lsrs	r7, r1, #31
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d06c      	beq.n	8000e5c <__aeabi_dmul+0xfc>
 8000d82:	4add      	ldr	r2, [pc, #884]	; (80010f8 <__aeabi_dmul+0x398>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dmul+0x2a>
 8000d88:	e086      	b.n	8000e98 <__aeabi_dmul+0x138>
 8000d8a:	0f42      	lsrs	r2, r0, #29
 8000d8c:	00e4      	lsls	r4, r4, #3
 8000d8e:	4314      	orrs	r4, r2
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	0412      	lsls	r2, r2, #16
 8000d94:	4314      	orrs	r4, r2
 8000d96:	4ad9      	ldr	r2, [pc, #868]	; (80010fc <__aeabi_dmul+0x39c>)
 8000d98:	00c5      	lsls	r5, r0, #3
 8000d9a:	4694      	mov	ip, r2
 8000d9c:	4463      	add	r3, ip
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	4699      	mov	r9, r3
 8000da4:	469b      	mov	fp, r3
 8000da6:	4643      	mov	r3, r8
 8000da8:	4642      	mov	r2, r8
 8000daa:	031e      	lsls	r6, r3, #12
 8000dac:	0fd2      	lsrs	r2, r2, #31
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4650      	mov	r0, sl
 8000db2:	4690      	mov	r8, r2
 8000db4:	0b36      	lsrs	r6, r6, #12
 8000db6:	0d5b      	lsrs	r3, r3, #21
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dmul+0x5c>
 8000dba:	e078      	b.n	8000eae <__aeabi_dmul+0x14e>
 8000dbc:	4ace      	ldr	r2, [pc, #824]	; (80010f8 <__aeabi_dmul+0x398>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01d      	beq.n	8000dfe <__aeabi_dmul+0x9e>
 8000dc2:	49ce      	ldr	r1, [pc, #824]	; (80010fc <__aeabi_dmul+0x39c>)
 8000dc4:	0f42      	lsrs	r2, r0, #29
 8000dc6:	468c      	mov	ip, r1
 8000dc8:	9900      	ldr	r1, [sp, #0]
 8000dca:	4463      	add	r3, ip
 8000dcc:	00f6      	lsls	r6, r6, #3
 8000dce:	468c      	mov	ip, r1
 8000dd0:	4316      	orrs	r6, r2
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	449c      	add	ip, r3
 8000dd6:	0412      	lsls	r2, r2, #16
 8000dd8:	4663      	mov	r3, ip
 8000dda:	4316      	orrs	r6, r2
 8000ddc:	00c2      	lsls	r2, r0, #3
 8000dde:	2000      	movs	r0, #0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	9900      	ldr	r1, [sp, #0]
 8000de4:	4643      	mov	r3, r8
 8000de6:	3101      	adds	r1, #1
 8000de8:	468c      	mov	ip, r1
 8000dea:	4649      	mov	r1, r9
 8000dec:	407b      	eors	r3, r7
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	290f      	cmp	r1, #15
 8000df2:	d900      	bls.n	8000df6 <__aeabi_dmul+0x96>
 8000df4:	e07e      	b.n	8000ef4 <__aeabi_dmul+0x194>
 8000df6:	4bc2      	ldr	r3, [pc, #776]	; (8001100 <__aeabi_dmul+0x3a0>)
 8000df8:	0089      	lsls	r1, r1, #2
 8000dfa:	5859      	ldr	r1, [r3, r1]
 8000dfc:	468f      	mov	pc, r1
 8000dfe:	4652      	mov	r2, sl
 8000e00:	9b00      	ldr	r3, [sp, #0]
 8000e02:	4332      	orrs	r2, r6
 8000e04:	d000      	beq.n	8000e08 <__aeabi_dmul+0xa8>
 8000e06:	e156      	b.n	80010b6 <__aeabi_dmul+0x356>
 8000e08:	49bb      	ldr	r1, [pc, #748]	; (80010f8 <__aeabi_dmul+0x398>)
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	4463      	add	r3, ip
 8000e10:	4649      	mov	r1, r9
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2302      	movs	r3, #2
 8000e16:	4319      	orrs	r1, r3
 8000e18:	4689      	mov	r9, r1
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	e7e1      	b.n	8000de2 <__aeabi_dmul+0x82>
 8000e1e:	4643      	mov	r3, r8
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	0034      	movs	r4, r6
 8000e24:	0015      	movs	r5, r2
 8000e26:	4683      	mov	fp, r0
 8000e28:	465b      	mov	r3, fp
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d05e      	beq.n	8000eec <__aeabi_dmul+0x18c>
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dmul+0xd4>
 8000e32:	e1f3      	b.n	800121c <__aeabi_dmul+0x4bc>
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d000      	beq.n	8000e3a <__aeabi_dmul+0xda>
 8000e38:	e118      	b.n	800106c <__aeabi_dmul+0x30c>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2400      	movs	r4, #0
 8000e3e:	2500      	movs	r5, #0
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	0512      	lsls	r2, r2, #20
 8000e44:	4322      	orrs	r2, r4
 8000e46:	07db      	lsls	r3, r3, #31
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	0028      	movs	r0, r5
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	b007      	add	sp, #28
 8000e50:	bcf0      	pop	{r4, r5, r6, r7}
 8000e52:	46bb      	mov	fp, r7
 8000e54:	46b2      	mov	sl, r6
 8000e56:	46a9      	mov	r9, r5
 8000e58:	46a0      	mov	r8, r4
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5c:	0025      	movs	r5, r4
 8000e5e:	4305      	orrs	r5, r0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dmul+0x104>
 8000e62:	e141      	b.n	80010e8 <__aeabi_dmul+0x388>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dmul+0x10a>
 8000e68:	e1ad      	b.n	80011c6 <__aeabi_dmul+0x466>
 8000e6a:	0020      	movs	r0, r4
 8000e6c:	f000 fa9c 	bl	80013a8 <__clzsi2>
 8000e70:	0001      	movs	r1, r0
 8000e72:	0002      	movs	r2, r0
 8000e74:	390b      	subs	r1, #11
 8000e76:	231d      	movs	r3, #29
 8000e78:	0010      	movs	r0, r2
 8000e7a:	1a5b      	subs	r3, r3, r1
 8000e7c:	0031      	movs	r1, r6
 8000e7e:	0035      	movs	r5, r6
 8000e80:	3808      	subs	r0, #8
 8000e82:	4084      	lsls	r4, r0
 8000e84:	40d9      	lsrs	r1, r3
 8000e86:	4085      	lsls	r5, r0
 8000e88:	430c      	orrs	r4, r1
 8000e8a:	489e      	ldr	r0, [pc, #632]	; (8001104 <__aeabi_dmul+0x3a4>)
 8000e8c:	1a83      	subs	r3, r0, r2
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	4699      	mov	r9, r3
 8000e94:	469b      	mov	fp, r3
 8000e96:	e786      	b.n	8000da6 <__aeabi_dmul+0x46>
 8000e98:	0005      	movs	r5, r0
 8000e9a:	4325      	orrs	r5, r4
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_dmul+0x140>
 8000e9e:	e11c      	b.n	80010da <__aeabi_dmul+0x37a>
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	4691      	mov	r9, r2
 8000eaa:	469b      	mov	fp, r3
 8000eac:	e77b      	b.n	8000da6 <__aeabi_dmul+0x46>
 8000eae:	4652      	mov	r2, sl
 8000eb0:	4332      	orrs	r2, r6
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dmul+0x156>
 8000eb4:	e10a      	b.n	80010cc <__aeabi_dmul+0x36c>
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dmul+0x15c>
 8000eba:	e176      	b.n	80011aa <__aeabi_dmul+0x44a>
 8000ebc:	0030      	movs	r0, r6
 8000ebe:	f000 fa73 	bl	80013a8 <__clzsi2>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	3a0b      	subs	r2, #11
 8000ec6:	231d      	movs	r3, #29
 8000ec8:	0001      	movs	r1, r0
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	4652      	mov	r2, sl
 8000ece:	3908      	subs	r1, #8
 8000ed0:	40da      	lsrs	r2, r3
 8000ed2:	408e      	lsls	r6, r1
 8000ed4:	4316      	orrs	r6, r2
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	408a      	lsls	r2, r1
 8000eda:	9b00      	ldr	r3, [sp, #0]
 8000edc:	4989      	ldr	r1, [pc, #548]	; (8001104 <__aeabi_dmul+0x3a4>)
 8000ede:	1a18      	subs	r0, r3, r0
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	468c      	mov	ip, r1
 8000ee4:	4463      	add	r3, ip
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	e77a      	b.n	8000de2 <__aeabi_dmul+0x82>
 8000eec:	2400      	movs	r4, #0
 8000eee:	2500      	movs	r5, #0
 8000ef0:	4a81      	ldr	r2, [pc, #516]	; (80010f8 <__aeabi_dmul+0x398>)
 8000ef2:	e7a5      	b.n	8000e40 <__aeabi_dmul+0xe0>
 8000ef4:	0c2f      	lsrs	r7, r5, #16
 8000ef6:	042d      	lsls	r5, r5, #16
 8000ef8:	0c2d      	lsrs	r5, r5, #16
 8000efa:	002b      	movs	r3, r5
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	0412      	lsls	r2, r2, #16
 8000f00:	0c12      	lsrs	r2, r2, #16
 8000f02:	4353      	muls	r3, r2
 8000f04:	4698      	mov	r8, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	0028      	movs	r0, r5
 8000f0a:	437b      	muls	r3, r7
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	4348      	muls	r0, r1
 8000f10:	4448      	add	r0, r9
 8000f12:	4683      	mov	fp, r0
 8000f14:	4640      	mov	r0, r8
 8000f16:	000b      	movs	r3, r1
 8000f18:	0c00      	lsrs	r0, r0, #16
 8000f1a:	4682      	mov	sl, r0
 8000f1c:	4658      	mov	r0, fp
 8000f1e:	437b      	muls	r3, r7
 8000f20:	4450      	add	r0, sl
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	4581      	cmp	r9, r0
 8000f26:	d906      	bls.n	8000f36 <__aeabi_dmul+0x1d6>
 8000f28:	469a      	mov	sl, r3
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	025b      	lsls	r3, r3, #9
 8000f2e:	4699      	mov	r9, r3
 8000f30:	44ca      	add	sl, r9
 8000f32:	4653      	mov	r3, sl
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	0c03      	lsrs	r3, r0, #16
 8000f38:	469b      	mov	fp, r3
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	0c1b      	lsrs	r3, r3, #16
 8000f42:	4698      	mov	r8, r3
 8000f44:	0003      	movs	r3, r0
 8000f46:	4443      	add	r3, r8
 8000f48:	9304      	str	r3, [sp, #16]
 8000f4a:	0c33      	lsrs	r3, r6, #16
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	002b      	movs	r3, r5
 8000f50:	0436      	lsls	r6, r6, #16
 8000f52:	0c36      	lsrs	r6, r6, #16
 8000f54:	4373      	muls	r3, r6
 8000f56:	4698      	mov	r8, r3
 8000f58:	0033      	movs	r3, r6
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469a      	mov	sl, r3
 8000f5e:	464b      	mov	r3, r9
 8000f60:	435d      	muls	r5, r3
 8000f62:	435f      	muls	r7, r3
 8000f64:	4643      	mov	r3, r8
 8000f66:	4455      	add	r5, sl
 8000f68:	0c18      	lsrs	r0, r3, #16
 8000f6a:	1940      	adds	r0, r0, r5
 8000f6c:	4582      	cmp	sl, r0
 8000f6e:	d903      	bls.n	8000f78 <__aeabi_dmul+0x218>
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	469a      	mov	sl, r3
 8000f76:	4457      	add	r7, sl
 8000f78:	0c05      	lsrs	r5, r0, #16
 8000f7a:	19eb      	adds	r3, r5, r7
 8000f7c:	9305      	str	r3, [sp, #20]
 8000f7e:	4643      	mov	r3, r8
 8000f80:	041d      	lsls	r5, r3, #16
 8000f82:	0c2d      	lsrs	r5, r5, #16
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	1940      	adds	r0, r0, r5
 8000f88:	0c25      	lsrs	r5, r4, #16
 8000f8a:	0424      	lsls	r4, r4, #16
 8000f8c:	0c24      	lsrs	r4, r4, #16
 8000f8e:	0027      	movs	r7, r4
 8000f90:	4357      	muls	r7, r2
 8000f92:	436a      	muls	r2, r5
 8000f94:	4690      	mov	r8, r2
 8000f96:	002a      	movs	r2, r5
 8000f98:	0c3b      	lsrs	r3, r7, #16
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	434a      	muls	r2, r1
 8000f9e:	4361      	muls	r1, r4
 8000fa0:	4441      	add	r1, r8
 8000fa2:	4451      	add	r1, sl
 8000fa4:	4483      	add	fp, r0
 8000fa6:	4588      	cmp	r8, r1
 8000fa8:	d903      	bls.n	8000fb2 <__aeabi_dmul+0x252>
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	4698      	mov	r8, r3
 8000fb0:	4442      	add	r2, r8
 8000fb2:	043f      	lsls	r7, r7, #16
 8000fb4:	0c0b      	lsrs	r3, r1, #16
 8000fb6:	0c3f      	lsrs	r7, r7, #16
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	19c9      	adds	r1, r1, r7
 8000fbc:	0027      	movs	r7, r4
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	4377      	muls	r7, r6
 8000fc4:	435c      	muls	r4, r3
 8000fc6:	436e      	muls	r6, r5
 8000fc8:	435d      	muls	r5, r3
 8000fca:	0c3b      	lsrs	r3, r7, #16
 8000fcc:	4699      	mov	r9, r3
 8000fce:	19a4      	adds	r4, r4, r6
 8000fd0:	444c      	add	r4, r9
 8000fd2:	4442      	add	r2, r8
 8000fd4:	9503      	str	r5, [sp, #12]
 8000fd6:	42a6      	cmp	r6, r4
 8000fd8:	d904      	bls.n	8000fe4 <__aeabi_dmul+0x284>
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	4698      	mov	r8, r3
 8000fe0:	4445      	add	r5, r8
 8000fe2:	9503      	str	r5, [sp, #12]
 8000fe4:	9b02      	ldr	r3, [sp, #8]
 8000fe6:	043f      	lsls	r7, r7, #16
 8000fe8:	445b      	add	r3, fp
 8000fea:	001e      	movs	r6, r3
 8000fec:	4283      	cmp	r3, r0
 8000fee:	4180      	sbcs	r0, r0
 8000ff0:	0423      	lsls	r3, r4, #16
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	9b05      	ldr	r3, [sp, #20]
 8000ff6:	0c3f      	lsrs	r7, r7, #16
 8000ff8:	4447      	add	r7, r8
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	1876      	adds	r6, r6, r1
 8000ffe:	428e      	cmp	r6, r1
 8001000:	4189      	sbcs	r1, r1
 8001002:	4447      	add	r7, r8
 8001004:	4240      	negs	r0, r0
 8001006:	183d      	adds	r5, r7, r0
 8001008:	46a8      	mov	r8, r5
 800100a:	4693      	mov	fp, r2
 800100c:	4249      	negs	r1, r1
 800100e:	468a      	mov	sl, r1
 8001010:	44c3      	add	fp, r8
 8001012:	429f      	cmp	r7, r3
 8001014:	41bf      	sbcs	r7, r7
 8001016:	4580      	cmp	r8, r0
 8001018:	4180      	sbcs	r0, r0
 800101a:	9b03      	ldr	r3, [sp, #12]
 800101c:	44da      	add	sl, fp
 800101e:	4698      	mov	r8, r3
 8001020:	4653      	mov	r3, sl
 8001022:	4240      	negs	r0, r0
 8001024:	427f      	negs	r7, r7
 8001026:	4307      	orrs	r7, r0
 8001028:	0c24      	lsrs	r4, r4, #16
 800102a:	4593      	cmp	fp, r2
 800102c:	4192      	sbcs	r2, r2
 800102e:	458a      	cmp	sl, r1
 8001030:	4189      	sbcs	r1, r1
 8001032:	193f      	adds	r7, r7, r4
 8001034:	0ddc      	lsrs	r4, r3, #23
 8001036:	9b04      	ldr	r3, [sp, #16]
 8001038:	0275      	lsls	r5, r6, #9
 800103a:	431d      	orrs	r5, r3
 800103c:	1e68      	subs	r0, r5, #1
 800103e:	4185      	sbcs	r5, r0
 8001040:	4653      	mov	r3, sl
 8001042:	4252      	negs	r2, r2
 8001044:	4249      	negs	r1, r1
 8001046:	430a      	orrs	r2, r1
 8001048:	18bf      	adds	r7, r7, r2
 800104a:	4447      	add	r7, r8
 800104c:	0df6      	lsrs	r6, r6, #23
 800104e:	027f      	lsls	r7, r7, #9
 8001050:	4335      	orrs	r5, r6
 8001052:	025a      	lsls	r2, r3, #9
 8001054:	433c      	orrs	r4, r7
 8001056:	4315      	orrs	r5, r2
 8001058:	01fb      	lsls	r3, r7, #7
 800105a:	d400      	bmi.n	800105e <__aeabi_dmul+0x2fe>
 800105c:	e0c1      	b.n	80011e2 <__aeabi_dmul+0x482>
 800105e:	2101      	movs	r1, #1
 8001060:	086a      	lsrs	r2, r5, #1
 8001062:	400d      	ands	r5, r1
 8001064:	4315      	orrs	r5, r2
 8001066:	07e2      	lsls	r2, r4, #31
 8001068:	4315      	orrs	r5, r2
 800106a:	0864      	lsrs	r4, r4, #1
 800106c:	4926      	ldr	r1, [pc, #152]	; (8001108 <__aeabi_dmul+0x3a8>)
 800106e:	4461      	add	r1, ip
 8001070:	2900      	cmp	r1, #0
 8001072:	dd56      	ble.n	8001122 <__aeabi_dmul+0x3c2>
 8001074:	076b      	lsls	r3, r5, #29
 8001076:	d009      	beq.n	800108c <__aeabi_dmul+0x32c>
 8001078:	220f      	movs	r2, #15
 800107a:	402a      	ands	r2, r5
 800107c:	2a04      	cmp	r2, #4
 800107e:	d005      	beq.n	800108c <__aeabi_dmul+0x32c>
 8001080:	1d2a      	adds	r2, r5, #4
 8001082:	42aa      	cmp	r2, r5
 8001084:	41ad      	sbcs	r5, r5
 8001086:	426d      	negs	r5, r5
 8001088:	1964      	adds	r4, r4, r5
 800108a:	0015      	movs	r5, r2
 800108c:	01e3      	lsls	r3, r4, #7
 800108e:	d504      	bpl.n	800109a <__aeabi_dmul+0x33a>
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <__aeabi_dmul+0x3ac>)
 8001094:	00c9      	lsls	r1, r1, #3
 8001096:	4014      	ands	r4, r2
 8001098:	4461      	add	r1, ip
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <__aeabi_dmul+0x3b0>)
 800109c:	4291      	cmp	r1, r2
 800109e:	dd00      	ble.n	80010a2 <__aeabi_dmul+0x342>
 80010a0:	e724      	b.n	8000eec <__aeabi_dmul+0x18c>
 80010a2:	0762      	lsls	r2, r4, #29
 80010a4:	08ed      	lsrs	r5, r5, #3
 80010a6:	0264      	lsls	r4, r4, #9
 80010a8:	0549      	lsls	r1, r1, #21
 80010aa:	4315      	orrs	r5, r2
 80010ac:	0b24      	lsrs	r4, r4, #12
 80010ae:	0d4a      	lsrs	r2, r1, #21
 80010b0:	e6c6      	b.n	8000e40 <__aeabi_dmul+0xe0>
 80010b2:	9701      	str	r7, [sp, #4]
 80010b4:	e6b8      	b.n	8000e28 <__aeabi_dmul+0xc8>
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <__aeabi_dmul+0x398>)
 80010b8:	2003      	movs	r0, #3
 80010ba:	4694      	mov	ip, r2
 80010bc:	4463      	add	r3, ip
 80010be:	464a      	mov	r2, r9
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2303      	movs	r3, #3
 80010c4:	431a      	orrs	r2, r3
 80010c6:	4691      	mov	r9, r2
 80010c8:	4652      	mov	r2, sl
 80010ca:	e68a      	b.n	8000de2 <__aeabi_dmul+0x82>
 80010cc:	4649      	mov	r1, r9
 80010ce:	2301      	movs	r3, #1
 80010d0:	4319      	orrs	r1, r3
 80010d2:	4689      	mov	r9, r1
 80010d4:	2600      	movs	r6, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	e683      	b.n	8000de2 <__aeabi_dmul+0x82>
 80010da:	220c      	movs	r2, #12
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2303      	movs	r3, #3
 80010e0:	0005      	movs	r5, r0
 80010e2:	4691      	mov	r9, r2
 80010e4:	469b      	mov	fp, r3
 80010e6:	e65e      	b.n	8000da6 <__aeabi_dmul+0x46>
 80010e8:	2304      	movs	r3, #4
 80010ea:	4699      	mov	r9, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	2400      	movs	r4, #0
 80010f4:	469b      	mov	fp, r3
 80010f6:	e656      	b.n	8000da6 <__aeabi_dmul+0x46>
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	fffffc01 	.word	0xfffffc01
 8001100:	08005600 	.word	0x08005600
 8001104:	fffffc0d 	.word	0xfffffc0d
 8001108:	000003ff 	.word	0x000003ff
 800110c:	feffffff 	.word	0xfeffffff
 8001110:	000007fe 	.word	0x000007fe
 8001114:	2300      	movs	r3, #0
 8001116:	2480      	movs	r4, #128	; 0x80
 8001118:	2500      	movs	r5, #0
 800111a:	4a44      	ldr	r2, [pc, #272]	; (800122c <__aeabi_dmul+0x4cc>)
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	0324      	lsls	r4, r4, #12
 8001120:	e68e      	b.n	8000e40 <__aeabi_dmul+0xe0>
 8001122:	2001      	movs	r0, #1
 8001124:	1a40      	subs	r0, r0, r1
 8001126:	2838      	cmp	r0, #56	; 0x38
 8001128:	dd00      	ble.n	800112c <__aeabi_dmul+0x3cc>
 800112a:	e686      	b.n	8000e3a <__aeabi_dmul+0xda>
 800112c:	281f      	cmp	r0, #31
 800112e:	dd5b      	ble.n	80011e8 <__aeabi_dmul+0x488>
 8001130:	221f      	movs	r2, #31
 8001132:	0023      	movs	r3, r4
 8001134:	4252      	negs	r2, r2
 8001136:	1a51      	subs	r1, r2, r1
 8001138:	40cb      	lsrs	r3, r1
 800113a:	0019      	movs	r1, r3
 800113c:	2820      	cmp	r0, #32
 800113e:	d003      	beq.n	8001148 <__aeabi_dmul+0x3e8>
 8001140:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <__aeabi_dmul+0x4d0>)
 8001142:	4462      	add	r2, ip
 8001144:	4094      	lsls	r4, r2
 8001146:	4325      	orrs	r5, r4
 8001148:	1e6a      	subs	r2, r5, #1
 800114a:	4195      	sbcs	r5, r2
 800114c:	002a      	movs	r2, r5
 800114e:	430a      	orrs	r2, r1
 8001150:	2107      	movs	r1, #7
 8001152:	000d      	movs	r5, r1
 8001154:	2400      	movs	r4, #0
 8001156:	4015      	ands	r5, r2
 8001158:	4211      	tst	r1, r2
 800115a:	d05b      	beq.n	8001214 <__aeabi_dmul+0x4b4>
 800115c:	210f      	movs	r1, #15
 800115e:	2400      	movs	r4, #0
 8001160:	4011      	ands	r1, r2
 8001162:	2904      	cmp	r1, #4
 8001164:	d053      	beq.n	800120e <__aeabi_dmul+0x4ae>
 8001166:	1d11      	adds	r1, r2, #4
 8001168:	4291      	cmp	r1, r2
 800116a:	4192      	sbcs	r2, r2
 800116c:	4252      	negs	r2, r2
 800116e:	18a4      	adds	r4, r4, r2
 8001170:	000a      	movs	r2, r1
 8001172:	0223      	lsls	r3, r4, #8
 8001174:	d54b      	bpl.n	800120e <__aeabi_dmul+0x4ae>
 8001176:	2201      	movs	r2, #1
 8001178:	2400      	movs	r4, #0
 800117a:	2500      	movs	r5, #0
 800117c:	e660      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	031b      	lsls	r3, r3, #12
 8001182:	421c      	tst	r4, r3
 8001184:	d009      	beq.n	800119a <__aeabi_dmul+0x43a>
 8001186:	421e      	tst	r6, r3
 8001188:	d107      	bne.n	800119a <__aeabi_dmul+0x43a>
 800118a:	4333      	orrs	r3, r6
 800118c:	031c      	lsls	r4, r3, #12
 800118e:	4643      	mov	r3, r8
 8001190:	0015      	movs	r5, r2
 8001192:	0b24      	lsrs	r4, r4, #12
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <__aeabi_dmul+0x4cc>)
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	e652      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	0312      	lsls	r2, r2, #12
 800119e:	4314      	orrs	r4, r2
 80011a0:	0324      	lsls	r4, r4, #12
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <__aeabi_dmul+0x4cc>)
 80011a4:	0b24      	lsrs	r4, r4, #12
 80011a6:	9701      	str	r7, [sp, #4]
 80011a8:	e64a      	b.n	8000e40 <__aeabi_dmul+0xe0>
 80011aa:	f000 f8fd 	bl	80013a8 <__clzsi2>
 80011ae:	0003      	movs	r3, r0
 80011b0:	001a      	movs	r2, r3
 80011b2:	3215      	adds	r2, #21
 80011b4:	3020      	adds	r0, #32
 80011b6:	2a1c      	cmp	r2, #28
 80011b8:	dc00      	bgt.n	80011bc <__aeabi_dmul+0x45c>
 80011ba:	e684      	b.n	8000ec6 <__aeabi_dmul+0x166>
 80011bc:	4656      	mov	r6, sl
 80011be:	3b08      	subs	r3, #8
 80011c0:	2200      	movs	r2, #0
 80011c2:	409e      	lsls	r6, r3
 80011c4:	e689      	b.n	8000eda <__aeabi_dmul+0x17a>
 80011c6:	f000 f8ef 	bl	80013a8 <__clzsi2>
 80011ca:	0001      	movs	r1, r0
 80011cc:	0002      	movs	r2, r0
 80011ce:	3115      	adds	r1, #21
 80011d0:	3220      	adds	r2, #32
 80011d2:	291c      	cmp	r1, #28
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dmul+0x478>
 80011d6:	e64e      	b.n	8000e76 <__aeabi_dmul+0x116>
 80011d8:	0034      	movs	r4, r6
 80011da:	3808      	subs	r0, #8
 80011dc:	2500      	movs	r5, #0
 80011de:	4084      	lsls	r4, r0
 80011e0:	e653      	b.n	8000e8a <__aeabi_dmul+0x12a>
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	469c      	mov	ip, r3
 80011e6:	e741      	b.n	800106c <__aeabi_dmul+0x30c>
 80011e8:	4912      	ldr	r1, [pc, #72]	; (8001234 <__aeabi_dmul+0x4d4>)
 80011ea:	0022      	movs	r2, r4
 80011ec:	4461      	add	r1, ip
 80011ee:	002e      	movs	r6, r5
 80011f0:	408d      	lsls	r5, r1
 80011f2:	408a      	lsls	r2, r1
 80011f4:	40c6      	lsrs	r6, r0
 80011f6:	1e69      	subs	r1, r5, #1
 80011f8:	418d      	sbcs	r5, r1
 80011fa:	4332      	orrs	r2, r6
 80011fc:	432a      	orrs	r2, r5
 80011fe:	40c4      	lsrs	r4, r0
 8001200:	0753      	lsls	r3, r2, #29
 8001202:	d0b6      	beq.n	8001172 <__aeabi_dmul+0x412>
 8001204:	210f      	movs	r1, #15
 8001206:	4011      	ands	r1, r2
 8001208:	2904      	cmp	r1, #4
 800120a:	d1ac      	bne.n	8001166 <__aeabi_dmul+0x406>
 800120c:	e7b1      	b.n	8001172 <__aeabi_dmul+0x412>
 800120e:	0765      	lsls	r5, r4, #29
 8001210:	0264      	lsls	r4, r4, #9
 8001212:	0b24      	lsrs	r4, r4, #12
 8001214:	08d2      	lsrs	r2, r2, #3
 8001216:	4315      	orrs	r5, r2
 8001218:	2200      	movs	r2, #0
 800121a:	e611      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0312      	lsls	r2, r2, #12
 8001220:	4314      	orrs	r4, r2
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	4a01      	ldr	r2, [pc, #4]	; (800122c <__aeabi_dmul+0x4cc>)
 8001226:	0b24      	lsrs	r4, r4, #12
 8001228:	e60a      	b.n	8000e40 <__aeabi_dmul+0xe0>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	000007ff 	.word	0x000007ff
 8001230:	0000043e 	.word	0x0000043e
 8001234:	0000041e 	.word	0x0000041e

08001238 <__aeabi_i2d>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	2800      	cmp	r0, #0
 800123c:	d016      	beq.n	800126c <__aeabi_i2d+0x34>
 800123e:	17c3      	asrs	r3, r0, #31
 8001240:	18c5      	adds	r5, r0, r3
 8001242:	405d      	eors	r5, r3
 8001244:	0fc4      	lsrs	r4, r0, #31
 8001246:	0028      	movs	r0, r5
 8001248:	f000 f8ae 	bl	80013a8 <__clzsi2>
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <__aeabi_i2d+0x5c>)
 800124e:	1a12      	subs	r2, r2, r0
 8001250:	280a      	cmp	r0, #10
 8001252:	dc16      	bgt.n	8001282 <__aeabi_i2d+0x4a>
 8001254:	0003      	movs	r3, r0
 8001256:	002e      	movs	r6, r5
 8001258:	3315      	adds	r3, #21
 800125a:	409e      	lsls	r6, r3
 800125c:	230b      	movs	r3, #11
 800125e:	1a18      	subs	r0, r3, r0
 8001260:	40c5      	lsrs	r5, r0
 8001262:	0553      	lsls	r3, r2, #21
 8001264:	032d      	lsls	r5, r5, #12
 8001266:	0b2d      	lsrs	r5, r5, #12
 8001268:	0d5b      	lsrs	r3, r3, #21
 800126a:	e003      	b.n	8001274 <__aeabi_i2d+0x3c>
 800126c:	2400      	movs	r4, #0
 800126e:	2300      	movs	r3, #0
 8001270:	2500      	movs	r5, #0
 8001272:	2600      	movs	r6, #0
 8001274:	051b      	lsls	r3, r3, #20
 8001276:	432b      	orrs	r3, r5
 8001278:	07e4      	lsls	r4, r4, #31
 800127a:	4323      	orrs	r3, r4
 800127c:	0030      	movs	r0, r6
 800127e:	0019      	movs	r1, r3
 8001280:	bd70      	pop	{r4, r5, r6, pc}
 8001282:	380b      	subs	r0, #11
 8001284:	4085      	lsls	r5, r0
 8001286:	0553      	lsls	r3, r2, #21
 8001288:	032d      	lsls	r5, r5, #12
 800128a:	2600      	movs	r6, #0
 800128c:	0b2d      	lsrs	r5, r5, #12
 800128e:	0d5b      	lsrs	r3, r3, #21
 8001290:	e7f0      	b.n	8001274 <__aeabi_i2d+0x3c>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	0000041e 	.word	0x0000041e

08001298 <__aeabi_d2f>:
 8001298:	0002      	movs	r2, r0
 800129a:	004b      	lsls	r3, r1, #1
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	0308      	lsls	r0, r1, #12
 80012a0:	0d5b      	lsrs	r3, r3, #21
 80012a2:	4e3d      	ldr	r6, [pc, #244]	; (8001398 <__aeabi_d2f+0x100>)
 80012a4:	0fcc      	lsrs	r4, r1, #31
 80012a6:	0a40      	lsrs	r0, r0, #9
 80012a8:	0f51      	lsrs	r1, r2, #29
 80012aa:	1c5f      	adds	r7, r3, #1
 80012ac:	4308      	orrs	r0, r1
 80012ae:	00d5      	lsls	r5, r2, #3
 80012b0:	4237      	tst	r7, r6
 80012b2:	d00a      	beq.n	80012ca <__aeabi_d2f+0x32>
 80012b4:	4939      	ldr	r1, [pc, #228]	; (800139c <__aeabi_d2f+0x104>)
 80012b6:	185e      	adds	r6, r3, r1
 80012b8:	2efe      	cmp	r6, #254	; 0xfe
 80012ba:	dd16      	ble.n	80012ea <__aeabi_d2f+0x52>
 80012bc:	23ff      	movs	r3, #255	; 0xff
 80012be:	2100      	movs	r1, #0
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	430b      	orrs	r3, r1
 80012c4:	07e0      	lsls	r0, r4, #31
 80012c6:	4318      	orrs	r0, r3
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <__aeabi_d2f+0x44>
 80012ce:	4328      	orrs	r0, r5
 80012d0:	d027      	beq.n	8001322 <__aeabi_d2f+0x8a>
 80012d2:	2105      	movs	r1, #5
 80012d4:	0189      	lsls	r1, r1, #6
 80012d6:	0a49      	lsrs	r1, r1, #9
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e7f1      	b.n	80012c0 <__aeabi_d2f+0x28>
 80012dc:	4305      	orrs	r5, r0
 80012de:	d0ed      	beq.n	80012bc <__aeabi_d2f+0x24>
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	03c9      	lsls	r1, r1, #15
 80012e4:	23ff      	movs	r3, #255	; 0xff
 80012e6:	4301      	orrs	r1, r0
 80012e8:	e7ea      	b.n	80012c0 <__aeabi_d2f+0x28>
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	dd1c      	ble.n	8001328 <__aeabi_d2f+0x90>
 80012ee:	0192      	lsls	r2, r2, #6
 80012f0:	0011      	movs	r1, r2
 80012f2:	1e4a      	subs	r2, r1, #1
 80012f4:	4191      	sbcs	r1, r2
 80012f6:	00c0      	lsls	r0, r0, #3
 80012f8:	0f6d      	lsrs	r5, r5, #29
 80012fa:	4301      	orrs	r1, r0
 80012fc:	4329      	orrs	r1, r5
 80012fe:	074b      	lsls	r3, r1, #29
 8001300:	d048      	beq.n	8001394 <__aeabi_d2f+0xfc>
 8001302:	230f      	movs	r3, #15
 8001304:	400b      	ands	r3, r1
 8001306:	2b04      	cmp	r3, #4
 8001308:	d000      	beq.n	800130c <__aeabi_d2f+0x74>
 800130a:	3104      	adds	r1, #4
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	04db      	lsls	r3, r3, #19
 8001310:	400b      	ands	r3, r1
 8001312:	d03f      	beq.n	8001394 <__aeabi_d2f+0xfc>
 8001314:	1c72      	adds	r2, r6, #1
 8001316:	2efe      	cmp	r6, #254	; 0xfe
 8001318:	d0d0      	beq.n	80012bc <__aeabi_d2f+0x24>
 800131a:	0189      	lsls	r1, r1, #6
 800131c:	0a49      	lsrs	r1, r1, #9
 800131e:	b2d3      	uxtb	r3, r2
 8001320:	e7ce      	b.n	80012c0 <__aeabi_d2f+0x28>
 8001322:	2300      	movs	r3, #0
 8001324:	2100      	movs	r1, #0
 8001326:	e7cb      	b.n	80012c0 <__aeabi_d2f+0x28>
 8001328:	0032      	movs	r2, r6
 800132a:	3217      	adds	r2, #23
 800132c:	db22      	blt.n	8001374 <__aeabi_d2f+0xdc>
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	221e      	movs	r2, #30
 8001332:	0409      	lsls	r1, r1, #16
 8001334:	4308      	orrs	r0, r1
 8001336:	1b92      	subs	r2, r2, r6
 8001338:	2a1f      	cmp	r2, #31
 800133a:	dd1d      	ble.n	8001378 <__aeabi_d2f+0xe0>
 800133c:	2102      	movs	r1, #2
 800133e:	4249      	negs	r1, r1
 8001340:	1b8e      	subs	r6, r1, r6
 8001342:	0001      	movs	r1, r0
 8001344:	40f1      	lsrs	r1, r6
 8001346:	000e      	movs	r6, r1
 8001348:	2a20      	cmp	r2, #32
 800134a:	d004      	beq.n	8001356 <__aeabi_d2f+0xbe>
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <__aeabi_d2f+0x108>)
 800134e:	4694      	mov	ip, r2
 8001350:	4463      	add	r3, ip
 8001352:	4098      	lsls	r0, r3
 8001354:	4305      	orrs	r5, r0
 8001356:	0029      	movs	r1, r5
 8001358:	1e4d      	subs	r5, r1, #1
 800135a:	41a9      	sbcs	r1, r5
 800135c:	4331      	orrs	r1, r6
 800135e:	2600      	movs	r6, #0
 8001360:	074b      	lsls	r3, r1, #29
 8001362:	d1ce      	bne.n	8001302 <__aeabi_d2f+0x6a>
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	000b      	movs	r3, r1
 8001368:	04c0      	lsls	r0, r0, #19
 800136a:	2201      	movs	r2, #1
 800136c:	4003      	ands	r3, r0
 800136e:	4201      	tst	r1, r0
 8001370:	d1d3      	bne.n	800131a <__aeabi_d2f+0x82>
 8001372:	e7af      	b.n	80012d4 <__aeabi_d2f+0x3c>
 8001374:	2300      	movs	r3, #0
 8001376:	e7ac      	b.n	80012d2 <__aeabi_d2f+0x3a>
 8001378:	490a      	ldr	r1, [pc, #40]	; (80013a4 <__aeabi_d2f+0x10c>)
 800137a:	468c      	mov	ip, r1
 800137c:	0029      	movs	r1, r5
 800137e:	4463      	add	r3, ip
 8001380:	40d1      	lsrs	r1, r2
 8001382:	409d      	lsls	r5, r3
 8001384:	000a      	movs	r2, r1
 8001386:	0029      	movs	r1, r5
 8001388:	4098      	lsls	r0, r3
 800138a:	1e4d      	subs	r5, r1, #1
 800138c:	41a9      	sbcs	r1, r5
 800138e:	4301      	orrs	r1, r0
 8001390:	4311      	orrs	r1, r2
 8001392:	e7e4      	b.n	800135e <__aeabi_d2f+0xc6>
 8001394:	0033      	movs	r3, r6
 8001396:	e79d      	b.n	80012d4 <__aeabi_d2f+0x3c>
 8001398:	000007fe 	.word	0x000007fe
 800139c:	fffffc80 	.word	0xfffffc80
 80013a0:	fffffca2 	.word	0xfffffca2
 80013a4:	fffffc82 	.word	0xfffffc82

080013a8 <__clzsi2>:
 80013a8:	211c      	movs	r1, #28
 80013aa:	2301      	movs	r3, #1
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	4298      	cmp	r0, r3
 80013b0:	d301      	bcc.n	80013b6 <__clzsi2+0xe>
 80013b2:	0c00      	lsrs	r0, r0, #16
 80013b4:	3910      	subs	r1, #16
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	4298      	cmp	r0, r3
 80013ba:	d301      	bcc.n	80013c0 <__clzsi2+0x18>
 80013bc:	0a00      	lsrs	r0, r0, #8
 80013be:	3908      	subs	r1, #8
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	4298      	cmp	r0, r3
 80013c4:	d301      	bcc.n	80013ca <__clzsi2+0x22>
 80013c6:	0900      	lsrs	r0, r0, #4
 80013c8:	3904      	subs	r1, #4
 80013ca:	a202      	add	r2, pc, #8	; (adr r2, 80013d4 <__clzsi2+0x2c>)
 80013cc:	5c10      	ldrb	r0, [r2, r0]
 80013ce:	1840      	adds	r0, r0, r1
 80013d0:	4770      	bx	lr
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	02020304 	.word	0x02020304
 80013d8:	01010101 	.word	0x01010101
	...

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	b08f      	sub	sp, #60	; 0x3c
 80013e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	//=========================MPU9250
	// Registers
	uint8_t IMUDevAddr 				= 0xd0;
 80013ea:	2427      	movs	r4, #39	; 0x27
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	22d0      	movs	r2, #208	; 0xd0
 80013f0:	701a      	strb	r2, [r3, #0]
	uint8_t PWR_MGMT_1[2] 			= {0x6b, 0b00100000};	// or 4
 80013f2:	2524      	movs	r5, #36	; 0x24
 80013f4:	197b      	adds	r3, r7, r5
 80013f6:	4afc      	ldr	r2, [pc, #1008]	; (80017e8 <main+0x404>)
 80013f8:	801a      	strh	r2, [r3, #0]
	uint8_t PWR_MGMT_2[2] 			= {0x6c, 0b00000000};	// 0 to enable all or 255 to disable all
 80013fa:	2620      	movs	r6, #32
 80013fc:	19bb      	adds	r3, r7, r6
 80013fe:	226c      	movs	r2, #108	; 0x6c
 8001400:	801a      	strh	r2, [r3, #0]
	uint8_t WHO_AM_I 				= 0x75;
 8001402:	231f      	movs	r3, #31
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2275      	movs	r2, #117	; 0x75
 8001408:	701a      	strb	r2, [r3, #0]
	uint8_t LP_ACCEL_ODR[2] 		= {0x1e, 0b00001000}; 	// 8 = output frequency 62.50Hz
 800140a:	221c      	movs	r2, #28
 800140c:	18bb      	adds	r3, r7, r2
 800140e:	4af7      	ldr	r2, [pc, #988]	; (80017ec <main+0x408>)
 8001410:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_CONFIG[2] 		= {0x1c, 0x0}; 			// 0x0 for 2g, 0x8 for 4g, 0x10 for 8g,0x18 for 16g
 8001412:	2118      	movs	r1, #24
 8001414:	187b      	adds	r3, r7, r1
 8001416:	221c      	movs	r2, #28
 8001418:	801a      	strh	r2, [r3, #0]
	uint8_t ACCEL_XOUT_L 			= 0x3c;
 800141a:	2017      	movs	r0, #23
 800141c:	183b      	adds	r3, r7, r0
 800141e:	223c      	movs	r2, #60	; 0x3c
 8001420:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_XOUT_H 			= 0x3b;
 8001422:	2016      	movs	r0, #22
 8001424:	183b      	adds	r3, r7, r0
 8001426:	223b      	movs	r2, #59	; 0x3b
 8001428:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_L 			= 0x3e;
 800142a:	2015      	movs	r0, #21
 800142c:	183b      	adds	r3, r7, r0
 800142e:	223e      	movs	r2, #62	; 0x3e
 8001430:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_YOUT_H 			= 0x3d;
 8001432:	2014      	movs	r0, #20
 8001434:	183b      	adds	r3, r7, r0
 8001436:	223d      	movs	r2, #61	; 0x3d
 8001438:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_L 			= 0x40;
 800143a:	2013      	movs	r0, #19
 800143c:	183b      	adds	r3, r7, r0
 800143e:	2240      	movs	r2, #64	; 0x40
 8001440:	701a      	strb	r2, [r3, #0]
	uint8_t ACCEL_ZOUT_H 			= 0x3f;
 8001442:	2012      	movs	r0, #18
 8001444:	183b      	adds	r3, r7, r0
 8001446:	223f      	movs	r2, #63	; 0x3f
 8001448:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f001 fbbd 	bl	8002bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f9f7 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001452:	f000 fb39 	bl	8001ac8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001456:	f000 fa59 	bl	800190c <MX_I2C1_Init>
  MX_SPI1_Init();
 800145a:	f000 fa97 	bl	800198c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800145e:	f000 fad3 	bl	8001a08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001462:	f000 fb01 	bl	8001a68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //=========================MPU9250
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_1, sizeof(PWR_MGMT_1), 10);
 8001466:	193b      	adds	r3, r7, r4
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b299      	uxth	r1, r3
 800146c:	197a      	adds	r2, r7, r5
 800146e:	48e0      	ldr	r0, [pc, #896]	; (80017f0 <main+0x40c>)
 8001470:	230a      	movs	r3, #10
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2302      	movs	r3, #2
 8001476:	f001 feff 	bl	8003278 <HAL_I2C_Master_Transmit>
 800147a:	0003      	movs	r3, r0
 800147c:	001a      	movs	r2, r3
 800147e:	4bdd      	ldr	r3, [pc, #884]	; (80017f4 <main+0x410>)
 8001480:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8001482:	193b      	adds	r3, r7, r4
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b299      	uxth	r1, r3
 8001488:	4adb      	ldr	r2, [pc, #876]	; (80017f8 <main+0x414>)
 800148a:	48d9      	ldr	r0, [pc, #868]	; (80017f0 <main+0x40c>)
 800148c:	230a      	movs	r3, #10
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	f001 fff9 	bl	8003488 <HAL_I2C_Master_Receive>
 8001496:	0003      	movs	r3, r0
 8001498:	001a      	movs	r2, r3
 800149a:	4bd6      	ldr	r3, [pc, #856]	; (80017f4 <main+0x410>)
 800149c:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800149e:	200a      	movs	r0, #10
 80014a0:	f001 fbf6 	bl	8002c90 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, PWR_MGMT_2, sizeof(PWR_MGMT_2), 10);
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b299      	uxth	r1, r3
 80014aa:	19ba      	adds	r2, r7, r6
 80014ac:	48d0      	ldr	r0, [pc, #832]	; (80017f0 <main+0x40c>)
 80014ae:	230a      	movs	r3, #10
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2302      	movs	r3, #2
 80014b4:	f001 fee0 	bl	8003278 <HAL_I2C_Master_Transmit>
 80014b8:	0003      	movs	r3, r0
 80014ba:	001a      	movs	r2, r3
 80014bc:	4bcd      	ldr	r3, [pc, #820]	; (80017f4 <main+0x410>)
 80014be:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b299      	uxth	r1, r3
 80014c6:	4acc      	ldr	r2, [pc, #816]	; (80017f8 <main+0x414>)
 80014c8:	48c9      	ldr	r0, [pc, #804]	; (80017f0 <main+0x40c>)
 80014ca:	230a      	movs	r3, #10
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	f001 ffda 	bl	8003488 <HAL_I2C_Master_Receive>
 80014d4:	0003      	movs	r3, r0
 80014d6:	001a      	movs	r2, r3
 80014d8:	4bc6      	ldr	r3, [pc, #792]	; (80017f4 <main+0x410>)
 80014da:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 80014dc:	200a      	movs	r0, #10
 80014de:	f001 fbd7 	bl	8002c90 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &WHO_AM_I, sizeof(WHO_AM_I), 10);
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b299      	uxth	r1, r3
 80014e8:	231f      	movs	r3, #31
 80014ea:	18fa      	adds	r2, r7, r3
 80014ec:	48c0      	ldr	r0, [pc, #768]	; (80017f0 <main+0x40c>)
 80014ee:	230a      	movs	r3, #10
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	f001 fec0 	bl	8003278 <HAL_I2C_Master_Transmit>
 80014f8:	0003      	movs	r3, r0
 80014fa:	001a      	movs	r2, r3
 80014fc:	4bbd      	ldr	r3, [pc, #756]	; (80017f4 <main+0x410>)
 80014fe:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8001500:	193b      	adds	r3, r7, r4
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b299      	uxth	r1, r3
 8001506:	4abc      	ldr	r2, [pc, #752]	; (80017f8 <main+0x414>)
 8001508:	48b9      	ldr	r0, [pc, #740]	; (80017f0 <main+0x40c>)
 800150a:	230a      	movs	r3, #10
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	f001 ffba 	bl	8003488 <HAL_I2C_Master_Receive>
 8001514:	0003      	movs	r3, r0
 8001516:	001a      	movs	r2, r3
 8001518:	4bb6      	ldr	r3, [pc, #728]	; (80017f4 <main+0x410>)
 800151a:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f001 fbb7 	bl	8002c90 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, LP_ACCEL_ODR, sizeof(LP_ACCEL_ODR), 10);
 8001522:	193b      	adds	r3, r7, r4
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b299      	uxth	r1, r3
 8001528:	221c      	movs	r2, #28
 800152a:	18ba      	adds	r2, r7, r2
 800152c:	48b0      	ldr	r0, [pc, #704]	; (80017f0 <main+0x40c>)
 800152e:	230a      	movs	r3, #10
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2302      	movs	r3, #2
 8001534:	f001 fea0 	bl	8003278 <HAL_I2C_Master_Transmit>
 8001538:	0003      	movs	r3, r0
 800153a:	001a      	movs	r2, r3
 800153c:	4bad      	ldr	r3, [pc, #692]	; (80017f4 <main+0x410>)
 800153e:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8001540:	193b      	adds	r3, r7, r4
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b299      	uxth	r1, r3
 8001546:	4aac      	ldr	r2, [pc, #688]	; (80017f8 <main+0x414>)
 8001548:	48a9      	ldr	r0, [pc, #676]	; (80017f0 <main+0x40c>)
 800154a:	230a      	movs	r3, #10
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	f001 ff9a 	bl	8003488 <HAL_I2C_Master_Receive>
 8001554:	0003      	movs	r3, r0
 8001556:	001a      	movs	r2, r3
 8001558:	4ba6      	ldr	r3, [pc, #664]	; (80017f4 <main+0x410>)
 800155a:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800155c:	200a      	movs	r0, #10
 800155e:	f001 fb97 	bl	8002c90 <HAL_Delay>
  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, ACCEL_CONFIG, sizeof(ACCEL_CONFIG), 10);
 8001562:	193b      	adds	r3, r7, r4
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b299      	uxth	r1, r3
 8001568:	2318      	movs	r3, #24
 800156a:	18fa      	adds	r2, r7, r3
 800156c:	48a0      	ldr	r0, [pc, #640]	; (80017f0 <main+0x40c>)
 800156e:	230a      	movs	r3, #10
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2302      	movs	r3, #2
 8001574:	f001 fe80 	bl	8003278 <HAL_I2C_Master_Transmit>
 8001578:	0003      	movs	r3, r0
 800157a:	001a      	movs	r2, r3
 800157c:	4b9d      	ldr	r3, [pc, #628]	; (80017f4 <main+0x410>)
 800157e:	701a      	strb	r2, [r3, #0]
  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 10);
 8001580:	193b      	adds	r3, r7, r4
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b299      	uxth	r1, r3
 8001586:	4a9c      	ldr	r2, [pc, #624]	; (80017f8 <main+0x414>)
 8001588:	4899      	ldr	r0, [pc, #612]	; (80017f0 <main+0x40c>)
 800158a:	230a      	movs	r3, #10
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	f001 ff7a 	bl	8003488 <HAL_I2C_Master_Receive>
 8001594:	0003      	movs	r3, r0
 8001596:	001a      	movs	r2, r3
 8001598:	4b96      	ldr	r3, [pc, #600]	; (80017f4 <main+0x410>)
 800159a:	701a      	strb	r2, [r3, #0]
  //=========================MPU9250

  gnssInit();
 800159c:	f000 fe7e 	bl	800229c <gnssInit>
  offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, notInitialValue);
  notInitialValue = 1;
  prevlatlongstructinstance = latlongstructinstance;
  HAL_Delay(1000);
*/
  gsmInit();											// GSM initializer
 80015a0:	f000 ff20 	bl	80023e4 <gsmInit>
  gsmstruct.phoneNumber = "+358443500786";				// Enter number in this format
 80015a4:	4b95      	ldr	r3, [pc, #596]	; (80017fc <main+0x418>)
 80015a6:	4a96      	ldr	r2, [pc, #600]	; (8001800 <main+0x41c>)
 80015a8:	601a      	str	r2, [r3, #0]
  gsmstruct.message		= "Example how to use this";	// Enter message to be send in this format
 80015aa:	4b94      	ldr	r3, [pc, #592]	; (80017fc <main+0x418>)
 80015ac:	4a95      	ldr	r2, [pc, #596]	; (8001804 <main+0x420>)
 80015ae:	605a      	str	r2, [r3, #4]
  sendGsmMessage(gsmstruct);
 80015b0:	4b92      	ldr	r3, [pc, #584]	; (80017fc <main+0x418>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	f000 ffd8 	bl	800256c <sendGsmMessage>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  i2cState = HAL_I2C_GetState(&hi2c1);
 80015bc:	4b8c      	ldr	r3, [pc, #560]	; (80017f0 <main+0x40c>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f002 f86a 	bl	8003698 <HAL_I2C_GetState>
 80015c4:	0003      	movs	r3, r0
 80015c6:	001a      	movs	r2, r3
 80015c8:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <main+0x424>)
 80015ca:	701a      	strb	r2, [r3, #0]

	  //=========================MPU9250
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_L, sizeof(ACCEL_XOUT_L), 10);
 80015cc:	2427      	movs	r4, #39	; 0x27
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b299      	uxth	r1, r3
 80015d4:	2317      	movs	r3, #23
 80015d6:	18fa      	adds	r2, r7, r3
 80015d8:	4885      	ldr	r0, [pc, #532]	; (80017f0 <main+0x40c>)
 80015da:	230a      	movs	r3, #10
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	f001 fe4a 	bl	8003278 <HAL_I2C_Master_Transmit>
 80015e4:	0003      	movs	r3, r0
 80015e6:	001a      	movs	r2, r3
 80015e8:	4b82      	ldr	r3, [pc, #520]	; (80017f4 <main+0x410>)
 80015ea:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b299      	uxth	r1, r3
 80015f2:	4a81      	ldr	r2, [pc, #516]	; (80017f8 <main+0x414>)
 80015f4:	487e      	ldr	r0, [pc, #504]	; (80017f0 <main+0x40c>)
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	f001 ff44 	bl	8003488 <HAL_I2C_Master_Receive>
 8001600:	0003      	movs	r3, r0
 8001602:	001a      	movs	r2, r3
 8001604:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <main+0x410>)
 8001606:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = dataReceiveI2cBuffer;
 8001608:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <main+0x414>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	001a      	movs	r2, r3
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <main+0x428>)
 8001610:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_XOUT_H, sizeof(ACCEL_XOUT_H), 10);
 8001612:	193b      	adds	r3, r7, r4
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b299      	uxth	r1, r3
 8001618:	2316      	movs	r3, #22
 800161a:	18fa      	adds	r2, r7, r3
 800161c:	4874      	ldr	r0, [pc, #464]	; (80017f0 <main+0x40c>)
 800161e:	230a      	movs	r3, #10
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	f001 fe28 	bl	8003278 <HAL_I2C_Master_Transmit>
 8001628:	0003      	movs	r3, r0
 800162a:	001a      	movs	r2, r3
 800162c:	4b71      	ldr	r3, [pc, #452]	; (80017f4 <main+0x410>)
 800162e:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001630:	193b      	adds	r3, r7, r4
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b299      	uxth	r1, r3
 8001636:	4a70      	ldr	r2, [pc, #448]	; (80017f8 <main+0x414>)
 8001638:	486d      	ldr	r0, [pc, #436]	; (80017f0 <main+0x40c>)
 800163a:	2364      	movs	r3, #100	; 0x64
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	f001 ff22 	bl	8003488 <HAL_I2C_Master_Receive>
 8001644:	0003      	movs	r3, r0
 8001646:	001a      	movs	r2, r3
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <main+0x410>)
 800164a:	701a      	strb	r2, [r3, #0]
	  finalXAccValue = finalXAccValue + (dataReceiveI2cBuffer << 8);
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <main+0x414>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	001a      	movs	r2, r3
 8001654:	4b6d      	ldr	r3, [pc, #436]	; (800180c <main+0x428>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	18d2      	adds	r2, r2, r3
 800165a:	4b6c      	ldr	r3, [pc, #432]	; (800180c <main+0x428>)
 800165c:	601a      	str	r2, [r3, #0]
	  finalXAccValueWithOffset = finalXAccValue + 40000;
 800165e:	4b6b      	ldr	r3, [pc, #428]	; (800180c <main+0x428>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4d6b      	ldr	r5, [pc, #428]	; (8001810 <main+0x42c>)
 8001664:	195a      	adds	r2, r3, r5
 8001666:	4b6b      	ldr	r3, [pc, #428]	; (8001814 <main+0x430>)
 8001668:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_L, sizeof(ACCEL_YOUT_L), 10);
 800166a:	193b      	adds	r3, r7, r4
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b299      	uxth	r1, r3
 8001670:	2315      	movs	r3, #21
 8001672:	18fa      	adds	r2, r7, r3
 8001674:	485e      	ldr	r0, [pc, #376]	; (80017f0 <main+0x40c>)
 8001676:	230a      	movs	r3, #10
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	f001 fdfc 	bl	8003278 <HAL_I2C_Master_Transmit>
 8001680:	0003      	movs	r3, r0
 8001682:	001a      	movs	r2, r3
 8001684:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <main+0x410>)
 8001686:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001688:	193b      	adds	r3, r7, r4
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b299      	uxth	r1, r3
 800168e:	4a5a      	ldr	r2, [pc, #360]	; (80017f8 <main+0x414>)
 8001690:	4857      	ldr	r0, [pc, #348]	; (80017f0 <main+0x40c>)
 8001692:	2364      	movs	r3, #100	; 0x64
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2301      	movs	r3, #1
 8001698:	f001 fef6 	bl	8003488 <HAL_I2C_Master_Receive>
 800169c:	0003      	movs	r3, r0
 800169e:	001a      	movs	r2, r3
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <main+0x410>)
 80016a2:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = dataReceiveI2cBuffer;
 80016a4:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <main+0x414>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	001a      	movs	r2, r3
 80016aa:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <main+0x434>)
 80016ac:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_YOUT_H, sizeof(ACCEL_YOUT_H), 10);
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b299      	uxth	r1, r3
 80016b4:	2314      	movs	r3, #20
 80016b6:	18fa      	adds	r2, r7, r3
 80016b8:	484d      	ldr	r0, [pc, #308]	; (80017f0 <main+0x40c>)
 80016ba:	230a      	movs	r3, #10
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	f001 fdda 	bl	8003278 <HAL_I2C_Master_Transmit>
 80016c4:	0003      	movs	r3, r0
 80016c6:	001a      	movs	r2, r3
 80016c8:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <main+0x410>)
 80016ca:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 80016cc:	193b      	adds	r3, r7, r4
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b299      	uxth	r1, r3
 80016d2:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <main+0x414>)
 80016d4:	4846      	ldr	r0, [pc, #280]	; (80017f0 <main+0x40c>)
 80016d6:	2364      	movs	r3, #100	; 0x64
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	f001 fed4 	bl	8003488 <HAL_I2C_Master_Receive>
 80016e0:	0003      	movs	r3, r0
 80016e2:	001a      	movs	r2, r3
 80016e4:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <main+0x410>)
 80016e6:	701a      	strb	r2, [r3, #0]
	  finalYAccValue = finalYAccValue + (dataReceiveI2cBuffer << 8);
 80016e8:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <main+0x414>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	001a      	movs	r2, r3
 80016f0:	4b49      	ldr	r3, [pc, #292]	; (8001818 <main+0x434>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	18d2      	adds	r2, r2, r3
 80016f6:	4b48      	ldr	r3, [pc, #288]	; (8001818 <main+0x434>)
 80016f8:	601a      	str	r2, [r3, #0]
	  finalYAccValueWithOffset = finalYAccValue + 40000;
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <main+0x434>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	195a      	adds	r2, r3, r5
 8001700:	4b46      	ldr	r3, [pc, #280]	; (800181c <main+0x438>)
 8001702:	601a      	str	r2, [r3, #0]

	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_L, sizeof(ACCEL_ZOUT_L), 10);
 8001704:	193b      	adds	r3, r7, r4
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b299      	uxth	r1, r3
 800170a:	2313      	movs	r3, #19
 800170c:	18fa      	adds	r2, r7, r3
 800170e:	4838      	ldr	r0, [pc, #224]	; (80017f0 <main+0x40c>)
 8001710:	230a      	movs	r3, #10
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	f001 fdaf 	bl	8003278 <HAL_I2C_Master_Transmit>
 800171a:	0003      	movs	r3, r0
 800171c:	001a      	movs	r2, r3
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <main+0x410>)
 8001720:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001722:	193b      	adds	r3, r7, r4
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b299      	uxth	r1, r3
 8001728:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <main+0x414>)
 800172a:	4831      	ldr	r0, [pc, #196]	; (80017f0 <main+0x40c>)
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	f001 fea9 	bl	8003488 <HAL_I2C_Master_Receive>
 8001736:	0003      	movs	r3, r0
 8001738:	001a      	movs	r2, r3
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <main+0x410>)
 800173c:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = dataReceiveI2cBuffer;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <main+0x414>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	001a      	movs	r2, r3
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <main+0x43c>)
 8001746:	601a      	str	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Transmit(&hi2c1, IMUDevAddr, &ACCEL_ZOUT_H, sizeof(ACCEL_ZOUT_H), 10);
 8001748:	193b      	adds	r3, r7, r4
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b299      	uxth	r1, r3
 800174e:	2312      	movs	r3, #18
 8001750:	18fa      	adds	r2, r7, r3
 8001752:	4827      	ldr	r0, [pc, #156]	; (80017f0 <main+0x40c>)
 8001754:	230a      	movs	r3, #10
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	f001 fd8d 	bl	8003278 <HAL_I2C_Master_Transmit>
 800175e:	0003      	movs	r3, r0
 8001760:	001a      	movs	r2, r3
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <main+0x410>)
 8001764:	701a      	strb	r2, [r3, #0]
	  i2cStatus = HAL_I2C_Master_Receive(&hi2c1, IMUDevAddr, &dataReceiveI2cBuffer, 1, 100);
 8001766:	193b      	adds	r3, r7, r4
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b299      	uxth	r1, r3
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <main+0x414>)
 800176e:	4820      	ldr	r0, [pc, #128]	; (80017f0 <main+0x40c>)
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	f001 fe87 	bl	8003488 <HAL_I2C_Master_Receive>
 800177a:	0003      	movs	r3, r0
 800177c:	001a      	movs	r2, r3
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <main+0x410>)
 8001780:	701a      	strb	r2, [r3, #0]
	  finalZAccValue = finalZAccValue + (dataReceiveI2cBuffer << 8);
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <main+0x414>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	001a      	movs	r2, r3
 800178a:	4b25      	ldr	r3, [pc, #148]	; (8001820 <main+0x43c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	18d2      	adds	r2, r2, r3
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <main+0x43c>)
 8001792:	601a      	str	r2, [r3, #0]
	  finalZAccValueWithOffset = finalZAccValue + 88000;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <main+0x43c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a22      	ldr	r2, [pc, #136]	; (8001824 <main+0x440>)
 800179a:	189a      	adds	r2, r3, r2
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <main+0x444>)
 800179e:	601a      	str	r2, [r3, #0]
	  //=========================RFID
	  //uartStatus = HAL_UART_Receive(&huart1, receiveUARTData, 14, 100);
	  //=========================RFID

	  //=========================GNSS
	  latlongstructinstance = getLatLongInMeters();
 80017a0:	4c22      	ldr	r4, [pc, #136]	; (800182c <main+0x448>)
 80017a2:	003b      	movs	r3, r7
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 f9ff 	bl	8001ba8 <getLatLongInMeters>
 80017aa:	003a      	movs	r2, r7
 80017ac:	0023      	movs	r3, r4
 80017ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017b0:	c313      	stmia	r3!, {r0, r1, r4}
	  offsetfromhome = getOffsetFromHome(latlongstructinstance, prevlatlongstructinstance, notInitialValue);
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <main+0x44c>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	4c1f      	ldr	r4, [pc, #124]	; (8001834 <main+0x450>)
 80017b8:	46bc      	mov	ip, r7
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <main+0x448>)
 80017bc:	9203      	str	r2, [sp, #12]
 80017be:	491e      	ldr	r1, [pc, #120]	; (8001838 <main+0x454>)
 80017c0:	466a      	mov	r2, sp
 80017c2:	c961      	ldmia	r1!, {r0, r5, r6}
 80017c4:	c261      	stmia	r2!, {r0, r5, r6}
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4660      	mov	r0, ip
 80017ce:	f000 fcfd 	bl	80021cc <getOffsetFromHome>
 80017d2:	003a      	movs	r2, r7
 80017d4:	0023      	movs	r3, r4
 80017d6:	ca03      	ldmia	r2!, {r0, r1}
 80017d8:	c303      	stmia	r3!, {r0, r1}

	  //=========================Debug UART1 (Only debug use)

	  //=========================Debug UART1 (Only debug use)

	  counter = counter +1;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <main+0x458>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <main+0x458>)
 80017e2:	601a      	str	r2, [r3, #0]
	  i2cState = HAL_I2C_GetState(&hi2c1);
 80017e4:	e6ea      	b.n	80015bc <main+0x1d8>
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	0000206b 	.word	0x0000206b
 80017ec:	0000081e 	.word	0x0000081e
 80017f0:	20000160 	.word	0x20000160
 80017f4:	2000015c 	.word	0x2000015c
 80017f8:	200000a8 	.word	0x200000a8
 80017fc:	2000039c 	.word	0x2000039c
 8001800:	080054e0 	.word	0x080054e0
 8001804:	080054f0 	.word	0x080054f0
 8001808:	200003ac 	.word	0x200003ac
 800180c:	20000090 	.word	0x20000090
 8001810:	00009c40 	.word	0x00009c40
 8001814:	20000094 	.word	0x20000094
 8001818:	20000098 	.word	0x20000098
 800181c:	2000009c 	.word	0x2000009c
 8001820:	200000a0 	.word	0x200000a0
 8001824:	000157c0 	.word	0x000157c0
 8001828:	200000a4 	.word	0x200000a4
 800182c:	20000144 	.word	0x20000144
 8001830:	20000142 	.word	0x20000142
 8001834:	20000300 	.word	0x20000300
 8001838:	20000280 	.word	0x20000280
 800183c:	2000008c 	.word	0x2000008c

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b099      	sub	sp, #100	; 0x64
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	242c      	movs	r4, #44	; 0x2c
 8001848:	193b      	adds	r3, r7, r4
 800184a:	0018      	movs	r0, r3
 800184c:	2334      	movs	r3, #52	; 0x34
 800184e:	001a      	movs	r2, r3
 8001850:	2100      	movs	r1, #0
 8001852:	f003 fd81 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001856:	231c      	movs	r3, #28
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	0018      	movs	r0, r3
 800185c:	2310      	movs	r3, #16
 800185e:	001a      	movs	r2, r3
 8001860:	2100      	movs	r1, #0
 8001862:	f003 fd79 	bl	8005358 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	0018      	movs	r0, r3
 800186a:	2318      	movs	r3, #24
 800186c:	001a      	movs	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	f003 fd72 	bl	8005358 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001874:	0021      	movs	r1, r4
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2202      	movs	r2, #2
 800187a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2201      	movs	r2, #1
 8001880:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001882:	187b      	adds	r3, r7, r1
 8001884:	2210      	movs	r2, #16
 8001886:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001888:	187b      	adds	r3, r7, r1
 800188a:	2202      	movs	r2, #2
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800188e:	187b      	adds	r3, r7, r1
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	0212      	lsls	r2, r2, #8
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	0352      	lsls	r2, r2, #13
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	0018      	movs	r0, r3
 80018a8:	f002 f992 	bl	8003bd0 <HAL_RCC_OscConfig>
 80018ac:	1e03      	subs	r3, r0, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80018b0:	f000 ffe0 	bl	8002874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b4:	211c      	movs	r1, #28
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2202      	movs	r2, #2
 80018c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2101      	movs	r1, #1
 80018d2:	0018      	movs	r0, r3
 80018d4:	f002 fd02 	bl	80042dc <HAL_RCC_ClockConfig>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80018dc:	f000 ffca 	bl	8002874 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2221      	movs	r2, #33	; 0x21
 80018e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	0018      	movs	r0, r3
 80018f6:	f002 fe6b 	bl	80045d0 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018fe:	f000 ffb9 	bl	8002874 <Error_Handler>
  }
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b019      	add	sp, #100	; 0x64
 8001908:	bd90      	pop	{r4, r7, pc}
	...

0800190c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_I2C1_Init+0x74>)
 8001912:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <MX_I2C1_Init+0x78>)
 8001914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_I2C1_Init+0x74>)
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <MX_I2C1_Init+0x7c>)
 800191a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_I2C1_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_I2C1_Init+0x74>)
 8001924:	2201      	movs	r2, #1
 8001926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_I2C1_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_I2C1_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_I2C1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_I2C1_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_I2C1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_I2C1_Init+0x74>)
 8001948:	0018      	movs	r0, r3
 800194a:	f001 fbff 	bl	800314c <HAL_I2C_Init>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d001      	beq.n	8001956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001952:	f000 ff8f 	bl	8002874 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <MX_I2C1_Init+0x74>)
 8001958:	2100      	movs	r1, #0
 800195a:	0018      	movs	r0, r3
 800195c:	f002 f8a0 	bl	8003aa0 <HAL_I2CEx_ConfigAnalogFilter>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001964:	f000 ff86 	bl	8002874 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <MX_I2C1_Init+0x74>)
 800196a:	2100      	movs	r1, #0
 800196c:	0018      	movs	r0, r3
 800196e:	f002 f8e3 	bl	8003b38 <HAL_I2CEx_ConfigDigitalFilter>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d001      	beq.n	800197a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001976:	f000 ff7d 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000160 	.word	0x20000160
 8001984:	40005400 	.word	0x40005400
 8001988:	2000090e 	.word	0x2000090e

0800198c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <MX_SPI1_Init+0x74>)
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <MX_SPI1_Init+0x78>)
 8001994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_SPI1_Init+0x74>)
 8001998:	2282      	movs	r2, #130	; 0x82
 800199a:	0052      	lsls	r2, r2, #1
 800199c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019a6:	22e0      	movs	r2, #224	; 0xe0
 80019a8:	00d2      	lsls	r2, r2, #3
 80019aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019c2:	2210      	movs	r2, #16
 80019c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019da:	2207      	movs	r2, #7
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019e6:	2208      	movs	r2, #8
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <MX_SPI1_Init+0x74>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f002 fedd 	bl	80047ac <HAL_SPI_Init>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d001      	beq.n	80019fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019f6:	f000 ff3d 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000298 	.word	0x20000298
 8001a04:	40013000 	.word	0x40013000

08001a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <MX_USART1_UART_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a14:	2296      	movs	r2, #150	; 0x96
 8001a16:	0192      	lsls	r2, r2, #6
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 ff65 	bl	800491c <HAL_UART_Init>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a56:	f000 ff0d 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200001d4 	.word	0x200001d4
 8001a64:	40013800 	.word	0x40013800

08001a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <MX_USART2_UART_Init+0x5c>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a74:	22e1      	movs	r2, #225	; 0xe1
 8001a76:	0252      	lsls	r2, r2, #9
 8001a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001aac:	0018      	movs	r0, r3
 8001aae:	f002 ff35 	bl	800491c <HAL_UART_Init>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ab6:	f000 fedd 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2000030c 	.word	0x2000030c
 8001ac4:	40004400 	.word	0x40004400

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	240c      	movs	r4, #12
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	2314      	movs	r3, #20
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f003 fc3d 	bl	8005358 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	03c9      	lsls	r1, r1, #15
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	03db      	lsls	r3, r3, #15
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0289      	lsls	r1, r1, #10
 8001b04:	430a      	orrs	r2, r1
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	4013      	ands	r3, r2
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	02c9      	lsls	r1, r1, #11
 8001b20:	430a      	orrs	r2, r1
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	02db      	lsls	r3, r3, #11
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b32:	2390      	movs	r3, #144	; 0x90
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f001 fae8 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_GPIO_Init+0xdc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	2108      	movs	r1, #8
 8001b46:	0018      	movs	r0, r3
 8001b48:	f001 fae2 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b4c:	193b      	adds	r3, r7, r4
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	2201      	movs	r2, #1
 8001b56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	193b      	adds	r3, r7, r4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	193a      	adds	r2, r7, r4
 8001b66:	2390      	movs	r3, #144	; 0x90
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f001 f967 	bl	8002e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b72:	0021      	movs	r1, r4
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	2208      	movs	r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <MX_GPIO_Init+0xdc>)
 8001b90:	0019      	movs	r1, r3
 8001b92:	0010      	movs	r0, r2
 8001b94:	f001 f954 	bl	8002e40 <HAL_GPIO_Init>

}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b009      	add	sp, #36	; 0x24
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <getLatLongInMeters>:

/* USER CODE BEGIN 4 */

struct LatLongStruct getLatLongInMeters(void){
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	struct LatLongStruct latlongstruct = {0};	// Stores LatLong metric values
 8001bb0:	2314      	movs	r3, #20
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	001a      	movs	r2, r3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	f003 fbcc 	bl	8005358 <memset>
	HAL_StatusTypeDef uart2Status;				// Status of uart2
	uint8_t AT_CGNSINF[] = "AT+CGNSINF\r";		// Gets data from GNSS
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	4ad2      	ldr	r2, [pc, #840]	; (8001f10 <getLatLongInMeters+0x368>)
 8001bc6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001bc8:	c331      	stmia	r3!, {r0, r4, r5}

    uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSINF, sizeof(AT_CGNSINF), 1000);
 8001bca:	2523      	movs	r5, #35	; 0x23
 8001bcc:	197c      	adds	r4, r7, r5
 8001bce:	23fa      	movs	r3, #250	; 0xfa
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	1879      	adds	r1, r7, r1
 8001bd4:	48cf      	ldr	r0, [pc, #828]	; (8001f14 <getLatLongInMeters+0x36c>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	f002 fef4 	bl	80049c4 <HAL_UART_Transmit>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	7023      	strb	r3, [r4, #0]
    uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 1000);
 8001be0:	197c      	adds	r4, r7, r5
 8001be2:	23fa      	movs	r3, #250	; 0xfa
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	49cc      	ldr	r1, [pc, #816]	; (8001f18 <getLatLongInMeters+0x370>)
 8001be8:	48ca      	ldr	r0, [pc, #808]	; (8001f14 <getLatLongInMeters+0x36c>)
 8001bea:	2296      	movs	r2, #150	; 0x96
 8001bec:	f002 ff94 	bl	8004b18 <HAL_UART_Receive>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10);
 8001bf4:	200a      	movs	r0, #10
 8001bf6:	f001 f84b 	bl	8002c90 <HAL_Delay>

	//dummyBuffer[0]	= "1,1,20150327014838.000,31.221783,60.123456,24.123456,0.28,0.0,1,,1.9,2.2,1.0,,8,4,,,42,,";

	for(int i = 0; i < sizeof(receiveUART2Data); i++){
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bfe:	e097      	b.n	8001d30 <getLatLongInMeters+0x188>
		if(receiveUART2Data[i] == ','){
 8001c00:	4ac5      	ldr	r2, [pc, #788]	; (8001f18 <getLatLongInMeters+0x370>)
 8001c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c04:	18d3      	adds	r3, r2, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b2c      	cmp	r3, #44	; 0x2c
 8001c0a:	d107      	bne.n	8001c1c <getLatLongInMeters+0x74>
			commaElement = i;
 8001c0c:	4bc3      	ldr	r3, [pc, #780]	; (8001f1c <getLatLongInMeters+0x374>)
 8001c0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c10:	601a      	str	r2, [r3, #0]
			counterGNSS++;
 8001c12:	4bc3      	ldr	r3, [pc, #780]	; (8001f20 <getLatLongInMeters+0x378>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	4bc1      	ldr	r3, [pc, #772]	; (8001f20 <getLatLongInMeters+0x378>)
 8001c1a:	601a      	str	r2, [r3, #0]
		}
		if(counterGNSS == 1){
 8001c1c:	4bc0      	ldr	r3, [pc, #768]	; (8001f20 <getLatLongInMeters+0x378>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d114      	bne.n	8001c4e <getLatLongInMeters+0xa6>
			gnssFixElement = i;
 8001c24:	4bbf      	ldr	r3, [pc, #764]	; (8001f24 <getLatLongInMeters+0x37c>)
 8001c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c28:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[i] == '1'){
 8001c2a:	4abb      	ldr	r2, [pc, #748]	; (8001f18 <getLatLongInMeters+0x370>)
 8001c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2e:	18d3      	adds	r3, r2, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b31      	cmp	r3, #49	; 0x31
 8001c34:	d102      	bne.n	8001c3c <getLatLongInMeters+0x94>
				gnssFixStatus = 1;
 8001c36:	4bbc      	ldr	r3, [pc, #752]	; (8001f28 <getLatLongInMeters+0x380>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
			}
			if(receiveUART2Data[i] == '0'){
 8001c3c:	4ab6      	ldr	r2, [pc, #728]	; (8001f18 <getLatLongInMeters+0x370>)
 8001c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b30      	cmp	r3, #48	; 0x30
 8001c46:	d102      	bne.n	8001c4e <getLatLongInMeters+0xa6>
				gnssFixStatus = 0;
 8001c48:	4bb7      	ldr	r3, [pc, #732]	; (8001f28 <getLatLongInMeters+0x380>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
			}
		}
		if(counterGNSS == 2){
 8001c4e:	4bb4      	ldr	r3, [pc, #720]	; (8001f20 <getLatLongInMeters+0x378>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d12e      	bne.n	8001cb4 <getLatLongInMeters+0x10c>
			latStart = i+1;
 8001c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4bb4      	ldr	r3, [pc, #720]	; (8001f2c <getLatLongInMeters+0x384>)
 8001c5c:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[latStart+1] == '-'){latNegDeg = 1;}
 8001c5e:	4bb3      	ldr	r3, [pc, #716]	; (8001f2c <getLatLongInMeters+0x384>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	4aac      	ldr	r2, [pc, #688]	; (8001f18 <getLatLongInMeters+0x370>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	2b2d      	cmp	r3, #45	; 0x2d
 8001c6a:	d103      	bne.n	8001c74 <getLatLongInMeters+0xcc>
 8001c6c:	4bb0      	ldr	r3, [pc, #704]	; (8001f30 <getLatLongInMeters+0x388>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e002      	b.n	8001c7a <getLatLongInMeters+0xd2>
			else{latNegDeg = 0;}
 8001c74:	4bae      	ldr	r3, [pc, #696]	; (8001f30 <getLatLongInMeters+0x388>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
			for(int j = latStart; j < latStart+6; j++){
 8001c7a:	4bac      	ldr	r3, [pc, #688]	; (8001f2c <getLatLongInMeters+0x384>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c80:	e012      	b.n	8001ca8 <getLatLongInMeters+0x100>
				if(receiveUART2Data[j] == '.'){latDegSize = j-latStart-1-latNegDeg;}
 8001c82:	4aa5      	ldr	r2, [pc, #660]	; (8001f18 <getLatLongInMeters+0x370>)
 8001c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c86:	18d3      	adds	r3, r2, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8001c8c:	d109      	bne.n	8001ca2 <getLatLongInMeters+0xfa>
 8001c8e:	4ba7      	ldr	r3, [pc, #668]	; (8001f2c <getLatLongInMeters+0x384>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	4ba5      	ldr	r3, [pc, #660]	; (8001f30 <getLatLongInMeters+0x388>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1ad2      	subs	r2, r2, r3
 8001c9e:	4ba5      	ldr	r3, [pc, #660]	; (8001f34 <getLatLongInMeters+0x38c>)
 8001ca0:	601a      	str	r2, [r3, #0]
			for(int j = latStart; j < latStart+6; j++){
 8001ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ca8:	4ba0      	ldr	r3, [pc, #640]	; (8001f2c <getLatLongInMeters+0x384>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3305      	adds	r3, #5
 8001cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dde6      	ble.n	8001c82 <getLatLongInMeters+0xda>
			}
		}
		if(counterGNSS == 3){
 8001cb4:	4b9a      	ldr	r3, [pc, #616]	; (8001f20 <getLatLongInMeters+0x378>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d12e      	bne.n	8001d1a <getLatLongInMeters+0x172>
			latEndLongStart = i+1;
 8001cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	4b9d      	ldr	r3, [pc, #628]	; (8001f38 <getLatLongInMeters+0x390>)
 8001cc2:	601a      	str	r2, [r3, #0]
			if(receiveUART2Data[latEndLongStart+1] == '-'){longNegDeg = 1;}
 8001cc4:	4b9c      	ldr	r3, [pc, #624]	; (8001f38 <getLatLongInMeters+0x390>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a93      	ldr	r2, [pc, #588]	; (8001f18 <getLatLongInMeters+0x370>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	2b2d      	cmp	r3, #45	; 0x2d
 8001cd0:	d103      	bne.n	8001cda <getLatLongInMeters+0x132>
 8001cd2:	4b9a      	ldr	r3, [pc, #616]	; (8001f3c <getLatLongInMeters+0x394>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e002      	b.n	8001ce0 <getLatLongInMeters+0x138>
			else{longNegDeg = 0;}
 8001cda:	4b98      	ldr	r3, [pc, #608]	; (8001f3c <getLatLongInMeters+0x394>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
			for(int j = latEndLongStart; j < latEndLongStart+6; j++){
 8001ce0:	4b95      	ldr	r3, [pc, #596]	; (8001f38 <getLatLongInMeters+0x390>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ce6:	e012      	b.n	8001d0e <getLatLongInMeters+0x166>
				if(receiveUART2Data[j] == '.'){longDegSize = j-latEndLongStart-1-longNegDeg;}
 8001ce8:	4a8b      	ldr	r2, [pc, #556]	; (8001f18 <getLatLongInMeters+0x370>)
 8001cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cec:	18d3      	adds	r3, r2, r3
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8001cf2:	d109      	bne.n	8001d08 <getLatLongInMeters+0x160>
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <getLatLongInMeters+0x390>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <getLatLongInMeters+0x394>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	1ad2      	subs	r2, r2, r3
 8001d04:	4b8e      	ldr	r3, [pc, #568]	; (8001f40 <getLatLongInMeters+0x398>)
 8001d06:	601a      	str	r2, [r3, #0]
			for(int j = latEndLongStart; j < latEndLongStart+6; j++){
 8001d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <getLatLongInMeters+0x390>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3305      	adds	r3, #5
 8001d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dde6      	ble.n	8001ce8 <getLatLongInMeters+0x140>
			}
		}
		if(counterGNSS == 6){
 8001d1a:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <getLatLongInMeters+0x378>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d103      	bne.n	8001d2a <getLatLongInMeters+0x182>
			longEnd = i;
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <getLatLongInMeters+0x39c>)
 8001d24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d26:	601a      	str	r2, [r3, #0]
			break;
 8001d28:	e006      	b.n	8001d38 <getLatLongInMeters+0x190>
	for(int i = 0; i < sizeof(receiveUART2Data); i++){
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d32:	2b95      	cmp	r3, #149	; 0x95
 8001d34:	d800      	bhi.n	8001d38 <getLatLongInMeters+0x190>
 8001d36:	e763      	b.n	8001c00 <getLatLongInMeters+0x58>
		}
	}
	counterGNSS = 0;
 8001d38:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <getLatLongInMeters+0x378>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001d3e:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001d40:	2203      	movs	r2, #3
 8001d42:	2130      	movs	r1, #48	; 0x30
 8001d44:	0018      	movs	r0, r3
 8001d46:	f003 fb07 	bl	8005358 <memset>
	for(int i = 0; i < latDegSize; i++){degMinSecBuffer[i+3-latDegSize] = receiveUART2Data[latStart+i+1+latNegDeg];}
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d4e:	e013      	b.n	8001d78 <getLatLongInMeters+0x1d0>
 8001d50:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <getLatLongInMeters+0x384>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d56:	18d3      	adds	r3, r2, r3
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <getLatLongInMeters+0x388>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	18d2      	adds	r2, r2, r3
 8001d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d62:	1cd9      	adds	r1, r3, #3
 8001d64:	4b73      	ldr	r3, [pc, #460]	; (8001f34 <getLatLongInMeters+0x38c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	1acb      	subs	r3, r1, r3
 8001d6a:	496b      	ldr	r1, [pc, #428]	; (8001f18 <getLatLongInMeters+0x370>)
 8001d6c:	5c89      	ldrb	r1, [r1, r2]
 8001d6e:	4a76      	ldr	r2, [pc, #472]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001d70:	54d1      	strb	r1, [r2, r3]
 8001d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d74:	3301      	adds	r3, #1
 8001d76:	643b      	str	r3, [r7, #64]	; 0x40
 8001d78:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <getLatLongInMeters+0x38c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dbe6      	blt.n	8001d50 <getLatLongInMeters+0x1a8>
	latDeg = atoi(degMinSecBuffer);
 8001d82:	4b71      	ldr	r3, [pc, #452]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001d84:	0018      	movs	r0, r3
 8001d86:	f003 fab7 	bl	80052f8 <atoi>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <getLatLongInMeters+0x3a4>)
 8001d8e:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001d90:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001d92:	2203      	movs	r2, #3
 8001d94:	2130      	movs	r1, #48	; 0x30
 8001d96:	0018      	movs	r0, r3
 8001d98:	f003 fade 	bl	8005358 <memset>
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+1+latNegDeg];}
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da0:	e014      	b.n	8001dcc <getLatLongInMeters+0x224>
 8001da2:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <getLatLongInMeters+0x384>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da8:	18d2      	adds	r2, r2, r3
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <getLatLongInMeters+0x38c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <getLatLongInMeters+0x388>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <getLatLongInMeters+0x370>)
 8001dba:	5cd1      	ldrb	r1, [r2, r3]
 8001dbc:	4a62      	ldr	r2, [pc, #392]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	1c0a      	adds	r2, r1, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc8:	3301      	adds	r3, #1
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	dde7      	ble.n	8001da2 <getLatLongInMeters+0x1fa>
	latMin = atoi(degMinSecBuffer);
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f003 fa8f 	bl	80052f8 <atoi>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <getLatLongInMeters+0x3a8>)
 8001dde:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+3+latNegDeg];}
 8001de0:	2301      	movs	r3, #1
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001de4:	e014      	b.n	8001e10 <getLatLongInMeters+0x268>
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <getLatLongInMeters+0x384>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dec:	18d2      	adds	r2, r2, r3
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <getLatLongInMeters+0x38c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	1cda      	adds	r2, r3, #3
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <getLatLongInMeters+0x388>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	18d3      	adds	r3, r2, r3
 8001dfc:	4a46      	ldr	r2, [pc, #280]	; (8001f18 <getLatLongInMeters+0x370>)
 8001dfe:	5cd1      	ldrb	r1, [r2, r3]
 8001e00:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	1c0a      	adds	r2, r1, #0
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	dde7      	ble.n	8001de6 <getLatLongInMeters+0x23e>
	latSecFirst = atoi(degMinSecBuffer);
 8001e16:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f003 fa6d 	bl	80052f8 <atoi>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <getLatLongInMeters+0x3ac>)
 8001e22:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latStart+i+latDegSize+5+latNegDeg];}
 8001e24:	2301      	movs	r3, #1
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
 8001e28:	e014      	b.n	8001e54 <getLatLongInMeters+0x2ac>
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <getLatLongInMeters+0x384>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	18d2      	adds	r2, r2, r3
 8001e32:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <getLatLongInMeters+0x38c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	18d3      	adds	r3, r2, r3
 8001e38:	1d5a      	adds	r2, r3, #5
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <getLatLongInMeters+0x388>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	18d3      	adds	r3, r2, r3
 8001e40:	4a35      	ldr	r2, [pc, #212]	; (8001f18 <getLatLongInMeters+0x370>)
 8001e42:	5cd1      	ldrb	r1, [r2, r3]
 8001e44:	4a40      	ldr	r2, [pc, #256]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	1c0a      	adds	r2, r1, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	3301      	adds	r3, #1
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	dde7      	ble.n	8001e2a <getLatLongInMeters+0x282>
	latSecSecond = atoi(degMinSecBuffer);
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f003 fa4b 	bl	80052f8 <atoi>
 8001e62:	0002      	movs	r2, r0
 8001e64:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <getLatLongInMeters+0x3b0>)
 8001e66:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	2130      	movs	r1, #48	; 0x30
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f003 fa72 	bl	8005358 <memset>

	for(int i = 0; i < longDegSize; i++){degMinSecBuffer[i+3-longDegSize] = receiveUART2Data[latEndLongStart+i+1+longNegDeg];}
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
 8001e78:	e013      	b.n	8001ea2 <getLatLongInMeters+0x2fa>
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <getLatLongInMeters+0x390>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	18d3      	adds	r3, r2, r3
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <getLatLongInMeters+0x394>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	18d2      	adds	r2, r2, r3
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	1cd9      	adds	r1, r3, #3
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <getLatLongInMeters+0x398>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4920      	ldr	r1, [pc, #128]	; (8001f18 <getLatLongInMeters+0x370>)
 8001e96:	5c89      	ldrb	r1, [r1, r2]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001e9a:	54d1      	strb	r1, [r2, r3]
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <getLatLongInMeters+0x398>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbe6      	blt.n	8001e7a <getLatLongInMeters+0x2d2>
	longDeg = atoi(degMinSecBuffer);
 8001eac:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f003 fa22 	bl	80052f8 <atoi>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <getLatLongInMeters+0x3b4>)
 8001eb8:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	2130      	movs	r1, #48	; 0x30
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f003 fa49 	bl	8005358 <memset>
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+1+longNegDeg];}
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eca:	e014      	b.n	8001ef6 <getLatLongInMeters+0x34e>
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <getLatLongInMeters+0x390>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	18d2      	adds	r2, r2, r3
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <getLatLongInMeters+0x398>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	18d3      	adds	r3, r2, r3
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <getLatLongInMeters+0x394>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	18d3      	adds	r3, r2, r3
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <getLatLongInMeters+0x370>)
 8001ee4:	5cd1      	ldrb	r1, [r2, r3]
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	18d3      	adds	r3, r2, r3
 8001eec:	1c0a      	adds	r2, r1, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	dde7      	ble.n	8001ecc <getLatLongInMeters+0x324>
	longMin = atoi(degMinSecBuffer);
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <getLatLongInMeters+0x3a0>)
 8001efe:	0018      	movs	r0, r3
 8001f00:	f003 f9fa 	bl	80052f8 <atoi>
 8001f04:	0002      	movs	r2, r0
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <getLatLongInMeters+0x3b8>)
 8001f08:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+3+longNegDeg];}
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0e:	e03e      	b.n	8001f8e <getLatLongInMeters+0x3e6>
 8001f10:	08005508 	.word	0x08005508
 8001f14:	2000030c 	.word	0x2000030c
 8001f18:	200000ac 	.word	0x200000ac
 8001f1c:	200001c0 	.word	0x200001c0
 8001f20:	20000398 	.word	0x20000398
 8001f24:	20000278 	.word	0x20000278
 8001f28:	20000270 	.word	0x20000270
 8001f2c:	200001d0 	.word	0x200001d0
 8001f30:	200001c8 	.word	0x200001c8
 8001f34:	200003a8 	.word	0x200003a8
 8001f38:	200003b4 	.word	0x200003b4
 8001f3c:	200001c4 	.word	0x200001c4
 8001f40:	20000294 	.word	0x20000294
 8001f44:	200001bc 	.word	0x200001bc
 8001f48:	200001b8 	.word	0x200001b8
 8001f4c:	20000158 	.word	0x20000158
 8001f50:	20000258 	.word	0x20000258
 8001f54:	200001b4 	.word	0x200001b4
 8001f58:	2000027c 	.word	0x2000027c
 8001f5c:	20000154 	.word	0x20000154
 8001f60:	200001cc 	.word	0x200001cc
 8001f64:	4b83      	ldr	r3, [pc, #524]	; (8002174 <getLatLongInMeters+0x5cc>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	18d2      	adds	r2, r2, r3
 8001f6c:	4b82      	ldr	r3, [pc, #520]	; (8002178 <getLatLongInMeters+0x5d0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	1cda      	adds	r2, r3, #3
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <getLatLongInMeters+0x5d4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	18d3      	adds	r3, r2, r3
 8001f7a:	4a81      	ldr	r2, [pc, #516]	; (8002180 <getLatLongInMeters+0x5d8>)
 8001f7c:	5cd1      	ldrb	r1, [r2, r3]
 8001f7e:	4a81      	ldr	r2, [pc, #516]	; (8002184 <getLatLongInMeters+0x5dc>)
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	18d3      	adds	r3, r2, r3
 8001f84:	1c0a      	adds	r2, r1, #0
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	dde7      	ble.n	8001f64 <getLatLongInMeters+0x3bc>
	longSecFirst = atoi(degMinSecBuffer);
 8001f94:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <getLatLongInMeters+0x5dc>)
 8001f96:	0018      	movs	r0, r3
 8001f98:	f003 f9ae 	bl	80052f8 <atoi>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	4b7a      	ldr	r3, [pc, #488]	; (8002188 <getLatLongInMeters+0x5e0>)
 8001fa0:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++){degMinSecBuffer[i] = receiveUART2Data[latEndLongStart+i+longDegSize+5+longNegDeg];}
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	e014      	b.n	8001fd2 <getLatLongInMeters+0x42a>
 8001fa8:	4b72      	ldr	r3, [pc, #456]	; (8002174 <getLatLongInMeters+0x5cc>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	18d2      	adds	r2, r2, r3
 8001fb0:	4b71      	ldr	r3, [pc, #452]	; (8002178 <getLatLongInMeters+0x5d0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	1d5a      	adds	r2, r3, #5
 8001fb8:	4b70      	ldr	r3, [pc, #448]	; (800217c <getLatLongInMeters+0x5d4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	18d3      	adds	r3, r2, r3
 8001fbe:	4a70      	ldr	r2, [pc, #448]	; (8002180 <getLatLongInMeters+0x5d8>)
 8001fc0:	5cd1      	ldrb	r1, [r2, r3]
 8001fc2:	4a70      	ldr	r2, [pc, #448]	; (8002184 <getLatLongInMeters+0x5dc>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	18d3      	adds	r3, r2, r3
 8001fc8:	1c0a      	adds	r2, r1, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3301      	adds	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	dde7      	ble.n	8001fa8 <getLatLongInMeters+0x400>
	longSecSecond = atoi(degMinSecBuffer);
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <getLatLongInMeters+0x5dc>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f003 f98c 	bl	80052f8 <atoi>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	; (800218c <getLatLongInMeters+0x5e4>)
 8001fe4:	601a      	str	r2, [r3, #0]
	memset(degMinSecBuffer, '0', sizeof(degMinSecBuffer));
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <getLatLongInMeters+0x5dc>)
 8001fe8:	2203      	movs	r2, #3
 8001fea:	2130      	movs	r1, #48	; 0x30
 8001fec:	0018      	movs	r0, r3
 8001fee:	f003 f9b3 	bl	8005358 <memset>

	latInMeters = (latDeg*111000.0)+(latMin*1850.0)+(latSecFirst*30.0)+(latSecSecond*0.3);
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <getLatLongInMeters+0x5e8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff f91e 	bl	8001238 <__aeabi_i2d>
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <getLatLongInMeters+0x5ec>)
 8002000:	f7fe feae 	bl	8000d60 <__aeabi_dmul>
 8002004:	0002      	movs	r2, r0
 8002006:	000b      	movs	r3, r1
 8002008:	0014      	movs	r4, r2
 800200a:	001d      	movs	r5, r3
 800200c:	4b62      	ldr	r3, [pc, #392]	; (8002198 <getLatLongInMeters+0x5f0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff f911 	bl	8001238 <__aeabi_i2d>
 8002016:	2200      	movs	r2, #0
 8002018:	4b60      	ldr	r3, [pc, #384]	; (800219c <getLatLongInMeters+0x5f4>)
 800201a:	f7fe fea1 	bl	8000d60 <__aeabi_dmul>
 800201e:	0002      	movs	r2, r0
 8002020:	000b      	movs	r3, r1
 8002022:	0020      	movs	r0, r4
 8002024:	0029      	movs	r1, r5
 8002026:	f7fe fb31 	bl	800068c <__aeabi_dadd>
 800202a:	0002      	movs	r2, r0
 800202c:	000b      	movs	r3, r1
 800202e:	0014      	movs	r4, r2
 8002030:	001d      	movs	r5, r3
 8002032:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <getLatLongInMeters+0x5f8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff f8fe 	bl	8001238 <__aeabi_i2d>
 800203c:	2200      	movs	r2, #0
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <getLatLongInMeters+0x5fc>)
 8002040:	f7fe fe8e 	bl	8000d60 <__aeabi_dmul>
 8002044:	0002      	movs	r2, r0
 8002046:	000b      	movs	r3, r1
 8002048:	0020      	movs	r0, r4
 800204a:	0029      	movs	r1, r5
 800204c:	f7fe fb1e 	bl	800068c <__aeabi_dadd>
 8002050:	0002      	movs	r2, r0
 8002052:	000b      	movs	r3, r1
 8002054:	0014      	movs	r4, r2
 8002056:	001d      	movs	r5, r3
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <getLatLongInMeters+0x600>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff f8eb 	bl	8001238 <__aeabi_i2d>
 8002062:	4a52      	ldr	r2, [pc, #328]	; (80021ac <getLatLongInMeters+0x604>)
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <getLatLongInMeters+0x608>)
 8002066:	f7fe fe7b 	bl	8000d60 <__aeabi_dmul>
 800206a:	0002      	movs	r2, r0
 800206c:	000b      	movs	r3, r1
 800206e:	0020      	movs	r0, r4
 8002070:	0029      	movs	r1, r5
 8002072:	f7fe fb0b 	bl	800068c <__aeabi_dadd>
 8002076:	0002      	movs	r2, r0
 8002078:	000b      	movs	r3, r1
 800207a:	0010      	movs	r0, r2
 800207c:	0019      	movs	r1, r3
 800207e:	f7ff f90b 	bl	8001298 <__aeabi_d2f>
 8002082:	1c02      	adds	r2, r0, #0
 8002084:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <getLatLongInMeters+0x60c>)
 8002086:	601a      	str	r2, [r3, #0]
	//dlatInMeters = abs(latInMeters - prevlatInMeters);
	//prevlatInMeters = latInMeters;

	longInMeters = (longDeg*111000.0)+(longMin*1850.0)+(longSecFirst*30.0)+(longSecSecond*0.3);
 8002088:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <getLatLongInMeters+0x610>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff f8d3 	bl	8001238 <__aeabi_i2d>
 8002092:	2200      	movs	r2, #0
 8002094:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <getLatLongInMeters+0x5ec>)
 8002096:	f7fe fe63 	bl	8000d60 <__aeabi_dmul>
 800209a:	0002      	movs	r2, r0
 800209c:	000b      	movs	r3, r1
 800209e:	0014      	movs	r4, r2
 80020a0:	001d      	movs	r5, r3
 80020a2:	4b46      	ldr	r3, [pc, #280]	; (80021bc <getLatLongInMeters+0x614>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff f8c6 	bl	8001238 <__aeabi_i2d>
 80020ac:	2200      	movs	r2, #0
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <getLatLongInMeters+0x5f4>)
 80020b0:	f7fe fe56 	bl	8000d60 <__aeabi_dmul>
 80020b4:	0002      	movs	r2, r0
 80020b6:	000b      	movs	r3, r1
 80020b8:	0020      	movs	r0, r4
 80020ba:	0029      	movs	r1, r5
 80020bc:	f7fe fae6 	bl	800068c <__aeabi_dadd>
 80020c0:	0002      	movs	r2, r0
 80020c2:	000b      	movs	r3, r1
 80020c4:	0014      	movs	r4, r2
 80020c6:	001d      	movs	r5, r3
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <getLatLongInMeters+0x5e0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff f8b3 	bl	8001238 <__aeabi_i2d>
 80020d2:	2200      	movs	r2, #0
 80020d4:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <getLatLongInMeters+0x5fc>)
 80020d6:	f7fe fe43 	bl	8000d60 <__aeabi_dmul>
 80020da:	0002      	movs	r2, r0
 80020dc:	000b      	movs	r3, r1
 80020de:	0020      	movs	r0, r4
 80020e0:	0029      	movs	r1, r5
 80020e2:	f7fe fad3 	bl	800068c <__aeabi_dadd>
 80020e6:	0002      	movs	r2, r0
 80020e8:	000b      	movs	r3, r1
 80020ea:	0014      	movs	r4, r2
 80020ec:	001d      	movs	r5, r3
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <getLatLongInMeters+0x5e4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff f8a0 	bl	8001238 <__aeabi_i2d>
 80020f8:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <getLatLongInMeters+0x604>)
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <getLatLongInMeters+0x608>)
 80020fc:	f7fe fe30 	bl	8000d60 <__aeabi_dmul>
 8002100:	0002      	movs	r2, r0
 8002102:	000b      	movs	r3, r1
 8002104:	0020      	movs	r0, r4
 8002106:	0029      	movs	r1, r5
 8002108:	f7fe fac0 	bl	800068c <__aeabi_dadd>
 800210c:	0002      	movs	r2, r0
 800210e:	000b      	movs	r3, r1
 8002110:	0010      	movs	r0, r2
 8002112:	0019      	movs	r1, r3
 8002114:	f7ff f8c0 	bl	8001298 <__aeabi_d2f>
 8002118:	1c02      	adds	r2, r0, #0
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <getLatLongInMeters+0x618>)
 800211c:	601a      	str	r2, [r3, #0]
	//dlongInMeters = abs(longInMeters - prevlongInMeters);
	//prevlongInMeters = longInMeters;
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <getLatLongInMeters+0x5d8>)
 8002120:	2296      	movs	r2, #150	; 0x96
 8002122:	213f      	movs	r1, #63	; 0x3f
 8002124:	0018      	movs	r0, r3
 8002126:	f003 f917 	bl	8005358 <memset>

	latlongstruct.gnssFixOk 	= gnssFixStatus;
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <getLatLongInMeters+0x61c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	2114      	movs	r1, #20
 8002132:	187b      	adds	r3, r7, r1
 8002134:	729a      	strb	r2, [r3, #10]
	latlongstruct.uartStatusOk	= uart2Status;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2223      	movs	r2, #35	; 0x23
 800213a:	18ba      	adds	r2, r7, r2
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	72da      	strb	r2, [r3, #11]
	latlongstruct.latNeg		= latNegDeg;
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <getLatLongInMeters+0x620>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	187b      	adds	r3, r7, r1
 8002148:	721a      	strb	r2, [r3, #8]
	latlongstruct.longNeg		= longNegDeg;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <getLatLongInMeters+0x5d4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	187b      	adds	r3, r7, r1
 8002152:	725a      	strb	r2, [r3, #9]
	latlongstruct.latInMeters	= latInMeters;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <getLatLongInMeters+0x60c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	187b      	adds	r3, r7, r1
 800215a:	601a      	str	r2, [r3, #0]
	latlongstruct.longInMeters	= longInMeters;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <getLatLongInMeters+0x618>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	187b      	adds	r3, r7, r1
 8002162:	605a      	str	r2, [r3, #4]

	return latlongstruct;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	187a      	adds	r2, r7, r1
 8002168:	ca13      	ldmia	r2!, {r0, r1, r4}
 800216a:	c313      	stmia	r3!, {r0, r1, r4}
}
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	46bd      	mov	sp, r7
 8002170:	b014      	add	sp, #80	; 0x50
 8002172:	bdb0      	pop	{r4, r5, r7, pc}
 8002174:	200003b4 	.word	0x200003b4
 8002178:	20000294 	.word	0x20000294
 800217c:	200001c4 	.word	0x200001c4
 8002180:	200000ac 	.word	0x200000ac
 8002184:	200001b8 	.word	0x200001b8
 8002188:	20000290 	.word	0x20000290
 800218c:	2000028c 	.word	0x2000028c
 8002190:	20000158 	.word	0x20000158
 8002194:	40fb1980 	.word	0x40fb1980
 8002198:	20000258 	.word	0x20000258
 800219c:	409ce800 	.word	0x409ce800
 80021a0:	200001b4 	.word	0x200001b4
 80021a4:	403e0000 	.word	0x403e0000
 80021a8:	2000027c 	.word	0x2000027c
 80021ac:	33333333 	.word	0x33333333
 80021b0:	3fd33333 	.word	0x3fd33333
 80021b4:	20000390 	.word	0x20000390
 80021b8:	20000154 	.word	0x20000154
 80021bc:	200001cc 	.word	0x200001cc
 80021c0:	20000394 	.word	0x20000394
 80021c4:	20000270 	.word	0x20000270
 80021c8:	200001c8 	.word	0x200001c8

080021cc <getOffsetFromHome>:

struct OffsetFromHome getOffsetFromHome(struct LatLongStruct latlongstruct, struct LatLongStruct prevlatlongstruct, char notInitialValue){
 80021cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ce:	46c6      	mov	lr, r8
 80021d0:	b500      	push	{lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	0038      	movs	r0, r7
 80021da:	6001      	str	r1, [r0, #0]
 80021dc:	6042      	str	r2, [r0, #4]
 80021de:	6083      	str	r3, [r0, #8]
	struct OffsetFromHome offsetfromhome;
	if(notInitialValue == 0){
 80021e0:	232c      	movs	r3, #44	; 0x2c
 80021e2:	2208      	movs	r2, #8
 80021e4:	4694      	mov	ip, r2
 80021e6:	2208      	movs	r2, #8
 80021e8:	4690      	mov	r8, r2
 80021ea:	44b8      	add	r8, r7
 80021ec:	44c4      	add	ip, r8
 80021ee:	4463      	add	r3, ip
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <getOffsetFromHome+0x38>
		offsetfromhome.offsetLatInMeters = 0.0;
 80021f6:	2110      	movs	r1, #16
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
		offsetfromhome.offsetLongInMeters = 0.0;
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
	}
	if(notInitialValue == 1){
 8002204:	232c      	movs	r3, #44	; 0x2c
 8002206:	2208      	movs	r2, #8
 8002208:	4694      	mov	ip, r2
 800220a:	2208      	movs	r2, #8
 800220c:	4690      	mov	r8, r2
 800220e:	44b8      	add	r8, r7
 8002210:	44c4      	add	ip, r8
 8002212:	4463      	add	r3, ip
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d134      	bne.n	8002284 <getOffsetFromHome+0xb8>
		offsetfromhome.offsetLatInMeters = abs(latlongstruct.latInMeters - prevlatlongstruct.latInMeters);
 800221a:	003b      	movs	r3, r7
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2420      	movs	r4, #32
 8002220:	2608      	movs	r6, #8
 8002222:	2308      	movs	r3, #8
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	199b      	adds	r3, r3, r6
 8002228:	191b      	adds	r3, r3, r4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1c19      	adds	r1, r3, #0
 800222e:	1c10      	adds	r0, r2, #0
 8002230:	f7fd fffe 	bl	8000230 <__aeabi_fsub>
 8002234:	1c03      	adds	r3, r0, #0
 8002236:	1c18      	adds	r0, r3, #0
 8002238:	f7fe f9c2 	bl	80005c0 <__aeabi_f2iz>
 800223c:	0003      	movs	r3, r0
 800223e:	17da      	asrs	r2, r3, #31
 8002240:	189b      	adds	r3, r3, r2
 8002242:	4053      	eors	r3, r2
 8002244:	0018      	movs	r0, r3
 8002246:	f7fe f9db 	bl	8000600 <__aeabi_i2f>
 800224a:	1c02      	adds	r2, r0, #0
 800224c:	2510      	movs	r5, #16
 800224e:	197b      	adds	r3, r7, r5
 8002250:	601a      	str	r2, [r3, #0]
		offsetfromhome.offsetLongInMeters = abs(latlongstruct.longInMeters - prevlatlongstruct.longInMeters);
 8002252:	003b      	movs	r3, r7
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	2308      	movs	r3, #8
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	199b      	adds	r3, r3, r6
 800225c:	191b      	adds	r3, r3, r4
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	1c19      	adds	r1, r3, #0
 8002262:	1c10      	adds	r0, r2, #0
 8002264:	f7fd ffe4 	bl	8000230 <__aeabi_fsub>
 8002268:	1c03      	adds	r3, r0, #0
 800226a:	1c18      	adds	r0, r3, #0
 800226c:	f7fe f9a8 	bl	80005c0 <__aeabi_f2iz>
 8002270:	0003      	movs	r3, r0
 8002272:	17da      	asrs	r2, r3, #31
 8002274:	189b      	adds	r3, r3, r2
 8002276:	4053      	eors	r3, r2
 8002278:	0018      	movs	r0, r3
 800227a:	f7fe f9c1 	bl	8000600 <__aeabi_i2f>
 800227e:	1c02      	adds	r2, r0, #0
 8002280:	197b      	adds	r3, r7, r5
 8002282:	605a      	str	r2, [r3, #4]
	}
	return offsetfromhome;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2210      	movs	r2, #16
 8002288:	18ba      	adds	r2, r7, r2
 800228a:	ca03      	ldmia	r2!, {r0, r1}
 800228c:	c303      	stmia	r3!, {r0, r1}
}
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	46bd      	mov	sp, r7
 8002292:	b006      	add	sp, #24
 8002294:	bc80      	pop	{r7}
 8002296:	46b8      	mov	r8, r7
 8002298:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800229c <gnssInit>:

char gnssInit(void){
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	b099      	sub	sp, #100	; 0x64
 80022a0:	af00      	add	r7, sp, #0
	// TODO Add proper status return or error handling
	char initStatus = 0;
 80022a2:	245f      	movs	r4, #95	; 0x5f
 80022a4:	193b      	adds	r3, r7, r4
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
	//=========================GNSS
	uint8_t AT_CGNSPWR_ON[] 	= "AT+CGNSPWR=1\r";				// GNSS turns Power ON
 80022aa:	2050      	movs	r0, #80	; 0x50
 80022ac:	183b      	adds	r3, r7, r0
 80022ae:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <gnssInit+0x124>)
 80022b0:	ca62      	ldmia	r2!, {r1, r5, r6}
 80022b2:	c362      	stmia	r3!, {r1, r5, r6}
 80022b4:	8812      	ldrh	r2, [r2, #0]
 80022b6:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSPWR_OFF[] 	= "AT+CGNSPWR=0\r";				// GNSS turns Power OFF
 80022b8:	2340      	movs	r3, #64	; 0x40
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	4a41      	ldr	r2, [pc, #260]	; (80023c4 <gnssInit+0x128>)
 80022be:	ca62      	ldmia	r2!, {r1, r5, r6}
 80022c0:	c362      	stmia	r3!, {r1, r5, r6}
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSSEQ[] 		= "AT+CGNSSEQ=\"RMC\"\r";		// RMC for GGA
 80022c6:	252c      	movs	r5, #44	; 0x2c
 80022c8:	197b      	adds	r3, r7, r5
 80022ca:	4a3f      	ldr	r2, [pc, #252]	; (80023c8 <gnssInit+0x12c>)
 80022cc:	ca43      	ldmia	r2!, {r0, r1, r6}
 80022ce:	c343      	stmia	r3!, {r0, r1, r6}
 80022d0:	6811      	ldr	r1, [r2, #0]
 80022d2:	6019      	str	r1, [r3, #0]
 80022d4:	8892      	ldrh	r2, [r2, #4]
 80022d6:	809a      	strh	r2, [r3, #4]
	uint8_t AT_CGNSINF[] 		= "AT+CGNSINF\r";				// Gets data from GNSS
 80022d8:	2320      	movs	r3, #32
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	4a3b      	ldr	r2, [pc, #236]	; (80023cc <gnssInit+0x130>)
 80022de:	ca43      	ldmia	r2!, {r0, r1, r6}
 80022e0:	c343      	stmia	r3!, {r0, r1, r6}
	uint8_t AT_CGNSURC_SET[] 	= "AT+CGNSURC=0\r";
 80022e2:	2610      	movs	r6, #16
 80022e4:	19bb      	adds	r3, r7, r6
 80022e6:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <gnssInit+0x134>)
 80022e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022ea:	c313      	stmia	r3!, {r0, r1, r4}
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CGNSURC_ASK[] 	= "AT+CGNSURC?\r";
 80022f0:	003b      	movs	r3, r7
 80022f2:	4a38      	ldr	r2, [pc, #224]	; (80023d4 <gnssInit+0x138>)
 80022f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022f6:	c313      	stmia	r3!, {r0, r1, r4}
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	701a      	strb	r2, [r3, #0]
	//=========================GNSS

	//=========================GNSS
	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSPWR_ON, sizeof(AT_CGNSPWR_ON), 10);
 80022fc:	2050      	movs	r0, #80	; 0x50
 80022fe:	1839      	adds	r1, r7, r0
 8002300:	4835      	ldr	r0, [pc, #212]	; (80023d8 <gnssInit+0x13c>)
 8002302:	230a      	movs	r3, #10
 8002304:	220e      	movs	r2, #14
 8002306:	f002 fb5d 	bl	80049c4 <HAL_UART_Transmit>
 800230a:	0003      	movs	r3, r0
 800230c:	001a      	movs	r2, r3
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <gnssInit+0x140>)
 8002310:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002312:	4933      	ldr	r1, [pc, #204]	; (80023e0 <gnssInit+0x144>)
 8002314:	4830      	ldr	r0, [pc, #192]	; (80023d8 <gnssInit+0x13c>)
 8002316:	230a      	movs	r3, #10
 8002318:	2296      	movs	r2, #150	; 0x96
 800231a:	f002 fbfd 	bl	8004b18 <HAL_UART_Receive>
 800231e:	0003      	movs	r3, r0
 8002320:	001a      	movs	r2, r3
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <gnssInit+0x140>)
 8002324:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 8002326:	2014      	movs	r0, #20
 8002328:	f000 fcb2 	bl	8002c90 <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <gnssInit+0x144>)
 800232e:	2296      	movs	r2, #150	; 0x96
 8002330:	213f      	movs	r1, #63	; 0x3f
 8002332:	0018      	movs	r0, r3
 8002334:	f003 f810 	bl	8005358 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSURC_SET, sizeof(AT_CGNSURC_SET), 10);
 8002338:	19b9      	adds	r1, r7, r6
 800233a:	4827      	ldr	r0, [pc, #156]	; (80023d8 <gnssInit+0x13c>)
 800233c:	230a      	movs	r3, #10
 800233e:	220e      	movs	r2, #14
 8002340:	f002 fb40 	bl	80049c4 <HAL_UART_Transmit>
 8002344:	0003      	movs	r3, r0
 8002346:	001a      	movs	r2, r3
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <gnssInit+0x140>)
 800234a:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 800234c:	4924      	ldr	r1, [pc, #144]	; (80023e0 <gnssInit+0x144>)
 800234e:	4822      	ldr	r0, [pc, #136]	; (80023d8 <gnssInit+0x13c>)
 8002350:	230a      	movs	r3, #10
 8002352:	2296      	movs	r2, #150	; 0x96
 8002354:	f002 fbe0 	bl	8004b18 <HAL_UART_Receive>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <gnssInit+0x140>)
 800235e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002360:	200a      	movs	r0, #10
 8002362:	f000 fc95 	bl	8002c90 <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <gnssInit+0x144>)
 8002368:	2296      	movs	r2, #150	; 0x96
 800236a:	213f      	movs	r1, #63	; 0x3f
 800236c:	0018      	movs	r0, r3
 800236e:	f002 fff3 	bl	8005358 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CGNSSEQ, sizeof(AT_CGNSSEQ), 10);
 8002372:	1979      	adds	r1, r7, r5
 8002374:	4818      	ldr	r0, [pc, #96]	; (80023d8 <gnssInit+0x13c>)
 8002376:	230a      	movs	r3, #10
 8002378:	2212      	movs	r2, #18
 800237a:	f002 fb23 	bl	80049c4 <HAL_UART_Transmit>
 800237e:	0003      	movs	r3, r0
 8002380:	001a      	movs	r2, r3
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <gnssInit+0x140>)
 8002384:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 8002386:	4916      	ldr	r1, [pc, #88]	; (80023e0 <gnssInit+0x144>)
 8002388:	4813      	ldr	r0, [pc, #76]	; (80023d8 <gnssInit+0x13c>)
 800238a:	230a      	movs	r3, #10
 800238c:	2296      	movs	r2, #150	; 0x96
 800238e:	f002 fbc3 	bl	8004b18 <HAL_UART_Receive>
 8002392:	0003      	movs	r3, r0
 8002394:	001a      	movs	r2, r3
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <gnssInit+0x140>)
 8002398:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800239a:	200a      	movs	r0, #10
 800239c:	f000 fc78 	bl	8002c90 <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <gnssInit+0x144>)
 80023a2:	2296      	movs	r2, #150	; 0x96
 80023a4:	213f      	movs	r1, #63	; 0x3f
 80023a6:	0018      	movs	r0, r3
 80023a8:	f002 ffd6 	bl	8005358 <memset>
	//=========================GNSS
	initStatus = 1;
 80023ac:	245f      	movs	r4, #95	; 0x5f
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
	return initStatus;
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	781b      	ldrb	r3, [r3, #0]
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b019      	add	sp, #100	; 0x64
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c0:	08005514 	.word	0x08005514
 80023c4:	08005524 	.word	0x08005524
 80023c8:	08005534 	.word	0x08005534
 80023cc:	08005508 	.word	0x08005508
 80023d0:	08005548 	.word	0x08005548
 80023d4:	08005558 	.word	0x08005558
 80023d8:	2000030c 	.word	0x2000030c
 80023dc:	200002fc 	.word	0x200002fc
 80023e0:	200000ac 	.word	0x200000ac

080023e4 <gsmInit>:


char gsmInit(void){
 80023e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e6:	b09f      	sub	sp, #124	; 0x7c
 80023e8:	af00      	add	r7, sp, #0
	// TODO Add proper status return or error handling
	char initStatus = 0;
 80023ea:	2477      	movs	r4, #119	; 0x77
 80023ec:	193b      	adds	r3, r7, r4
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 80023f2:	2370      	movs	r3, #112	; 0x70
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	4a50      	ldr	r2, [pc, #320]	; (8002538 <gsmInit+0x154>)
 80023f8:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 80023fa:	2368      	movs	r3, #104	; 0x68
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	4a4f      	ldr	r2, [pc, #316]	; (800253c <gsmInit+0x158>)
 8002400:	6811      	ldr	r1, [r2, #0]
 8002402:	6019      	str	r1, [r3, #0]
 8002404:	7912      	ldrb	r2, [r2, #4]
 8002406:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 8002408:	235c      	movs	r3, #92	; 0x5c
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <gsmInit+0x15c>)
 800240e:	ca03      	ldmia	r2!, {r0, r1}
 8002410:	c303      	stmia	r3!, {r0, r1}
 8002412:	8811      	ldrh	r1, [r2, #0]
 8002414:	8019      	strh	r1, [r3, #0]
 8002416:	7892      	ldrb	r2, [r2, #2]
 8002418:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 800241a:	2350      	movs	r3, #80	; 0x50
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	4a49      	ldr	r2, [pc, #292]	; (8002544 <gsmInit+0x160>)
 8002420:	ca03      	ldmia	r2!, {r0, r1}
 8002422:	c303      	stmia	r3!, {r0, r1}
 8002424:	8811      	ldrh	r1, [r2, #0]
 8002426:	8019      	strh	r1, [r3, #0]
 8002428:	7892      	ldrb	r2, [r2, #2]
 800242a:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 800242c:	2544      	movs	r5, #68	; 0x44
 800242e:	197b      	adds	r3, r7, r5
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <gsmInit+0x164>)
 8002432:	ca03      	ldmia	r2!, {r0, r1}
 8002434:	c303      	stmia	r3!, {r0, r1}
 8002436:	8812      	ldrh	r2, [r2, #0]
 8002438:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 800243a:	2038      	movs	r0, #56	; 0x38
 800243c:	183b      	adds	r3, r7, r0
 800243e:	4a43      	ldr	r2, [pc, #268]	; (800254c <gsmInit+0x168>)
 8002440:	ca42      	ldmia	r2!, {r1, r6}
 8002442:	c342      	stmia	r3!, {r1, r6}
 8002444:	8811      	ldrh	r1, [r2, #0]
 8002446:	8019      	strh	r1, [r3, #0]
 8002448:	7892      	ldrb	r2, [r2, #2]
 800244a:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 800244c:	262c      	movs	r6, #44	; 0x2c
 800244e:	19bb      	adds	r3, r7, r6
 8002450:	4a3f      	ldr	r2, [pc, #252]	; (8002550 <gsmInit+0x16c>)
 8002452:	ca03      	ldmia	r2!, {r0, r1}
 8002454:	c303      	stmia	r3!, {r0, r1}
 8002456:	8811      	ldrh	r1, [r2, #0]
 8002458:	8019      	strh	r1, [r3, #0]
 800245a:	7892      	ldrb	r2, [r2, #2]
 800245c:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 800245e:	231c      	movs	r3, #28
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <gsmInit+0x170>)
 8002464:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002466:	c313      	stmia	r3!, {r0, r1, r4}
 8002468:	8811      	ldrh	r1, [r2, #0]
 800246a:	8019      	strh	r1, [r3, #0]
 800246c:	7892      	ldrb	r2, [r2, #2]
 800246e:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8002470:	2314      	movs	r3, #20
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	4a38      	ldr	r2, [pc, #224]	; (8002558 <gsmInit+0x174>)
 8002476:	ca03      	ldmia	r2!, {r0, r1}
 8002478:	c303      	stmia	r3!, {r0, r1}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 800247a:	2308      	movs	r3, #8
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	4a37      	ldr	r2, [pc, #220]	; (800255c <gsmInit+0x178>)
 8002480:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002482:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	221a      	movs	r2, #26
 8002488:	801a      	strh	r2, [r3, #0]
	//=========================GSM

	//=========================GSM
	uart2Status = HAL_UART_Transmit(&huart2, AT_COPS_RGSTR, sizeof(AT_COPS_RGSTR), 10);
 800248a:	2038      	movs	r0, #56	; 0x38
 800248c:	1839      	adds	r1, r7, r0
 800248e:	4834      	ldr	r0, [pc, #208]	; (8002560 <gsmInit+0x17c>)
 8002490:	230a      	movs	r3, #10
 8002492:	220b      	movs	r2, #11
 8002494:	f002 fa96 	bl	80049c4 <HAL_UART_Transmit>
 8002498:	0003      	movs	r3, r0
 800249a:	001a      	movs	r2, r3
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <gsmInit+0x180>)
 800249e:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 80024a0:	4931      	ldr	r1, [pc, #196]	; (8002568 <gsmInit+0x184>)
 80024a2:	482f      	ldr	r0, [pc, #188]	; (8002560 <gsmInit+0x17c>)
 80024a4:	230a      	movs	r3, #10
 80024a6:	2296      	movs	r2, #150	; 0x96
 80024a8:	f002 fb36 	bl	8004b18 <HAL_UART_Receive>
 80024ac:	0003      	movs	r3, r0
 80024ae:	001a      	movs	r2, r3
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <gsmInit+0x180>)
 80024b2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80024b4:	200a      	movs	r0, #10
 80024b6:	f000 fbeb 	bl	8002c90 <HAL_Delay>

	uart2Status = HAL_UART_Transmit(&huart2, AT_COPS_CRNT, sizeof(AT_COPS_CRNT), 10);
 80024ba:	1979      	adds	r1, r7, r5
 80024bc:	4828      	ldr	r0, [pc, #160]	; (8002560 <gsmInit+0x17c>)
 80024be:	230a      	movs	r3, #10
 80024c0:	220a      	movs	r2, #10
 80024c2:	f002 fa7f 	bl	80049c4 <HAL_UART_Transmit>
 80024c6:	0003      	movs	r3, r0
 80024c8:	001a      	movs	r2, r3
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <gsmInit+0x180>)
 80024cc:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 80024ce:	4926      	ldr	r1, [pc, #152]	; (8002568 <gsmInit+0x184>)
 80024d0:	4823      	ldr	r0, [pc, #140]	; (8002560 <gsmInit+0x17c>)
 80024d2:	230a      	movs	r3, #10
 80024d4:	2296      	movs	r2, #150	; 0x96
 80024d6:	f002 fb1f 	bl	8004b18 <HAL_UART_Receive>
 80024da:	0003      	movs	r3, r0
 80024dc:	001a      	movs	r2, r3
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <gsmInit+0x180>)
 80024e0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 80024e2:	2032      	movs	r0, #50	; 0x32
 80024e4:	f000 fbd4 	bl	8002c90 <HAL_Delay>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGF, sizeof(AT_CMGF), 10);
 80024e8:	19b9      	adds	r1, r7, r6
 80024ea:	481d      	ldr	r0, [pc, #116]	; (8002560 <gsmInit+0x17c>)
 80024ec:	230a      	movs	r3, #10
 80024ee:	220b      	movs	r2, #11
 80024f0:	f002 fa68 	bl	80049c4 <HAL_UART_Transmit>
 80024f4:	0003      	movs	r3, r0
 80024f6:	001a      	movs	r2, r3
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <gsmInit+0x180>)
 80024fa:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 80024fc:	491a      	ldr	r1, [pc, #104]	; (8002568 <gsmInit+0x184>)
 80024fe:	4818      	ldr	r0, [pc, #96]	; (8002560 <gsmInit+0x17c>)
 8002500:	230a      	movs	r3, #10
 8002502:	2296      	movs	r2, #150	; 0x96
 8002504:	f002 fb08 	bl	8004b18 <HAL_UART_Receive>
 8002508:	0003      	movs	r3, r0
 800250a:	001a      	movs	r2, r3
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <gsmInit+0x180>)
 800250e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8002510:	200a      	movs	r0, #10
 8002512:	f000 fbbd 	bl	8002c90 <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <gsmInit+0x184>)
 8002518:	2296      	movs	r2, #150	; 0x96
 800251a:	213f      	movs	r1, #63	; 0x3f
 800251c:	0018      	movs	r0, r3
 800251e:	f002 ff1b 	bl	8005358 <memset>
	initStatus = 1;
 8002522:	2477      	movs	r4, #119	; 0x77
 8002524:	193b      	adds	r3, r7, r4
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
	return initStatus;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	781b      	ldrb	r3, [r3, #0]
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b01f      	add	sp, #124	; 0x7c
 8002534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	000d5441 	.word	0x000d5441
 800253c:	08005568 	.word	0x08005568
 8002540:	08005570 	.word	0x08005570
 8002544:	0800557c 	.word	0x0800557c
 8002548:	08005588 	.word	0x08005588
 800254c:	08005594 	.word	0x08005594
 8002550:	080055a0 	.word	0x080055a0
 8002554:	080055ac 	.word	0x080055ac
 8002558:	080055bc 	.word	0x080055bc
 800255c:	080055c4 	.word	0x080055c4
 8002560:	2000030c 	.word	0x2000030c
 8002564:	200002fc 	.word	0x200002fc
 8002568:	200000ac 	.word	0x200000ac

0800256c <sendGsmMessage>:

char sendGsmMessage(struct GsmStruct gsmstruct){
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256e:	46c6      	mov	lr, r8
 8002570:	b500      	push	{lr}
 8002572:	b0ba      	sub	sp, #232	; 0xe8
 8002574:	af00      	add	r7, sp, #0
 8002576:	261c      	movs	r6, #28
 8002578:	19bb      	adds	r3, r7, r6
 800257a:	6018      	str	r0, [r3, #0]
 800257c:	6059      	str	r1, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	466b      	mov	r3, sp
 8002582:	4698      	mov	r8, r3
	// TODO Add proper status return or error handling
	gsmstruct.numberOk = 0;
 8002584:	19bb      	adds	r3, r7, r6
 8002586:	2200      	movs	r2, #0
 8002588:	721a      	strb	r2, [r3, #8]
	//=========================GSM
	uint8_t AT[] 					= "AT\r";
 800258a:	23c4      	movs	r3, #196	; 0xc4
 800258c:	2218      	movs	r2, #24
 800258e:	4694      	mov	ip, r2
 8002590:	44bc      	add	ip, r7
 8002592:	4463      	add	r3, ip
 8002594:	4aa8      	ldr	r2, [pc, #672]	; (8002838 <sendGsmMessage+0x2cc>)
 8002596:	601a      	str	r2, [r3, #0]
	uint8_t ATI[] 					= "ATI\r";
 8002598:	23bc      	movs	r3, #188	; 0xbc
 800259a:	2218      	movs	r2, #24
 800259c:	4694      	mov	ip, r2
 800259e:	44bc      	add	ip, r7
 80025a0:	4463      	add	r3, ip
 80025a2:	4aa6      	ldr	r2, [pc, #664]	; (800283c <sendGsmMessage+0x2d0>)
 80025a4:	6811      	ldr	r1, [r2, #0]
 80025a6:	6019      	str	r1, [r3, #0]
 80025a8:	7912      	ldrb	r2, [r2, #4]
 80025aa:	711a      	strb	r2, [r3, #4]
	uint8_t AT_CFUN[] 				= "AT+CFUN=1\r";			// Full Functionality Configuration
 80025ac:	23b0      	movs	r3, #176	; 0xb0
 80025ae:	2218      	movs	r2, #24
 80025b0:	4694      	mov	ip, r2
 80025b2:	44bc      	add	ip, r7
 80025b4:	4463      	add	r3, ip
 80025b6:	4aa2      	ldr	r2, [pc, #648]	; (8002840 <sendGsmMessage+0x2d4>)
 80025b8:	ca03      	ldmia	r2!, {r0, r1}
 80025ba:	c303      	stmia	r3!, {r0, r1}
 80025bc:	8811      	ldrh	r1, [r2, #0]
 80025be:	8019      	strh	r1, [r3, #0]
 80025c0:	7892      	ldrb	r2, [r2, #2]
 80025c2:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_OPCHK[] 		= "AT+COPS=?\r";			// Returns all operators available
 80025c4:	23a4      	movs	r3, #164	; 0xa4
 80025c6:	2218      	movs	r2, #24
 80025c8:	4694      	mov	ip, r2
 80025ca:	44bc      	add	ip, r7
 80025cc:	4463      	add	r3, ip
 80025ce:	4a9d      	ldr	r2, [pc, #628]	; (8002844 <sendGsmMessage+0x2d8>)
 80025d0:	ca03      	ldmia	r2!, {r0, r1}
 80025d2:	c303      	stmia	r3!, {r0, r1}
 80025d4:	8811      	ldrh	r1, [r2, #0]
 80025d6:	8019      	strh	r1, [r3, #0]
 80025d8:	7892      	ldrb	r2, [r2, #2]
 80025da:	709a      	strb	r2, [r3, #2]
	uint8_t AT_COPS_CRNT[] 			= "AT+COPS?\r";				// Returns current operator
 80025dc:	2398      	movs	r3, #152	; 0x98
 80025de:	2218      	movs	r2, #24
 80025e0:	4694      	mov	ip, r2
 80025e2:	44bc      	add	ip, r7
 80025e4:	4463      	add	r3, ip
 80025e6:	4a98      	ldr	r2, [pc, #608]	; (8002848 <sendGsmMessage+0x2dc>)
 80025e8:	ca03      	ldmia	r2!, {r0, r1}
 80025ea:	c303      	stmia	r3!, {r0, r1}
 80025ec:	8812      	ldrh	r2, [r2, #0]
 80025ee:	801a      	strh	r2, [r3, #0]
	uint8_t AT_COPS_RGSTR[] 		= "AT+COPS=0\r";			// Register to operator network AT+COPS=<mode>,[<format>[,<oper>]]
 80025f0:	238c      	movs	r3, #140	; 0x8c
 80025f2:	2218      	movs	r2, #24
 80025f4:	4694      	mov	ip, r2
 80025f6:	44bc      	add	ip, r7
 80025f8:	4463      	add	r3, ip
 80025fa:	4a94      	ldr	r2, [pc, #592]	; (800284c <sendGsmMessage+0x2e0>)
 80025fc:	ca03      	ldmia	r2!, {r0, r1}
 80025fe:	c303      	stmia	r3!, {r0, r1}
 8002600:	8811      	ldrh	r1, [r2, #0]
 8002602:	8019      	strh	r1, [r3, #0]
 8002604:	7892      	ldrb	r2, [r2, #2]
 8002606:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CMGF[] 				= "AT+CMGF=1\r";			// Set to text mode
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	2218      	movs	r2, #24
 800260c:	4694      	mov	ip, r2
 800260e:	44bc      	add	ip, r7
 8002610:	4463      	add	r3, ip
 8002612:	4a8f      	ldr	r2, [pc, #572]	; (8002850 <sendGsmMessage+0x2e4>)
 8002614:	ca03      	ldmia	r2!, {r0, r1}
 8002616:	c303      	stmia	r3!, {r0, r1}
 8002618:	8811      	ldrh	r1, [r2, #0]
 800261a:	8019      	strh	r1, [r3, #0]
 800261c:	7892      	ldrb	r2, [r2, #2]
 800261e:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSCS[] 				= "AT+CSCS=\"GSM\"\r";		// Set character
 8002620:	2370      	movs	r3, #112	; 0x70
 8002622:	2218      	movs	r2, #24
 8002624:	4694      	mov	ip, r2
 8002626:	44bc      	add	ip, r7
 8002628:	4463      	add	r3, ip
 800262a:	4a8a      	ldr	r2, [pc, #552]	; (8002854 <sendGsmMessage+0x2e8>)
 800262c:	ca43      	ldmia	r2!, {r0, r1, r6}
 800262e:	c343      	stmia	r3!, {r0, r1, r6}
 8002630:	8811      	ldrh	r1, [r2, #0]
 8002632:	8019      	strh	r1, [r3, #0]
 8002634:	7892      	ldrb	r2, [r2, #2]
 8002636:	709a      	strb	r2, [r3, #2]
	uint8_t AT_CSQ[] 				= "AT+CSQ\r";				// Get Signal Strength in dBm
 8002638:	2268      	movs	r2, #104	; 0x68
 800263a:	2618      	movs	r6, #24
 800263c:	19bb      	adds	r3, r7, r6
 800263e:	189b      	adds	r3, r3, r2
 8002640:	4a85      	ldr	r2, [pc, #532]	; (8002858 <sendGsmMessage+0x2ec>)
 8002642:	ca03      	ldmia	r2!, {r0, r1}
 8002644:	c303      	stmia	r3!, {r0, r1}
	uint8_t AT_CPOWD[] 				= "AT+CPOWD=1\r";			// Power OFF Modem
 8002646:	225c      	movs	r2, #92	; 0x5c
 8002648:	19bb      	adds	r3, r7, r6
 800264a:	189b      	adds	r3, r3, r2
 800264c:	4a83      	ldr	r2, [pc, #524]	; (800285c <sendGsmMessage+0x2f0>)
 800264e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002650:	c343      	stmia	r3!, {r0, r1, r6}
	uint8_t AT_CMGS_SEND_CTRLZ[] 	= "\x1a";					// Send Control
 8002652:	2258      	movs	r2, #88	; 0x58
 8002654:	2618      	movs	r6, #24
 8002656:	19bb      	adds	r3, r7, r6
 8002658:	189b      	adds	r3, r3, r2
 800265a:	221a      	movs	r2, #26
 800265c:	801a      	strh	r2, [r3, #0]
	//uint8_t AT_CMGS_SEND_MSG_BUF[] 	= "AT+CMGS=\"+35844350xxxx\"\rMESSAGE";
	//=========================GSM
	char AT_CMGS_SEND_MSG_BUF_STRT[] = "AT+CMGS=\"";
 800265e:	214c      	movs	r1, #76	; 0x4c
 8002660:	19bb      	adds	r3, r7, r6
 8002662:	185b      	adds	r3, r3, r1
 8002664:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <sendGsmMessage+0x2f4>)
 8002666:	ca41      	ldmia	r2!, {r0, r6}
 8002668:	c341      	stmia	r3!, {r0, r6}
 800266a:	8812      	ldrh	r2, [r2, #0]
 800266c:	801a      	strh	r2, [r3, #0]
	char AT_CMGS_SEND_MSG_BUF_MIDL[] = "\"\r";
 800266e:	2048      	movs	r0, #72	; 0x48
 8002670:	2218      	movs	r2, #24
 8002672:	18bb      	adds	r3, r7, r2
 8002674:	181b      	adds	r3, r3, r0
 8002676:	4a7b      	ldr	r2, [pc, #492]	; (8002864 <sendGsmMessage+0x2f8>)
 8002678:	8811      	ldrh	r1, [r2, #0]
 800267a:	8019      	strh	r1, [r3, #0]
 800267c:	7892      	ldrb	r2, [r2, #2]
 800267e:	709a      	strb	r2, [r3, #2]
	char tempBuf1[25];
	char tempBuf2[25];

	char AT_CMGS_SEND_MSG_BUF_TOT[sizeof(AT_CMGS_SEND_MSG_BUF_STRT)+sizeof(AT_CMGS_SEND_MSG_BUF_MIDL)+strlen(gsmstruct.phoneNumber)+strlen(gsmstruct.message)-1];
 8002680:	211c      	movs	r1, #28
 8002682:	187b      	adds	r3, r7, r1
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0018      	movs	r0, r3
 8002688:	f7fd fd3e 	bl	8000108 <strlen>
 800268c:	0006      	movs	r6, r0
 800268e:	211c      	movs	r1, #28
 8002690:	187b      	adds	r3, r7, r1
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f7fd fd37 	bl	8000108 <strlen>
 800269a:	0003      	movs	r3, r0
 800269c:	18f3      	adds	r3, r6, r3
 800269e:	001e      	movs	r6, r3
 80026a0:	360c      	adds	r6, #12
 80026a2:	0033      	movs	r3, r6
 80026a4:	3b01      	subs	r3, #1
 80026a6:	22cc      	movs	r2, #204	; 0xcc
 80026a8:	2018      	movs	r0, #24
 80026aa:	4684      	mov	ip, r0
 80026ac:	44bc      	add	ip, r7
 80026ae:	4462      	add	r2, ip
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	60be      	str	r6, [r7, #8]
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	000b      	movs	r3, r1
 80026be:	0f5b      	lsrs	r3, r3, #29
 80026c0:	0010      	movs	r0, r2
 80026c2:	00c0      	lsls	r0, r0, #3
 80026c4:	6178      	str	r0, [r7, #20]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	4318      	orrs	r0, r3
 80026ca:	6178      	str	r0, [r7, #20]
 80026cc:	000b      	movs	r3, r1
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	603e      	str	r6, [r7, #0]
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	6839      	ldr	r1, [r7, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	000b      	movs	r3, r1
 80026de:	0f5b      	lsrs	r3, r3, #29
 80026e0:	0010      	movs	r0, r2
 80026e2:	00c5      	lsls	r5, r0, #3
 80026e4:	431d      	orrs	r5, r3
 80026e6:	000b      	movs	r3, r1
 80026e8:	00dc      	lsls	r4, r3, #3
 80026ea:	1df3      	adds	r3, r6, #7
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	466c      	mov	r4, sp
 80026f2:	1ae4      	subs	r4, r4, r3
 80026f4:	46a5      	mov	sp, r4
 80026f6:	466b      	mov	r3, sp
 80026f8:	3300      	adds	r3, #0
 80026fa:	24c8      	movs	r4, #200	; 0xc8
 80026fc:	2218      	movs	r2, #24
 80026fe:	18b8      	adds	r0, r7, r2
 8002700:	1905      	adds	r5, r0, r4
 8002702:	602b      	str	r3, [r5, #0]
	strcpy(AT_CMGS_SEND_MSG_BUF_TOT, AT_CMGS_SEND_MSG_BUF_STRT);
 8002704:	18bb      	adds	r3, r7, r2
 8002706:	191d      	adds	r5, r3, r4
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	214c      	movs	r1, #76	; 0x4c
 800270c:	0015      	movs	r5, r2
 800270e:	197a      	adds	r2, r7, r5
 8002710:	1852      	adds	r2, r2, r1
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f002 fe34 	bl	8005382 <strcpy>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, gsmstruct.phoneNumber);
 800271a:	197b      	adds	r3, r7, r5
 800271c:	1919      	adds	r1, r3, r4
 800271e:	680a      	ldr	r2, [r1, #0]
 8002720:	211c      	movs	r1, #28
 8002722:	187b      	adds	r3, r7, r1
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0019      	movs	r1, r3
 8002728:	0010      	movs	r0, r2
 800272a:	f002 fe1d 	bl	8005368 <strcat>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, AT_CMGS_SEND_MSG_BUF_MIDL);
 800272e:	197b      	adds	r3, r7, r5
 8002730:	1919      	adds	r1, r3, r4
 8002732:	680b      	ldr	r3, [r1, #0]
 8002734:	2048      	movs	r0, #72	; 0x48
 8002736:	197a      	adds	r2, r7, r5
 8002738:	1812      	adds	r2, r2, r0
 800273a:	0011      	movs	r1, r2
 800273c:	0018      	movs	r0, r3
 800273e:	f002 fe13 	bl	8005368 <strcat>
	strcat(AT_CMGS_SEND_MSG_BUF_TOT, gsmstruct.message);
 8002742:	197b      	adds	r3, r7, r5
 8002744:	1919      	adds	r1, r3, r4
 8002746:	680a      	ldr	r2, [r1, #0]
 8002748:	211c      	movs	r1, #28
 800274a:	187b      	adds	r3, r7, r1
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0019      	movs	r1, r3
 8002750:	0010      	movs	r0, r2
 8002752:	f002 fe09 	bl	8005368 <strcat>
	//=========================GSM
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002756:	4b44      	ldr	r3, [pc, #272]	; (8002868 <sendGsmMessage+0x2fc>)
 8002758:	2296      	movs	r2, #150	; 0x96
 800275a:	213f      	movs	r1, #63	; 0x3f
 800275c:	0018      	movs	r0, r3
 800275e:	f002 fdfb 	bl	8005358 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CSCS, sizeof(AT_CSCS), 10);
 8002762:	2370      	movs	r3, #112	; 0x70
 8002764:	197a      	adds	r2, r7, r5
 8002766:	18d1      	adds	r1, r2, r3
 8002768:	4840      	ldr	r0, [pc, #256]	; (800286c <sendGsmMessage+0x300>)
 800276a:	230a      	movs	r3, #10
 800276c:	220f      	movs	r2, #15
 800276e:	f002 f929 	bl	80049c4 <HAL_UART_Transmit>
 8002772:	0003      	movs	r3, r0
 8002774:	001a      	movs	r2, r3
 8002776:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <sendGsmMessage+0x304>)
 8002778:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 800277a:	493b      	ldr	r1, [pc, #236]	; (8002868 <sendGsmMessage+0x2fc>)
 800277c:	483b      	ldr	r0, [pc, #236]	; (800286c <sendGsmMessage+0x300>)
 800277e:	230a      	movs	r3, #10
 8002780:	2296      	movs	r2, #150	; 0x96
 8002782:	f002 f9c9 	bl	8004b18 <HAL_UART_Receive>
 8002786:	0003      	movs	r3, r0
 8002788:	001a      	movs	r2, r3
 800278a:	4b39      	ldr	r3, [pc, #228]	; (8002870 <sendGsmMessage+0x304>)
 800278c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800278e:	200a      	movs	r0, #10
 8002790:	f000 fa7e 	bl	8002c90 <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002794:	4b34      	ldr	r3, [pc, #208]	; (8002868 <sendGsmMessage+0x2fc>)
 8002796:	2296      	movs	r2, #150	; 0x96
 8002798:	213f      	movs	r1, #63	; 0x3f
 800279a:	0018      	movs	r0, r3
 800279c:	f002 fddc 	bl	8005358 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGS_SEND_MSG_BUF_TOT, sizeof(AT_CMGS_SEND_MSG_BUF_TOT), 10);
 80027a0:	197b      	adds	r3, r7, r5
 80027a2:	191b      	adds	r3, r3, r4
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	b2b2      	uxth	r2, r6
 80027a8:	4830      	ldr	r0, [pc, #192]	; (800286c <sendGsmMessage+0x300>)
 80027aa:	230a      	movs	r3, #10
 80027ac:	f002 f90a 	bl	80049c4 <HAL_UART_Transmit>
 80027b0:	0003      	movs	r3, r0
 80027b2:	001a      	movs	r2, r3
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <sendGsmMessage+0x304>)
 80027b6:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 80027b8:	492b      	ldr	r1, [pc, #172]	; (8002868 <sendGsmMessage+0x2fc>)
 80027ba:	482c      	ldr	r0, [pc, #176]	; (800286c <sendGsmMessage+0x300>)
 80027bc:	230a      	movs	r3, #10
 80027be:	2296      	movs	r2, #150	; 0x96
 80027c0:	f002 f9aa 	bl	8004b18 <HAL_UART_Receive>
 80027c4:	0003      	movs	r3, r0
 80027c6:	001a      	movs	r2, r3
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <sendGsmMessage+0x304>)
 80027ca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80027cc:	200a      	movs	r0, #10
 80027ce:	f000 fa5f 	bl	8002c90 <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 80027d2:	4b25      	ldr	r3, [pc, #148]	; (8002868 <sendGsmMessage+0x2fc>)
 80027d4:	2296      	movs	r2, #150	; 0x96
 80027d6:	213f      	movs	r1, #63	; 0x3f
 80027d8:	0018      	movs	r0, r3
 80027da:	f002 fdbd 	bl	8005358 <memset>

	uart2Status = HAL_UART_Transmit(&huart2, AT_CMGS_SEND_CTRLZ, sizeof(AT_CMGS_SEND_CTRLZ), 1000);
 80027de:	23fa      	movs	r3, #250	; 0xfa
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	2258      	movs	r2, #88	; 0x58
 80027e4:	1978      	adds	r0, r7, r5
 80027e6:	1881      	adds	r1, r0, r2
 80027e8:	4820      	ldr	r0, [pc, #128]	; (800286c <sendGsmMessage+0x300>)
 80027ea:	2202      	movs	r2, #2
 80027ec:	f002 f8ea 	bl	80049c4 <HAL_UART_Transmit>
 80027f0:	0003      	movs	r3, r0
 80027f2:	001a      	movs	r2, r3
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <sendGsmMessage+0x304>)
 80027f6:	701a      	strb	r2, [r3, #0]
	uart2Status = HAL_UART_Receive(&huart2, receiveUART2Data, sizeof(receiveUART2Data), 10);
 80027f8:	491b      	ldr	r1, [pc, #108]	; (8002868 <sendGsmMessage+0x2fc>)
 80027fa:	481c      	ldr	r0, [pc, #112]	; (800286c <sendGsmMessage+0x300>)
 80027fc:	230a      	movs	r3, #10
 80027fe:	2296      	movs	r2, #150	; 0x96
 8002800:	f002 f98a 	bl	8004b18 <HAL_UART_Receive>
 8002804:	0003      	movs	r3, r0
 8002806:	001a      	movs	r2, r3
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <sendGsmMessage+0x304>)
 800280a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800280c:	200a      	movs	r0, #10
 800280e:	f000 fa3f 	bl	8002c90 <HAL_Delay>
	memset(receiveUART2Data, '?', sizeof(receiveUART2Data));
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <sendGsmMessage+0x2fc>)
 8002814:	2296      	movs	r2, #150	; 0x96
 8002816:	213f      	movs	r1, #63	; 0x3f
 8002818:	0018      	movs	r0, r3
 800281a:	f002 fd9d 	bl	8005358 <memset>
	//=========================GSM
	gsmstruct.numberOk = 1;
 800281e:	211c      	movs	r1, #28
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2201      	movs	r2, #1
 8002824:	721a      	strb	r2, [r3, #8]
	return gsmstruct.numberOk;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	7a1b      	ldrb	r3, [r3, #8]
 800282a:	46c5      	mov	sp, r8
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b03a      	add	sp, #232	; 0xe8
 8002832:	bc80      	pop	{r7}
 8002834:	46b8      	mov	r8, r7
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002838:	000d5441 	.word	0x000d5441
 800283c:	08005568 	.word	0x08005568
 8002840:	08005570 	.word	0x08005570
 8002844:	0800557c 	.word	0x0800557c
 8002848:	08005588 	.word	0x08005588
 800284c:	08005594 	.word	0x08005594
 8002850:	080055a0 	.word	0x080055a0
 8002854:	080055ac 	.word	0x080055ac
 8002858:	080055bc 	.word	0x080055bc
 800285c:	080055c4 	.word	0x080055c4
 8002860:	080055d0 	.word	0x080055d0
 8002864:	080055dc 	.word	0x080055dc
 8002868:	200000ac 	.word	0x200000ac
 800286c:	2000030c 	.word	0x2000030c
 8002870:	200002fc 	.word	0x200002fc

08002874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800287c:	e7fe      	b.n	800287c <Error_Handler+0x8>
	...

08002880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_MspInit+0x44>)
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_MspInit+0x44>)
 800288c:	2101      	movs	r1, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_MspInit+0x44>)
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2201      	movs	r2, #1
 8002898:	4013      	ands	r3, r2
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_MspInit+0x44>)
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_MspInit+0x44>)
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0549      	lsls	r1, r1, #21
 80028a8:	430a      	orrs	r2, r1
 80028aa:	61da      	str	r2, [r3, #28]
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_MspInit+0x44>)
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	055b      	lsls	r3, r3, #21
 80028b4:	4013      	ands	r3, r2
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b08b      	sub	sp, #44	; 0x2c
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	2414      	movs	r4, #20
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	0018      	movs	r0, r3
 80028d6:	2314      	movs	r3, #20
 80028d8:	001a      	movs	r2, r3
 80028da:	2100      	movs	r1, #0
 80028dc:	f002 fd3c 	bl	8005358 <memset>
  if(hi2c->Instance==I2C1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_I2C_MspInit+0x90>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d131      	bne.n	800294e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_I2C_MspInit+0x94>)
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_I2C_MspInit+0x94>)
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	03c9      	lsls	r1, r1, #15
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_I2C_MspInit+0x94>)
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	03db      	lsls	r3, r3, #15
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002906:	0021      	movs	r1, r4
 8002908:	187b      	adds	r3, r7, r1
 800290a:	2203      	movs	r2, #3
 800290c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2212      	movs	r2, #18
 8002912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002914:	187b      	adds	r3, r7, r1
 8002916:	2201      	movs	r2, #1
 8002918:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2203      	movs	r2, #3
 800291e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2201      	movs	r2, #1
 8002924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002926:	187b      	adds	r3, r7, r1
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <HAL_I2C_MspInit+0x98>)
 800292a:	0019      	movs	r1, r3
 800292c:	0010      	movs	r0, r2
 800292e:	f000 fa87 	bl	8002e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_I2C_MspInit+0x94>)
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_I2C_MspInit+0x94>)
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	0389      	lsls	r1, r1, #14
 800293c:	430a      	orrs	r2, r1
 800293e:	61da      	str	r2, [r3, #28]
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_I2C_MspInit+0x94>)
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	039b      	lsls	r3, r3, #14
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b00b      	add	sp, #44	; 0x2c
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40005400 	.word	0x40005400
 800295c:	40021000 	.word	0x40021000
 8002960:	48001400 	.word	0x48001400

08002964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b08b      	sub	sp, #44	; 0x2c
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	2414      	movs	r4, #20
 800296e:	193b      	adds	r3, r7, r4
 8002970:	0018      	movs	r0, r3
 8002972:	2314      	movs	r3, #20
 8002974:	001a      	movs	r2, r3
 8002976:	2100      	movs	r1, #0
 8002978:	f002 fcee 	bl	8005358 <memset>
  if(hspi->Instance==SPI1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_SPI_MspInit+0x90>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d132      	bne.n	80029ec <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_SPI_MspInit+0x94>)
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_SPI_MspInit+0x94>)
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	0149      	lsls	r1, r1, #5
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_SPI_MspInit+0x94>)
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_SPI_MspInit+0x94>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_SPI_MspInit+0x94>)
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	0289      	lsls	r1, r1, #10
 80029ac:	430a      	orrs	r2, r1
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_SPI_MspInit+0x94>)
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	029b      	lsls	r3, r3, #10
 80029b8:	4013      	ands	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029be:	0021      	movs	r1, r4
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	22e0      	movs	r2, #224	; 0xe0
 80029c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	2202      	movs	r2, #2
 80029ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2203      	movs	r2, #3
 80029d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	187a      	adds	r2, r7, r1
 80029e0:	2390      	movs	r3, #144	; 0x90
 80029e2:	05db      	lsls	r3, r3, #23
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 fa2a 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b00b      	add	sp, #44	; 0x2c
 80029f2:	bd90      	pop	{r4, r7, pc}
 80029f4:	40013000 	.word	0x40013000
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b08d      	sub	sp, #52	; 0x34
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	241c      	movs	r4, #28
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	0018      	movs	r0, r3
 8002a0a:	2314      	movs	r3, #20
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f002 fca2 	bl	8005358 <memset>
  if(huart->Instance==USART1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <HAL_UART_MspInit+0x104>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d134      	bne.n	8002a88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	01c9      	lsls	r1, r1, #7
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	619a      	str	r2, [r3, #24]
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	01db      	lsls	r3, r3, #7
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	0289      	lsls	r1, r1, #10
 8002a44:	430a      	orrs	r2, r1
 8002a46:	615a      	str	r2, [r3, #20]
 8002a48:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	029b      	lsls	r3, r3, #10
 8002a50:	4013      	ands	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	22c0      	movs	r2, #192	; 0xc0
 8002a5a:	00d2      	lsls	r2, r2, #3
 8002a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	0021      	movs	r1, r4
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2202      	movs	r2, #2
 8002a64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	2201      	movs	r2, #1
 8002a76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	187a      	adds	r2, r7, r1
 8002a7a:	2390      	movs	r3, #144	; 0x90
 8002a7c:	05db      	lsls	r3, r3, #23
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f9dd 	bl	8002e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a86:	e037      	b.n	8002af8 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d132      	bne.n	8002af8 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0289      	lsls	r1, r1, #10
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0289      	lsls	r1, r1, #10
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	615a      	str	r2, [r3, #20]
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	029b      	lsls	r3, r3, #10
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002aca:	211c      	movs	r1, #28
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	187a      	adds	r2, r7, r1
 8002aec:	2390      	movs	r3, #144	; 0x90
 8002aee:	05db      	lsls	r3, r3, #23
 8002af0:	0011      	movs	r1, r2
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f9a4 	bl	8002e40 <HAL_GPIO_Init>
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b00d      	add	sp, #52	; 0x34
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40004400 	.word	0x40004400

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b30:	f000 f892 	bl	8002c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b44:	4813      	ldr	r0, [pc, #76]	; (8002b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b46:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002b48:	4813      	ldr	r0, [pc, #76]	; (8002b98 <LoopForever+0x6>)
    LDR R1, [R0]
 8002b4a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002b4c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <LoopForever+0xa>)
    CMP R1, R2
 8002b50:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002b52:	d105      	bne.n	8002b60 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002b54:	4812      	ldr	r0, [pc, #72]	; (8002ba0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002b56:	4913      	ldr	r1, [pc, #76]	; (8002ba4 <LoopForever+0x12>)
    STR R1, [R0]
 8002b58:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002b5a:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002b5c:	4913      	ldr	r1, [pc, #76]	; (8002bac <LoopForever+0x1a>)
    STR R1, [R0]
 8002b5e:	6001      	str	r1, [r0, #0]

08002b60 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b60:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002b62:	4914      	ldr	r1, [pc, #80]	; (8002bb4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <LoopForever+0x26>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b68:	e002      	b.n	8002b70 <LoopCopyDataInit>

08002b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6e:	3304      	adds	r3, #4

08002b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b74:	d3f9      	bcc.n	8002b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b76:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002b78:	4c11      	ldr	r4, [pc, #68]	; (8002bc0 <LoopForever+0x2e>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b7c:	e001      	b.n	8002b82 <LoopFillZerobss>

08002b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b80:	3204      	adds	r2, #4

08002b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b84:	d3fb      	bcc.n	8002b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b86:	f7ff ffd8 	bl	8002b3a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b8a:	f002 fbc1 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b8e:	f7fe fc29 	bl	80013e4 <main>

08002b92 <LoopForever>:

LoopForever:
    b LoopForever
 8002b92:	e7fe      	b.n	8002b92 <LoopForever>
  ldr   r0, =_estack
 8002b94:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002b98:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002b9c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002ba0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002ba4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002ba8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002bac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002bb8:	08005764 	.word	0x08005764
  ldr r2, =_sbss
 8002bbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002bc0:	200003bc 	.word	0x200003bc

08002bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bc4:	e7fe      	b.n	8002bc4 <ADC1_IRQHandler>
	...

08002bc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_Init+0x24>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_Init+0x24>)
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f000 f809 	bl	8002bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bde:	f7ff fe4f 	bl	8002880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_InitTick+0x5c>)
 8002bfa:	681c      	ldr	r4, [r3, #0]
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_InitTick+0x60>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	0019      	movs	r1, r3
 8002c02:	23fa      	movs	r3, #250	; 0xfa
 8002c04:	0098      	lsls	r0, r3, #2
 8002c06:	f7fd fa87 	bl	8000118 <__udivsi3>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	0020      	movs	r0, r4
 8002c10:	f7fd fa82 	bl	8000118 <__udivsi3>
 8002c14:	0003      	movs	r3, r0
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 f905 	bl	8002e26 <HAL_SYSTICK_Config>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e00f      	b.n	8002c44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d80b      	bhi.n	8002c42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	425b      	negs	r3, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f8e2 	bl	8002dfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_InitTick+0x64>)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b003      	add	sp, #12
 8002c4a:	bd90      	pop	{r4, r7, pc}
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_IncTick+0x1c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	001a      	movs	r2, r3
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_IncTick+0x20>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	18d2      	adds	r2, r2, r3
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_IncTick+0x20>)
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	20000008 	.word	0x20000008
 8002c78:	200003b8 	.word	0x200003b8

08002c7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <HAL_GetTick+0x10>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	200003b8 	.word	0x200003b8

08002c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff fff0 	bl	8002c7c <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_Delay+0x44>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	001a      	movs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	f7ff ffe0 	bl	8002c7c <HAL_GetTick>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d8f7      	bhi.n	8002cb8 <HAL_Delay+0x28>
  {
  }
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	0002      	movs	r2, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b7f      	cmp	r3, #127	; 0x7f
 8002cec:	d828      	bhi.n	8002d40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cee:	4a2f      	ldr	r2, [pc, #188]	; (8002dac <__NVIC_SetPriority+0xd4>)
 8002cf0:	1dfb      	adds	r3, r7, #7
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	33c0      	adds	r3, #192	; 0xc0
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	589b      	ldr	r3, [r3, r2]
 8002cfe:	1dfa      	adds	r2, r7, #7
 8002d00:	7812      	ldrb	r2, [r2, #0]
 8002d02:	0011      	movs	r1, r2
 8002d04:	2203      	movs	r2, #3
 8002d06:	400a      	ands	r2, r1
 8002d08:	00d2      	lsls	r2, r2, #3
 8002d0a:	21ff      	movs	r1, #255	; 0xff
 8002d0c:	4091      	lsls	r1, r2
 8002d0e:	000a      	movs	r2, r1
 8002d10:	43d2      	mvns	r2, r2
 8002d12:	401a      	ands	r2, r3
 8002d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	22ff      	movs	r2, #255	; 0xff
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0018      	movs	r0, r3
 8002d24:	2303      	movs	r3, #3
 8002d26:	4003      	ands	r3, r0
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d2c:	481f      	ldr	r0, [pc, #124]	; (8002dac <__NVIC_SetPriority+0xd4>)
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	430a      	orrs	r2, r1
 8002d38:	33c0      	adds	r3, #192	; 0xc0
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d3e:	e031      	b.n	8002da4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <__NVIC_SetPriority+0xd8>)
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	0019      	movs	r1, r3
 8002d48:	230f      	movs	r3, #15
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	3b08      	subs	r3, #8
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3306      	adds	r3, #6
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	3304      	adds	r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1dfa      	adds	r2, r7, #7
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	0011      	movs	r1, r2
 8002d60:	2203      	movs	r2, #3
 8002d62:	400a      	ands	r2, r1
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	21ff      	movs	r1, #255	; 0xff
 8002d68:	4091      	lsls	r1, r2
 8002d6a:	000a      	movs	r2, r1
 8002d6c:	43d2      	mvns	r2, r2
 8002d6e:	401a      	ands	r2, r3
 8002d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	22ff      	movs	r2, #255	; 0xff
 8002d78:	401a      	ands	r2, r3
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	2303      	movs	r3, #3
 8002d82:	4003      	ands	r3, r0
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d88:	4809      	ldr	r0, [pc, #36]	; (8002db0 <__NVIC_SetPriority+0xd8>)
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	001c      	movs	r4, r3
 8002d90:	230f      	movs	r3, #15
 8002d92:	4023      	ands	r3, r4
 8002d94:	3b08      	subs	r3, #8
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	3306      	adds	r3, #6
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	18c3      	adds	r3, r0, r3
 8002da0:	3304      	adds	r3, #4
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b003      	add	sp, #12
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	045b      	lsls	r3, r3, #17
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d301      	bcc.n	8002dcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e010      	b.n	8002dee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <SysTick_Config+0x44>)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	425b      	negs	r3, r3
 8002dd8:	2103      	movs	r1, #3
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7ff ff7c 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x44>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x44>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	210f      	movs	r1, #15
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	1c02      	adds	r2, r0, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff ff5d 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b004      	add	sp, #16
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff ffbf 	bl	8002db4 <SysTick_Config>
 8002e36:	0003      	movs	r3, r0
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4e:	e149      	b.n	80030e4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4091      	lsls	r1, r2
 8002e5a:	000a      	movs	r2, r1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d100      	bne.n	8002e68 <HAL_GPIO_Init+0x28>
 8002e66:	e13a      	b.n	80030de <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d005      	beq.n	8002e80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d130      	bne.n	8002ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	0013      	movs	r3, r2
 8002e90:	43da      	mvns	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	0013      	movs	r3, r2
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	2201      	movs	r2, #1
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	0013      	movs	r3, r2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d017      	beq.n	8002f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	409a      	lsls	r2, r3
 8002efc:	0013      	movs	r3, r2
 8002efe:	43da      	mvns	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	0013      	movs	r3, r2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2203      	movs	r2, #3
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d123      	bne.n	8002f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	58d3      	ldr	r3, [r2, r3]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	409a      	lsls	r2, r3
 8002f44:	0013      	movs	r3, r2
 8002f46:	43da      	mvns	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2107      	movs	r1, #7
 8002f56:	400b      	ands	r3, r1
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	0092      	lsls	r2, r2, #2
 8002f6e:	6939      	ldr	r1, [r7, #16]
 8002f70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	0013      	movs	r3, r2
 8002f82:	43da      	mvns	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	401a      	ands	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	409a      	lsls	r2, r3
 8002f98:	0013      	movs	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	23c0      	movs	r3, #192	; 0xc0
 8002fac:	029b      	lsls	r3, r3, #10
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d100      	bne.n	8002fb4 <HAL_GPIO_Init+0x174>
 8002fb2:	e094      	b.n	80030de <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb4:	4b51      	ldr	r3, [pc, #324]	; (80030fc <HAL_GPIO_Init+0x2bc>)
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_GPIO_Init+0x2bc>)
 8002fba:	2101      	movs	r1, #1
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	619a      	str	r2, [r3, #24]
 8002fc0:	4b4e      	ldr	r3, [pc, #312]	; (80030fc <HAL_GPIO_Init+0x2bc>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fcc:	4a4c      	ldr	r2, [pc, #304]	; (8003100 <HAL_GPIO_Init+0x2c0>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	589b      	ldr	r3, [r3, r2]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	4013      	ands	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	0013      	movs	r3, r2
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	2390      	movs	r3, #144	; 0x90
 8002ff4:	05db      	lsls	r3, r3, #23
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d00d      	beq.n	8003016 <HAL_GPIO_Init+0x1d6>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a41      	ldr	r2, [pc, #260]	; (8003104 <HAL_GPIO_Init+0x2c4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <HAL_GPIO_Init+0x1d2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a40      	ldr	r2, [pc, #256]	; (8003108 <HAL_GPIO_Init+0x2c8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d101      	bne.n	800300e <HAL_GPIO_Init+0x1ce>
 800300a:	2302      	movs	r3, #2
 800300c:	e004      	b.n	8003018 <HAL_GPIO_Init+0x1d8>
 800300e:	2305      	movs	r3, #5
 8003010:	e002      	b.n	8003018 <HAL_GPIO_Init+0x1d8>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_GPIO_Init+0x1d8>
 8003016:	2300      	movs	r3, #0
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	2103      	movs	r1, #3
 800301c:	400a      	ands	r2, r1
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	4093      	lsls	r3, r2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003028:	4935      	ldr	r1, [pc, #212]	; (8003100 <HAL_GPIO_Init+0x2c0>)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003036:	4b35      	ldr	r3, [pc, #212]	; (800310c <HAL_GPIO_Init+0x2cc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	43da      	mvns	r2, r3
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	025b      	lsls	r3, r3, #9
 800304e:	4013      	ands	r3, r2
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800305a:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_GPIO_Init+0x2cc>)
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003060:	4b2a      	ldr	r3, [pc, #168]	; (800310c <HAL_GPIO_Init+0x2cc>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	43da      	mvns	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	029b      	lsls	r3, r3, #10
 8003078:	4013      	ands	r3, r2
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003084:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_GPIO_Init+0x2cc>)
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_GPIO_Init+0x2cc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	43da      	mvns	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	035b      	lsls	r3, r3, #13
 80030a2:	4013      	ands	r3, r2
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_GPIO_Init+0x2cc>)
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_GPIO_Init+0x2cc>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43da      	mvns	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	039b      	lsls	r3, r3, #14
 80030cc:	4013      	ands	r3, r2
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_GPIO_Init+0x2cc>)
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	40da      	lsrs	r2, r3
 80030ec:	1e13      	subs	r3, r2, #0
 80030ee:	d000      	beq.n	80030f2 <HAL_GPIO_Init+0x2b2>
 80030f0:	e6ae      	b.n	8002e50 <HAL_GPIO_Init+0x10>
  } 
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b006      	add	sp, #24
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010000 	.word	0x40010000
 8003104:	48000400 	.word	0x48000400
 8003108:	48000800 	.word	0x48000800
 800310c:	40010400 	.word	0x40010400

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	0008      	movs	r0, r1
 800311a:	0011      	movs	r1, r2
 800311c:	1cbb      	adds	r3, r7, #2
 800311e:	1c02      	adds	r2, r0, #0
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	1c7b      	adds	r3, r7, #1
 8003124:	1c0a      	adds	r2, r1, #0
 8003126:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003128:	1c7b      	adds	r3, r7, #1
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003130:	1cbb      	adds	r3, r7, #2
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003138:	e003      	b.n	8003142 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800313a:	1cbb      	adds	r3, r7, #2
 800313c:	881a      	ldrh	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e082      	b.n	8003264 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2241      	movs	r2, #65	; 0x41
 8003162:	5c9b      	ldrb	r3, [r3, r2]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d107      	bne.n	800317a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2240      	movs	r2, #64	; 0x40
 800316e:	2100      	movs	r1, #0
 8003170:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff fba7 	bl	80028c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2241      	movs	r2, #65	; 0x41
 800317e:	2124      	movs	r1, #36	; 0x24
 8003180:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	438a      	bics	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <HAL_I2C_Init+0x120>)
 800319c:	400a      	ands	r2, r1
 800319e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4931      	ldr	r1, [pc, #196]	; (8003270 <HAL_I2C_Init+0x124>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d108      	bne.n	80031ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	0209      	lsls	r1, r1, #8
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e007      	b.n	80031da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2184      	movs	r1, #132	; 0x84
 80031d4:	0209      	lsls	r1, r1, #8
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d104      	bne.n	80031ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	491f      	ldr	r1, [pc, #124]	; (8003274 <HAL_I2C_Init+0x128>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	491a      	ldr	r1, [pc, #104]	; (8003270 <HAL_I2C_Init+0x124>)
 8003208:	400a      	ands	r2, r1
 800320a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	431a      	orrs	r2, r3
 8003216:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69d9      	ldr	r1, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2241      	movs	r2, #65	; 0x41
 8003250:	2120      	movs	r1, #32
 8003252:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2242      	movs	r2, #66	; 0x42
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}
 800326c:	f0ffffff 	.word	0xf0ffffff
 8003270:	ffff7fff 	.word	0xffff7fff
 8003274:	02008000 	.word	0x02008000

08003278 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b089      	sub	sp, #36	; 0x24
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	0008      	movs	r0, r1
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	0019      	movs	r1, r3
 8003286:	230a      	movs	r3, #10
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	1c02      	adds	r2, r0, #0
 800328c:	801a      	strh	r2, [r3, #0]
 800328e:	2308      	movs	r3, #8
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	1c0a      	adds	r2, r1, #0
 8003294:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2241      	movs	r2, #65	; 0x41
 800329a:	5c9b      	ldrb	r3, [r3, r2]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d000      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x2c>
 80032a2:	e0e7      	b.n	8003474 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2240      	movs	r2, #64	; 0x40
 80032a8:	5c9b      	ldrb	r3, [r3, r2]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Master_Transmit+0x3a>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0e1      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1fe>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2240      	movs	r2, #64	; 0x40
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ba:	f7ff fcdf 	bl	8002c7c <HAL_GetTick>
 80032be:	0003      	movs	r3, r0
 80032c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	0219      	lsls	r1, r3, #8
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2319      	movs	r3, #25
 80032ce:	2201      	movs	r2, #1
 80032d0:	f000 fa10 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0cc      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2241      	movs	r2, #65	; 0x41
 80032e0:	2121      	movs	r1, #33	; 0x21
 80032e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2242      	movs	r2, #66	; 0x42
 80032e8:	2110      	movs	r1, #16
 80032ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2208      	movs	r2, #8
 80032fc:	18ba      	adds	r2, r7, r2
 80032fe:	8812      	ldrh	r2, [r2, #0]
 8003300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2bff      	cmp	r3, #255	; 0xff
 8003310:	d911      	bls.n	8003336 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	22ff      	movs	r2, #255	; 0xff
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	045c      	lsls	r4, r3, #17
 8003322:	230a      	movs	r3, #10
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	8819      	ldrh	r1, [r3, #0]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_I2C_Master_Transmit+0x208>)
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	0023      	movs	r3, r4
 8003330:	f000 fb80 	bl	8003a34 <I2C_TransferConfig>
 8003334:	e075      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	b2da      	uxtb	r2, r3
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	049c      	lsls	r4, r3, #18
 800334a:	230a      	movs	r3, #10
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	8819      	ldrh	r1, [r3, #0]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_I2C_Master_Transmit+0x208>)
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	0023      	movs	r3, r4
 8003358:	f000 fb6c 	bl	8003a34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800335c:	e061      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 fa04 	bl	8003772 <I2C_WaitOnTXISFlagUntilTimeout>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e081      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03a      	beq.n	8003422 <HAL_I2C_Master_Transmit+0x1aa>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d136      	bne.n	8003422 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	0013      	movs	r3, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	f000 f997 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e053      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2bff      	cmp	r3, #255	; 0xff
 80033d6:	d911      	bls.n	80033fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	045c      	lsls	r4, r3, #17
 80033e8:	230a      	movs	r3, #10
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	8819      	ldrh	r1, [r3, #0]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	2300      	movs	r3, #0
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	0023      	movs	r3, r4
 80033f6:	f000 fb1d 	bl	8003a34 <I2C_TransferConfig>
 80033fa:	e012      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	b2da      	uxtb	r2, r3
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	049c      	lsls	r4, r3, #18
 8003410:	230a      	movs	r3, #10
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	8819      	ldrh	r1, [r3, #0]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	2300      	movs	r3, #0
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	0023      	movs	r3, r4
 800341e:	f000 fb09 	bl	8003a34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d198      	bne.n	800335e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 f9dc 	bl	80037f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003438:	1e03      	subs	r3, r0, #0
 800343a:	d001      	beq.n	8003440 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e01a      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2220      	movs	r2, #32
 8003446:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	490c      	ldr	r1, [pc, #48]	; (8003484 <HAL_I2C_Master_Transmit+0x20c>)
 8003454:	400a      	ands	r2, r1
 8003456:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2241      	movs	r2, #65	; 0x41
 800345c:	2120      	movs	r1, #32
 800345e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2242      	movs	r2, #66	; 0x42
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2240      	movs	r2, #64	; 0x40
 800346c:	2100      	movs	r1, #0
 800346e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	b007      	add	sp, #28
 800347c:	bd90      	pop	{r4, r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	80002000 	.word	0x80002000
 8003484:	fe00e800 	.word	0xfe00e800

08003488 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	0008      	movs	r0, r1
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	0019      	movs	r1, r3
 8003496:	230a      	movs	r3, #10
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	1c02      	adds	r2, r0, #0
 800349c:	801a      	strh	r2, [r3, #0]
 800349e:	2308      	movs	r3, #8
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	1c0a      	adds	r2, r1, #0
 80034a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2241      	movs	r2, #65	; 0x41
 80034aa:	5c9b      	ldrb	r3, [r3, r2]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d000      	beq.n	80034b4 <HAL_I2C_Master_Receive+0x2c>
 80034b2:	e0e8      	b.n	8003686 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	5c9b      	ldrb	r3, [r3, r2]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_I2C_Master_Receive+0x3a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0e2      	b.n	8003688 <HAL_I2C_Master_Receive+0x200>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2240      	movs	r2, #64	; 0x40
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ca:	f7ff fbd7 	bl	8002c7c <HAL_GetTick>
 80034ce:	0003      	movs	r3, r0
 80034d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	0219      	lsls	r1, r3, #8
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	f000 f908 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d001      	beq.n	80034ec <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0cd      	b.n	8003688 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2241      	movs	r2, #65	; 0x41
 80034f0:	2122      	movs	r1, #34	; 0x22
 80034f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2242      	movs	r2, #66	; 0x42
 80034f8:	2110      	movs	r1, #16
 80034fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2208      	movs	r2, #8
 800350c:	18ba      	adds	r2, r7, r2
 800350e:	8812      	ldrh	r2, [r2, #0]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2bff      	cmp	r3, #255	; 0xff
 8003520:	d911      	bls.n	8003546 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	b2da      	uxtb	r2, r3
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	045c      	lsls	r4, r3, #17
 8003532:	230a      	movs	r3, #10
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	8819      	ldrh	r1, [r3, #0]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	4b55      	ldr	r3, [pc, #340]	; (8003690 <HAL_I2C_Master_Receive+0x208>)
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	0023      	movs	r3, r4
 8003540:	f000 fa78 	bl	8003a34 <I2C_TransferConfig>
 8003544:	e076      	b.n	8003634 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	b2da      	uxtb	r2, r3
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	049c      	lsls	r4, r3, #18
 800355a:	230a      	movs	r3, #10
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	8819      	ldrh	r1, [r3, #0]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <HAL_I2C_Master_Receive+0x208>)
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	0023      	movs	r3, r4
 8003568:	f000 fa64 	bl	8003a34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800356c:	e062      	b.n	8003634 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 f977 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357a:	1e03      	subs	r3, r0, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e082      	b.n	8003688 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d03a      	beq.n	8003634 <HAL_I2C_Master_Receive+0x1ac>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d136      	bne.n	8003634 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	0013      	movs	r3, r2
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	f000 f88e 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e053      	b.n	8003688 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d911      	bls.n	800360e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22ff      	movs	r2, #255	; 0xff
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	045c      	lsls	r4, r3, #17
 80035fa:	230a      	movs	r3, #10
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	8819      	ldrh	r1, [r3, #0]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	2300      	movs	r3, #0
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	0023      	movs	r3, r4
 8003608:	f000 fa14 	bl	8003a34 <I2C_TransferConfig>
 800360c:	e012      	b.n	8003634 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	b2da      	uxtb	r2, r3
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	049c      	lsls	r4, r3, #18
 8003622:	230a      	movs	r3, #10
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	8819      	ldrh	r1, [r3, #0]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	0023      	movs	r3, r4
 8003630:	f000 fa00 	bl	8003a34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d197      	bne.n	800356e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0018      	movs	r0, r3
 8003646:	f000 f8d3 	bl	80037f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e01a      	b.n	8003688 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2220      	movs	r2, #32
 8003658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	490b      	ldr	r1, [pc, #44]	; (8003694 <HAL_I2C_Master_Receive+0x20c>)
 8003666:	400a      	ands	r2, r1
 8003668:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2241      	movs	r2, #65	; 0x41
 800366e:	2120      	movs	r1, #32
 8003670:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2242      	movs	r2, #66	; 0x42
 8003676:	2100      	movs	r1, #0
 8003678:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2240      	movs	r2, #64	; 0x40
 800367e:	2100      	movs	r1, #0
 8003680:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b007      	add	sp, #28
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	80002400 	.word	0x80002400
 8003694:	fe00e800 	.word	0xfe00e800

08003698 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2241      	movs	r2, #65	; 0x41
 80036a4:	5c9b      	ldrb	r3, [r3, r2]
 80036a6:	b2db      	uxtb	r3, r3
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2202      	movs	r2, #2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d103      	bne.n	80036ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2201      	movs	r2, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d007      	beq.n	80036ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2101      	movs	r1, #1
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
  }
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003704:	e021      	b.n	800374a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	d01e      	beq.n	800374a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370c:	f7ff fab6 	bl	8002c7c <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d302      	bcc.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d113      	bne.n	800374a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	2220      	movs	r2, #32
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2241      	movs	r2, #65	; 0x41
 8003732:	2120      	movs	r1, #32
 8003734:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2242      	movs	r2, #66	; 0x42
 800373a:	2100      	movs	r1, #0
 800373c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e00f      	b.n	800376a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	425a      	negs	r2, r3
 800375a:	4153      	adcs	r3, r2
 800375c:	b2db      	uxtb	r3, r3
 800375e:	001a      	movs	r2, r3
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d0ce      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800377e:	e02b      	b.n	80037d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 f8da 	bl	8003940 <I2C_IsAcknowledgeFailed>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d001      	beq.n	8003794 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e029      	b.n	80037e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3301      	adds	r3, #1
 8003798:	d01e      	beq.n	80037d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379a:	f7ff fa6f 	bl	8002c7c <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d302      	bcc.n	80037b0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d113      	bne.n	80037d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	2220      	movs	r2, #32
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2241      	movs	r2, #65	; 0x41
 80037c0:	2120      	movs	r1, #32
 80037c2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2242      	movs	r2, #66	; 0x42
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e007      	b.n	80037e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2202      	movs	r2, #2
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d1cc      	bne.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b004      	add	sp, #16
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037fc:	e028      	b.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 f89b 	bl	8003940 <I2C_IsAcknowledgeFailed>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d001      	beq.n	8003812 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e026      	b.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7ff fa33 	bl	8002c7c <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d113      	bne.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	2220      	movs	r2, #32
 800382e:	431a      	orrs	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2241      	movs	r2, #65	; 0x41
 8003838:	2120      	movs	r1, #32
 800383a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2242      	movs	r2, #66	; 0x42
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2220      	movs	r2, #32
 8003858:	4013      	ands	r3, r2
 800385a:	2b20      	cmp	r3, #32
 800385c:	d1cf      	bne.n	80037fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	e055      	b.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	0018      	movs	r0, r3
 800387e:	f000 f85f 	bl	8003940 <I2C_IsAcknowledgeFailed>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d001      	beq.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e053      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2220      	movs	r2, #32
 8003892:	4013      	ands	r3, r2
 8003894:	2b20      	cmp	r3, #32
 8003896:	d129      	bne.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2204      	movs	r2, #4
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d105      	bne.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e03f      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2220      	movs	r2, #32
 80038b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	491d      	ldr	r1, [pc, #116]	; (800393c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80038c6:	400a      	ands	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2241      	movs	r2, #65	; 0x41
 80038d4:	2120      	movs	r1, #32
 80038d6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2242      	movs	r2, #66	; 0x42
 80038dc:	2100      	movs	r1, #0
 80038de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	2100      	movs	r1, #0
 80038e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e022      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ec:	f7ff f9c6 	bl	8002c7c <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	2220      	movs	r2, #32
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2241      	movs	r2, #65	; 0x41
 8003912:	2120      	movs	r1, #32
 8003914:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2204      	movs	r2, #4
 800392a:	4013      	ands	r3, r2
 800392c:	2b04      	cmp	r3, #4
 800392e:	d1a2      	bne.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	fe00e800 	.word	0xfe00e800

08003940 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2210      	movs	r2, #16
 8003954:	4013      	ands	r3, r2
 8003956:	2b10      	cmp	r3, #16
 8003958:	d164      	bne.n	8003a24 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	049b      	lsls	r3, r3, #18
 8003964:	401a      	ands	r2, r3
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	049b      	lsls	r3, r3, #18
 800396a:	429a      	cmp	r2, r3
 800396c:	d02b      	beq.n	80039c6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	01c9      	lsls	r1, r1, #7
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003980:	e021      	b.n	80039c6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3301      	adds	r3, #1
 8003986:	d01e      	beq.n	80039c6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7ff f978 	bl	8002c7c <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <I2C_IsAcknowledgeFailed+0x5e>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d113      	bne.n	80039c6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	2220      	movs	r2, #32
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2241      	movs	r2, #65	; 0x41
 80039ae:	2120      	movs	r1, #32
 80039b0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2242      	movs	r2, #66	; 0x42
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	2100      	movs	r1, #0
 80039c0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e02f      	b.n	8003a26 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2220      	movs	r2, #32
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d1d6      	bne.n	8003982 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2210      	movs	r2, #16
 80039da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2220      	movs	r2, #32
 80039e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7ff fe62 	bl	80036b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	490e      	ldr	r1, [pc, #56]	; (8003a30 <I2C_IsAcknowledgeFailed+0xf0>)
 80039f8:	400a      	ands	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	2204      	movs	r2, #4
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2241      	movs	r2, #65	; 0x41
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2242      	movs	r2, #66	; 0x42
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2240      	movs	r2, #64	; 0x40
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	fe00e800 	.word	0xfe00e800

08003a34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	0008      	movs	r0, r1
 8003a3e:	0011      	movs	r1, r2
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	240a      	movs	r4, #10
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	1c02      	adds	r2, r0, #0
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	2009      	movs	r0, #9
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	1c0a      	adds	r2, r1, #0
 8003a50:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	0d51      	lsrs	r1, r2, #21
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	00d2      	lsls	r2, r2, #3
 8003a60:	400a      	ands	r2, r1
 8003a62:	490e      	ldr	r1, [pc, #56]	; (8003a9c <I2C_TransferConfig+0x68>)
 8003a64:	430a      	orrs	r2, r1
 8003a66:	43d2      	mvns	r2, r2
 8003a68:	401a      	ands	r2, r3
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	059b      	lsls	r3, r3, #22
 8003a72:	0d9a      	lsrs	r2, r3, #22
 8003a74:	183b      	adds	r3, r7, r0
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	0418      	lsls	r0, r3, #16
 8003a7a:	23ff      	movs	r3, #255	; 0xff
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	4003      	ands	r3, r0
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b005      	add	sp, #20
 8003a98:	bd90      	pop	{r4, r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	03ff63ff 	.word	0x03ff63ff

08003aa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2241      	movs	r2, #65	; 0x41
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d138      	bne.n	8003b28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2240      	movs	r2, #64	; 0x40
 8003aba:	5c9b      	ldrb	r3, [r3, r2]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e032      	b.n	8003b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	2101      	movs	r1, #1
 8003aca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2241      	movs	r2, #65	; 0x41
 8003ad0:	2124      	movs	r1, #36	; 0x24
 8003ad2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4911      	ldr	r1, [pc, #68]	; (8003b34 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2241      	movs	r2, #65	; 0x41
 8003b18:	2120      	movs	r1, #32
 8003b1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2240      	movs	r2, #64	; 0x40
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b002      	add	sp, #8
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	ffffefff 	.word	0xffffefff

08003b38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2241      	movs	r2, #65	; 0x41
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d139      	bne.n	8003bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e033      	b.n	8003bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	2101      	movs	r1, #1
 8003b62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2241      	movs	r2, #65	; 0x41
 8003b68:	2124      	movs	r1, #36	; 0x24
 8003b6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	438a      	bics	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2241      	movs	r2, #65	; 0x41
 8003bb2:	2120      	movs	r1, #32
 8003bb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2240      	movs	r2, #64	; 0x40
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	fffff0ff 	.word	0xfffff0ff

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f000 fb76 	bl	80042d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	4013      	ands	r3, r2
 8003bec:	d100      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x20>
 8003bee:	e08e      	b.n	8003d0e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bf0:	4bc5      	ldr	r3, [pc, #788]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	220c      	movs	r2, #12
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00e      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bfc:	4bc2      	ldr	r3, [pc, #776]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	220c      	movs	r2, #12
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d117      	bne.n	8003c38 <HAL_RCC_OscConfig+0x68>
 8003c08:	4bbf      	ldr	r3, [pc, #764]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	23c0      	movs	r3, #192	; 0xc0
 8003c0e:	025b      	lsls	r3, r3, #9
 8003c10:	401a      	ands	r2, r3
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	025b      	lsls	r3, r3, #9
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d10e      	bne.n	8003c38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1a:	4bbb      	ldr	r3, [pc, #748]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	029b      	lsls	r3, r3, #10
 8003c22:	4013      	ands	r3, r2
 8003c24:	d100      	bne.n	8003c28 <HAL_RCC_OscConfig+0x58>
 8003c26:	e071      	b.n	8003d0c <HAL_RCC_OscConfig+0x13c>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d000      	beq.n	8003c32 <HAL_RCC_OscConfig+0x62>
 8003c30:	e06c      	b.n	8003d0c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f000 fb4c 	bl	80042d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCC_OscConfig+0x80>
 8003c40:	4bb1      	ldr	r3, [pc, #708]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4bb0      	ldr	r3, [pc, #704]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	0249      	lsls	r1, r1, #9
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e02f      	b.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCC_OscConfig+0xa2>
 8003c58:	4bab      	ldr	r3, [pc, #684]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4baa      	ldr	r3, [pc, #680]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c5e:	49ab      	ldr	r1, [pc, #684]	; (8003f0c <HAL_RCC_OscConfig+0x33c>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	4ba8      	ldr	r3, [pc, #672]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4ba7      	ldr	r3, [pc, #668]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c6a:	49a9      	ldr	r1, [pc, #676]	; (8003f10 <HAL_RCC_OscConfig+0x340>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e01e      	b.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d10e      	bne.n	8003c98 <HAL_RCC_OscConfig+0xc8>
 8003c7a:	4ba3      	ldr	r3, [pc, #652]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4ba2      	ldr	r3, [pc, #648]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	02c9      	lsls	r1, r1, #11
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	4b9f      	ldr	r3, [pc, #636]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b9e      	ldr	r3, [pc, #632]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	0249      	lsls	r1, r1, #9
 8003c92:	430a      	orrs	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
 8003c98:	4b9b      	ldr	r3, [pc, #620]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b9a      	ldr	r3, [pc, #616]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003c9e:	499b      	ldr	r1, [pc, #620]	; (8003f0c <HAL_RCC_OscConfig+0x33c>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	4b98      	ldr	r3, [pc, #608]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b97      	ldr	r3, [pc, #604]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003caa:	4999      	ldr	r1, [pc, #612]	; (8003f10 <HAL_RCC_OscConfig+0x340>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe ffe0 	bl	8002c7c <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc2:	f7fe ffdb 	bl	8002c7c <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b64      	cmp	r3, #100	; 0x64
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e2fd      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd4:	4b8c      	ldr	r3, [pc, #560]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	029b      	lsls	r3, r3, #10
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0xf2>
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fe ffcb 	bl	8002c7c <HAL_GetTick>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe ffc6 	bl	8002c7c <HAL_GetTick>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e2e8      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	4b82      	ldr	r3, [pc, #520]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	029b      	lsls	r3, r3, #10
 8003d06:	4013      	ands	r3, r2
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x11c>
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	d100      	bne.n	8003d1a <HAL_RCC_OscConfig+0x14a>
 8003d18:	e06c      	b.n	8003df4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d1a:	4b7b      	ldr	r3, [pc, #492]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	220c      	movs	r2, #12
 8003d20:	4013      	ands	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d24:	4b78      	ldr	r3, [pc, #480]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	220c      	movs	r2, #12
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d11f      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1a0>
 8003d30:	4b75      	ldr	r3, [pc, #468]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	23c0      	movs	r3, #192	; 0xc0
 8003d36:	025b      	lsls	r3, r3, #9
 8003d38:	401a      	ands	r2, r3
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d116      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	4b71      	ldr	r3, [pc, #452]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2202      	movs	r2, #2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x188>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e2bb      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d58:	4b6b      	ldr	r3, [pc, #428]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	22f8      	movs	r2, #248	; 0xf8
 8003d5e:	4393      	bics	r3, r2
 8003d60:	0019      	movs	r1, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00da      	lsls	r2, r3, #3
 8003d68:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	e041      	b.n	8003df4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d024      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d78:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fe ff7a 	bl	8002c7c <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fe ff75 	bl	8002c7c <HAL_GetTick>
 8003d92:	0002      	movs	r2, r0
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e297      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2202      	movs	r2, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d0f1      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b57      	ldr	r3, [pc, #348]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	22f8      	movs	r2, #248	; 0xf8
 8003db0:	4393      	bics	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	00da      	lsls	r2, r3, #3
 8003dba:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e018      	b.n	8003df4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	438a      	bics	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe ff55 	bl	8002c7c <HAL_GetTick>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7fe ff50 	bl	8002c7c <HAL_GetTick>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e272      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2202      	movs	r2, #2
 8003df0:	4013      	ands	r3, r2
 8003df2:	d1f1      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d036      	beq.n	8003e6c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d019      	beq.n	8003e3a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e06:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fe ff33 	bl	8002c7c <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1c:	f7fe ff2e 	bl	8002c7c <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e250      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	d0f1      	beq.n	8003e1c <HAL_RCC_OscConfig+0x24c>
 8003e38:	e018      	b.n	8003e6c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3a:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3e:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	438a      	bics	r2, r1
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fe ff19 	bl	8002c7c <HAL_GetTick>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e50:	f7fe ff14 	bl	8002c7c <HAL_GetTick>
 8003e54:	0002      	movs	r2, r0
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e236      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e62:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	2202      	movs	r2, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d1f1      	bne.n	8003e50 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2204      	movs	r2, #4
 8003e72:	4013      	ands	r3, r2
 8003e74:	d100      	bne.n	8003e78 <HAL_RCC_OscConfig+0x2a8>
 8003e76:	e0b5      	b.n	8003fe4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e78:	201f      	movs	r0, #31
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	055b      	lsls	r3, r3, #21
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d110      	bne.n	8003eae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e92:	2180      	movs	r1, #128	; 0x80
 8003e94:	0549      	lsls	r1, r1, #21
 8003e96:	430a      	orrs	r2, r1
 8003e98:	61da      	str	r2, [r3, #28]
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	055b      	lsls	r3, r3, #21
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ea8:	183b      	adds	r3, r7, r0
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_OscConfig+0x344>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d11a      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <HAL_RCC_OscConfig+0x344>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_RCC_OscConfig+0x344>)
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	0049      	lsls	r1, r1, #1
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec8:	f7fe fed8 	bl	8002c7c <HAL_GetTick>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fe fed3 	bl	8002c7c <HAL_GetTick>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b64      	cmp	r3, #100	; 0x64
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1f5      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_OscConfig+0x344>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4013      	ands	r3, r2
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10f      	bne.n	8003f18 <HAL_RCC_OscConfig+0x348>
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003efe:	2101      	movs	r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	621a      	str	r2, [r3, #32]
 8003f04:	e036      	b.n	8003f74 <HAL_RCC_OscConfig+0x3a4>
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	fffeffff 	.word	0xfffeffff
 8003f10:	fffbffff 	.word	0xfffbffff
 8003f14:	40007000 	.word	0x40007000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10c      	bne.n	8003f3a <HAL_RCC_OscConfig+0x36a>
 8003f20:	4bca      	ldr	r3, [pc, #808]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	4bc9      	ldr	r3, [pc, #804]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	438a      	bics	r2, r1
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	4bc7      	ldr	r3, [pc, #796]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	4bc6      	ldr	r3, [pc, #792]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f32:	2104      	movs	r1, #4
 8003f34:	438a      	bics	r2, r1
 8003f36:	621a      	str	r2, [r3, #32]
 8003f38:	e01c      	b.n	8003f74 <HAL_RCC_OscConfig+0x3a4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x38c>
 8003f42:	4bc2      	ldr	r3, [pc, #776]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	4bc1      	ldr	r3, [pc, #772]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f48:	2104      	movs	r1, #4
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	621a      	str	r2, [r3, #32]
 8003f4e:	4bbf      	ldr	r3, [pc, #764]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	4bbe      	ldr	r3, [pc, #760]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f54:	2101      	movs	r1, #1
 8003f56:	430a      	orrs	r2, r1
 8003f58:	621a      	str	r2, [r3, #32]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0x3a4>
 8003f5c:	4bbb      	ldr	r3, [pc, #748]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	4bba      	ldr	r3, [pc, #744]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f62:	2101      	movs	r1, #1
 8003f64:	438a      	bics	r2, r1
 8003f66:	621a      	str	r2, [r3, #32]
 8003f68:	4bb8      	ldr	r3, [pc, #736]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	4bb7      	ldr	r3, [pc, #732]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f6e:	2104      	movs	r1, #4
 8003f70:	438a      	bics	r2, r1
 8003f72:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d014      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7c:	f7fe fe7e 	bl	8002c7c <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	e009      	b.n	8003f9a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f86:	f7fe fe79 	bl	8002c7c <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	4aaf      	ldr	r2, [pc, #700]	; (8004250 <HAL_RCC_OscConfig+0x680>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e19a      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	4bac      	ldr	r3, [pc, #688]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x3b6>
 8003fa4:	e013      	b.n	8003fce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fe69 	bl	8002c7c <HAL_GetTick>
 8003faa:	0003      	movs	r3, r0
 8003fac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fae:	e009      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe fe64 	bl	8002c7c <HAL_GetTick>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	4aa5      	ldr	r2, [pc, #660]	; (8004250 <HAL_RCC_OscConfig+0x680>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e185      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	4ba1      	ldr	r3, [pc, #644]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fce:	231f      	movs	r3, #31
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b9c      	ldr	r3, [pc, #624]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	4b9b      	ldr	r3, [pc, #620]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003fde:	499d      	ldr	r1, [pc, #628]	; (8004254 <HAL_RCC_OscConfig+0x684>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2210      	movs	r2, #16
 8003fea:	4013      	ands	r3, r2
 8003fec:	d063      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d12a      	bne.n	800404c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ff6:	4b95      	ldr	r3, [pc, #596]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffa:	4b94      	ldr	r3, [pc, #592]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8003ffc:	2104      	movs	r1, #4
 8003ffe:	430a      	orrs	r2, r1
 8004000:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004002:	4b92      	ldr	r3, [pc, #584]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004006:	4b91      	ldr	r3, [pc, #580]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004008:	2101      	movs	r1, #1
 800400a:	430a      	orrs	r2, r1
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fe fe35 	bl	8002c7c <HAL_GetTick>
 8004012:	0003      	movs	r3, r0
 8004014:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004018:	f7fe fe30 	bl	8002c7c <HAL_GetTick>
 800401c:	0002      	movs	r2, r0
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e152      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800402a:	4b88      	ldr	r3, [pc, #544]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	2202      	movs	r2, #2
 8004030:	4013      	ands	r3, r2
 8004032:	d0f1      	beq.n	8004018 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004034:	4b85      	ldr	r3, [pc, #532]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	22f8      	movs	r2, #248	; 0xf8
 800403a:	4393      	bics	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	00da      	lsls	r2, r3, #3
 8004044:	4b81      	ldr	r3, [pc, #516]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004046:	430a      	orrs	r2, r1
 8004048:	635a      	str	r2, [r3, #52]	; 0x34
 800404a:	e034      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	3305      	adds	r3, #5
 8004052:	d111      	bne.n	8004078 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004054:	4b7d      	ldr	r3, [pc, #500]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004058:	4b7c      	ldr	r3, [pc, #496]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800405a:	2104      	movs	r1, #4
 800405c:	438a      	bics	r2, r1
 800405e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004060:	4b7a      	ldr	r3, [pc, #488]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	22f8      	movs	r2, #248	; 0xf8
 8004066:	4393      	bics	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	00da      	lsls	r2, r3, #3
 8004070:	4b76      	ldr	r3, [pc, #472]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004072:	430a      	orrs	r2, r1
 8004074:	635a      	str	r2, [r3, #52]	; 0x34
 8004076:	e01e      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004078:	4b74      	ldr	r3, [pc, #464]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800407a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407c:	4b73      	ldr	r3, [pc, #460]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800407e:	2104      	movs	r1, #4
 8004080:	430a      	orrs	r2, r1
 8004082:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004084:	4b71      	ldr	r3, [pc, #452]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004088:	4b70      	ldr	r3, [pc, #448]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800408a:	2101      	movs	r1, #1
 800408c:	438a      	bics	r2, r1
 800408e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004090:	f7fe fdf4 	bl	8002c7c <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800409a:	f7fe fdef 	bl	8002c7c <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e111      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040ac:	4b67      	ldr	r3, [pc, #412]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	2202      	movs	r2, #2
 80040b2:	4013      	ands	r3, r2
 80040b4:	d1f1      	bne.n	800409a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2220      	movs	r2, #32
 80040bc:	4013      	ands	r3, r2
 80040be:	d05c      	beq.n	800417a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80040c0:	4b62      	ldr	r3, [pc, #392]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	220c      	movs	r2, #12
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	d00e      	beq.n	80040ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80040cc:	4b5f      	ldr	r3, [pc, #380]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	220c      	movs	r2, #12
 80040d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d114      	bne.n	8004102 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80040d8:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	23c0      	movs	r3, #192	; 0xc0
 80040de:	025b      	lsls	r3, r3, #9
 80040e0:	401a      	ands	r2, r3
 80040e2:	23c0      	movs	r3, #192	; 0xc0
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80040ea:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80040ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	4013      	ands	r3, r2
 80040f4:	d040      	beq.n	8004178 <HAL_RCC_OscConfig+0x5a8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d03c      	beq.n	8004178 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0e6      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01b      	beq.n	8004142 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800410a:	4b50      	ldr	r3, [pc, #320]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800410c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410e:	4b4f      	ldr	r3, [pc, #316]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	0249      	lsls	r1, r1, #9
 8004114:	430a      	orrs	r2, r1
 8004116:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe fdb0 	bl	8002c7c <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004122:	f7fe fdab 	bl	8002c7c <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0cd      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004134:	4b45      	ldr	r3, [pc, #276]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	025b      	lsls	r3, r3, #9
 800413c:	4013      	ands	r3, r2
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x552>
 8004140:	e01b      	b.n	800417a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004142:	4b42      	ldr	r3, [pc, #264]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004146:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004148:	4943      	ldr	r1, [pc, #268]	; (8004258 <HAL_RCC_OscConfig+0x688>)
 800414a:	400a      	ands	r2, r1
 800414c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fe fd95 	bl	8002c7c <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004158:	f7fe fd90 	bl	8002c7c <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0b2      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800416a:	4b38      	ldr	r3, [pc, #224]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	4013      	ands	r3, r2
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x588>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004178:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d100      	bne.n	8004184 <HAL_RCC_OscConfig+0x5b4>
 8004182:	e0a4      	b.n	80042ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004184:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	220c      	movs	r2, #12
 800418a:	4013      	ands	r3, r2
 800418c:	2b08      	cmp	r3, #8
 800418e:	d100      	bne.n	8004192 <HAL_RCC_OscConfig+0x5c2>
 8004190:	e078      	b.n	8004284 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b02      	cmp	r3, #2
 8004198:	d14c      	bne.n	8004234 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80041a0:	492e      	ldr	r1, [pc, #184]	; (800425c <HAL_RCC_OscConfig+0x68c>)
 80041a2:	400a      	ands	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7fe fd69 	bl	8002c7c <HAL_GetTick>
 80041aa:	0003      	movs	r3, r0
 80041ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fe fd64 	bl	8002c7c <HAL_GetTick>
 80041b4:	0002      	movs	r2, r0
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e086      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	049b      	lsls	r3, r3, #18
 80041ca:	4013      	ands	r3, r2
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ce:	4b1f      	ldr	r3, [pc, #124]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	220f      	movs	r2, #15
 80041d4:	4393      	bics	r3, r2
 80041d6:	0019      	movs	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041dc:	4b1b      	ldr	r3, [pc, #108]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80041de:	430a      	orrs	r2, r1
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_RCC_OscConfig+0x690>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	431a      	orrs	r2, r3
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004202:	2180      	movs	r1, #128	; 0x80
 8004204:	0449      	lsls	r1, r1, #17
 8004206:	430a      	orrs	r2, r1
 8004208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fe fd37 	bl	8002c7c <HAL_GetTick>
 800420e:	0003      	movs	r3, r0
 8004210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004214:	f7fe fd32 	bl	8002c7c <HAL_GetTick>
 8004218:	0002      	movs	r2, r0
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e054      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	049b      	lsls	r3, r3, #18
 800422e:	4013      	ands	r3, r2
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x644>
 8004232:	e04c      	b.n	80042ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_RCC_OscConfig+0x67c>)
 800423a:	4908      	ldr	r1, [pc, #32]	; (800425c <HAL_RCC_OscConfig+0x68c>)
 800423c:	400a      	ands	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe fd1c 	bl	8002c7c <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x6a6>
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	40021000 	.word	0x40021000
 8004250:	00001388 	.word	0x00001388
 8004254:	efffffff 	.word	0xefffffff
 8004258:	fffeffff 	.word	0xfffeffff
 800425c:	feffffff 	.word	0xfeffffff
 8004260:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004264:	f7fe fd0a 	bl	8002c7c <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e02c      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <HAL_RCC_OscConfig+0x708>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	049b      	lsls	r3, r3, #18
 800427e:	4013      	ands	r3, r2
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x694>
 8004282:	e024      	b.n	80042ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e01f      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_RCC_OscConfig+0x708>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <HAL_RCC_OscConfig+0x708>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	23c0      	movs	r3, #192	; 0xc0
 80042a0:	025b      	lsls	r3, r3, #9
 80042a2:	401a      	ands	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d10e      	bne.n	80042ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	220f      	movs	r2, #15
 80042b0:	401a      	ands	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	23f0      	movs	r3, #240	; 0xf0
 80042be:	039b      	lsls	r3, r3, #14
 80042c0:	401a      	ands	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b008      	add	sp, #32
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000

080042dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0bf      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f0:	4b61      	ldr	r3, [pc, #388]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4013      	ands	r3, r2
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d911      	bls.n	8004322 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b5e      	ldr	r3, [pc, #376]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	4393      	bics	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	4b5b      	ldr	r3, [pc, #364]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d001      	beq.n	8004322 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0a6      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2202      	movs	r2, #2
 8004328:	4013      	ands	r3, r2
 800432a:	d015      	beq.n	8004358 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2204      	movs	r2, #4
 8004332:	4013      	ands	r3, r2
 8004334:	d006      	beq.n	8004344 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004336:	4b51      	ldr	r3, [pc, #324]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 800433c:	21e0      	movs	r1, #224	; 0xe0
 800433e:	00c9      	lsls	r1, r1, #3
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	22f0      	movs	r2, #240	; 0xf0
 800434a:	4393      	bics	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	4013      	ands	r3, r2
 8004360:	d04c      	beq.n	80043fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b44      	ldr	r3, [pc, #272]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	029b      	lsls	r3, r3, #10
 8004372:	4013      	ands	r3, r2
 8004374:	d120      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e07a      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d107      	bne.n	8004392 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	4b3e      	ldr	r3, [pc, #248]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	049b      	lsls	r3, r3, #18
 800438a:	4013      	ands	r3, r2
 800438c:	d114      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e06e      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800439a:	4b38      	ldr	r3, [pc, #224]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 800439c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	025b      	lsls	r3, r3, #9
 80043a2:	4013      	ands	r3, r2
 80043a4:	d108      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e062      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043aa:	4b34      	ldr	r3, [pc, #208]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2202      	movs	r2, #2
 80043b0:	4013      	ands	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e05b      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b8:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	4393      	bics	r3, r2
 80043c0:	0019      	movs	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4b2d      	ldr	r3, [pc, #180]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043cc:	f7fe fc56 	bl	8002c7c <HAL_GetTick>
 80043d0:	0003      	movs	r3, r0
 80043d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d4:	e009      	b.n	80043ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d6:	f7fe fc51 	bl	8002c7c <HAL_GetTick>
 80043da:	0002      	movs	r2, r0
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	4a27      	ldr	r2, [pc, #156]	; (8004480 <HAL_RCC_ClockConfig+0x1a4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e042      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	220c      	movs	r2, #12
 80043f0:	401a      	ands	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d1ec      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2201      	movs	r2, #1
 8004402:	4013      	ands	r3, r2
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d211      	bcs.n	800442e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2201      	movs	r2, #1
 8004410:	4393      	bics	r3, r2
 8004412:	0019      	movs	r1, r3
 8004414:	4b18      	ldr	r3, [pc, #96]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_RCC_ClockConfig+0x19c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d001      	beq.n	800442e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e020      	b.n	8004470 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2204      	movs	r2, #4
 8004434:	4013      	ands	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a11      	ldr	r2, [pc, #68]	; (8004484 <HAL_RCC_ClockConfig+0x1a8>)
 800443e:	4013      	ands	r3, r2
 8004440:	0019      	movs	r1, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800444c:	f000 f820 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8004450:	0001      	movs	r1, r0
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_ClockConfig+0x1a0>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	220f      	movs	r2, #15
 800445a:	4013      	ands	r3, r2
 800445c:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x1ac>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	000a      	movs	r2, r1
 8004462:	40da      	lsrs	r2, r3
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1b0>)
 8004466:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004468:	2000      	movs	r0, #0
 800446a:	f7fe fbc1 	bl	8002bf0 <HAL_InitTick>
  
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	b004      	add	sp, #16
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40022000 	.word	0x40022000
 800447c:	40021000 	.word	0x40021000
 8004480:	00001388 	.word	0x00001388
 8004484:	fffff8ff 	.word	0xfffff8ff
 8004488:	08005640 	.word	0x08005640
 800448c:	20000000 	.word	0x20000000

08004490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b08f      	sub	sp, #60	; 0x3c
 8004494:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004496:	2314      	movs	r3, #20
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	4a38      	ldr	r2, [pc, #224]	; (800457c <HAL_RCC_GetSysClockFreq+0xec>)
 800449c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800449e:	c313      	stmia	r3!, {r0, r1, r4}
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80044a4:	1d3b      	adds	r3, r7, #4
 80044a6:	4a36      	ldr	r2, [pc, #216]	; (8004580 <HAL_RCC_GetSysClockFreq+0xf0>)
 80044a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044aa:	c313      	stmia	r3!, {r0, r1, r4}
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b4:	2300      	movs	r3, #0
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b8:	2300      	movs	r3, #0
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80044c4:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	220c      	movs	r2, #12
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d047      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0xd4>
 80044d4:	d849      	bhi.n	800456a <HAL_RCC_GetSysClockFreq+0xda>
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d002      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x50>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0x56>
 80044de:	e044      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044e0:	4b29      	ldr	r3, [pc, #164]	; (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044e4:	e044      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	0c9b      	lsrs	r3, r3, #18
 80044ea:	220f      	movs	r2, #15
 80044ec:	4013      	ands	r3, r2
 80044ee:	2214      	movs	r2, #20
 80044f0:	18ba      	adds	r2, r7, r2
 80044f2:	5cd3      	ldrb	r3, [r2, r3]
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	220f      	movs	r2, #15
 80044fc:	4013      	ands	r3, r2
 80044fe:	1d3a      	adds	r2, r7, #4
 8004500:	5cd3      	ldrb	r3, [r2, r3]
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004506:	23c0      	movs	r3, #192	; 0xc0
 8004508:	025b      	lsls	r3, r3, #9
 800450a:	401a      	ands	r2, r3
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	025b      	lsls	r3, r3, #9
 8004510:	429a      	cmp	r2, r3
 8004512:	d109      	bne.n	8004528 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004516:	481c      	ldr	r0, [pc, #112]	; (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004518:	f7fb fdfe 	bl	8000118 <__udivsi3>
 800451c:	0003      	movs	r3, r0
 800451e:	001a      	movs	r2, r3
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	4353      	muls	r3, r2
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	e01a      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452a:	23c0      	movs	r3, #192	; 0xc0
 800452c:	025b      	lsls	r3, r3, #9
 800452e:	401a      	ands	r2, r3
 8004530:	23c0      	movs	r3, #192	; 0xc0
 8004532:	025b      	lsls	r3, r3, #9
 8004534:	429a      	cmp	r2, r3
 8004536:	d109      	bne.n	800454c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800453a:	4814      	ldr	r0, [pc, #80]	; (800458c <HAL_RCC_GetSysClockFreq+0xfc>)
 800453c:	f7fb fdec 	bl	8000118 <__udivsi3>
 8004540:	0003      	movs	r3, r0
 8004542:	001a      	movs	r2, r3
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	4353      	muls	r3, r2
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
 800454a:	e008      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800454c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454e:	480e      	ldr	r0, [pc, #56]	; (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004550:	f7fb fde2 	bl	8000118 <__udivsi3>
 8004554:	0003      	movs	r3, r0
 8004556:	001a      	movs	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	4353      	muls	r3, r2
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004562:	e005      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004566:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004568:	e002      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800456e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b00f      	add	sp, #60	; 0x3c
 8004578:	bd90      	pop	{r4, r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	080055e0 	.word	0x080055e0
 8004580:	080055f0 	.word	0x080055f0
 8004584:	40021000 	.word	0x40021000
 8004588:	007a1200 	.word	0x007a1200
 800458c:	02dc6c00 	.word	0x02dc6c00

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b02      	ldr	r3, [pc, #8]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	20000000 	.word	0x20000000

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80045a8:	f7ff fff2 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045ac:	0001      	movs	r1, r0
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	0a1b      	lsrs	r3, r3, #8
 80045b4:	2207      	movs	r2, #7
 80045b6:	4013      	ands	r3, r2
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80045ba:	5cd3      	ldrb	r3, [r2, r3]
 80045bc:	40d9      	lsrs	r1, r3
 80045be:	000b      	movs	r3, r1
}    
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	40021000 	.word	0x40021000
 80045cc:	08005650 	.word	0x08005650

080045d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	025b      	lsls	r3, r3, #9
 80045e8:	4013      	ands	r3, r2
 80045ea:	d100      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80045ec:	e08e      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2017      	movs	r0, #23
 80045f0:	183b      	adds	r3, r7, r0
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f6:	4b67      	ldr	r3, [pc, #412]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	055b      	lsls	r3, r3, #21
 80045fe:	4013      	ands	r3, r2
 8004600:	d110      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b64      	ldr	r3, [pc, #400]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	4b63      	ldr	r3, [pc, #396]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004608:	2180      	movs	r1, #128	; 0x80
 800460a:	0549      	lsls	r1, r1, #21
 800460c:	430a      	orrs	r2, r1
 800460e:	61da      	str	r2, [r3, #28]
 8004610:	4b60      	ldr	r3, [pc, #384]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	055b      	lsls	r3, r3, #21
 8004618:	4013      	ands	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461e:	183b      	adds	r3, r7, r0
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	4b5c      	ldr	r3, [pc, #368]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4013      	ands	r3, r2
 800462e:	d11a      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004630:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b58      	ldr	r3, [pc, #352]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004636:	2180      	movs	r1, #128	; 0x80
 8004638:	0049      	lsls	r1, r1, #1
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fe fb1d 	bl	8002c7c <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004646:	e008      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004648:	f7fe fb18 	bl	8002c7c <HAL_GetTick>
 800464c:	0002      	movs	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e097      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4013      	ands	r3, r2
 8004664:	d0f0      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004666:	4b4b      	ldr	r3, [pc, #300]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	23c0      	movs	r3, #192	; 0xc0
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4013      	ands	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d034      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	23c0      	movs	r3, #192	; 0xc0
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4013      	ands	r3, r2
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	429a      	cmp	r2, r3
 8004686:	d02c      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4a43      	ldr	r2, [pc, #268]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800468e:	4013      	ands	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004692:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004698:	2180      	movs	r1, #128	; 0x80
 800469a:	0249      	lsls	r1, r1, #9
 800469c:	430a      	orrs	r2, r1
 800469e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046a0:	4b3c      	ldr	r3, [pc, #240]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046a6:	493e      	ldr	r1, [pc, #248]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ac:	4b39      	ldr	r3, [pc, #228]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	4013      	ands	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fe fadf 	bl	8002c7c <HAL_GetTick>
 80046be:	0003      	movs	r3, r0
 80046c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	e009      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fe fada 	bl	8002c7c <HAL_GetTick>
 80046c8:	0002      	movs	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	4a35      	ldr	r2, [pc, #212]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e058      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	2202      	movs	r2, #2
 80046de:	4013      	ands	r3, r2
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e2:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a2d      	ldr	r2, [pc, #180]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b28      	ldr	r3, [pc, #160]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046f2:	430a      	orrs	r2, r1
 80046f4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046f6:	2317      	movs	r3, #23
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	4b23      	ldr	r3, [pc, #140]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004706:	4928      	ldr	r1, [pc, #160]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004708:	400a      	ands	r2, r1
 800470a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2201      	movs	r2, #1
 8004712:	4013      	ands	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004716:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	2203      	movs	r2, #3
 800471c:	4393      	bics	r3, r2
 800471e:	0019      	movs	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004726:	430a      	orrs	r2, r1
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2220      	movs	r2, #32
 8004730:	4013      	ands	r3, r2
 8004732:	d009      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	2210      	movs	r2, #16
 800473a:	4393      	bics	r3, r2
 800473c:	0019      	movs	r1, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004744:	430a      	orrs	r2, r1
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	4013      	ands	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	2280      	movs	r2, #128	; 0x80
 800475a:	4393      	bics	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004764:	430a      	orrs	r2, r1
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4013      	ands	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	2240      	movs	r2, #64	; 0x40
 800477a:	4393      	bics	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	4b04      	ldr	r3, [pc, #16]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004784:	430a      	orrs	r2, r1
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	0018      	movs	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	b006      	add	sp, #24
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
 800479c:	fffffcff 	.word	0xfffffcff
 80047a0:	fffeffff 	.word	0xfffeffff
 80047a4:	00001388 	.word	0x00001388
 80047a8:	efffffff 	.word	0xefffffff

080047ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0a8      	b.n	8004910 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	2382      	movs	r3, #130	; 0x82
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d009      	beq.n	80047e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	61da      	str	r2, [r3, #28]
 80047d8:	e005      	b.n	80047e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	225d      	movs	r2, #93	; 0x5d
 80047f0:	5c9b      	ldrb	r3, [r3, r2]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d107      	bne.n	8004808 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	225c      	movs	r2, #92	; 0x5c
 80047fc:	2100      	movs	r1, #0
 80047fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	0018      	movs	r0, r3
 8004804:	f7fe f8ae 	bl	8002964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	225d      	movs	r2, #93	; 0x5d
 800480c:	2102      	movs	r1, #2
 800480e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2140      	movs	r1, #64	; 0x40
 800481c:	438a      	bics	r2, r1
 800481e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	23e0      	movs	r3, #224	; 0xe0
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	429a      	cmp	r2, r3
 800482a:	d902      	bls.n	8004832 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e002      	b.n	8004838 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	015b      	lsls	r3, r3, #5
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	23f0      	movs	r3, #240	; 0xf0
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	429a      	cmp	r2, r3
 8004842:	d008      	beq.n	8004856 <HAL_SPI_Init+0xaa>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	23e0      	movs	r3, #224	; 0xe0
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	429a      	cmp	r2, r3
 800484e:	d002      	beq.n	8004856 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	2382      	movs	r3, #130	; 0x82
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	401a      	ands	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6899      	ldr	r1, [r3, #8]
 8004864:	2384      	movs	r3, #132	; 0x84
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	400b      	ands	r3, r1
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2102      	movs	r1, #2
 8004872:	400b      	ands	r3, r1
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2101      	movs	r1, #1
 800487c:	400b      	ands	r3, r1
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6999      	ldr	r1, [r3, #24]
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	400b      	ands	r3, r1
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	2138      	movs	r1, #56	; 0x38
 8004892:	400b      	ands	r3, r1
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	400b      	ands	r3, r1
 800489e:	431a      	orrs	r2, r3
 80048a0:	0011      	movs	r1, r2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	401a      	ands	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	2204      	movs	r2, #4
 80048bc:	401a      	ands	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2110      	movs	r1, #16
 80048c4:	400b      	ands	r3, r1
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	2108      	movs	r1, #8
 80048ce:	400b      	ands	r3, r1
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	23f0      	movs	r3, #240	; 0xf0
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	400b      	ands	r3, r1
 80048dc:	431a      	orrs	r2, r3
 80048de:	0011      	movs	r1, r2
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	015b      	lsls	r3, r3, #5
 80048e6:	401a      	ands	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4907      	ldr	r1, [pc, #28]	; (8004918 <HAL_SPI_Init+0x16c>)
 80048fc:	400a      	ands	r2, r1
 80048fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	225d      	movs	r2, #93	; 0x5d
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}
 8004918:	fffff7ff 	.word	0xfffff7ff

0800491c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e044      	b.n	80049b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004932:	2b00      	cmp	r3, #0
 8004934:	d107      	bne.n	8004946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2274      	movs	r2, #116	; 0x74
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f7fe f85b 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2224      	movs	r2, #36	; 0x24
 800494a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	438a      	bics	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	0018      	movs	r0, r3
 8004960:	f000 f9ca 	bl	8004cf8 <UART_SetConfig>
 8004964:	0003      	movs	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e024      	b.n	80049b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fafd 	bl	8004f78 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	490d      	ldr	r1, [pc, #52]	; (80049c0 <HAL_UART_Init+0xa4>)
 800498a:	400a      	ands	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	212a      	movs	r1, #42	; 0x2a
 800499a:	438a      	bics	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2101      	movs	r1, #1
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 fb95 	bl	80050e0 <UART_CheckIdleState>
 80049b6:	0003      	movs	r3, r0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	ffffb7ff 	.word	0xffffb7ff

080049c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	1dbb      	adds	r3, r7, #6
 80049d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d000      	beq.n	80049de <HAL_UART_Transmit+0x1a>
 80049dc:	e096      	b.n	8004b0c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_UART_Transmit+0x28>
 80049e4:	1dbb      	adds	r3, r7, #6
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e08e      	b.n	8004b0e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d109      	bne.n	8004a10 <HAL_UART_Transmit+0x4c>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2201      	movs	r2, #1
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e07e      	b.n	8004b0e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2274      	movs	r2, #116	; 0x74
 8004a14:	5c9b      	ldrb	r3, [r3, r2]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Transmit+0x5a>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e077      	b.n	8004b0e <HAL_UART_Transmit+0x14a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2274      	movs	r2, #116	; 0x74
 8004a22:	2101      	movs	r1, #1
 8004a24:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a34:	f7fe f922 	bl	8002c7c <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1dba      	adds	r2, r7, #6
 8004a40:	2150      	movs	r1, #80	; 0x50
 8004a42:	8812      	ldrh	r2, [r2, #0]
 8004a44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1dba      	adds	r2, r7, #6
 8004a4a:	2152      	movs	r1, #82	; 0x52
 8004a4c:	8812      	ldrh	r2, [r2, #0]
 8004a4e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	015b      	lsls	r3, r3, #5
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d108      	bne.n	8004a6e <HAL_UART_Transmit+0xaa>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	e003      	b.n	8004a76 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2274      	movs	r2, #116	; 0x74
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004a7e:	e02d      	b.n	8004adc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	0013      	movs	r3, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2180      	movs	r1, #128	; 0x80
 8004a8e:	f000 fb6f 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8004a92:	1e03      	subs	r3, r0, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e039      	b.n	8004b0e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	05d2      	lsls	r2, r2, #23
 8004aaa:	0dd2      	lsrs	r2, r2, #23
 8004aac:	b292      	uxth	r2, r2
 8004aae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e008      	b.n	8004aca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2252      	movs	r2, #82	; 0x52
 8004ace:	5a9b      	ldrh	r3, [r3, r2]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b299      	uxth	r1, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2252      	movs	r2, #82	; 0x52
 8004ada:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2252      	movs	r2, #82	; 0x52
 8004ae0:	5a9b      	ldrh	r3, [r3, r2]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1cb      	bne.n	8004a80 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	0013      	movs	r3, r2
 8004af2:	2200      	movs	r2, #0
 8004af4:	2140      	movs	r1, #64	; 0x40
 8004af6:	f000 fb3b 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8004afa:	1e03      	subs	r3, r0, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e005      	b.n	8004b0e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b008      	add	sp, #32
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	1dbb      	adds	r3, r7, #6
 8004b26:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d000      	beq.n	8004b32 <HAL_UART_Receive+0x1a>
 8004b30:	e0da      	b.n	8004ce8 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_UART_Receive+0x28>
 8004b38:	1dbb      	adds	r3, r7, #6
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0d2      	b.n	8004cea <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	015b      	lsls	r3, r3, #5
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d109      	bne.n	8004b64 <HAL_UART_Receive+0x4c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d001      	beq.n	8004b64 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0c2      	b.n	8004cea <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2274      	movs	r2, #116	; 0x74
 8004b68:	5c9b      	ldrb	r3, [r3, r2]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Receive+0x5a>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e0bb      	b.n	8004cea <HAL_UART_Receive+0x1d2>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2274      	movs	r2, #116	; 0x74
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2222      	movs	r2, #34	; 0x22
 8004b86:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b8e:	f7fe f875 	bl	8002c7c <HAL_GetTick>
 8004b92:	0003      	movs	r3, r0
 8004b94:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1dba      	adds	r2, r7, #6
 8004b9a:	2158      	movs	r1, #88	; 0x58
 8004b9c:	8812      	ldrh	r2, [r2, #0]
 8004b9e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1dba      	adds	r2, r7, #6
 8004ba4:	215a      	movs	r1, #90	; 0x5a
 8004ba6:	8812      	ldrh	r2, [r2, #0]
 8004ba8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	015b      	lsls	r3, r3, #5
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d10d      	bne.n	8004bd2 <HAL_UART_Receive+0xba>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d104      	bne.n	8004bc8 <HAL_UART_Receive+0xb0>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	225c      	movs	r2, #92	; 0x5c
 8004bc2:	494c      	ldr	r1, [pc, #304]	; (8004cf4 <HAL_UART_Receive+0x1dc>)
 8004bc4:	5299      	strh	r1, [r3, r2]
 8004bc6:	e02e      	b.n	8004c26 <HAL_UART_Receive+0x10e>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	225c      	movs	r2, #92	; 0x5c
 8004bcc:	21ff      	movs	r1, #255	; 0xff
 8004bce:	5299      	strh	r1, [r3, r2]
 8004bd0:	e029      	b.n	8004c26 <HAL_UART_Receive+0x10e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_UART_Receive+0xde>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_UART_Receive+0xd4>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	225c      	movs	r2, #92	; 0x5c
 8004be6:	21ff      	movs	r1, #255	; 0xff
 8004be8:	5299      	strh	r1, [r3, r2]
 8004bea:	e01c      	b.n	8004c26 <HAL_UART_Receive+0x10e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	225c      	movs	r2, #92	; 0x5c
 8004bf0:	217f      	movs	r1, #127	; 0x7f
 8004bf2:	5299      	strh	r1, [r3, r2]
 8004bf4:	e017      	b.n	8004c26 <HAL_UART_Receive+0x10e>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	055b      	lsls	r3, r3, #21
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d10d      	bne.n	8004c1e <HAL_UART_Receive+0x106>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <HAL_UART_Receive+0xfc>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	225c      	movs	r2, #92	; 0x5c
 8004c0e:	217f      	movs	r1, #127	; 0x7f
 8004c10:	5299      	strh	r1, [r3, r2]
 8004c12:	e008      	b.n	8004c26 <HAL_UART_Receive+0x10e>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	225c      	movs	r2, #92	; 0x5c
 8004c18:	213f      	movs	r1, #63	; 0x3f
 8004c1a:	5299      	strh	r1, [r3, r2]
 8004c1c:	e003      	b.n	8004c26 <HAL_UART_Receive+0x10e>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	225c      	movs	r2, #92	; 0x5c
 8004c22:	2100      	movs	r1, #0
 8004c24:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004c26:	2312      	movs	r3, #18
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	215c      	movs	r1, #92	; 0x5c
 8004c2e:	5a52      	ldrh	r2, [r2, r1]
 8004c30:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	015b      	lsls	r3, r3, #5
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d108      	bne.n	8004c50 <HAL_UART_Receive+0x138>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e003      	b.n	8004c58 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2274      	movs	r2, #116	; 0x74
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c60:	e037      	b.n	8004cd2 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	0013      	movs	r3, r2
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2120      	movs	r1, #32
 8004c70:	f000 fa7e 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8004c74:	1e03      	subs	r3, r0, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e036      	b.n	8004cea <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10e      	bne.n	8004ca0 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2212      	movs	r2, #18
 8004c8c:	18ba      	adds	r2, r7, r2
 8004c8e:	8812      	ldrh	r2, [r2, #0]
 8004c90:	4013      	ands	r3, r2
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e00f      	b.n	8004cc0 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2212      	movs	r2, #18
 8004cac:	18ba      	adds	r2, r7, r2
 8004cae:	8812      	ldrh	r2, [r2, #0]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	225a      	movs	r2, #90	; 0x5a
 8004cc4:	5a9b      	ldrh	r3, [r3, r2]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b299      	uxth	r1, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	225a      	movs	r2, #90	; 0x5a
 8004cd0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	225a      	movs	r2, #90	; 0x5a
 8004cd6:	5a9b      	ldrh	r3, [r3, r2]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1c1      	bne.n	8004c62 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b008      	add	sp, #32
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	000001ff 	.word	0x000001ff

08004cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d00:	231e      	movs	r3, #30
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a8d      	ldr	r2, [pc, #564]	; (8004f5c <UART_SetConfig+0x264>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a88      	ldr	r2, [pc, #544]	; (8004f60 <UART_SetConfig+0x268>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a7f      	ldr	r2, [pc, #508]	; (8004f64 <UART_SetConfig+0x26c>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	0019      	movs	r1, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7b      	ldr	r2, [pc, #492]	; (8004f68 <UART_SetConfig+0x270>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d127      	bne.n	8004dce <UART_SetConfig+0xd6>
 8004d7e:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <UART_SetConfig+0x274>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	2203      	movs	r2, #3
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d00d      	beq.n	8004da6 <UART_SetConfig+0xae>
 8004d8a:	d81b      	bhi.n	8004dc4 <UART_SetConfig+0xcc>
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d014      	beq.n	8004dba <UART_SetConfig+0xc2>
 8004d90:	d818      	bhi.n	8004dc4 <UART_SetConfig+0xcc>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <UART_SetConfig+0xa4>
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00a      	beq.n	8004db0 <UART_SetConfig+0xb8>
 8004d9a:	e013      	b.n	8004dc4 <UART_SetConfig+0xcc>
 8004d9c:	231f      	movs	r3, #31
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e021      	b.n	8004dea <UART_SetConfig+0xf2>
 8004da6:	231f      	movs	r3, #31
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2202      	movs	r2, #2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e01c      	b.n	8004dea <UART_SetConfig+0xf2>
 8004db0:	231f      	movs	r3, #31
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	2204      	movs	r2, #4
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e017      	b.n	8004dea <UART_SetConfig+0xf2>
 8004dba:	231f      	movs	r3, #31
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e012      	b.n	8004dea <UART_SetConfig+0xf2>
 8004dc4:	231f      	movs	r3, #31
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	2210      	movs	r2, #16
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e00d      	b.n	8004dea <UART_SetConfig+0xf2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <UART_SetConfig+0x278>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d104      	bne.n	8004de2 <UART_SetConfig+0xea>
 8004dd8:	231f      	movs	r3, #31
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e003      	b.n	8004dea <UART_SetConfig+0xf2>
 8004de2:	231f      	movs	r3, #31
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2210      	movs	r2, #16
 8004de8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d15d      	bne.n	8004eb2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004df6:	231f      	movs	r3, #31
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d015      	beq.n	8004e2c <UART_SetConfig+0x134>
 8004e00:	dc18      	bgt.n	8004e34 <UART_SetConfig+0x13c>
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d00d      	beq.n	8004e22 <UART_SetConfig+0x12a>
 8004e06:	dc15      	bgt.n	8004e34 <UART_SetConfig+0x13c>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <UART_SetConfig+0x11a>
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d005      	beq.n	8004e1c <UART_SetConfig+0x124>
 8004e10:	e010      	b.n	8004e34 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e12:	f7ff fbc7 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8004e16:	0003      	movs	r3, r0
 8004e18:	61bb      	str	r3, [r7, #24]
        break;
 8004e1a:	e012      	b.n	8004e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e1c:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <UART_SetConfig+0x27c>)
 8004e1e:	61bb      	str	r3, [r7, #24]
        break;
 8004e20:	e00f      	b.n	8004e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e22:	f7ff fb35 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8004e26:	0003      	movs	r3, r0
 8004e28:	61bb      	str	r3, [r7, #24]
        break;
 8004e2a:	e00a      	b.n	8004e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e006      	b.n	8004e42 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e38:	231e      	movs	r3, #30
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
        break;
 8004e40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d100      	bne.n	8004e4a <UART_SetConfig+0x152>
 8004e48:	e07b      	b.n	8004f42 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	005a      	lsls	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	18d2      	adds	r2, r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	f7fb f95b 	bl	8000118 <__udivsi3>
 8004e62:	0003      	movs	r3, r0
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b0f      	cmp	r3, #15
 8004e6c:	d91c      	bls.n	8004ea8 <UART_SetConfig+0x1b0>
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	025b      	lsls	r3, r3, #9
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d217      	bcs.n	8004ea8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	200e      	movs	r0, #14
 8004e7e:	183b      	adds	r3, r7, r0
 8004e80:	210f      	movs	r1, #15
 8004e82:	438a      	bics	r2, r1
 8004e84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2207      	movs	r2, #7
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b299      	uxth	r1, r3
 8004e92:	183b      	adds	r3, r7, r0
 8004e94:	183a      	adds	r2, r7, r0
 8004e96:	8812      	ldrh	r2, [r2, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	183a      	adds	r2, r7, r0
 8004ea2:	8812      	ldrh	r2, [r2, #0]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	e04c      	b.n	8004f42 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea8:	231e      	movs	r3, #30
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e047      	b.n	8004f42 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb2:	231f      	movs	r3, #31
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d015      	beq.n	8004ee8 <UART_SetConfig+0x1f0>
 8004ebc:	dc18      	bgt.n	8004ef0 <UART_SetConfig+0x1f8>
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d00d      	beq.n	8004ede <UART_SetConfig+0x1e6>
 8004ec2:	dc15      	bgt.n	8004ef0 <UART_SetConfig+0x1f8>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <UART_SetConfig+0x1d6>
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d005      	beq.n	8004ed8 <UART_SetConfig+0x1e0>
 8004ecc:	e010      	b.n	8004ef0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ece:	f7ff fb69 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	61bb      	str	r3, [r7, #24]
        break;
 8004ed6:	e012      	b.n	8004efe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed8:	4b26      	ldr	r3, [pc, #152]	; (8004f74 <UART_SetConfig+0x27c>)
 8004eda:	61bb      	str	r3, [r7, #24]
        break;
 8004edc:	e00f      	b.n	8004efe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ede:	f7ff fad7 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	61bb      	str	r3, [r7, #24]
        break;
 8004ee6:	e00a      	b.n	8004efe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	61bb      	str	r3, [r7, #24]
        break;
 8004eee:	e006      	b.n	8004efe <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ef4:	231e      	movs	r3, #30
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
        break;
 8004efc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01e      	beq.n	8004f42 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	085a      	lsrs	r2, r3, #1
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	18d2      	adds	r2, r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	0019      	movs	r1, r3
 8004f14:	0010      	movs	r0, r2
 8004f16:	f7fb f8ff 	bl	8000118 <__udivsi3>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b0f      	cmp	r3, #15
 8004f24:	d909      	bls.n	8004f3a <UART_SetConfig+0x242>
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	025b      	lsls	r3, r3, #9
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d204      	bcs.n	8004f3a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	60da      	str	r2, [r3, #12]
 8004f38:	e003      	b.n	8004f42 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004f3a:	231e      	movs	r3, #30
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f4e:	231e      	movs	r3, #30
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b008      	add	sp, #32
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	efff69f3 	.word	0xefff69f3
 8004f60:	ffffcfff 	.word	0xffffcfff
 8004f64:	fffff4ff 	.word	0xfffff4ff
 8004f68:	40013800 	.word	0x40013800
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40004400 	.word	0x40004400
 8004f74:	007a1200 	.word	0x007a1200

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a4a      	ldr	r2, [pc, #296]	; (80050bc <UART_AdvFeatureConfig+0x144>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4a43      	ldr	r2, [pc, #268]	; (80050c0 <UART_AdvFeatureConfig+0x148>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2204      	movs	r2, #4
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <UART_AdvFeatureConfig+0x14c>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2208      	movs	r2, #8
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00b      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a34      	ldr	r2, [pc, #208]	; (80050c8 <UART_AdvFeatureConfig+0x150>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2210      	movs	r2, #16
 800500e:	4013      	ands	r3, r2
 8005010:	d00b      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <UART_AdvFeatureConfig+0x154>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2220      	movs	r2, #32
 8005030:	4013      	ands	r3, r2
 8005032:	d00b      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <UART_AdvFeatureConfig+0x158>)
 800503c:	4013      	ands	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	4013      	ands	r3, r2
 8005054:	d01d      	beq.n	8005092 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <UART_AdvFeatureConfig+0x15c>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	035b      	lsls	r3, r3, #13
 8005076:	429a      	cmp	r2, r3
 8005078:	d10b      	bne.n	8005092 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <UART_AdvFeatureConfig+0x160>)
 8005082:	4013      	ands	r3, r2
 8005084:	0019      	movs	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	4013      	ands	r3, r2
 800509a:	d00b      	beq.n	80050b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <UART_AdvFeatureConfig+0x164>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	fffdffff 	.word	0xfffdffff
 80050c0:	fffeffff 	.word	0xfffeffff
 80050c4:	fffbffff 	.word	0xfffbffff
 80050c8:	ffff7fff 	.word	0xffff7fff
 80050cc:	ffffefff 	.word	0xffffefff
 80050d0:	ffffdfff 	.word	0xffffdfff
 80050d4:	ffefffff 	.word	0xffefffff
 80050d8:	ff9fffff 	.word	0xff9fffff
 80050dc:	fff7ffff 	.word	0xfff7ffff

080050e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	2100      	movs	r1, #0
 80050ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f0:	f7fd fdc4 	bl	8002c7c <HAL_GetTick>
 80050f4:	0003      	movs	r3, r0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2208      	movs	r2, #8
 8005100:	4013      	ands	r3, r2
 8005102:	2b08      	cmp	r3, #8
 8005104:	d10c      	bne.n	8005120 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	0391      	lsls	r1, r2, #14
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <UART_CheckIdleState+0x8c>)
 8005110:	9200      	str	r2, [sp, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	f000 f82c 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d001      	beq.n	8005120 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e021      	b.n	8005164 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2204      	movs	r2, #4
 8005128:	4013      	ands	r3, r2
 800512a:	2b04      	cmp	r3, #4
 800512c:	d10c      	bne.n	8005148 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	03d1      	lsls	r1, r2, #15
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4a0d      	ldr	r2, [pc, #52]	; (800516c <UART_CheckIdleState+0x8c>)
 8005138:	9200      	str	r2, [sp, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	f000 f818 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8005140:	1e03      	subs	r3, r0, #0
 8005142:	d001      	beq.n	8005148 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e00d      	b.n	8005164 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2274      	movs	r2, #116	; 0x74
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b004      	add	sp, #16
 800516a:	bd80      	pop	{r7, pc}
 800516c:	01ffffff 	.word	0x01ffffff

08005170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b094      	sub	sp, #80	; 0x50
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	1dfb      	adds	r3, r7, #7
 800517e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005180:	e0a3      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005184:	3301      	adds	r3, #1
 8005186:	d100      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005188:	e09f      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fd fd77 	bl	8002c7c <HAL_GetTick>
 800518e:	0002      	movs	r2, r0
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800519a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800519c:	2b00      	cmp	r3, #0
 800519e:	d13d      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a0:	f3ef 8310 	mrs	r3, PRIMASK
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	2301      	movs	r3, #1
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	494c      	ldr	r1, [pc, #304]	; (80052f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80051c2:	400a      	ands	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	f383 8810 	msr	PRIMASK, r3
}
 80051d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80051d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	643b      	str	r3, [r7, #64]	; 0x40
 80051dc:	2301      	movs	r3, #1
 80051de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2101      	movs	r1, #1
 80051f4:	438a      	bics	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2274      	movs	r2, #116	; 0x74
 8005214:	2100      	movs	r1, #0
 8005216:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e067      	b.n	80052ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2204      	movs	r2, #4
 8005224:	4013      	ands	r3, r2
 8005226:	d050      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	401a      	ands	r2, r3
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	429a      	cmp	r2, r3
 800523a:	d146      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	0112      	lsls	r2, r2, #4
 8005244:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	613b      	str	r3, [r7, #16]
  return(result);
 800524c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4923      	ldr	r1, [pc, #140]	; (80052f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005268:	400a      	ands	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f383 8810 	msr	PRIMASK, r3
}
 8005276:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005278:	f3ef 8310 	mrs	r3, PRIMASK
 800527c:	61fb      	str	r3, [r7, #28]
  return(result);
 800527e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005280:	64bb      	str	r3, [r7, #72]	; 0x48
 8005282:	2301      	movs	r3, #1
 8005284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f383 8810 	msr	PRIMASK, r3
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2101      	movs	r1, #1
 800529a:	438a      	bics	r2, r1
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	2120      	movs	r1, #32
 80052bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2274      	movs	r2, #116	; 0x74
 80052c2:	2100      	movs	r1, #0
 80052c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e010      	b.n	80052ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	425a      	negs	r2, r3
 80052da:	4153      	adcs	r3, r2
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	001a      	movs	r2, r3
 80052e0:	1dfb      	adds	r3, r7, #7
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d100      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80052e8:	e74b      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	0018      	movs	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b014      	add	sp, #80	; 0x50
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	fffffe5f 	.word	0xfffffe5f

080052f8 <atoi>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	220a      	movs	r2, #10
 80052fc:	2100      	movs	r1, #0
 80052fe:	f000 f8d7 	bl	80054b0 <strtol>
 8005302:	bd10      	pop	{r4, pc}

08005304 <__errno>:
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <__errno+0x8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4770      	bx	lr
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	2000000c 	.word	0x2000000c

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	2600      	movs	r6, #0
 8005314:	4d0c      	ldr	r5, [pc, #48]	; (8005348 <__libc_init_array+0x38>)
 8005316:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	2600      	movs	r6, #0
 8005322:	f000 f8d1 	bl	80054c8 <_init>
 8005326:	4d0a      	ldr	r5, [pc, #40]	; (8005350 <__libc_init_array+0x40>)
 8005328:	4c0a      	ldr	r4, [pc, #40]	; (8005354 <__libc_init_array+0x44>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	00b3      	lsls	r3, r6, #2
 8005336:	58eb      	ldr	r3, [r5, r3]
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	00b3      	lsls	r3, r6, #2
 8005340:	58eb      	ldr	r3, [r5, r3]
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	0800575c 	.word	0x0800575c
 800534c:	0800575c 	.word	0x0800575c
 8005350:	0800575c 	.word	0x0800575c
 8005354:	08005760 	.word	0x08005760

08005358 <memset>:
 8005358:	0003      	movs	r3, r0
 800535a:	1882      	adds	r2, r0, r2
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	7019      	strb	r1, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <strcat>:
 8005368:	0002      	movs	r2, r0
 800536a:	b510      	push	{r4, lr}
 800536c:	7813      	ldrb	r3, [r2, #0]
 800536e:	0014      	movs	r4, r2
 8005370:	3201      	adds	r2, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1fa      	bne.n	800536c <strcat+0x4>
 8005376:	5cca      	ldrb	r2, [r1, r3]
 8005378:	54e2      	strb	r2, [r4, r3]
 800537a:	3301      	adds	r3, #1
 800537c:	2a00      	cmp	r2, #0
 800537e:	d1fa      	bne.n	8005376 <strcat+0xe>
 8005380:	bd10      	pop	{r4, pc}

08005382 <strcpy>:
 8005382:	0003      	movs	r3, r0
 8005384:	780a      	ldrb	r2, [r1, #0]
 8005386:	3101      	adds	r1, #1
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	2a00      	cmp	r2, #0
 800538e:	d1f9      	bne.n	8005384 <strcpy+0x2>
 8005390:	4770      	bx	lr
	...

08005394 <_strtol_l.isra.0>:
 8005394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005396:	b087      	sub	sp, #28
 8005398:	001e      	movs	r6, r3
 800539a:	9005      	str	r0, [sp, #20]
 800539c:	9101      	str	r1, [sp, #4]
 800539e:	9202      	str	r2, [sp, #8]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d045      	beq.n	8005430 <_strtol_l.isra.0+0x9c>
 80053a4:	0008      	movs	r0, r1
 80053a6:	2b24      	cmp	r3, #36	; 0x24
 80053a8:	d842      	bhi.n	8005430 <_strtol_l.isra.0+0x9c>
 80053aa:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <_strtol_l.isra.0+0x114>)
 80053ac:	2208      	movs	r2, #8
 80053ae:	469c      	mov	ip, r3
 80053b0:	0003      	movs	r3, r0
 80053b2:	4661      	mov	r1, ip
 80053b4:	781c      	ldrb	r4, [r3, #0]
 80053b6:	1c45      	adds	r5, r0, #1
 80053b8:	5d09      	ldrb	r1, [r1, r4]
 80053ba:	0028      	movs	r0, r5
 80053bc:	000f      	movs	r7, r1
 80053be:	4017      	ands	r7, r2
 80053c0:	4211      	tst	r1, r2
 80053c2:	d1f5      	bne.n	80053b0 <_strtol_l.isra.0+0x1c>
 80053c4:	2c2d      	cmp	r4, #45	; 0x2d
 80053c6:	d13a      	bne.n	800543e <_strtol_l.isra.0+0xaa>
 80053c8:	2701      	movs	r7, #1
 80053ca:	782c      	ldrb	r4, [r5, #0]
 80053cc:	1c9d      	adds	r5, r3, #2
 80053ce:	2e00      	cmp	r6, #0
 80053d0:	d065      	beq.n	800549e <_strtol_l.isra.0+0x10a>
 80053d2:	2e10      	cmp	r6, #16
 80053d4:	d109      	bne.n	80053ea <_strtol_l.isra.0+0x56>
 80053d6:	2c30      	cmp	r4, #48	; 0x30
 80053d8:	d107      	bne.n	80053ea <_strtol_l.isra.0+0x56>
 80053da:	2220      	movs	r2, #32
 80053dc:	782b      	ldrb	r3, [r5, #0]
 80053de:	4393      	bics	r3, r2
 80053e0:	2b58      	cmp	r3, #88	; 0x58
 80053e2:	d157      	bne.n	8005494 <_strtol_l.isra.0+0x100>
 80053e4:	2610      	movs	r6, #16
 80053e6:	786c      	ldrb	r4, [r5, #1]
 80053e8:	3502      	adds	r5, #2
 80053ea:	4b30      	ldr	r3, [pc, #192]	; (80054ac <_strtol_l.isra.0+0x118>)
 80053ec:	0031      	movs	r1, r6
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	0018      	movs	r0, r3
 80053f2:	9303      	str	r3, [sp, #12]
 80053f4:	f7fa ff16 	bl	8000224 <__aeabi_uidivmod>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2201      	movs	r2, #1
 80053fc:	4684      	mov	ip, r0
 80053fe:	0018      	movs	r0, r3
 8005400:	9104      	str	r1, [sp, #16]
 8005402:	4252      	negs	r2, r2
 8005404:	0021      	movs	r1, r4
 8005406:	3930      	subs	r1, #48	; 0x30
 8005408:	2909      	cmp	r1, #9
 800540a:	d81d      	bhi.n	8005448 <_strtol_l.isra.0+0xb4>
 800540c:	000c      	movs	r4, r1
 800540e:	42a6      	cmp	r6, r4
 8005410:	dd28      	ble.n	8005464 <_strtol_l.isra.0+0xd0>
 8005412:	2b00      	cmp	r3, #0
 8005414:	db24      	blt.n	8005460 <_strtol_l.isra.0+0xcc>
 8005416:	0013      	movs	r3, r2
 8005418:	4584      	cmp	ip, r0
 800541a:	d306      	bcc.n	800542a <_strtol_l.isra.0+0x96>
 800541c:	d102      	bne.n	8005424 <_strtol_l.isra.0+0x90>
 800541e:	9904      	ldr	r1, [sp, #16]
 8005420:	42a1      	cmp	r1, r4
 8005422:	db02      	blt.n	800542a <_strtol_l.isra.0+0x96>
 8005424:	2301      	movs	r3, #1
 8005426:	4370      	muls	r0, r6
 8005428:	1820      	adds	r0, r4, r0
 800542a:	782c      	ldrb	r4, [r5, #0]
 800542c:	3501      	adds	r5, #1
 800542e:	e7e9      	b.n	8005404 <_strtol_l.isra.0+0x70>
 8005430:	f7ff ff68 	bl	8005304 <__errno>
 8005434:	2316      	movs	r3, #22
 8005436:	6003      	str	r3, [r0, #0]
 8005438:	2000      	movs	r0, #0
 800543a:	b007      	add	sp, #28
 800543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800543e:	2c2b      	cmp	r4, #43	; 0x2b
 8005440:	d1c5      	bne.n	80053ce <_strtol_l.isra.0+0x3a>
 8005442:	782c      	ldrb	r4, [r5, #0]
 8005444:	1c9d      	adds	r5, r3, #2
 8005446:	e7c2      	b.n	80053ce <_strtol_l.isra.0+0x3a>
 8005448:	0021      	movs	r1, r4
 800544a:	3941      	subs	r1, #65	; 0x41
 800544c:	2919      	cmp	r1, #25
 800544e:	d801      	bhi.n	8005454 <_strtol_l.isra.0+0xc0>
 8005450:	3c37      	subs	r4, #55	; 0x37
 8005452:	e7dc      	b.n	800540e <_strtol_l.isra.0+0x7a>
 8005454:	0021      	movs	r1, r4
 8005456:	3961      	subs	r1, #97	; 0x61
 8005458:	2919      	cmp	r1, #25
 800545a:	d803      	bhi.n	8005464 <_strtol_l.isra.0+0xd0>
 800545c:	3c57      	subs	r4, #87	; 0x57
 800545e:	e7d6      	b.n	800540e <_strtol_l.isra.0+0x7a>
 8005460:	0013      	movs	r3, r2
 8005462:	e7e2      	b.n	800542a <_strtol_l.isra.0+0x96>
 8005464:	2b00      	cmp	r3, #0
 8005466:	da09      	bge.n	800547c <_strtol_l.isra.0+0xe8>
 8005468:	2322      	movs	r3, #34	; 0x22
 800546a:	9a05      	ldr	r2, [sp, #20]
 800546c:	9803      	ldr	r0, [sp, #12]
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	9b02      	ldr	r3, [sp, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0e1      	beq.n	800543a <_strtol_l.isra.0+0xa6>
 8005476:	1e6b      	subs	r3, r5, #1
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	e007      	b.n	800548c <_strtol_l.isra.0+0xf8>
 800547c:	2f00      	cmp	r7, #0
 800547e:	d000      	beq.n	8005482 <_strtol_l.isra.0+0xee>
 8005480:	4240      	negs	r0, r0
 8005482:	9a02      	ldr	r2, [sp, #8]
 8005484:	2a00      	cmp	r2, #0
 8005486:	d0d8      	beq.n	800543a <_strtol_l.isra.0+0xa6>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f4      	bne.n	8005476 <_strtol_l.isra.0+0xe2>
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	9a01      	ldr	r2, [sp, #4]
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e7d2      	b.n	800543a <_strtol_l.isra.0+0xa6>
 8005494:	2430      	movs	r4, #48	; 0x30
 8005496:	2e00      	cmp	r6, #0
 8005498:	d1a7      	bne.n	80053ea <_strtol_l.isra.0+0x56>
 800549a:	3608      	adds	r6, #8
 800549c:	e7a5      	b.n	80053ea <_strtol_l.isra.0+0x56>
 800549e:	2c30      	cmp	r4, #48	; 0x30
 80054a0:	d09b      	beq.n	80053da <_strtol_l.isra.0+0x46>
 80054a2:	260a      	movs	r6, #10
 80054a4:	e7a1      	b.n	80053ea <_strtol_l.isra.0+0x56>
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	08005659 	.word	0x08005659
 80054ac:	7fffffff 	.word	0x7fffffff

080054b0 <strtol>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	0013      	movs	r3, r2
 80054b4:	000a      	movs	r2, r1
 80054b6:	0001      	movs	r1, r0
 80054b8:	4802      	ldr	r0, [pc, #8]	; (80054c4 <strtol+0x14>)
 80054ba:	6800      	ldr	r0, [r0, #0]
 80054bc:	f7ff ff6a 	bl	8005394 <_strtol_l.isra.0>
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	2000000c 	.word	0x2000000c

080054c8 <_init>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr

080054d4 <_fini>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr
